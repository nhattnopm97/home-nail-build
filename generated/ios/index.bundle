/******/ var self = self || this || new Function("return this")() || ({}); // repackGlobal'
/******/
(function() { // webpackBootstrap
var __webpack_modules__ = ({
79909: (function (__unused_webpack_module, exports, __webpack_require__) {
var __webpack_unused_export__;
/**
 * @format
 */ __webpack_unused_export__ = ({
    value: true
});
var _interop_require_default = __webpack_require__(66705);
var _reactnative = __webpack_require__(3345);
var _App = /*#__PURE__*/ _interop_require_default._(__webpack_require__(49402));
var _appjson = __webpack_require__(93359);
_reactnative.AppRegistry.registerComponent(_appjson.name, ()=>_App.default);


}),
90503: (function (__unused_webpack_module, exports, __webpack_require__) {
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return _default;
    }
}));
var _async_to_generator = __webpack_require__(11809);
var RepackCorePlugin = ()=>({
        name: 'repack-core-plugin',
        loadEntry: (ref)=>{
            var remoteInfo = ref.remoteInfo;
            return _async_to_generator._(function*() {
                var client = __webpack_require__(13775);
                var ScriptManager = client.ScriptManager, getWebpackContext = client.getWebpackContext;
                var entry = remoteInfo.entry, entryGlobalName = remoteInfo.entryGlobalName;
                try {
                    yield ScriptManager.shared.loadScript(entryGlobalName, undefined, getWebpackContext(), entry);
                    // @ts-ignore
                    if (!globalThis[entryGlobalName]) {
                        throw new Error();
                    }
                    // @ts-ignore
                    return globalThis[entryGlobalName];
                } catch  {
                    console.error(`Failed to load remote entry: ${entryGlobalName}`);
                }
            })();
        },
        generatePreloadAssets: ()=>_async_to_generator._(function*() {
                // noop for compatibility
                return Promise.resolve({
                    cssAssets: [],
                    jsAssetsWithoutEntry: [],
                    entryAssets: []
                });
            })()
    });
var _default = RepackCorePlugin;


}),
11433: (function (__unused_webpack_module, exports, __webpack_require__) {
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return _default;
    }
}));
var _async_to_generator = __webpack_require__(11809);
var _to_consumable_array = __webpack_require__(92716);
function getAssetName(asset) {
    // remove the extension from the asset name
    return asset.split('.')[0];
}
function getAssetUrl(asset) {
    // create placeholder reference url for the asset
    return 'prefetch:///' + asset;
}
function prefetchAsset(asset) {
    var client = __webpack_require__(13775);
    var ScriptManager = client.ScriptManager, getWebpackContext = client.getWebpackContext;
    // caller should be undefined when fetching/loading the remote entry container
    var caller = asset.name === asset.remoteName ? undefined : asset.remoteName;
    return ScriptManager.shared.prefetchScript(asset.name, caller, getWebpackContext(), asset.url);
}
var RepackPrefetchPlugin = ()=>({
        name: 'repack-prefetch-plugin',
        generatePreloadAssets: (args)=>_async_to_generator._(function*() {
                var preloadConfig = args.preloadOptions.preloadConfig;
                var remoteName = preloadConfig.nameOrAlias;
                var remoteSnapshot = args.remoteSnapshot;
                if (preloadConfig.depsRemote !== false) {
                    console.warn('[RepackPrefetchPlugin] ' + 'The depsRemote configuration option is not implemented yet. ' + 'This setting will be ignored and will have no effect. ' + 'You can hide this warning by setting depsRemote explicitly to false.');
                }
                function handleAssets(assets) {
                    return assets.map((asset)=>({
                            name: getAssetName(asset),
                            remoteName,
                            url: getAssetUrl(asset)
                        }));
                }
                var assets = [];
                if ('modules' in remoteSnapshot) {
                    for (var exposedModule of remoteSnapshot.modules){
                        if (preloadConfig.exposes) {
                            if (!preloadConfig.exposes.includes(exposedModule.moduleName)) {
                                continue;
                            }
                        }
                        if (preloadConfig.resourceCategory === 'all') {
                            var _assets, _assets1;
                            (_assets = assets).push.apply(_assets, _to_consumable_array._(handleAssets(exposedModule.assets.js.async)));
                            (_assets1 = assets).push.apply(_assets1, _to_consumable_array._(handleAssets(exposedModule.assets.js.sync)));
                        } else if (preloadConfig.resourceCategory === 'sync') {
                            var _assets2;
                            (_assets2 = assets).push.apply(_assets2, _to_consumable_array._(handleAssets(exposedModule.assets.js.sync)));
                        }
                    }
                    if (preloadConfig.filter) {
                        assets = assets.filter((asset)=>preloadConfig.filter(asset.name));
                    }
                    assets.unshift({
                        name: remoteSnapshot.globalName,
                        remoteName: remoteSnapshot.globalName,
                        url: getAssetUrl(remoteSnapshot.remoteEntry)
                    });
                }
                yield Promise.all(assets.map(prefetchAsset));
                // noop for compatibility
                return Promise.resolve({
                    cssAssets: [],
                    jsAssetsWithoutEntry: [],
                    entryAssets: []
                });
            })()
    });
var _default = RepackPrefetchPlugin;


}),
15847: (function (__unused_webpack_module, exports, __webpack_require__) {
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return _default;
    }
}));
var _async_to_generator = __webpack_require__(11809);
var _object_spread = __webpack_require__(36192);
var createScriptLocator = (entryUrl, config)=>_async_to_generator._(function*() {
        if (typeof config === 'function') {
            var locator = yield config(entryUrl);
            return locator;
        }
        if (typeof config === 'object') {
            return _object_spread._({
                url: entryUrl
            }, config);
        }
        return {
            url: entryUrl
        };
    })();
var getPublicPath = (url)=>{
    return url.split('/').slice(0, -1).join('/');
};
var getAssetPath = (url)=>{
    var assetPath = url.split(getPublicPath(url))[1];
    // normalize by removing leading slash
    return assetPath.startsWith('/') ? assetPath.slice(1) : assetPath;
};
var rebaseRemoteUrl = (from, to)=>{
    var assetPath = getAssetPath(from);
    var publicPath = getPublicPath(to);
    return [
        publicPath,
        assetPath
    ].join('/');
};
var registerResolver = (remoteInfo, config)=>_async_to_generator._(function*() {
        // when manifest is used, the valid entry URL comes from the version field
        // otherwise, the entry URL comes from the entry field which has the correct publicPath for the remote set
        var entryUrl;
        if ('version' in remoteInfo && remoteInfo.version) {
            entryUrl = remoteInfo.version;
        } else if ('entry' in remoteInfo) {
            entryUrl = remoteInfo.entry;
        }
        if (!entryUrl) {
            throw new Error('[RepackResolverPlugin] Cannot determine entry URL for remote: ' + remoteInfo.name);
        }
        var resolver = (scriptId, caller, referenceUrl)=>_async_to_generator._(function*() {
                if (scriptId === remoteInfo.name || caller === remoteInfo.name) {
                    // referenceUrl should always be present and this should never happen
                    if (!referenceUrl) {
                        throw new Error('[RepackResolverPlugin] Reference URL is missing');
                    }
                    var url = rebaseRemoteUrl(referenceUrl, entryUrl);
                    var locator = yield createScriptLocator(url, config);
                    return locator;
                }
            })();
        var runtime = __webpack_require__.repack.shared;
        if (runtime.scriptManager) {
            runtime.scriptManager.addResolver(resolver, {
                key: remoteInfo.name
            });
        } else {
            runtime.enqueuedResolvers.push([
                resolver,
                {
                    key: remoteInfo.name
                }
            ]);
        }
    })();
var RepackResolverPlugin = (config)=>({
        name: 'repack-resolver-plugin',
        registerRemote: (args)=>{
            registerResolver(args.remote, config);
            return args;
        }
    });
var _default = RepackResolverPlugin;


}),
8522: (function () {
/*
 * This module is added as an entry module to prevent stripping of these React Native deep imports from the bundle.
 * We use require.resolve from Rspack/Webpack to ensure these modules are included even if not directly used.
 * This allows us to include the modules into the bundle without evaluating them.
 * These modules are required by assetsLoader and should be shared as deep imports when using ModuleFederation.
 */ /*require.resolve*/(56312);
/*require.resolve*/(55212); //# sourceMappingURL=IncludeModules.js.map


}),
89614: (function (__unused_webpack_module, exports, __webpack_require__) {
var __webpack_unused_export__;
__webpack_unused_export__ = ({
    value: true
});
var _ScriptManager = __webpack_require__(26255);
_ScriptManager.ScriptManager.init(); //# sourceMappingURL=InitializeScriptManager.js.map


}),
83572: (function (__unused_webpack_module, exports, __webpack_require__) {
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "Script", ({
    enumerable: true,
    get: function() {
        return Script;
    }
}));
var _class_call_check = __webpack_require__(8864);
var _create_class = __webpack_require__(93072);
var _interop_require_default = __webpack_require__(66705);
var _shallowequal = /*#__PURE__*/ _interop_require_default._(__webpack_require__(1120));
var _NativeScriptManager = __webpack_require__(66656);
var Script = /*#__PURE__*/ function() {
    "use strict";
    function Script(scriptId, caller, locator, ref) {
        var cache = ref === void 0 ? true : ref;
        _class_call_check._(this, Script);
        this.scriptId = scriptId;
        this.caller = caller;
        this.locator = locator;
        this.cache = cache;
    }
    _create_class._(Script, [
        {
            /**
   * Check if the script was already cached and cache should be updated with new data.
   *
   * @param cachedData Cached data for the same script.
   *
   * @internal
   */ key: "shouldUpdateCache",
            value: function shouldUpdateCache(cachedData) {
                if (!this.cache || !cachedData) {
                    return false;
                }
                return this.checkIfCacheDataOutdated(cachedData);
            }
        },
        {
            /**
   * Check if the script should be fetched again or reused,
   * based on previous cached data.
   *
   * @param cachedData Cached data for the same script.
   *
   * @internal
   */ key: "shouldRefetch",
            value: function shouldRefetch(cachedData) {
                if (!this.cache) {
                    return true;
                }
                return this.checkIfCacheDataOutdated(cachedData);
            }
        },
        {
            /**
   * Check if previous cached data is the same as the new one.
   *
   * @param cachedData Cached data for the same script.
   *
   * @internal
   */ key: "checkIfCacheDataOutdated",
            value: function checkIfCacheDataOutdated(cachedData) {
                return cachedData.method !== this.locator.method || cachedData.url !== this.locator.url || cachedData.query !== this.locator.query || !(0, _shallowequal.default)(cachedData.headers, this.locator.headers) || cachedData.body !== this.locator.body;
            }
        },
        {
            /**
   * Get object to store in cache.
   *
   * @internal
   */ key: "getCacheData",
            value: function getCacheData() {
                return {
                    method: this.locator.method,
                    url: this.locator.url,
                    query: this.locator.query,
                    headers: this.locator.headers,
                    body: this.locator.body
                };
            }
        },
        {
            key: "toObject",
            value: function toObject() {
                return {
                    scriptId: this.scriptId,
                    caller: this.caller,
                    locator: this.locator,
                    cache: this.cache
                };
            }
        }
    ], [
        {
            key: "getDevServerURL",
            value: /**
   * Get URL of a script hosted on development server.
   *
   * @param scriptId Id of the script.
   */ function getDevServerURL(scriptId) {
                return (webpackContext)=>`${webpackContext.p}${webpackContext.u(scriptId)}`;
            }
        },
        {
            key: "getFileSystemURL",
            value: /**
   * Get URL of a script stored on filesystem on the target mobile device.
   *
   * @param scriptId Id of the script.
   */ function getFileSystemURL(scriptId) {
                return (webpackContext)=>webpackContext.u(`file:///${scriptId}`);
            }
        },
        {
            key: "getRemoteURL",
            value: /**
   * Get URL of a script hosted on a remote server.
   *
   * By default `.chunk.bundle` extension will be added to the URL.
   * If your script has different extension, you should pass `{ excludeExtension: true }` as 2nd argument.
   *
   * @param url A URL to remote location where the script is stored.
   * @param options Additional options.
   */ function getRemoteURL(url, ref) {
                var options = ref === void 0 ? {} : ref;
                if (options.excludeExtension) {
                    return url;
                }
                return (webpackContext)=>webpackContext.u(url);
            }
        },
        {
            key: "getScriptUniqueId",
            value: /**
   * Get unique identifier for the script.
   *
   * Used to create unique identifier for the script, which serves as its key in the cache.
   *
   * @param scriptId Id of the script.
   * @param caller Optional caller name to prefix the script id.
   */ function getScriptUniqueId(scriptId, caller) {
                var prefix = caller ? caller + '_' : '';
                return prefix + scriptId;
            }
        },
        {
            key: "from",
            value: /**
   * Create new instance of `Script` from non-normalized script locator data.
   *
   * @param locator Non-normalized locator data.
   * @param fetch Initial flag for whether script should be fetched or not.
   *
   * @internal
   */ function from(key, locator, fetch) {
                var headers = {};
                new Headers(locator.headers).forEach((value, key)=>{
                    headers[key.toLowerCase()] = value;
                });
                var uniqueId = Script.getScriptUniqueId(key.scriptId, key.caller);
                var body;
                if (locator.body instanceof FormData) {
                    var bodyObject = {};
                    locator.body.forEach((value, key)=>{
                        if (typeof value === 'string') {
                            bodyObject[key] = value;
                        } else {
                            console.warn('Script does not support File as FormData key in body');
                        }
                    });
                    body = JSON.stringify(bodyObject);
                } else if (locator.body instanceof URLSearchParams) {
                    var bodyObject1 = {};
                    locator.body.forEach((value, key)=>{
                        bodyObject1[key] = value;
                    });
                    body = JSON.stringify(bodyObject1);
                } else {
                    body = locator.body ?? undefined;
                }
                if (typeof locator.url === 'function') {
                    throw new Error('Property url as a function is not support');
                }
                return new Script(key.scriptId, key.caller, {
                    uniqueId,
                    method: locator.method ?? _NativeScriptManager.NormalizedScriptLocatorHTTPMethod.GET,
                    url: locator.url,
                    absolute: locator.absolute ?? false,
                    timeout: locator.timeout ?? Script.DEFAULT_TIMEOUT,
                    retry: locator.retry,
                    retryDelay: locator.retryDelay,
                    query: new URLSearchParams(locator.query).toString() || undefined,
                    body,
                    headers: Object.keys(headers).length ? headers : undefined,
                    fetch: locator.cache === false ? true : fetch,
                    verifyScriptSignature: locator.verifyScriptSignature ?? _NativeScriptManager.NormalizedScriptLocatorSignatureVerificationMode.OFF
                }, locator.cache);
            }
        }
    ]);
    return Script;
} //# sourceMappingURL=Script.js.map
();
Script.DEFAULT_TIMEOUT = 30000 // 30s
;


}),
26255: (function (__unused_webpack_module, exports, __webpack_require__) {
// biome-ignore lint/style/useNodejsImportProtocol: use 'events' module instead of node builtin
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "ScriptManager", ({
    enumerable: true,
    get: function() {
        return ScriptManager;
    }
}));
var _async_to_generator = __webpack_require__(11809);
var _call_super = __webpack_require__(19436);
var _class_call_check = __webpack_require__(8864);
var _create_class = __webpack_require__(93072);
var _inherits = __webpack_require__(82397);
var _interop_require_default = __webpack_require__(66705);
var _sliced_to_array = __webpack_require__(78474);
var _to_consumable_array = __webpack_require__(92716);
var _events = /*#__PURE__*/ _interop_require_default._(__webpack_require__(96014));
var _tapable = __webpack_require__(26898);
var _NativeScriptManager = /*#__PURE__*/ _interop_require_default._(__webpack_require__(66656));
var _Script = __webpack_require__(83572);
var _getWebpackContext = __webpack_require__(65495);
var DEFAULT_RESOLVER_PRIORITY = 2;
var DEFAULT_RESOLVER_KEY = '__default__';
var CACHE_NAME = 'Repack.ScriptManager.Cache';
var CACHE_VERSION = 'v4';
var CACHE_ENV =  false ? 0 : 'release';
var CACHE_KEY = [
    CACHE_NAME,
    CACHE_VERSION,
    CACHE_ENV
].join('.');
var LOADING_ERROR_CODES = [
    // android
    'NetworkFailure',
    'RequestFailure',
    // ios
    'ScriptDownloadFailure'
];
function promisify(fn) {
    return (...args)=>_async_to_generator._(function*() {
            return fn.apply(void 0, _to_consumable_array._(args));
        })();
}
var ScriptManager = /*#__PURE__*/ function(EventEmitter) {
    "use strict";
    _inherits._(ScriptManager, EventEmitter);
    function ScriptManager(ref) {
        var nativeScriptManager = ref === void 0 ? _NativeScriptManager.default : ref;
        _class_call_check._(this, ScriptManager);
        var _this;
        _this = _call_super._(this, ScriptManager), _this.cache = {}, _this.scriptsPromises = {}, _this.cacheInitialized = false, _this.resolvers = [], _this.hookMap = {
            beforeResolve: new _tapable.AsyncSeriesWaterfallHook([
                'args'
            ]),
            resolve: new _tapable.AsyncSeriesBailHook([
                'args'
            ]),
            afterResolve: new _tapable.AsyncSeriesWaterfallHook([
                'args'
            ]),
            errorResolve: new _tapable.AsyncSeriesBailHook([
                'args'
            ]),
            beforeLoad: new _tapable.AsyncSeriesWaterfallHook([
                'args'
            ]),
            load: new _tapable.AsyncSeriesBailHook([
                'args'
            ]),
            afterLoad: new _tapable.AsyncSeriesWaterfallHook([
                'args'
            ]),
            errorLoad: new _tapable.AsyncSeriesBailHook([
                'args'
            ])
        }, _this.hooks = {
            beforeResolve: (fn)=>_this.hookMap.beforeResolve.tapPromise('beforeResolve', promisify(fn)),
            resolve: (fn)=>_this.hookMap.resolve.tapPromise('resolve', promisify(fn)),
            afterResolve: (fn)=>_this.hookMap.afterResolve.tapPromise('afterResolve', promisify(fn)),
            errorResolve: (fn)=>_this.hookMap.errorResolve.tapPromise('errorResolve', promisify(fn)),
            beforeLoad: (fn)=>_this.hookMap.beforeLoad.tapPromise('beforeLoad', promisify(fn)),
            load: (fn)=>_this.hookMap.load.tapPromise('load', promisify(fn)),
            afterLoad: (fn)=>_this.hookMap.afterLoad.tapPromise('afterLoad', promisify(fn)),
            errorLoad: (fn)=>_this.hookMap.errorLoad.tapPromise('errorLoad', promisify(fn))
        };
        _this.nativeScriptManager = nativeScriptManager;
        if (!nativeScriptManager) {
            throw new Error('repack react-native module was not found.' + ( false ? 0 : ''));
        }
        if (__webpack_require__.repack.shared.scriptManager) {
            throw new Error('ScriptManager was already instantiated. Use ScriptManager.shared instead.');
        }
        __webpack_require__.repack.shared.scriptManager = _this;
        var enqueuedResolvers = __webpack_require__.repack.shared.enqueuedResolvers;
        while(enqueuedResolvers.length){
            // process deferred resolvers in First-In-First-Out (FIFO) order to maintain
            // the sequence in which they were registered before ScriptManager initialization
            var _enqueuedResolvers_shift = _sliced_to_array._(enqueuedResolvers.shift(), 2), resolver = _enqueuedResolvers_shift[0], options = _enqueuedResolvers_shift[1];
            _this.addResolver(resolver, options);
        }
        return _this;
    }
    _create_class._(ScriptManager, [
        {
            /**
   * Sets a storage backend to cache resolved scripts locator data.
   *
   * The stored data is used to detect if scripts locator data of previously downloaded
   * script hasn't changed to avoid over-fetching the script.
   *
   * @param storage Implementation of storage functions.
   */ key: "setStorage",
            value: function setStorage(storage) {
                this.storage = storage;
            }
        },
        {
            /**
   * Adds new script locator resolver.
   *
   * Resolver is an async function to resolve script locator data - in other words, it's a function to
   * tell the {@link ScriptManager} how to fetch the script.
   *
   * There's no limitation on what logic you can run inside this function - it can include:
   * - fetching/loading remote config
   * - fetching/loading feature flags
   * - fetching/loading A/B testing data
   * - calling native modules
   * - running arbitrary logic
   *
   * @param resolver Resolver function to add.
   * @param options Resolver options.
   */ key: "addResolver",
            value: function addResolver(resolver, ref) {
                var options = ref === void 0 ? {} : ref;
                var priority = options.priority ?? DEFAULT_RESOLVER_PRIORITY;
                var uniqueKey = options.key;
                this.resolvers = this.resolvers.filter((ref)=>{
                    var _ref = _sliced_to_array._(ref, 1), key = _ref[0];
                    return key !== uniqueKey;
                }).concat([
                    [
                        uniqueKey ?? DEFAULT_RESOLVER_KEY,
                        priority,
                        resolver
                    ]
                ]).sort((ref, ref1)=>{
                    var _ref = _sliced_to_array._(ref, 2), a = _ref[1], _ref1 = _sliced_to_array._(ref1, 2), b = _ref1[1];
                    return Number(b) - Number(a);
                });
            }
        },
        {
            /**
   * Removes previously added resolver.
   *
   * @param resolver Resolver function or resolver's `uniqueKey` to remove.
   * @returns `true` if resolver was found and removed, `false` otherwise.
   */ key: "removeResolver",
            value: function removeResolver(resolver) {
                var index;
                if (typeof resolver === 'string') {
                    index = this.resolvers.findIndex((ref)=>{
                        var _ref = _sliced_to_array._(ref, 1), key = _ref[0];
                        return key === resolver;
                    });
                } else {
                    index = this.resolvers.findIndex((ref)=>{
                        var _ref = _sliced_to_array._(ref, 3), item = _ref[2];
                        return item === resolver;
                    });
                }
                if (index > -1) {
                    this.resolvers.splice(index, 1);
                    return true;
                }
                return false;
            }
        },
        {
            /**
   * Removes all previously added resolvers.
   */ key: "removeAllResolvers",
            value: function removeAllResolvers() {
                this.resolvers = [];
            }
        },
        {
            key: "initCache",
            value: function initCache() {
                return _async_to_generator._(function*() {
                    if (!this.cacheInitialized) {
                        var _this_storage;
                        var cacheEntry = yield (_this_storage = this.storage) === null || _this_storage === void 0 ? void 0 : _this_storage.getItem(CACHE_KEY);
                        this.cache = cacheEntry ? JSON.parse(cacheEntry) : {};
                        this.cacheInitialized = true;
                    }
                }).call(this);
            }
        },
        {
            key: "saveCache",
            value: function saveCache() {
                return _async_to_generator._(function*() {
                    var _this_storage;
                    yield (_this_storage = this.storage) === null || _this_storage === void 0 ? void 0 : _this_storage.setItem(CACHE_KEY, JSON.stringify(this.cache));
                }).call(this);
            }
        },
        {
            key: "handleError",
            value: function handleError(error, message, ...args) {
                var _console;
                (_console = console).error.apply(_console, [
                    message
                ].concat(_to_consumable_array._(args), [
                    {
                        originalError: error
                    }
                ]));
                this.emit('error', {
                    message,
                    args,
                    originalError: error
                });
                throw error;
            }
        },
        {
            key: "resolveScript",
            value: /**
   * Resolves a {@link Script} instance with normalized locator data.
   *
   * Resolution will use previously added (via `ScriptManager.shared.addResolver(...)`) resolvers
   * in series, util one returns a locator data or will throw if no resolver handled the request.
   *
   * Use `ScriptManager.shared.on('resolving', ({ scriptId, caller }) => { })` to listen for when
   * the script resolution begins.
   *
   * Use `ScriptManager.shared.on('resolved', (script) => { })` to listen for when
   * the script's locator data is resolved.
   *
   * @param scriptId Id of the script to resolve.
   * @param caller Name of the calling script - it can be for example: name of the bundle, chunk or container.
   */ // NOTE: Keep declaration and implementation separate
            // to allow for better naming in JSDocs while preventing
            // using the arguments directly in the implementation
            function resolveScript(_0, _1, _2) {
                return _async_to_generator._(function*(__scriptId, __caller, ref, __referenceUrl) {
                    var __webpackContext = ref === void 0 ? (0, _getWebpackContext.getWebpackContext)() : ref;
                    var options = {
                        scriptId: __scriptId,
                        caller: __caller,
                        referenceUrl: __referenceUrl,
                        webpackContext: __webpackContext
                    };
                    var locator;
                    try {
                        yield this.initCache();
                        if (!this.resolvers.length) {
                            throw new Error('No script resolvers were added. Did you forget to call `ScriptManager.shared.addResolver(...)`?');
                        }
                        if (this.hookMap.beforeResolve.isUsed()) {
                            options = (yield this.hookMap.beforeResolve.promise({
                                options
                            })).options;
                        }
                        this.emit('resolving', {
                            scriptId: options.scriptId,
                            caller: options.caller
                        });
                        if (this.hookMap.resolve.isUsed()) {
                            // obtain the result from custom implementation through the resolve hook
                            locator = yield this.hookMap.resolve.promise({
                                options,
                                resolvers: this.resolvers
                            });
                        } else {
                            // obtain the result from default implementation
                            for (var _$ref of this.resolvers){
                                var _ref = _sliced_to_array._(_$ref, 3), resolve = _ref[2];
                                var resolvedLocator = yield resolve(options.scriptId, options.caller, options.referenceUrl);
                                if (resolvedLocator) {
                                    locator = resolvedLocator;
                                    break;
                                }
                            }
                        }
                        if (!locator) {
                            throw new Error(`No resolver was able to resolve script ${options.scriptId}`);
                        }
                        if (this.hookMap.afterResolve.isUsed()) {
                            var _$ref1;
                            _$ref1 = yield this.hookMap.afterResolve.promise({
                                options,
                                locator
                            }), options = _$ref1.options, locator = _$ref1.locator, _$ref1;
                        }
                        if (typeof locator.url === 'function') {
                            locator.url = locator.url(options.webpackContext);
                        }
                    } catch (error) {
                        locator = yield this.hookMap.errorResolve.promise({
                            options,
                            error: error
                        });
                        if (!locator) {
                            this.handleError(error, '[ScriptManager] Failed while resolving script locator:', {
                                scriptId: options.scriptId,
                                caller: options.caller
                            });
                        }
                    }
                    try {
                        var script = yield this.createScript(options.scriptId, options.caller, locator);
                        this.emit('resolved', script.toObject());
                        return script;
                    } catch (error) {
                        this.handleError(error, '[ScriptManager] Failed while creating script:', {
                            scriptId: options.scriptId,
                            caller: options.caller
                        });
                    }
                }).apply(this, arguments);
            }
        },
        {
            key: "createScript",
            value: function createScript(scriptId, caller, locator) {
                return _async_to_generator._(function*() {
                    var script = _Script.Script.from({
                        scriptId,
                        caller
                    }, locator, false);
                    var cacheKey = script.locator.uniqueId;
                    // Check if user provided a custom shouldUpdateScript function
                    if (locator.shouldUpdateScript) {
                        // If so, we need to wait for it to resolve
                        var fetch = yield locator.shouldUpdateScript(scriptId, caller, script.shouldUpdateCache(this.cache[cacheKey]));
                        // If it returns true, we need to fetch the script
                        if (fetch) {
                            script.locator.fetch = true;
                        }
                    } else {
                        // If no custom shouldUpdateScript function was provided, we use the default behaviour
                        if (!this.cache[cacheKey]) {
                            script.locator.fetch = true;
                        } else if (script.shouldRefetch(this.cache[cacheKey])) {
                            script.locator.fetch = true;
                        }
                    }
                    return script;
                }).call(this);
            }
        },
        {
            key: "updateCache",
            value: function updateCache(script) {
                return _async_to_generator._(function*() {
                    if (script.locator.fetch) {
                        var cacheKey = script.locator.uniqueId;
                        this.cache[cacheKey] = script.getCacheData();
                        yield this.saveCache();
                    }
                }).call(this);
            }
        },
        {
            key: "loadScript",
            value: /**
   * Resolves given script's location, downloads and executes it.
   * The execution of the code is handled internally by threading in React Native.
   *
   * Use `ScriptManager.shared.on('loading', (script) => { })` to listen for when
   * the script is about to be loaded.
   *
   * Use `ScriptManager.shared.on('loaded', (script) => { })` to listen for when
   * the script is loaded.
   *
   * @param scriptId Id of the script to load.
   * @param caller Name of the calling script - it can be for example: name of the bundle, chunk or container.
   */ // NOTE: Keep declaration and implementation separate
            // to allow for better naming in JSDocs while preventing
            // using the arguments directly in the implementation
            function loadScript(_0, _1, _2) {
                return _async_to_generator._(function*(__scriptId, __caller, ref, __referenceUrl) {
                    var __webpackContext = ref === void 0 ? (0, _getWebpackContext.getWebpackContext)() : ref;
                    var options = {
                        scriptId: __scriptId,
                        caller: __caller,
                        referenceUrl: __referenceUrl,
                        webpackContext: __webpackContext
                    };
                    var loaded = false;
                    var uniqueId = _Script.Script.getScriptUniqueId(options.scriptId, options.caller);
                    if (this.scriptsPromises[uniqueId]) {
                        var isPrefetch = this.scriptsPromises[uniqueId].isPrefetch;
                        // prefetch is not execute the script so we need to run loadScript if promise is for prefetch
                        if (isPrefetch) {
                            yield this.scriptsPromises[uniqueId];
                        } else {
                            return this.scriptsPromises[uniqueId];
                        }
                    }
                    var loadProcess = ()=>_async_to_generator._(function*() {
                            var script = yield this.resolveScript(options.scriptId, options.caller, options.webpackContext, options.referenceUrl);
                            try {
                                if (this.hookMap.beforeLoad.isUsed()) {
                                    var _$ref;
                                    _$ref = yield this.hookMap.beforeLoad.promise({
                                        options,
                                        script
                                    }), options = _$ref.options, script = _$ref.script, _$ref;
                                }
                                this.emit('loading', script.toObject());
                                if (this.hookMap.load.isUsed()) {
                                    loaded = yield this.hookMap.load.promise({
                                        options,
                                        script,
                                        loadScript: (ref, ref1)=>{
                                            var scriptId = ref === void 0 ? options.scriptId : ref, locator = ref1 === void 0 ? script.locator : ref1;
                                            return _async_to_generator._(function*() {
                                                yield this.loadScriptWithRetry(scriptId, locator);
                                            }).call(this);
                                        }
                                    });
                                } else {
                                    yield this.loadScriptWithRetry(options.scriptId, script.locator);
                                    loaded = true;
                                }
                                if (this.hookMap.afterLoad.isUsed()) {
                                    var _$ref1;
                                    _$ref1 = yield this.hookMap.afterLoad.promise({
                                        options,
                                        script
                                    }), options = _$ref1.options, script = _$ref1.script, _$ref1;
                                }
                                this.emit('loaded', script.toObject());
                                yield this.updateCache(script);
                            } catch (error) {
                                var code = error.code;
                                loaded = yield this.hookMap.errorLoad.promise({
                                    options,
                                    error: error
                                });
                                if (!loaded) {
                                    this.handleError(error, '[ScriptManager] Failed to load script:', code ? `[${code}]` : '', script.toObject());
                                }
                            } finally{
                                // should delete script promise even script failed
                                delete this.scriptsPromises[uniqueId];
                            }
                        }).call(this);
                    this.scriptsPromises[uniqueId] = loadProcess();
                    return this.scriptsPromises[uniqueId];
                }).apply(this, arguments);
            }
        },
        {
            key: "loadScriptWithRetry",
            value: /**
   * Loads a script with retry logic.
   *
   * This function attempts to load a script using the nativeScriptManager.
   * If the initial attempt fails, it retries the specified number of times
   * with an optional delay between retries.
   *
   * @param {string} scriptId - The ID of the script to load.
   * @param {NormalizedScriptLocator} locator - An NormalizedScriptLocator containing retry configuration.
   * @param {number} [locator.retry=0] - The number of retry attempts.
   * @param {number} [locator.retryDelay=0] - The delay in milliseconds between retries.
   * @throws {Error} Throws an error if all retry attempts fail.
   */ function loadScriptWithRetry(scriptId, locator) {
                return _async_to_generator._(function*() {
                    var _locator_retry = locator.retry, retry = _locator_retry === void 0 ? 0 : _locator_retry, _locator_retryDelay = locator.retryDelay, retryDelay = _locator_retryDelay === void 0 ? 0 : _locator_retryDelay;
                    var attempts = retry + 1; // Include the initial attempt
                    while(attempts > 0){
                        try {
                            yield this.nativeScriptManager.loadScript(scriptId, locator);
                            return; // Successfully loaded the script, exit the loop
                        } catch (error) {
                            attempts--;
                            var code = error.code;
                            if (attempts > 0 && LOADING_ERROR_CODES.includes(code)) {
                                if (retryDelay > 0) {
                                    yield new Promise((resolve)=>setTimeout(resolve, retryDelay));
                                }
                            } else {
                                throw error; // No more retries, throw the error
                            }
                        }
                    }
                }).call(this);
            }
        },
        {
            key: "prefetchScript",
            value: /**
   * Resolves given script's location and downloads it without executing.
   * This function can be awaited to detect if the script was downloaded and for error handling.
   *
   * Use `ScriptManager.shared.on('prefetching', (script) => { })` to listen for when
   * the script's prefetch beings.
   *
   * @param scriptId Id of the script to prefetch.
   * @param caller Name of the calling script - it can be for example: name of the bundle, chunk or container.
   */ function prefetchScript(_0, _1, _2) {
                return _async_to_generator._(function*(scriptId, caller, ref, referenceUrl) {
                    var webpackContext = ref === void 0 ? (0, _getWebpackContext.getWebpackContext)() : ref;
                    var uniqueId = _Script.Script.getScriptUniqueId(scriptId, caller);
                    if (this.scriptsPromises[uniqueId]) {
                        return this.scriptsPromises[uniqueId];
                    }
                    var loadProcess = ()=>_async_to_generator._(function*() {
                            var script = yield this.resolveScript(scriptId, caller, webpackContext, referenceUrl);
                            try {
                                this.emit('prefetching', script.toObject());
                                yield this.nativeScriptManager.prefetchScript(scriptId, script.locator);
                                yield this.updateCache(script);
                            } catch (error) {
                                var code = error.code;
                                this.handleError(error, '[ScriptManager] Failed to prefetch script:', code ? `[${code}]` : '', script.toObject());
                            } finally{
                                // should delete script promise even script failed
                                delete this.scriptsPromises[uniqueId];
                            }
                        }).call(this);
                    this.scriptsPromises[uniqueId] = loadProcess();
                    this.scriptsPromises[uniqueId].isPrefetch = true;
                    return this.scriptsPromises[uniqueId];
                }).apply(this, arguments);
            }
        },
        {
            key: "invalidateScripts",
            value: /**
   * Clears the cache (if configured in {@link ScriptManager.setStorage}) and removes downloaded
   * files for given scripts from the filesystem. This function can be awaited to detect if the
   * scripts were invalidated and for error handling.
   *
   * Use `ScriptManager.shared.on('invalidated', (scriptIds) => { })` to listen for when
   * the invalidation completes.
   *
   * @param scriptIds Array of script ids to clear from cache and remove from filesystem.
   * @returns Array of script ids that were invalidated.
   */ function invalidateScripts() {
                return _async_to_generator._(function*(ref) {
                    var scriptIds = ref === void 0 ? [] : ref;
                    try {
                        yield this.initCache();
                        var ids = scriptIds.length ? scriptIds : Object.keys(this.cache);
                        ids.forEach((scriptId)=>{
                            delete this.cache[scriptId];
                            delete this.scriptsPromises[scriptId];
                        });
                        yield this.saveCache();
                        yield this.nativeScriptManager.invalidateScripts(scriptIds);
                        this.emit('invalidated', ids);
                        return ids;
                    } catch (error) {
                        var code = error.code;
                        this.handleError(error, '[ScriptManager] Failed to invalidate scripts:', code ? `[${code}]` : '');
                    }
                }).apply(this, arguments);
            }
        },
        {
            /**
   * Evaluates a script synchronously.
   *
   * This function sends the script source and its URL to the native script manager for evaluation.
   * It is functionally identical to `globalEvalWithSourceUrl`.
   *
   * @param scriptSource The source code of the script to evaluate.
   * @param scriptSourceUrl The URL of the script source, used for debugging purposes.
   */ key: "unstable_evaluateScript",
            value: function unstable_evaluateScript(scriptSource, scriptSourceUrl) {
                this.nativeScriptManager.unstable_evaluateScript(scriptSource, scriptSourceUrl);
            }
        }
    ], [
        {
            key: "init",
            value: function init() {
                if (!__webpack_require__.repack.shared.scriptManager) {
                    __webpack_require__.repack.shared.scriptManager = new ScriptManager();
                }
            }
        },
        {
            key: "shared",
            get: function() {
                return __webpack_require__.repack.shared.scriptManager;
            }
        }
    ]);
    return ScriptManager;
} //# sourceMappingURL=ScriptManager.js.map
(_events.default);


}),
41855: (function (__unused_webpack_module, exports, __webpack_require__) {
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "Federated", ({
    enumerable: true,
    get: function() {
        return Federated;
    }
}));
var _async_to_generator = __webpack_require__(11809);
var _ScriptManager = __webpack_require__(26255);
var Federated;
(function(_Federated) {
    /**
   * @deprecated
   *
   * Resolves URL to a container or a chunk when using Module Federation,
   * based on given `scriptId` and `caller`.
   */ /**
   * @deprecated
   *
   * Configuration options for {@link createURLResolver} for Module Federation.
   * Allows to configure how created {@link URLResolver} will behave.
   */ /**
   * @deprecated
   *
   * Creates URL resolver for Module Federation from provided config.
   *
   * @example
   * ```ts
   * import { ScriptManager, Script, Federated } from '@callstack/repack/client';
   *
   * const resolveURL = Federated.createURLResolver({
   *   containers: {
   *     app1: 'http://localhost:9001/[name][ext]',
   *     app2: 'http://localhost:9002/[name].container.js',
   *   },
   *   chunks: {
   *     app2: 'http://localhost:9002/chunks/[name][ext]',
   *   },
   * });
   *
   * ScriptManager.shared.addResolver(async (scriptId, caller) => {
   *   let url;
   *   if (caller === 'main') {
   *     url = __DEV__
   *       ? Script.getDevServerURL(scriptId)
   *       : Script.getRemoteURL(`http://localhost:9000/${scriptId}`);
   *   } else {
   *     url = resolveURL(scriptId, caller);
   *   }
   *
   *   if (!url) {
   *     return undefined;
   *   }
   *
   *   return {
   *     url,
   *     query: {
   *       platform: Platform.OS,
   *     },
   *   };
   * });
   * ```
   *
   * `createURLResolver` is a abstraction over {@link Script.getRemoteURL},
   * for example:
   * ```ts
   * import { ScriptManager, Federated } from '@callstack/repack/client';
   *
   * ScriptManager.shared.addResolver((scriptId, caller) => {
   *   const resolveURL = Federated.createURLResolver({
   *     containers: {
   *       app1: 'http://localhost:9000/[name][ext]',
   *     },
   *   });
   *
   *   return {
   *     url: resolveURL(scriptId, caller);
   *   };
   * });
   * ```
   * is equivalent to:
   * ```ts
   * import { ScriptManager, Script } from '@callstack/repack/client';
   *
   * ScriptManager.shared.addResolver(async (scriptId, caller) => {
   *   if (scriptId === 'app1') {
   *     return {
   *       url: 'http://localhost:9000/app1.container.bundle',
   *     };
   *   }
   *
   *   if (caller === 'app1') {
   *     return {
   *       url: Script.getRemoteURL(`http://localhost:9000/${scriptId}`),
   *     };
   *   }
   * });
   * ```
   *
   * @param config Configuration for the resolver.
   * @param containerExt Extension of container bundles. Defaults to `.container.bundle`.
   * @returns A resolver function which will try to resolve URL based on given `scriptId` and `caller`.
   */ function createURLResolver(config, ref) {
        var _loop = function(key) {
            resolvers[key] = (scriptId, caller)=>{
                if (scriptId === key) {
                    var url = config.containers[key].replace(/\[name\]/g, scriptId).replace(/\[ext\]/g, containerExt);
                    return url;
                }
                if (caller === key) {
                    var _config_chunks;
                    var url1 = (((_config_chunks = config.chunks) === null || _config_chunks === void 0 ? void 0 : _config_chunks[key]) ?? config.containers[key]).replace(/\[name\]/g, scriptId);
                    if (url1.includes('[ext]')) {
                        return (webpackContext)=>webpackContext.u(url1.replace(/\[ext\]/g, ''));
                    }
                    return url1;
                }
                return undefined;
            };
        };
        var containerExt = ref === void 0 ? '.container.bundle' : ref;
        var resolvers = {};
        for(var key in config.containers)_loop(key);
        return (scriptId, caller)=>{
            var resolver = (caller ? resolvers[caller] : undefined) ?? resolvers[scriptId];
            return resolver(scriptId, caller);
        };
    }
    _Federated.createURLResolver = createURLResolver;
    /**
   * @deprecated
   *
   * Dynamically imports module from a Module Federation container. Similar to `import('file')`, but
   * specific to Module Federation. Calling `importModule` will create an async boundary.
   *
   * Container will be evaluated only once. If you use `importModule` for the same container twice,
   * the container will be loaded and evaluated only on the first import.
   *
   * Under the hood, `importModule` will call `ScriptManager.shared.loadScript(containerName)`.
   * This means, a resolver must be added with `ScriptManager.shared.addResolver(...)` beforehand and provided proper
   * resolution logic to resolve URL based on the `containerName`.
   *
   * @param containerName Name of the container - should be the same name provided to
   * `webpack.container.ModuleFederationPlugin` in `library.name`.
   * @param module Full name with extension of the module to import from the container - only modules
   * exposed in `exposes` in `webpack.container.ModuleFederationPlugin` can be used.
   * @param scope Optional, scope for sharing modules between containers. Defaults to `'default'`.
   * @returns Exports of given `module` from given container.
   *
   * @example
   * ```ts
   * import * as React from 'react';
   * import { Federated } from '@callstack/repack/client';
   *
   * const Button = React.lazy(() => Federated.importModule('my-components', './Button.js'));
   *
   * const myUtil = await Federated.importModule('my-lib', './myUtil.js');
   * ```
   */ function importModule(containerName, module, ref) {
        var scope = ref === void 0 ? 'default' : ref;
        return _async_to_generator._(function*() {
            var __webpack_share_scopes___scope;
            if (!((__webpack_share_scopes___scope = __webpack_require__.S[scope]) === null || __webpack_share_scopes___scope === void 0 ? void 0 : __webpack_share_scopes___scope.__isInitialized)) {
                // Initializes the share scope.
                // This fills it with known provided modules from this build and all remotes.
                yield __webpack_require__.I(scope);
                __webpack_require__.S[scope].__isInitialized = true;
            }
            // Do not use `const container = self[containerName];` here. Once container is loaded
            // `container` reference is not updated, so `container.__isInitialized`
            // will crash the application, because of reading property from `undefined`.
            if (!self[containerName]) {
                // Download and execute container
                yield _ScriptManager.ScriptManager.shared.loadScript(containerName);
            }
            var container = self[containerName];
            if (!container.__isInitialized) {
                container.__isInitialized = true;
                // Initialize the container, it may provide shared modules
                yield container.init(__webpack_require__.S[scope]);
            }
            var factory = yield container.get(module);
            var exports1 = factory();
            return exports1;
        })();
    }
    _Federated.importModule = importModule;
})(Federated || (Federated = {})); //# sourceMappingURL=federated.js.map


}),
65495: (function (__unused_webpack_module, exports, __webpack_require__) {
/**
 * Get Webpack runtime context form current JavaScript scope.
 *
 * __You likely don't need to use it.__
 */ Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "getWebpackContext", ({
    enumerable: true,
    get: function() {
        return getWebpackContext;
    }
}));
function getWebpackContext() {
    return __webpack_require__;
} //# sourceMappingURL=getWebpackContext.js.map


}),
13775: (function (__unused_webpack_module, exports, __webpack_require__) {
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "Federated", ({
    enumerable: true,
    get: function() {
        return _federated.Federated;
    }
}));
var _export_star = __webpack_require__(4084);
_export_star._(__webpack_require__(26255), exports);
_export_star._(__webpack_require__(83572), exports);
_export_star._(__webpack_require__(39868), exports);
_export_star._(__webpack_require__(65495), exports);
var _federated = __webpack_require__(41855);
 //# sourceMappingURL=index.js.map


}),
39868: (function (__unused_webpack_module, exports) {
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
 //# sourceMappingURL=types.js.map


}),
9065: (function (__unused_webpack_module, exports, __webpack_require__) {
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return _CorePlugin.default;
    }
}));
var _interop_require_default = __webpack_require__(66705);
var _CorePlugin = /*#__PURE__*/ _interop_require_default._(__webpack_require__(90503));


}),
93076: (function (__unused_webpack_module, exports, __webpack_require__) {
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return _PrefetchPlugin.default;
    }
}));
var _interop_require_default = __webpack_require__(66705);
var _PrefetchPlugin = /*#__PURE__*/ _interop_require_default._(__webpack_require__(11433));


}),
92998: (function (__unused_webpack_module, exports, __webpack_require__) {
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return _ResolverPlugin.default;
    }
}));
var _interop_require_default = __webpack_require__(66705);
var _ResolverPlugin = /*#__PURE__*/ _interop_require_default._(__webpack_require__(15847));


}),
68427: (function (__unused_webpack_module, exports) {
"use strict";

var RUNTIME_001 = 'RUNTIME-001';
var RUNTIME_002 = 'RUNTIME-002';
var RUNTIME_003 = 'RUNTIME-003';
var RUNTIME_004 = 'RUNTIME-004';
var RUNTIME_005 = 'RUNTIME-005';
var RUNTIME_006 = 'RUNTIME-006';
var RUNTIME_007 = 'RUNTIME-007';
var RUNTIME_008 = 'RUNTIME-008';
var TYPE_001 = 'TYPE-001';
var BUILD_001 = 'BUILD-001';
var getDocsUrl = (errorCode)=>{
    var type = errorCode.split('-')[0].toLowerCase();
    return `https://module-federation.io/guide/troubleshooting/${type}/${errorCode}`;
};
var getShortErrorMsg = (errorCode, errorDescMap, args, originalErrorMsg)=>{
    var msg = [
        `${[
            errorDescMap[errorCode]
        ]} #${errorCode}`
    ];
    args && msg.push(`args: ${JSON.stringify(args)}`);
    msg.push(getDocsUrl(errorCode));
    originalErrorMsg && msg.push(`Original Error Message:\n ${originalErrorMsg}`);
    return msg.join('\n');
};
function _extends() {
    _extends = Object.assign || function assign(target) {
        for(var i = 1; i < arguments.length; i++){
            var source = arguments[i];
            for(var key in source)if (Object.prototype.hasOwnProperty.call(source, key)) target[key] = source[key];
        }
        return target;
    };
    return _extends.apply(this, arguments);
}
var runtimeDescMap = {
    [RUNTIME_001]: 'Failed to get remoteEntry exports.',
    [RUNTIME_002]: 'The remote entry interface does not contain "init"',
    [RUNTIME_003]: 'Failed to get manifest.',
    [RUNTIME_004]: 'Failed to locate remote.',
    [RUNTIME_005]: 'Invalid loadShareSync function call from bundler runtime',
    [RUNTIME_006]: 'Invalid loadShareSync function call from runtime',
    [RUNTIME_007]: 'Failed to get remote snapshot.',
    [RUNTIME_008]: 'Failed to load script resources.'
};
var typeDescMap = {
    [TYPE_001]: 'Failed to generate type declaration.'
};
var buildDescMap = {
    [BUILD_001]: 'Failed to find expose module.'
};
var errorDescMap = _extends({}, runtimeDescMap, typeDescMap, buildDescMap);
exports.BUILD_001 = BUILD_001;
exports.RUNTIME_001 = RUNTIME_001;
exports.RUNTIME_002 = RUNTIME_002;
exports.RUNTIME_003 = RUNTIME_003;
exports.RUNTIME_004 = RUNTIME_004;
exports.RUNTIME_005 = RUNTIME_005;
exports.RUNTIME_006 = RUNTIME_006;
exports.RUNTIME_007 = RUNTIME_007;
exports.RUNTIME_008 = RUNTIME_008;
exports.TYPE_001 = TYPE_001;
exports.buildDescMap = buildDescMap;
exports.errorDescMap = errorDescMap;
exports.getShortErrorMsg = getShortErrorMsg;
exports.runtimeDescMap = runtimeDescMap;
exports.typeDescMap = typeDescMap;


}),
65280: (function (__unused_webpack_module, exports, __webpack_require__) {
"use strict";

Object.defineProperty(exports, "__esModule", ({
    value: true
}));
var _async_to_generator = __webpack_require__(11809);
var _call_super = __webpack_require__(19436);
var _class_call_check = __webpack_require__(8864);
var _create_class = __webpack_require__(93072);
var _inherits = __webpack_require__(82397);
var _sliced_to_array = __webpack_require__(78474);
var _to_consumable_array = __webpack_require__(92716);
var _type_of = __webpack_require__(94210);
var polyfills = __webpack_require__(84656);
var sdk = __webpack_require__(57726);
var errorCodes = __webpack_require__(68427);
var LOG_CATEGORY = '[ Federation Runtime ]';
// FIXME: pre-bundle ?
var logger = sdk.createLogger(LOG_CATEGORY);
// eslint-disable-next-line @typescript-eslint/explicit-module-boundary-types
function assert(condition, msg) {
    if (!condition) {
        error(msg);
    }
}
function error(msg) {
    if (msg instanceof Error) {
        msg.message = `${LOG_CATEGORY}: ${msg.message}`;
        throw msg;
    }
    throw new Error(`${LOG_CATEGORY}: ${msg}`);
}
function warn(msg) {
    if (msg instanceof Error) {
        msg.message = `${LOG_CATEGORY}: ${msg.message}`;
        logger.warn(msg);
    } else {
        logger.warn(msg);
    }
}
function addUniqueItem(arr, item) {
    if (arr.findIndex((name1)=>name1 === item) === -1) {
        arr.push(item);
    }
    return arr;
}
function getFMId(remoteInfo) {
    if ('version' in remoteInfo && remoteInfo.version) {
        return `${remoteInfo.name}:${remoteInfo.version}`;
    } else if ('entry' in remoteInfo && remoteInfo.entry) {
        return `${remoteInfo.name}:${remoteInfo.entry}`;
    } else {
        return `${remoteInfo.name}`;
    }
}
function isRemoteInfoWithEntry(remote) {
    return typeof remote.entry !== 'undefined';
}
function isPureRemoteEntry(remote) {
    return !remote.entry.includes('.json') && remote.entry.includes('.js');
}
// eslint-disable-next-line @typescript-eslint/no-explicit-any
function safeWrapper(callback, disableWarn) {
    return _async_to_generator._(function*() {
        try {
            var res = yield callback();
            return res;
        } catch (e) {
            !disableWarn && warn(e);
            return;
        }
    })();
}
function isObject(val) {
    return val && typeof val === 'object';
}
var objectToString = Object.prototype.toString;
// eslint-disable-next-line @typescript-eslint/ban-types
function isPlainObject(val) {
    return objectToString.call(val) === '[object Object]';
}
function isStaticResourcesEqual(url1, url2) {
    var REG_EXP = /^(https?:)?\/\//i;
    // Transform url1 and url2 into relative paths
    var relativeUrl1 = url1.replace(REG_EXP, '').replace(/\/$/, '');
    var relativeUrl2 = url2.replace(REG_EXP, '').replace(/\/$/, '');
    // Check if the relative paths are identical
    return relativeUrl1 === relativeUrl2;
}
function arrayOptions(options) {
    return Array.isArray(options) ? options : [
        options
    ];
}
function getRemoteEntryInfoFromSnapshot(snapshot) {
    var defaultRemoteEntryInfo = {
        url: '',
        type: 'global',
        globalName: ''
    };
    if (sdk.isBrowserEnv() || sdk.isReactNativeEnv()) {
        return 'remoteEntry' in snapshot ? {
            url: snapshot.remoteEntry,
            type: snapshot.remoteEntryType,
            globalName: snapshot.globalName
        } : defaultRemoteEntryInfo;
    }
    if ('ssrRemoteEntry' in snapshot) {
        return {
            url: snapshot.ssrRemoteEntry || defaultRemoteEntryInfo.url,
            type: snapshot.ssrRemoteEntryType || defaultRemoteEntryInfo.type,
            globalName: snapshot.globalName
        };
    }
    return defaultRemoteEntryInfo;
}
var processModuleAlias = (name1, subPath)=>{
    // @host/ ./button -> @host/button
    var moduleName;
    if (name1.endsWith('/')) {
        moduleName = name1.slice(0, -1);
    } else {
        moduleName = name1;
    }
    if (subPath.startsWith('.')) {
        subPath = subPath.slice(1);
    }
    moduleName = moduleName + subPath;
    return moduleName;
};
var CurrentGlobal = typeof globalThis === 'object' ? globalThis : window;
var nativeGlobal = (()=>{
    try {
        // get real window (incase of sandbox)
        return document.defaultView;
    } catch (e) {
        // node env
        return CurrentGlobal;
    }
})();
var Global = nativeGlobal;
function definePropertyGlobalVal(target, key, val) {
    Object.defineProperty(target, key, {
        value: val,
        configurable: false,
        writable: true
    });
}
function includeOwnProperty(target, key) {
    return Object.hasOwnProperty.call(target, key);
}
// This section is to prevent encapsulation by certain microfrontend frameworks. Due to reuse policies, sandbox escapes.
// The sandbox in the microfrontend does not replicate the value of 'configurable'.
// If there is no loading content on the global object, this section defines the loading object.
if (!includeOwnProperty(CurrentGlobal, '__GLOBAL_LOADING_REMOTE_ENTRY__')) {
    definePropertyGlobalVal(CurrentGlobal, '__GLOBAL_LOADING_REMOTE_ENTRY__', {});
}
var globalLoading = CurrentGlobal.__GLOBAL_LOADING_REMOTE_ENTRY__;
function setGlobalDefaultVal(target) {
    var _target___FEDERATION__, _target___FEDERATION__1, _target___FEDERATION__2, _target___FEDERATION__3, _target___FEDERATION__4, _target___FEDERATION__5;
    if (includeOwnProperty(target, '__VMOK__') && !includeOwnProperty(target, '__FEDERATION__')) {
        definePropertyGlobalVal(target, '__FEDERATION__', target.__VMOK__);
    }
    if (!includeOwnProperty(target, '__FEDERATION__')) {
        definePropertyGlobalVal(target, '__FEDERATION__', {
            __GLOBAL_PLUGIN__: [],
            __INSTANCES__: [],
            moduleInfo: {},
            __SHARE__: {},
            __MANIFEST_LOADING__: {},
            __PRELOADED_MAP__: new Map()
        });
        definePropertyGlobalVal(target, '__VMOK__', target.__FEDERATION__);
    }
    var ___GLOBAL_PLUGIN__;
    (___GLOBAL_PLUGIN__ = (_target___FEDERATION__ = target.__FEDERATION__).__GLOBAL_PLUGIN__) != null ? ___GLOBAL_PLUGIN__ : _target___FEDERATION__.__GLOBAL_PLUGIN__ = [];
    var ___INSTANCES__;
    (___INSTANCES__ = (_target___FEDERATION__1 = target.__FEDERATION__).__INSTANCES__) != null ? ___INSTANCES__ : _target___FEDERATION__1.__INSTANCES__ = [];
    var _moduleInfo;
    (_moduleInfo = (_target___FEDERATION__2 = target.__FEDERATION__).moduleInfo) != null ? _moduleInfo : _target___FEDERATION__2.moduleInfo = {};
    var ___SHARE__;
    (___SHARE__ = (_target___FEDERATION__3 = target.__FEDERATION__).__SHARE__) != null ? ___SHARE__ : _target___FEDERATION__3.__SHARE__ = {};
    var ___MANIFEST_LOADING__;
    (___MANIFEST_LOADING__ = (_target___FEDERATION__4 = target.__FEDERATION__).__MANIFEST_LOADING__) != null ? ___MANIFEST_LOADING__ : _target___FEDERATION__4.__MANIFEST_LOADING__ = {};
    var ___PRELOADED_MAP__;
    (___PRELOADED_MAP__ = (_target___FEDERATION__5 = target.__FEDERATION__).__PRELOADED_MAP__) != null ? ___PRELOADED_MAP__ : _target___FEDERATION__5.__PRELOADED_MAP__ = new Map();
}
setGlobalDefaultVal(CurrentGlobal);
setGlobalDefaultVal(nativeGlobal);
function resetFederationGlobalInfo() {
    CurrentGlobal.__FEDERATION__.__GLOBAL_PLUGIN__ = [];
    CurrentGlobal.__FEDERATION__.__INSTANCES__ = [];
    CurrentGlobal.__FEDERATION__.moduleInfo = {};
    CurrentGlobal.__FEDERATION__.__SHARE__ = {};
    CurrentGlobal.__FEDERATION__.__MANIFEST_LOADING__ = {};
    Object.keys(globalLoading).forEach((key)=>{
        delete globalLoading[key];
    });
}
function setGlobalFederationInstance(FederationInstance) {
    CurrentGlobal.__FEDERATION__.__INSTANCES__.push(FederationInstance);
}
function getGlobalFederationConstructor() {
    return CurrentGlobal.__FEDERATION__.__DEBUG_CONSTRUCTOR__;
}
function setGlobalFederationConstructor(FederationConstructor, ref) {
    var isDebug = ref === void 0 ? sdk.isDebugMode() : ref;
    if (isDebug) {
        CurrentGlobal.__FEDERATION__.__DEBUG_CONSTRUCTOR__ = FederationConstructor;
        CurrentGlobal.__FEDERATION__.__DEBUG_CONSTRUCTOR_VERSION__ = "0.11.3";
    }
}
// eslint-disable-next-line @typescript-eslint/ban-types
function getInfoWithoutType(target, key) {
    if (typeof key === 'string') {
        var keyRes = target[key];
        if (keyRes) {
            return {
                value: target[key],
                key: key
            };
        } else {
            var targetKeys = Object.keys(target);
            for (var targetKey of targetKeys){
                var _targetKey_split = _sliced_to_array._(targetKey.split(':'), 2), targetTypeOrName = _targetKey_split[0], _ = _targetKey_split[1];
                var nKey = `${targetTypeOrName}:${key}`;
                var typeWithKeyRes = target[nKey];
                if (typeWithKeyRes) {
                    return {
                        value: typeWithKeyRes,
                        key: nKey
                    };
                }
            }
            return {
                value: undefined,
                key: key
            };
        }
    } else {
        throw new Error('key must be string');
    }
}
var getGlobalSnapshot = ()=>nativeGlobal.__FEDERATION__.moduleInfo;
var getTargetSnapshotInfoByModuleInfo = (moduleInfo, snapshot)=>{
    // Check if the remote is included in the hostSnapshot
    var moduleKey = getFMId(moduleInfo);
    var getModuleInfo = getInfoWithoutType(snapshot, moduleKey).value;
    // The remoteSnapshot might not include a version
    if (getModuleInfo && !getModuleInfo.version && 'version' in moduleInfo && moduleInfo['version']) {
        getModuleInfo.version = moduleInfo['version'];
    }
    if (getModuleInfo) {
        return getModuleInfo;
    }
    // If the remote is not included in the hostSnapshot, deploy a micro app snapshot
    if ('version' in moduleInfo && moduleInfo['version']) {
        var version = moduleInfo.version, resModuleInfo = polyfills._object_without_properties_loose(moduleInfo, [
            "version"
        ]);
        var moduleKeyWithoutVersion = getFMId(resModuleInfo);
        var getModuleInfoWithoutVersion = getInfoWithoutType(nativeGlobal.__FEDERATION__.moduleInfo, moduleKeyWithoutVersion).value;
        if ((getModuleInfoWithoutVersion == null ? void 0 : getModuleInfoWithoutVersion.version) === version) {
            return getModuleInfoWithoutVersion;
        }
    }
    return;
};
var getGlobalSnapshotInfoByModuleInfo = (moduleInfo)=>getTargetSnapshotInfoByModuleInfo(moduleInfo, nativeGlobal.__FEDERATION__.moduleInfo);
var setGlobalSnapshotInfoByModuleInfo = (remoteInfo, moduleDetailInfo)=>{
    var moduleKey = getFMId(remoteInfo);
    nativeGlobal.__FEDERATION__.moduleInfo[moduleKey] = moduleDetailInfo;
    return nativeGlobal.__FEDERATION__.moduleInfo;
};
var addGlobalSnapshot = (moduleInfos)=>{
    nativeGlobal.__FEDERATION__.moduleInfo = polyfills._extends({}, nativeGlobal.__FEDERATION__.moduleInfo, moduleInfos);
    return ()=>{
        var keys = Object.keys(moduleInfos);
        for (var key of keys){
            delete nativeGlobal.__FEDERATION__.moduleInfo[key];
        }
    };
};
var getRemoteEntryExports = (name1, globalName)=>{
    var remoteEntryKey = globalName || `__FEDERATION_${name1}:custom__`;
    var entryExports = CurrentGlobal[remoteEntryKey];
    return {
        remoteEntryKey,
        entryExports
    };
};
// This function is used to register global plugins.
// It iterates over the provided plugins and checks if they are already registered.
// If a plugin is not registered, it is added to the global plugins.
// If a plugin is already registered, a warning message is logged.
var registerGlobalPlugins = (plugins)=>{
    var __GLOBAL_PLUGIN__ = nativeGlobal.__FEDERATION__.__GLOBAL_PLUGIN__;
    plugins.forEach((plugin)=>{
        if (__GLOBAL_PLUGIN__.findIndex((p)=>p.name === plugin.name) === -1) {
            __GLOBAL_PLUGIN__.push(plugin);
        } else {
            warn(`The plugin ${plugin.name} has been registered.`);
        }
    });
};
var getGlobalHostPlugins = ()=>nativeGlobal.__FEDERATION__.__GLOBAL_PLUGIN__;
var getPreloaded = (id)=>CurrentGlobal.__FEDERATION__.__PRELOADED_MAP__.get(id);
var setPreloaded = (id)=>CurrentGlobal.__FEDERATION__.__PRELOADED_MAP__.set(id, true);
var DEFAULT_SCOPE = 'default';
var DEFAULT_REMOTE_TYPE = 'global';
// fork from https://github.com/originjs/vite-plugin-federation/blob/v1.1.12/packages/lib/src/utils/semver/index.ts
// those constants are based on https://www.rubydoc.info/gems/semantic_range/3.0.0/SemanticRange#BUILDIDENTIFIER-constant
// Copyright (c)
// vite-plugin-federation is licensed under Mulan PSL v2.
// You can use this software according to the terms and conditions of the Mulan PSL v2.
// You may obtain a copy of Mulan PSL v2 at:
//      http://license.coscl.org.cn/MulanPSL2
// THIS SOFTWARE IS PROVIDED ON AN "AS IS" BASIS, WITHOUT WARRANTIES OF ANY KIND, EITHER EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO NON-INFRINGEMENT, MERCHANTABILITY OR FIT FOR A PARTICULAR PURPOSE.
// See the Mulan PSL v2 for more details.
var buildIdentifier = '[0-9A-Za-z-]+';
var build = `(?:\\+(${buildIdentifier}(?:\\.${buildIdentifier})*))`;
var numericIdentifier = '0|[1-9]\\d*';
var numericIdentifierLoose = '[0-9]+';
var nonNumericIdentifier = '\\d*[a-zA-Z-][a-zA-Z0-9-]*';
var preReleaseIdentifierLoose = `(?:${numericIdentifierLoose}|${nonNumericIdentifier})`;
var preReleaseLoose = `(?:-?(${preReleaseIdentifierLoose}(?:\\.${preReleaseIdentifierLoose})*))`;
var preReleaseIdentifier = `(?:${numericIdentifier}|${nonNumericIdentifier})`;
var preRelease = `(?:-(${preReleaseIdentifier}(?:\\.${preReleaseIdentifier})*))`;
var xRangeIdentifier = `${numericIdentifier}|x|X|\\*`;
var xRangePlain = `[v=\\s]*(${xRangeIdentifier})(?:\\.(${xRangeIdentifier})(?:\\.(${xRangeIdentifier})(?:${preRelease})?${build}?)?)?`;
var hyphenRange = `^\\s*(${xRangePlain})\\s+-\\s+(${xRangePlain})\\s*$`;
var mainVersionLoose = `(${numericIdentifierLoose})\\.(${numericIdentifierLoose})\\.(${numericIdentifierLoose})`;
var loosePlain = `[v=\\s]*${mainVersionLoose}${preReleaseLoose}?${build}?`;
var gtlt = '((?:<|>)?=?)';
var comparatorTrim = `(\\s*)${gtlt}\\s*(${loosePlain}|${xRangePlain})`;
var loneTilde = '(?:~>?)';
var tildeTrim = `(\\s*)${loneTilde}\\s+`;
var loneCaret = '(?:\\^)';
var caretTrim = `(\\s*)${loneCaret}\\s+`;
var star = '(<|>)?=?\\s*\\*';
var caret = `^${loneCaret}${xRangePlain}$`;
var mainVersion = `(${numericIdentifier})\\.(${numericIdentifier})\\.(${numericIdentifier})`;
var fullPlain = `v?${mainVersion}${preRelease}?${build}?`;
var tilde = `^${loneTilde}${xRangePlain}$`;
var xRange = `^${gtlt}\\s*${xRangePlain}$`;
var comparator = `^${gtlt}\\s*(${fullPlain})$|^$`;
// copy from semver package
var gte0 = '^\\s*>=\\s*0.0.0\\s*$';
// fork from https://github.com/originjs/vite-plugin-federation/blob/v1.1.12/packages/lib/src/utils/semver/index.ts
// Copyright (c)
// vite-plugin-federation is licensed under Mulan PSL v2.
// You can use this software according to the terms and conditions of the Mulan PSL v2.
// You may obtain a copy of Mulan PSL v2 at:
//      http://license.coscl.org.cn/MulanPSL2
// THIS SOFTWARE IS PROVIDED ON AN "AS IS" BASIS, WITHOUT WARRANTIES OF ANY KIND, EITHER EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO NON-INFRINGEMENT, MERCHANTABILITY OR FIT FOR A PARTICULAR PURPOSE.
// See the Mulan PSL v2 for more details.
function parseRegex(source) {
    return new RegExp(source);
}
function isXVersion(version) {
    return !version || version.toLowerCase() === 'x' || version === '*';
}
function pipe(...fns) {
    return (x)=>fns.reduce((v, f)=>f(v), x);
}
function extractComparator(comparatorString) {
    return comparatorString.match(parseRegex(comparator));
}
function combineVersion(major, minor, patch, preRelease) {
    var mainVersion = `${major}.${minor}.${patch}`;
    if (preRelease) {
        return `${mainVersion}-${preRelease}`;
    }
    return mainVersion;
}
// fork from https://github.com/originjs/vite-plugin-federation/blob/v1.1.12/packages/lib/src/utils/semver/index.ts
// Copyright (c)
// vite-plugin-federation is licensed under Mulan PSL v2.
// You can use this software according to the terms and conditions of the Mulan PSL v2.
// You may obtain a copy of Mulan PSL v2 at:
//      http://license.coscl.org.cn/MulanPSL2
// THIS SOFTWARE IS PROVIDED ON AN "AS IS" BASIS, WITHOUT WARRANTIES OF ANY KIND, EITHER EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO NON-INFRINGEMENT, MERCHANTABILITY OR FIT FOR A PARTICULAR PURPOSE.
// See the Mulan PSL v2 for more details.
function parseHyphen(range) {
    return range.replace(parseRegex(hyphenRange), (_range, from, fromMajor, fromMinor, fromPatch, _fromPreRelease, _fromBuild, to, toMajor, toMinor, toPatch, toPreRelease)=>{
        if (isXVersion(fromMajor)) {
            from = '';
        } else if (isXVersion(fromMinor)) {
            from = `>=${fromMajor}.0.0`;
        } else if (isXVersion(fromPatch)) {
            from = `>=${fromMajor}.${fromMinor}.0`;
        } else {
            from = `>=${from}`;
        }
        if (isXVersion(toMajor)) {
            to = '';
        } else if (isXVersion(toMinor)) {
            to = `<${Number(toMajor) + 1}.0.0-0`;
        } else if (isXVersion(toPatch)) {
            to = `<${toMajor}.${Number(toMinor) + 1}.0-0`;
        } else if (toPreRelease) {
            to = `<=${toMajor}.${toMinor}.${toPatch}-${toPreRelease}`;
        } else {
            to = `<=${to}`;
        }
        return `${from} ${to}`.trim();
    });
}
function parseComparatorTrim(range) {
    return range.replace(parseRegex(comparatorTrim), '$1$2$3');
}
function parseTildeTrim(range) {
    return range.replace(parseRegex(tildeTrim), '$1~');
}
function parseCaretTrim(range) {
    return range.replace(parseRegex(caretTrim), '$1^');
}
function parseCarets(range) {
    return range.trim().split(/\s+/).map((rangeVersion)=>rangeVersion.replace(parseRegex(caret), (_, major, minor, patch, preRelease)=>{
            if (isXVersion(major)) {
                return '';
            } else if (isXVersion(minor)) {
                return `>=${major}.0.0 <${Number(major) + 1}.0.0-0`;
            } else if (isXVersion(patch)) {
                if (major === '0') {
                    return `>=${major}.${minor}.0 <${major}.${Number(minor) + 1}.0-0`;
                } else {
                    return `>=${major}.${minor}.0 <${Number(major) + 1}.0.0-0`;
                }
            } else if (preRelease) {
                if (major === '0') {
                    if (minor === '0') {
                        return `>=${major}.${minor}.${patch}-${preRelease} <${major}.${minor}.${Number(patch) + 1}-0`;
                    } else {
                        return `>=${major}.${minor}.${patch}-${preRelease} <${major}.${Number(minor) + 1}.0-0`;
                    }
                } else {
                    return `>=${major}.${minor}.${patch}-${preRelease} <${Number(major) + 1}.0.0-0`;
                }
            } else {
                if (major === '0') {
                    if (minor === '0') {
                        return `>=${major}.${minor}.${patch} <${major}.${minor}.${Number(patch) + 1}-0`;
                    } else {
                        return `>=${major}.${minor}.${patch} <${major}.${Number(minor) + 1}.0-0`;
                    }
                }
                return `>=${major}.${minor}.${patch} <${Number(major) + 1}.0.0-0`;
            }
        })).join(' ');
}
function parseTildes(range) {
    return range.trim().split(/\s+/).map((rangeVersion)=>rangeVersion.replace(parseRegex(tilde), (_, major, minor, patch, preRelease)=>{
            if (isXVersion(major)) {
                return '';
            } else if (isXVersion(minor)) {
                return `>=${major}.0.0 <${Number(major) + 1}.0.0-0`;
            } else if (isXVersion(patch)) {
                return `>=${major}.${minor}.0 <${major}.${Number(minor) + 1}.0-0`;
            } else if (preRelease) {
                return `>=${major}.${minor}.${patch}-${preRelease} <${major}.${Number(minor) + 1}.0-0`;
            }
            return `>=${major}.${minor}.${patch} <${major}.${Number(minor) + 1}.0-0`;
        })).join(' ');
}
function parseXRanges(range) {
    return range.split(/\s+/).map((rangeVersion)=>rangeVersion.trim().replace(parseRegex(xRange), (ret, gtlt, major, minor, patch, preRelease)=>{
            var isXMajor = isXVersion(major);
            var isXMinor = isXMajor || isXVersion(minor);
            var isXPatch = isXMinor || isXVersion(patch);
            if (gtlt === '=' && isXPatch) {
                gtlt = '';
            }
            preRelease = '';
            if (isXMajor) {
                if (gtlt === '>' || gtlt === '<') {
                    // nothing is allowed
                    return '<0.0.0-0';
                } else {
                    // nothing is forbidden
                    return '*';
                }
            } else if (gtlt && isXPatch) {
                // replace X with 0
                if (isXMinor) {
                    minor = 0;
                }
                patch = 0;
                if (gtlt === '>') {
                    // >1 => >=2.0.0
                    // >1.2 => >=1.3.0
                    gtlt = '>=';
                    if (isXMinor) {
                        major = Number(major) + 1;
                        minor = 0;
                        patch = 0;
                    } else {
                        minor = Number(minor) + 1;
                        patch = 0;
                    }
                } else if (gtlt === '<=') {
                    // <=0.7.x is actually <0.8.0, since any 0.7.x should pass
                    // Similarly, <=7.x is actually <8.0.0, etc.
                    gtlt = '<';
                    if (isXMinor) {
                        major = Number(major) + 1;
                    } else {
                        minor = Number(minor) + 1;
                    }
                }
                if (gtlt === '<') {
                    preRelease = '-0';
                }
                return `${gtlt + major}.${minor}.${patch}${preRelease}`;
            } else if (isXMinor) {
                return `>=${major}.0.0${preRelease} <${Number(major) + 1}.0.0-0`;
            } else if (isXPatch) {
                return `>=${major}.${minor}.0${preRelease} <${major}.${Number(minor) + 1}.0-0`;
            }
            return ret;
        })).join(' ');
}
function parseStar(range) {
    return range.trim().replace(parseRegex(star), '');
}
function parseGTE0(comparatorString) {
    return comparatorString.trim().replace(parseRegex(gte0), '');
}
// fork from https://github.com/originjs/vite-plugin-federation/blob/v1.1.12/packages/lib/src/utils/semver/index.ts
// Copyright (c)
// vite-plugin-federation is licensed under Mulan PSL v2.
// You can use this software according to the terms and conditions of the Mulan PSL v2.
// You may obtain a copy of Mulan PSL v2 at:
//      http://license.coscl.org.cn/MulanPSL2
// THIS SOFTWARE IS PROVIDED ON AN "AS IS" BASIS, WITHOUT WARRANTIES OF ANY KIND, EITHER EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO NON-INFRINGEMENT, MERCHANTABILITY OR FIT FOR A PARTICULAR PURPOSE.
// See the Mulan PSL v2 for more details.
function compareAtom(rangeAtom, versionAtom) {
    rangeAtom = Number(rangeAtom) || rangeAtom;
    versionAtom = Number(versionAtom) || versionAtom;
    if (rangeAtom > versionAtom) {
        return 1;
    }
    if (rangeAtom === versionAtom) {
        return 0;
    }
    return -1;
}
function comparePreRelease(rangeAtom, versionAtom) {
    var rangePreRelease = rangeAtom.preRelease;
    var versionPreRelease = versionAtom.preRelease;
    if (rangePreRelease === undefined && Boolean(versionPreRelease)) {
        return 1;
    }
    if (Boolean(rangePreRelease) && versionPreRelease === undefined) {
        return -1;
    }
    if (rangePreRelease === undefined && versionPreRelease === undefined) {
        return 0;
    }
    for(var i = 0, n = rangePreRelease.length; i <= n; i++){
        var rangeElement = rangePreRelease[i];
        var versionElement = versionPreRelease[i];
        if (rangeElement === versionElement) {
            continue;
        }
        if (rangeElement === undefined && versionElement === undefined) {
            return 0;
        }
        if (!rangeElement) {
            return 1;
        }
        if (!versionElement) {
            return -1;
        }
        return compareAtom(rangeElement, versionElement);
    }
    return 0;
}
function compareVersion(rangeAtom, versionAtom) {
    return compareAtom(rangeAtom.major, versionAtom.major) || compareAtom(rangeAtom.minor, versionAtom.minor) || compareAtom(rangeAtom.patch, versionAtom.patch) || comparePreRelease(rangeAtom, versionAtom);
}
function eq(rangeAtom, versionAtom) {
    return rangeAtom.version === versionAtom.version;
}
function compare(rangeAtom, versionAtom) {
    switch(rangeAtom.operator){
        case '':
        case '=':
            return eq(rangeAtom, versionAtom);
        case '>':
            return compareVersion(rangeAtom, versionAtom) < 0;
        case '>=':
            return eq(rangeAtom, versionAtom) || compareVersion(rangeAtom, versionAtom) < 0;
        case '<':
            return compareVersion(rangeAtom, versionAtom) > 0;
        case '<=':
            return eq(rangeAtom, versionAtom) || compareVersion(rangeAtom, versionAtom) > 0;
        case undefined:
            {
                // mean * or x -> all versions
                return true;
            }
        default:
            return false;
    }
}
// fork from https://github.com/originjs/vite-plugin-federation/blob/v1.1.12/packages/lib/src/utils/semver/index.ts
// Copyright (c)
// vite-plugin-federation is licensed under Mulan PSL v2.
// You can use this software according to the terms and conditions of the Mulan PSL v2.
// You may obtain a copy of Mulan PSL v2 at:
//      http://license.coscl.org.cn/MulanPSL2
// THIS SOFTWARE IS PROVIDED ON AN "AS IS" BASIS, WITHOUT WARRANTIES OF ANY KIND, EITHER EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO NON-INFRINGEMENT, MERCHANTABILITY OR FIT FOR A PARTICULAR PURPOSE.
// See the Mulan PSL v2 for more details.
function parseComparatorString(range) {
    return pipe(// ^ --> * (any, kinda silly)
    // ^2, ^2.x, ^2.x.x --> >=2.0.0 <3.0.0-0
    // ^2.0, ^2.0.x --> >=2.0.0 <3.0.0-0
    // ^1.2, ^1.2.x --> >=1.2.0 <2.0.0-0
    // ^1.2.3 --> >=1.2.3 <2.0.0-0
    // ^1.2.0 --> >=1.2.0 <2.0.0-0
    parseCarets, // ~, ~> --> * (any, kinda silly)
    // ~2, ~2.x, ~2.x.x, ~>2, ~>2.x ~>2.x.x --> >=2.0.0 <3.0.0-0
    // ~2.0, ~2.0.x, ~>2.0, ~>2.0.x --> >=2.0.0 <2.1.0-0
    // ~1.2, ~1.2.x, ~>1.2, ~>1.2.x --> >=1.2.0 <1.3.0-0
    // ~1.2.3, ~>1.2.3 --> >=1.2.3 <1.3.0-0
    // ~1.2.0, ~>1.2.0 --> >=1.2.0 <1.3.0-0
    parseTildes, parseXRanges, parseStar)(range);
}
function parseRange(range) {
    return pipe(// `1.2.3 - 1.2.4` => `>=1.2.3 <=1.2.4`
    parseHyphen, // `> 1.2.3 < 1.2.5` => `>1.2.3 <1.2.5`
    parseComparatorTrim, // `~ 1.2.3` => `~1.2.3`
    parseTildeTrim, // `^ 1.2.3` => `^1.2.3`
    parseCaretTrim)(range.trim()).split(/\s+/).join(' ');
}
function satisfy(version, range) {
    if (!version) {
        return false;
    }
    var parsedRange = parseRange(range);
    var parsedComparator = parsedRange.split(' ').map((rangeVersion)=>parseComparatorString(rangeVersion)).join(' ');
    var comparators = parsedComparator.split(/\s+/).map((comparator)=>parseGTE0(comparator));
    var extractedVersion = extractComparator(version);
    if (!extractedVersion) {
        return false;
    }
    var _extractedVersion = _sliced_to_array._(extractedVersion, 7), versionOperator = _extractedVersion[1], versionMajor = _extractedVersion[3], versionMinor = _extractedVersion[4], versionPatch = _extractedVersion[5], versionPreRelease = _extractedVersion[6];
    var versionAtom = {
        operator: versionOperator,
        version: combineVersion(versionMajor, versionMinor, versionPatch, versionPreRelease),
        major: versionMajor,
        minor: versionMinor,
        patch: versionPatch,
        preRelease: versionPreRelease == null ? void 0 : versionPreRelease.split('.')
    };
    for (var comparator of comparators){
        var extractedComparator = extractComparator(comparator);
        if (!extractedComparator) {
            return false;
        }
        var _extractedComparator = _sliced_to_array._(extractedComparator, 7), rangeOperator = _extractedComparator[1], rangeMajor = _extractedComparator[3], rangeMinor = _extractedComparator[4], rangePatch = _extractedComparator[5], rangePreRelease = _extractedComparator[6];
        var rangeAtom = {
            operator: rangeOperator,
            version: combineVersion(rangeMajor, rangeMinor, rangePatch, rangePreRelease),
            major: rangeMajor,
            minor: rangeMinor,
            patch: rangePatch,
            preRelease: rangePreRelease == null ? void 0 : rangePreRelease.split('.')
        };
        if (!compare(rangeAtom, versionAtom)) {
            return false; // early return
        }
    }
    return true;
}
function formatShare(shareArgs, from, name1, shareStrategy) {
    var get;
    if ('get' in shareArgs) {
        // eslint-disable-next-line prefer-destructuring
        get = shareArgs.get;
    } else if ('lib' in shareArgs) {
        get = ()=>Promise.resolve(shareArgs.lib);
    } else {
        get = ()=>Promise.resolve(()=>{
                throw new Error(`Can not get shared '${name1}'!`);
            });
    }
    var _shareArgs_version, _shareArgs_scope, _shareArgs_strategy;
    return polyfills._extends({
        deps: [],
        useIn: [],
        from,
        loading: null
    }, shareArgs, {
        shareConfig: polyfills._extends({
            requiredVersion: `^${shareArgs.version}`,
            singleton: false,
            eager: false,
            strictVersion: false
        }, shareArgs.shareConfig),
        get,
        loaded: (shareArgs == null ? void 0 : shareArgs.loaded) || 'lib' in shareArgs ? true : undefined,
        version: (_shareArgs_version = shareArgs.version) != null ? _shareArgs_version : '0',
        scope: Array.isArray(shareArgs.scope) ? shareArgs.scope : [
            (_shareArgs_scope = shareArgs.scope) != null ? _shareArgs_scope : 'default'
        ],
        strategy: ((_shareArgs_strategy = shareArgs.strategy) != null ? _shareArgs_strategy : shareStrategy) || 'version-first'
    });
}
function formatShareConfigs(globalOptions, userOptions) {
    var shareArgs = userOptions.shared || {};
    var from = userOptions.name;
    var shareInfos = Object.keys(shareArgs).reduce((res, pkgName)=>{
        var arrayShareArgs = arrayOptions(shareArgs[pkgName]);
        res[pkgName] = res[pkgName] || [];
        arrayShareArgs.forEach((shareConfig)=>{
            res[pkgName].push(formatShare(shareConfig, from, pkgName, userOptions.shareStrategy));
        });
        return res;
    }, {});
    var shared = polyfills._extends({}, globalOptions.shared);
    Object.keys(shareInfos).forEach((shareKey)=>{
        if (!shared[shareKey]) {
            shared[shareKey] = shareInfos[shareKey];
        } else {
            shareInfos[shareKey].forEach((newUserSharedOptions)=>{
                var isSameVersion = shared[shareKey].find((sharedVal)=>sharedVal.version === newUserSharedOptions.version);
                if (!isSameVersion) {
                    shared[shareKey].push(newUserSharedOptions);
                }
            });
        }
    });
    return {
        shared,
        shareInfos
    };
}
function versionLt(a, b) {
    var transformInvalidVersion = (version)=>{
        var isNumberVersion = !Number.isNaN(Number(version));
        if (isNumberVersion) {
            var splitArr = version.split('.');
            var validVersion = version;
            for(var i = 0; i < 3 - splitArr.length; i++){
                validVersion += '.0';
            }
            return validVersion;
        }
        return version;
    };
    if (satisfy(transformInvalidVersion(a), `<=${transformInvalidVersion(b)}`)) {
        return true;
    } else {
        return false;
    }
}
var findVersion = (shareVersionMap, cb)=>{
    var callback = cb || function(prev, cur) {
        return versionLt(prev, cur);
    };
    return Object.keys(shareVersionMap).reduce((prev, cur)=>{
        if (!prev) {
            return cur;
        }
        if (callback(prev, cur)) {
            return cur;
        }
        // default version is '0' https://github.com/webpack/webpack/blob/main/lib/sharing/ProvideSharedModule.js#L136
        if (prev === '0') {
            return cur;
        }
        return prev;
    }, 0);
};
var isLoaded = (shared)=>{
    return Boolean(shared.loaded) || typeof shared.lib === 'function';
};
var isLoading = (shared)=>{
    return Boolean(shared.loading);
};
function findSingletonVersionOrderByVersion(shareScopeMap, scope, pkgName) {
    var versions = shareScopeMap[scope][pkgName];
    var callback = function(prev, cur) {
        return !isLoaded(versions[prev]) && versionLt(prev, cur);
    };
    return findVersion(shareScopeMap[scope][pkgName], callback);
}
function findSingletonVersionOrderByLoaded(shareScopeMap, scope, pkgName) {
    var versions = shareScopeMap[scope][pkgName];
    var callback = function(prev, cur) {
        var isLoadingOrLoaded = (shared)=>{
            return isLoaded(shared) || isLoading(shared);
        };
        if (isLoadingOrLoaded(versions[cur])) {
            if (isLoadingOrLoaded(versions[prev])) {
                return Boolean(versionLt(prev, cur));
            } else {
                return true;
            }
        }
        if (isLoadingOrLoaded(versions[prev])) {
            return false;
        }
        return versionLt(prev, cur);
    };
    return findVersion(shareScopeMap[scope][pkgName], callback);
}
function getFindShareFunction(strategy) {
    if (strategy === 'loaded-first') {
        return findSingletonVersionOrderByLoaded;
    }
    return findSingletonVersionOrderByVersion;
}
function getRegisteredShare(localShareScopeMap, pkgName, shareInfo, resolveShare) {
    var _loop = function(sc) {
        if (shareConfig && localShareScopeMap[sc] && localShareScopeMap[sc][pkgName]) {
            var requiredVersion = shareConfig.requiredVersion;
            var findShareFunction = getFindShareFunction(strategy);
            var maxOrSingletonVersion = findShareFunction(localShareScopeMap, sc, pkgName);
            //@ts-ignore
            var defaultResolver = ()=>{
                if (shareConfig.singleton) {
                    if (typeof requiredVersion === 'string' && !satisfy(maxOrSingletonVersion, requiredVersion)) {
                        var msg = `Version ${maxOrSingletonVersion} from ${maxOrSingletonVersion && localShareScopeMap[sc][pkgName][maxOrSingletonVersion].from} of shared singleton module ${pkgName} does not satisfy the requirement of ${shareInfo.from} which needs ${requiredVersion})`;
                        if (shareConfig.strictVersion) {
                            error(msg);
                        } else {
                            warn(msg);
                        }
                    }
                    return localShareScopeMap[sc][pkgName][maxOrSingletonVersion];
                } else {
                    if (requiredVersion === false || requiredVersion === '*') {
                        return localShareScopeMap[sc][pkgName][maxOrSingletonVersion];
                    }
                    if (satisfy(maxOrSingletonVersion, requiredVersion)) {
                        return localShareScopeMap[sc][pkgName][maxOrSingletonVersion];
                    }
                    for (var ref of Object.entries(localShareScopeMap[sc][pkgName])){
                        var _ref = _sliced_to_array._(ref, 2), versionKey = _ref[0], versionValue = _ref[1];
                        if (satisfy(versionKey, requiredVersion)) {
                            return versionValue;
                        }
                    }
                }
            };
            var params = {
                shareScopeMap: localShareScopeMap,
                scope: sc,
                pkgName,
                version: maxOrSingletonVersion,
                GlobalFederation: Global.__FEDERATION__,
                resolver: defaultResolver
            };
            var resolveShared = resolveShare.emit(params) || params;
            return {
                v: resolveShared.resolver()
            };
        }
    };
    if (!localShareScopeMap) {
        return;
    }
    var shareConfig = shareInfo.shareConfig, _shareInfo_scope = shareInfo.scope, scope = _shareInfo_scope === void 0 ? DEFAULT_SCOPE : _shareInfo_scope, strategy = shareInfo.strategy;
    var scopes = Array.isArray(scope) ? scope : [
        scope
    ];
    for (var sc of scopes){
        var _ret = _loop(sc);
        if (_type_of._(_ret) === "object") return _ret.v;
    }
}
function getGlobalShareScope() {
    return Global.__FEDERATION__.__SHARE__;
}
function getTargetSharedOptions(options) {
    var pkgName = options.pkgName, extraOptions = options.extraOptions, shareInfos = options.shareInfos;
    var defaultResolver = (sharedOptions)=>{
        if (!sharedOptions) {
            return undefined;
        }
        var shareVersionMap = {};
        sharedOptions.forEach((shared)=>{
            shareVersionMap[shared.version] = shared;
        });
        var callback = function(prev, cur) {
            return !isLoaded(shareVersionMap[prev]) && versionLt(prev, cur);
        };
        var maxVersion = findVersion(shareVersionMap, callback);
        return shareVersionMap[maxVersion];
    };
    var _extraOptions_resolver;
    var resolver = (_extraOptions_resolver = extraOptions == null ? void 0 : extraOptions.resolver) != null ? _extraOptions_resolver : defaultResolver;
    return Object.assign({}, resolver(shareInfos[pkgName]), extraOptions == null ? void 0 : extraOptions.customShareInfo);
}
var ShareUtils = {
    getRegisteredShare,
    getGlobalShareScope
};
var GlobalUtils = {
    Global,
    nativeGlobal,
    resetFederationGlobalInfo,
    setGlobalFederationInstance,
    getGlobalFederationConstructor,
    setGlobalFederationConstructor,
    getInfoWithoutType,
    getGlobalSnapshot,
    getTargetSnapshotInfoByModuleInfo,
    getGlobalSnapshotInfoByModuleInfo,
    setGlobalSnapshotInfoByModuleInfo,
    addGlobalSnapshot,
    getRemoteEntryExports,
    registerGlobalPlugins,
    getGlobalHostPlugins,
    getPreloaded,
    setPreloaded
};
var helpers = {
    global: GlobalUtils,
    share: ShareUtils
};
function getBuilderId() {
    //@ts-ignore
    return  true ? "miniApp:0.0.1" : 0;
}
// Function to match a remote with its name and expose
// id: pkgName(@federation/app1) + expose(button) = @federation/app1/button
// id: alias(app1) + expose(button) = app1/button
// id: alias(app1/utils) + expose(loadash/sort) = app1/utils/loadash/sort
function matchRemoteWithNameAndExpose(remotes, id) {
    for (var remote of remotes){
        // match pkgName
        var isNameMatched = id.startsWith(remote.name);
        var expose = id.replace(remote.name, '');
        if (isNameMatched) {
            if (expose.startsWith('/')) {
                var pkgNameOrAlias = remote.name;
                expose = `.${expose}`;
                return {
                    pkgNameOrAlias,
                    expose,
                    remote
                };
            } else if (expose === '') {
                return {
                    pkgNameOrAlias: remote.name,
                    expose: '.',
                    remote
                };
            }
        }
        // match alias
        var isAliasMatched = remote.alias && id.startsWith(remote.alias);
        var exposeWithAlias = remote.alias && id.replace(remote.alias, '');
        if (remote.alias && isAliasMatched) {
            if (exposeWithAlias && exposeWithAlias.startsWith('/')) {
                var pkgNameOrAlias1 = remote.alias;
                exposeWithAlias = `.${exposeWithAlias}`;
                return {
                    pkgNameOrAlias: pkgNameOrAlias1,
                    expose: exposeWithAlias,
                    remote
                };
            } else if (exposeWithAlias === '') {
                return {
                    pkgNameOrAlias: remote.alias,
                    expose: '.',
                    remote
                };
            }
        }
    }
    return;
}
// Function to match a remote with its name or alias
function matchRemote(remotes, nameOrAlias) {
    for (var remote of remotes){
        var isNameMatched = nameOrAlias === remote.name;
        if (isNameMatched) {
            return remote;
        }
        var isAliasMatched = remote.alias && nameOrAlias === remote.alias;
        if (isAliasMatched) {
            return remote;
        }
    }
    return;
}
function registerPlugins(plugins, hookInstances) {
    var globalPlugins = getGlobalHostPlugins();
    // Incorporate global plugins
    if (globalPlugins.length > 0) {
        globalPlugins.forEach((plugin)=>{
            if (plugins == null ? void 0 : plugins.find((item)=>item.name !== plugin.name)) {
                plugins.push(plugin);
            }
        });
    }
    if (plugins && plugins.length > 0) {
        plugins.forEach((plugin)=>{
            hookInstances.forEach((hookInstance)=>{
                hookInstance.applyPlugin(plugin);
            });
        });
    }
    return plugins;
}
function loadEsmEntry(_0) {
    return _async_to_generator._(function*(ref) {
        var entry = ref.entry, remoteEntryExports = ref.remoteEntryExports;
        return new Promise((resolve, reject)=>{
            try {
                if (!remoteEntryExports) {
                    if (true) {
                        new Function('callbacks', `import("${entry}").then(callbacks[0]).catch(callbacks[1])`)([
                            resolve,
                            reject
                        ]);
                    } else {}
                } else {
                    resolve(remoteEntryExports);
                }
            } catch (e) {
                reject(e);
            }
        });
    }).apply(this, arguments);
}
function loadSystemJsEntry(_0) {
    return _async_to_generator._(function*(ref) {
        var entry = ref.entry, remoteEntryExports = ref.remoteEntryExports;
        return new Promise((resolve, reject)=>{
            try {
                if (!remoteEntryExports) {
                    //@ts-ignore
                    if (false) {} else {
                        new Function('callbacks', `System.import("${entry}").then(callbacks[0]).catch(callbacks[1])`)([
                            resolve,
                            reject
                        ]);
                    }
                } else {
                    resolve(remoteEntryExports);
                }
            } catch (e) {
                reject(e);
            }
        });
    }).apply(this, arguments);
}
function loadEntryScript(_0) {
    return _async_to_generator._(function*(ref) {
        var name1 = ref.name, globalName = ref.globalName, entry = ref.entry, loaderHook = ref.loaderHook;
        var _getRemoteEntryExports = getRemoteEntryExports(name1, globalName), remoteEntryExports = _getRemoteEntryExports.entryExports;
        if (remoteEntryExports) {
            return remoteEntryExports;
        }
        return sdk.loadScript(entry, {
            attrs: {},
            createScriptHook: (url, attrs)=>{
                var res = loaderHook.lifecycle.createScript.emit({
                    url,
                    attrs
                });
                if (!res) return;
                if (res instanceof HTMLScriptElement) {
                    return res;
                }
                if ('script' in res || 'timeout' in res) {
                    return res;
                }
                return;
            }
        }).then(()=>{
            var _getRemoteEntryExports = getRemoteEntryExports(name1, globalName), remoteEntryKey = _getRemoteEntryExports.remoteEntryKey, entryExports = _getRemoteEntryExports.entryExports;
            assert(entryExports, errorCodes.getShortErrorMsg(errorCodes.RUNTIME_001, errorCodes.runtimeDescMap, {
                remoteName: name1,
                remoteEntryUrl: entry,
                remoteEntryKey
            }));
            return entryExports;
        }).catch((e)=>{
            assert(undefined, errorCodes.getShortErrorMsg(errorCodes.RUNTIME_008, errorCodes.runtimeDescMap, {
                remoteName: name1,
                resourceUrl: entry
            }));
            throw e;
        });
    }).apply(this, arguments);
}
function loadEntryDom(_0) {
    return _async_to_generator._(function*(ref) {
        var remoteInfo = ref.remoteInfo, remoteEntryExports = ref.remoteEntryExports, loaderHook = ref.loaderHook;
        var entry = remoteInfo.entry, globalName = remoteInfo.entryGlobalName, name1 = remoteInfo.name, type = remoteInfo.type;
        switch(type){
            case 'esm':
            case 'module':
                return loadEsmEntry({
                    entry,
                    remoteEntryExports
                });
            case 'system':
                return loadSystemJsEntry({
                    entry,
                    remoteEntryExports
                });
            default:
                return loadEntryScript({
                    entry,
                    globalName,
                    name: name1,
                    loaderHook
                });
        }
    }).apply(this, arguments);
}
function loadEntryNode(_0) {
    return _async_to_generator._(function*(ref) {
        var remoteInfo = ref.remoteInfo, loaderHook = ref.loaderHook;
        var entry = remoteInfo.entry, globalName = remoteInfo.entryGlobalName, name1 = remoteInfo.name, type = remoteInfo.type;
        var _getRemoteEntryExports = getRemoteEntryExports(name1, globalName), remoteEntryExports = _getRemoteEntryExports.entryExports;
        if (remoteEntryExports) {
            return remoteEntryExports;
        }
        return sdk.loadScriptNode(entry, {
            attrs: {
                name: name1,
                globalName,
                type
            },
            loaderHook: {
                createScriptHook: (url, ref)=>{
                    var attrs = ref === void 0 ? {} : ref;
                    var res = loaderHook.lifecycle.createScript.emit({
                        url,
                        attrs
                    });
                    if (!res) return;
                    if ('url' in res) {
                        return res;
                    }
                    return;
                }
            }
        }).then(()=>{
            var _getRemoteEntryExports = getRemoteEntryExports(name1, globalName), remoteEntryKey = _getRemoteEntryExports.remoteEntryKey, entryExports = _getRemoteEntryExports.entryExports;
            assert(entryExports, errorCodes.getShortErrorMsg(errorCodes.RUNTIME_001, errorCodes.runtimeDescMap, {
                remoteName: name1,
                remoteEntryUrl: entry,
                remoteEntryKey
            }));
            return entryExports;
        }).catch((e)=>{
            throw e;
        });
    }).apply(this, arguments);
}
function getRemoteEntryUniqueKey(remoteInfo) {
    var entry = remoteInfo.entry, name1 = remoteInfo.name;
    return sdk.composeKeyWithSeparator(name1, entry);
}
function getRemoteEntry(_0) {
    return _async_to_generator._(function*(ref) {
        var origin = ref.origin, remoteEntryExports = ref.remoteEntryExports, remoteInfo = ref.remoteInfo;
        var uniqueKey = getRemoteEntryUniqueKey(remoteInfo);
        if (remoteEntryExports) {
            return remoteEntryExports;
        }
        if (!globalLoading[uniqueKey]) {
            var loadEntryHook = origin.remoteHandler.hooks.lifecycle.loadEntry;
            var loaderHook = origin.loaderHook;
            globalLoading[uniqueKey] = loadEntryHook.emit({
                loaderHook,
                remoteInfo,
                remoteEntryExports
            }).then((res)=>{
                if (res) {
                    return res;
                }
                return sdk.isBrowserEnv() ? loadEntryDom({
                    remoteInfo,
                    remoteEntryExports,
                    loaderHook
                }) : loadEntryNode({
                    remoteInfo,
                    loaderHook
                });
            });
        }
        return globalLoading[uniqueKey];
    }).apply(this, arguments);
}
function getRemoteInfo(remote) {
    return polyfills._extends({}, remote, {
        entry: 'entry' in remote ? remote.entry : '',
        type: remote.type || DEFAULT_REMOTE_TYPE,
        entryGlobalName: remote.entryGlobalName || remote.name,
        shareScope: remote.shareScope || DEFAULT_SCOPE
    });
}
var Module = /*#__PURE__*/ function() {
    function Module(ref) {
        var remoteInfo = ref.remoteInfo, host = ref.host;
        _class_call_check._(this, Module);
        this.inited = false;
        this.lib = undefined;
        this.remoteInfo = remoteInfo;
        this.host = host;
    }
    _create_class._(Module, [
        {
            key: "getEntry",
            value: function getEntry() {
                return _async_to_generator._(function*() {
                    if (this.remoteEntryExports) {
                        return this.remoteEntryExports;
                    }
                    var remoteEntryExports;
                    try {
                        remoteEntryExports = yield getRemoteEntry({
                            origin: this.host,
                            remoteInfo: this.remoteInfo,
                            remoteEntryExports: this.remoteEntryExports
                        });
                    } catch (err) {
                        var uniqueKey = getRemoteEntryUniqueKey(this.remoteInfo);
                        remoteEntryExports = yield this.host.loaderHook.lifecycle.loadEntryError.emit({
                            getRemoteEntry,
                            origin: this.host,
                            remoteInfo: this.remoteInfo,
                            remoteEntryExports: this.remoteEntryExports,
                            globalLoading,
                            uniqueKey
                        });
                    }
                    assert(remoteEntryExports, `remoteEntryExports is undefined \n ${sdk.safeToString(this.remoteInfo)}`);
                    this.remoteEntryExports = remoteEntryExports;
                    return this.remoteEntryExports;
                }).call(this);
            }
        },
        {
            key: "get",
            value: // eslint-disable-next-line @typescript-eslint/explicit-module-boundary-types
            function get(id, expose, options, remoteSnapshot) {
                return _async_to_generator._(function*() {
                    var _ref = options || {
                        loadFactory: true
                    }, _ref_loadFactory = _ref.loadFactory, loadFactory = _ref_loadFactory === void 0 ? true : _ref_loadFactory;
                    // Get remoteEntry.js
                    var remoteEntryExports = yield this.getEntry();
                    if (!this.inited) {
                        var localShareScopeMap = this.host.shareScopeMap;
                        var remoteShareScope = this.remoteInfo.shareScope || 'default';
                        if (!localShareScopeMap[remoteShareScope]) {
                            localShareScopeMap[remoteShareScope] = {};
                        }
                        var shareScope = localShareScopeMap[remoteShareScope];
                        var initScope = [];
                        var remoteEntryInitOptions = {
                            version: this.remoteInfo.version || ''
                        };
                        // Help to find host instance
                        Object.defineProperty(remoteEntryInitOptions, 'shareScopeMap', {
                            value: localShareScopeMap,
                            // remoteEntryInitOptions will be traversed and assigned during container init, ,so this attribute is not allowed to be traversed
                            enumerable: false
                        });
                        var initContainerOptions = yield this.host.hooks.lifecycle.beforeInitContainer.emit({
                            shareScope,
                            // @ts-ignore shareScopeMap will be set by Object.defineProperty
                            remoteEntryInitOptions,
                            initScope,
                            remoteInfo: this.remoteInfo,
                            origin: this.host
                        });
                        if (typeof (remoteEntryExports == null ? void 0 : remoteEntryExports.init) === 'undefined') {
                            error(errorCodes.getShortErrorMsg(errorCodes.RUNTIME_002, errorCodes.runtimeDescMap, {
                                remoteName: name,
                                remoteEntryUrl: this.remoteInfo.entry,
                                remoteEntryKey: this.remoteInfo.entryGlobalName
                            }));
                        }
                        yield remoteEntryExports.init(initContainerOptions.shareScope, initContainerOptions.initScope, initContainerOptions.remoteEntryInitOptions);
                        yield this.host.hooks.lifecycle.initContainer.emit(polyfills._extends({}, initContainerOptions, {
                            id,
                            remoteSnapshot,
                            remoteEntryExports
                        }));
                    }
                    this.lib = remoteEntryExports;
                    this.inited = true;
                    var moduleFactory;
                    moduleFactory = yield this.host.loaderHook.lifecycle.getModuleFactory.emit({
                        remoteEntryExports,
                        expose,
                        moduleInfo: this.remoteInfo
                    });
                    // get exposeGetter
                    if (!moduleFactory) {
                        moduleFactory = yield remoteEntryExports.get(expose);
                    }
                    assert(moduleFactory, `${getFMId(this.remoteInfo)} remote don't export ${expose}.`);
                    // keep symbol for module name always one format
                    var symbolName = processModuleAlias(this.remoteInfo.name, expose);
                    var wrapModuleFactory = this.wraperFactory(moduleFactory, symbolName);
                    if (!loadFactory) {
                        return wrapModuleFactory;
                    }
                    var exposeContent = yield wrapModuleFactory();
                    return exposeContent;
                }).call(this);
            }
        },
        {
            key: "wraperFactory",
            value: function wraperFactory(moduleFactory, id) {
                function defineModuleId(res, id) {
                    if (res && typeof res === 'object' && Object.isExtensible(res) && !Object.getOwnPropertyDescriptor(res, Symbol.for('mf_module_id'))) {
                        Object.defineProperty(res, Symbol.for('mf_module_id'), {
                            value: id,
                            enumerable: false
                        });
                    }
                }
                if (moduleFactory instanceof Promise) {
                    return ()=>_async_to_generator._(function*() {
                            var res = yield moduleFactory();
                            // This parameter is used for bridge debugging
                            defineModuleId(res, id);
                            return res;
                        })();
                } else {
                    return ()=>{
                        var res = moduleFactory();
                        // This parameter is used for bridge debugging
                        defineModuleId(res, id);
                        return res;
                    };
                }
            }
        }
    ]);
    return Module;
}();
var SyncHook = /*#__PURE__*/ function() {
    function SyncHook(type) {
        _class_call_check._(this, SyncHook);
        this.type = '';
        this.listeners = new Set();
        if (type) {
            this.type = type;
        }
    }
    _create_class._(SyncHook, [
        {
            key: "on",
            value: function on(fn) {
                if (typeof fn === 'function') {
                    this.listeners.add(fn);
                }
            }
        },
        {
            key: "once",
            value: function once(fn) {
                // eslint-disable-next-line @typescript-eslint/no-this-alias
                var self = this;
                this.on(function wrapper(...args) {
                    self.remove(wrapper);
                    // eslint-disable-next-line prefer-spread
                    return fn.apply(null, args);
                });
            }
        },
        {
            key: "emit",
            value: function emit(...data) {
                var result;
                if (this.listeners.size > 0) {
                    // eslint-disable-next-line prefer-spread
                    this.listeners.forEach((fn)=>{
                        result = fn.apply(void 0, _to_consumable_array._(data));
                    });
                }
                return result;
            }
        },
        {
            key: "remove",
            value: function remove(fn) {
                this.listeners.delete(fn);
            }
        },
        {
            key: "removeAll",
            value: function removeAll() {
                this.listeners.clear();
            }
        }
    ]);
    return SyncHook;
}();
var AsyncHook = /*#__PURE__*/ function(SyncHook) {
    _inherits._(AsyncHook, SyncHook);
    function AsyncHook() {
        _class_call_check._(this, AsyncHook);
        return _call_super._(this, AsyncHook, arguments);
    }
    _create_class._(AsyncHook, [
        {
            key: "emit",
            value: function emit(...data) {
                var result;
                var ls = Array.from(this.listeners);
                if (ls.length > 0) {
                    var i = 0;
                    var call = (prev)=>{
                        if (prev === false) {
                            return false; // Abort process
                        } else if (i < ls.length) {
                            return Promise.resolve(ls[i++].apply(null, data)).then(call);
                        } else {
                            return prev;
                        }
                    };
                    result = call();
                }
                return Promise.resolve(result);
            }
        }
    ]);
    return AsyncHook;
}(SyncHook);
// eslint-disable-next-line @typescript-eslint/explicit-module-boundary-types
function checkReturnData(originalData, returnedData) {
    if (!isObject(returnedData)) {
        return false;
    }
    if (originalData !== returnedData) {
        // eslint-disable-next-line no-restricted-syntax
        for(var key in originalData){
            if (!(key in returnedData)) {
                return false;
            }
        }
    }
    return true;
}
var SyncWaterfallHook = /*#__PURE__*/ function(SyncHook) {
    _inherits._(SyncWaterfallHook, SyncHook);
    function SyncWaterfallHook(type) {
        _class_call_check._(this, SyncWaterfallHook);
        var _this;
        _this = _call_super._(this, SyncWaterfallHook), _this.onerror = error;
        _this.type = type;
        return _this;
    }
    _create_class._(SyncWaterfallHook, [
        {
            key: "emit",
            value: function emit(data) {
                if (!isObject(data)) {
                    error(`The data for the "${this.type}" hook should be an object.`);
                }
                for (var fn of this.listeners){
                    try {
                        var tempData = fn(data);
                        if (checkReturnData(data, tempData)) {
                            data = tempData;
                        } else {
                            this.onerror(`A plugin returned an unacceptable value for the "${this.type}" type.`);
                            break;
                        }
                    } catch (e) {
                        warn(e);
                        this.onerror(e);
                    }
                }
                return data;
            }
        }
    ]);
    return SyncWaterfallHook;
}(SyncHook);
var AsyncWaterfallHook = /*#__PURE__*/ function(SyncHook) {
    _inherits._(AsyncWaterfallHook, SyncHook);
    function AsyncWaterfallHook(type) {
        _class_call_check._(this, AsyncWaterfallHook);
        var _this;
        _this = _call_super._(this, AsyncWaterfallHook), _this.onerror = error;
        _this.type = type;
        return _this;
    }
    _create_class._(AsyncWaterfallHook, [
        {
            key: "emit",
            value: function emit(data) {
                if (!isObject(data)) {
                    error(`The response data for the "${this.type}" hook must be an object.`);
                }
                var ls = Array.from(this.listeners);
                if (ls.length > 0) {
                    var i = 0;
                    var processError = (e)=>{
                        warn(e);
                        this.onerror(e);
                        return data;
                    };
                    var call = (prevData)=>{
                        if (checkReturnData(data, prevData)) {
                            data = prevData;
                            if (i < ls.length) {
                                try {
                                    return Promise.resolve(ls[i++](data)).then(call, processError);
                                } catch (e) {
                                    return processError(e);
                                }
                            }
                        } else {
                            this.onerror(`A plugin returned an incorrect value for the "${this.type}" type.`);
                        }
                        return data;
                    };
                    return Promise.resolve(call(data));
                }
                return Promise.resolve(data);
            }
        }
    ]);
    return AsyncWaterfallHook;
}(SyncHook);
var PluginSystem = /*#__PURE__*/ function() {
    function PluginSystem(lifecycle) {
        _class_call_check._(this, PluginSystem);
        this.registerPlugins = {};
        this.lifecycle = lifecycle;
        this.lifecycleKeys = Object.keys(lifecycle);
    }
    _create_class._(PluginSystem, [
        {
            key: "applyPlugin",
            value: function applyPlugin(plugin) {
                assert(isPlainObject(plugin), 'Plugin configuration is invalid.');
                // The plugin's name is mandatory and must be unique
                var pluginName = plugin.name;
                assert(pluginName, 'A name must be provided by the plugin.');
                if (!this.registerPlugins[pluginName]) {
                    this.registerPlugins[pluginName] = plugin;
                    Object.keys(this.lifecycle).forEach((key)=>{
                        var pluginLife = plugin[key];
                        if (pluginLife) {
                            this.lifecycle[key].on(pluginLife);
                        }
                    });
                }
            }
        },
        {
            key: "removePlugin",
            value: function removePlugin(pluginName) {
                assert(pluginName, 'A name is required.');
                var plugin = this.registerPlugins[pluginName];
                assert(plugin, `The plugin "${pluginName}" is not registered.`);
                Object.keys(plugin).forEach((key)=>{
                    if (key !== 'name') {
                        this.lifecycle[key].remove(plugin[key]);
                    }
                });
            }
        },
        {
            // eslint-disable-next-line @typescript-eslint/no-shadow
            key: "inherit",
            value: function inherit(ref) {
                var lifecycle = ref.lifecycle, registerPlugins = ref.registerPlugins;
                Object.keys(lifecycle).forEach((hookName)=>{
                    assert(!this.lifecycle[hookName], `The hook "${hookName}" has a conflict and cannot be inherited.`);
                    this.lifecycle[hookName] = lifecycle[hookName];
                });
                Object.keys(registerPlugins).forEach((pluginName)=>{
                    assert(!this.registerPlugins[pluginName], `The plugin "${pluginName}" has a conflict and cannot be inherited.`);
                    this.applyPlugin(registerPlugins[pluginName]);
                });
            }
        }
    ]);
    return PluginSystem;
}();
function defaultPreloadArgs(preloadConfig) {
    return polyfills._extends({
        resourceCategory: 'sync',
        share: true,
        depsRemote: true,
        prefetchInterface: false
    }, preloadConfig);
}
function formatPreloadArgs(remotes, preloadArgs) {
    return preloadArgs.map((args)=>{
        var remoteInfo = matchRemote(remotes, args.nameOrAlias);
        assert(remoteInfo, `Unable to preload ${args.nameOrAlias} as it is not included in ${!remoteInfo && sdk.safeToString({
            remoteInfo,
            remotes
        })}`);
        return {
            remote: remoteInfo,
            preloadConfig: defaultPreloadArgs(args)
        };
    });
}
function normalizePreloadExposes(exposes) {
    if (!exposes) {
        return [];
    }
    return exposes.map((expose)=>{
        if (expose === '.') {
            return expose;
        }
        if (expose.startsWith('./')) {
            return expose.replace('./', '');
        }
        return expose;
    });
}
function preloadAssets(remoteInfo, host, assets, ref) {
    var useLinkPreload = ref === void 0 ? true : ref;
    var cssAssets = assets.cssAssets, jsAssetsWithoutEntry = assets.jsAssetsWithoutEntry, entryAssets = assets.entryAssets;
    if (host.options.inBrowser) {
        entryAssets.forEach((asset)=>{
            var moduleInfo = asset.moduleInfo;
            var module = host.moduleCache.get(remoteInfo.name);
            if (module) {
                getRemoteEntry({
                    origin: host,
                    remoteInfo: moduleInfo,
                    remoteEntryExports: module.remoteEntryExports
                });
            } else {
                getRemoteEntry({
                    origin: host,
                    remoteInfo: moduleInfo,
                    remoteEntryExports: undefined
                });
            }
        });
        if (useLinkPreload) {
            var defaultAttrs = {
                rel: 'preload',
                as: 'style'
            };
            cssAssets.forEach((cssUrl)=>{
                var _sdk_createLink = sdk.createLink({
                    url: cssUrl,
                    cb: ()=>{
                    // noop
                    },
                    attrs: defaultAttrs,
                    createLinkHook: (url, attrs)=>{
                        var res = host.loaderHook.lifecycle.createLink.emit({
                            url,
                            attrs
                        });
                        if (res instanceof HTMLLinkElement) {
                            return res;
                        }
                        return;
                    }
                }), cssEl = _sdk_createLink.link, needAttach = _sdk_createLink.needAttach;
                needAttach && document.head.appendChild(cssEl);
            });
        } else {
            var defaultAttrs1 = {
                rel: 'stylesheet',
                type: 'text/css'
            };
            cssAssets.forEach((cssUrl)=>{
                var _sdk_createLink = sdk.createLink({
                    url: cssUrl,
                    cb: ()=>{
                    // noop
                    },
                    attrs: defaultAttrs1,
                    createLinkHook: (url, attrs)=>{
                        var res = host.loaderHook.lifecycle.createLink.emit({
                            url,
                            attrs
                        });
                        if (res instanceof HTMLLinkElement) {
                            return res;
                        }
                        return;
                    },
                    needDeleteLink: false
                }), cssEl = _sdk_createLink.link, needAttach = _sdk_createLink.needAttach;
                needAttach && document.head.appendChild(cssEl);
            });
        }
        if (useLinkPreload) {
            var defaultAttrs2 = {
                rel: 'preload',
                as: 'script'
            };
            jsAssetsWithoutEntry.forEach((jsUrl)=>{
                var _sdk_createLink = sdk.createLink({
                    url: jsUrl,
                    cb: ()=>{
                    // noop
                    },
                    attrs: defaultAttrs2,
                    createLinkHook: (url, attrs)=>{
                        var res = host.loaderHook.lifecycle.createLink.emit({
                            url,
                            attrs
                        });
                        if (res instanceof HTMLLinkElement) {
                            return res;
                        }
                        return;
                    }
                }), linkEl = _sdk_createLink.link, needAttach = _sdk_createLink.needAttach;
                needAttach && document.head.appendChild(linkEl);
            });
        } else {
            var defaultAttrs3 = {
                fetchpriority: 'high',
                type: (remoteInfo == null ? void 0 : remoteInfo.type) === 'module' ? 'module' : 'text/javascript'
            };
            jsAssetsWithoutEntry.forEach((jsUrl)=>{
                var _sdk_createScript = sdk.createScript({
                    url: jsUrl,
                    cb: ()=>{
                    // noop
                    },
                    attrs: defaultAttrs3,
                    createScriptHook: (url, attrs)=>{
                        var res = host.loaderHook.lifecycle.createScript.emit({
                            url,
                            attrs
                        });
                        if (res instanceof HTMLScriptElement) {
                            return res;
                        }
                        return;
                    },
                    needDeleteScript: true
                }), scriptEl = _sdk_createScript.script, needAttach = _sdk_createScript.needAttach;
                needAttach && document.head.appendChild(scriptEl);
            });
        }
    }
}
function assignRemoteInfo(remoteInfo, remoteSnapshot) {
    var remoteEntryInfo = getRemoteEntryInfoFromSnapshot(remoteSnapshot);
    if (!remoteEntryInfo.url) {
        error(`The attribute remoteEntry of ${remoteInfo.name} must not be undefined.`);
    }
    var entryUrl = sdk.getResourceUrl(remoteSnapshot, remoteEntryInfo.url);
    if (!sdk.isBrowserEnv() && !entryUrl.startsWith('http')) {
        entryUrl = `https:${entryUrl}`;
    }
    remoteInfo.type = remoteEntryInfo.type;
    remoteInfo.entryGlobalName = remoteEntryInfo.globalName;
    remoteInfo.entry = entryUrl;
    remoteInfo.version = remoteSnapshot.version;
    remoteInfo.buildVersion = remoteSnapshot.buildVersion;
}
function snapshotPlugin() {
    return {
        name: 'snapshot-plugin',
        afterResolve (args) {
            return _async_to_generator._(function*() {
                var remote = args.remote, pkgNameOrAlias = args.pkgNameOrAlias, expose = args.expose, origin = args.origin, remoteInfo = args.remoteInfo;
                if (!isRemoteInfoWithEntry(remote) || !isPureRemoteEntry(remote)) {
                    var _ref = yield origin.snapshotHandler.loadRemoteSnapshotInfo(remote), remoteSnapshot = _ref.remoteSnapshot, globalSnapshot = _ref.globalSnapshot;
                    assignRemoteInfo(remoteInfo, remoteSnapshot);
                    // preloading assets
                    var preloadOptions = {
                        remote,
                        preloadConfig: {
                            nameOrAlias: pkgNameOrAlias,
                            exposes: [
                                expose
                            ],
                            resourceCategory: 'sync',
                            share: false,
                            depsRemote: false
                        }
                    };
                    var assets = yield origin.remoteHandler.hooks.lifecycle.generatePreloadAssets.emit({
                        origin,
                        preloadOptions,
                        remoteInfo,
                        remote,
                        remoteSnapshot,
                        globalSnapshot
                    });
                    if (assets) {
                        preloadAssets(remoteInfo, origin, assets, false);
                    }
                    return polyfills._extends({}, args, {
                        remoteSnapshot
                    });
                }
                return args;
            })();
        }
    };
}
// name
// name:version
function splitId(id) {
    var splitInfo = id.split(':');
    if (splitInfo.length === 1) {
        return {
            name: splitInfo[0],
            version: undefined
        };
    } else if (splitInfo.length === 2) {
        return {
            name: splitInfo[0],
            version: splitInfo[1]
        };
    } else {
        return {
            name: splitInfo[1],
            version: splitInfo[2]
        };
    }
}
// Traverse all nodes in moduleInfo and traverse the entire snapshot
function traverseModuleInfo(globalSnapshot, remoteInfo, traverse, isRoot, ref, remoteSnapshot) {
    var memo = ref === void 0 ? {} : ref;
    var id = getFMId(remoteInfo);
    var _getInfoWithoutType = getInfoWithoutType(globalSnapshot, id), snapshotValue = _getInfoWithoutType.value;
    var effectiveRemoteSnapshot = remoteSnapshot || snapshotValue;
    if (effectiveRemoteSnapshot && !sdk.isManifestProvider(effectiveRemoteSnapshot)) {
        traverse(effectiveRemoteSnapshot, remoteInfo, isRoot);
        if (effectiveRemoteSnapshot.remotesInfo) {
            var remoteKeys = Object.keys(effectiveRemoteSnapshot.remotesInfo);
            for (var key of remoteKeys){
                if (memo[key]) {
                    continue;
                }
                memo[key] = true;
                var subRemoteInfo = splitId(key);
                var remoteValue = effectiveRemoteSnapshot.remotesInfo[key];
                traverseModuleInfo(globalSnapshot, {
                    name: subRemoteInfo.name,
                    version: remoteValue.matchedVersion
                }, traverse, false, memo, undefined);
            }
        }
    }
}
var isExisted = (type, url)=>{
    return document.querySelector(`${type}[${type === 'link' ? 'href' : 'src'}="${url}"]`);
};
// eslint-disable-next-line max-lines-per-function
function generatePreloadAssets(origin, preloadOptions, remote, globalSnapshot, remoteSnapshot) {
    var cssAssets = [];
    var jsAssets = [];
    var entryAssets = [];
    var loadedSharedJsAssets = new Set();
    var loadedSharedCssAssets = new Set();
    var options = origin.options;
    var rootPreloadConfig = preloadOptions.preloadConfig;
    var depsRemote = rootPreloadConfig.depsRemote;
    var memo = {};
    traverseModuleInfo(globalSnapshot, remote, (moduleInfoSnapshot, remoteInfo, isRoot)=>{
        var preloadConfig;
        if (isRoot) {
            preloadConfig = rootPreloadConfig;
        } else {
            if (Array.isArray(depsRemote)) {
                // eslint-disable-next-line array-callback-return
                var findPreloadConfig = depsRemote.find((remoteConfig)=>{
                    if (remoteConfig.nameOrAlias === remoteInfo.name || remoteConfig.nameOrAlias === remoteInfo.alias) {
                        return true;
                    }
                    return false;
                });
                if (!findPreloadConfig) {
                    return;
                }
                preloadConfig = defaultPreloadArgs(findPreloadConfig);
            } else if (depsRemote === true) {
                preloadConfig = rootPreloadConfig;
            } else {
                return;
            }
        }
        var remoteEntryUrl = sdk.getResourceUrl(moduleInfoSnapshot, getRemoteEntryInfoFromSnapshot(moduleInfoSnapshot).url);
        if (remoteEntryUrl) {
            entryAssets.push({
                name: remoteInfo.name,
                moduleInfo: {
                    name: remoteInfo.name,
                    entry: remoteEntryUrl,
                    type: 'remoteEntryType' in moduleInfoSnapshot ? moduleInfoSnapshot.remoteEntryType : 'global',
                    entryGlobalName: 'globalName' in moduleInfoSnapshot ? moduleInfoSnapshot.globalName : remoteInfo.name,
                    shareScope: '',
                    version: 'version' in moduleInfoSnapshot ? moduleInfoSnapshot.version : undefined
                },
                url: remoteEntryUrl
            });
        }
        var moduleAssetsInfo = 'modules' in moduleInfoSnapshot ? moduleInfoSnapshot.modules : [];
        var normalizedPreloadExposes = normalizePreloadExposes(preloadConfig.exposes);
        if (normalizedPreloadExposes.length && 'modules' in moduleInfoSnapshot) {
            var _moduleInfoSnapshot_modules;
            moduleAssetsInfo = moduleInfoSnapshot == null ? void 0 : (_moduleInfoSnapshot_modules = moduleInfoSnapshot.modules) == null ? void 0 : _moduleInfoSnapshot_modules.reduce((assets, moduleAssetInfo)=>{
                if ((normalizedPreloadExposes == null ? void 0 : normalizedPreloadExposes.indexOf(moduleAssetInfo.moduleName)) !== -1) {
                    assets.push(moduleAssetInfo);
                }
                return assets;
            }, []);
        }
        function handleAssets(assets) {
            var assetsRes = assets.map((asset)=>sdk.getResourceUrl(moduleInfoSnapshot, asset));
            if (preloadConfig.filter) {
                return assetsRes.filter(preloadConfig.filter);
            }
            return assetsRes;
        }
        if (moduleAssetsInfo) {
            var assetsLength = moduleAssetsInfo.length;
            for(var index = 0; index < assetsLength; index++){
                var assetsInfo = moduleAssetsInfo[index];
                var exposeFullPath = `${remoteInfo.name}/${assetsInfo.moduleName}`;
                origin.remoteHandler.hooks.lifecycle.handlePreloadModule.emit({
                    id: assetsInfo.moduleName === '.' ? remoteInfo.name : exposeFullPath,
                    name: remoteInfo.name,
                    remoteSnapshot: moduleInfoSnapshot,
                    preloadConfig,
                    remote: remoteInfo,
                    origin
                });
                var preloaded = getPreloaded(exposeFullPath);
                if (preloaded) {
                    continue;
                }
                if (preloadConfig.resourceCategory === 'all') {
                    var _cssAssets, _cssAssets1, _jsAssets, _jsAssets1;
                    (_cssAssets = cssAssets).push.apply(_cssAssets, _to_consumable_array._(handleAssets(assetsInfo.assets.css.async)));
                    (_cssAssets1 = cssAssets).push.apply(_cssAssets1, _to_consumable_array._(handleAssets(assetsInfo.assets.css.sync)));
                    (_jsAssets = jsAssets).push.apply(_jsAssets, _to_consumable_array._(handleAssets(assetsInfo.assets.js.async)));
                    (_jsAssets1 = jsAssets).push.apply(_jsAssets1, _to_consumable_array._(handleAssets(assetsInfo.assets.js.sync)));
                // eslint-disable-next-line no-constant-condition
                } else if (preloadConfig.resourceCategory = 'sync') {
                    var _cssAssets2, _jsAssets2;
                    (_cssAssets2 = cssAssets).push.apply(_cssAssets2, _to_consumable_array._(handleAssets(assetsInfo.assets.css.sync)));
                    (_jsAssets2 = jsAssets).push.apply(_jsAssets2, _to_consumable_array._(handleAssets(assetsInfo.assets.js.sync)));
                }
                setPreloaded(exposeFullPath);
            }
        }
    }, true, memo, remoteSnapshot);
    if (remoteSnapshot.shared) {
        var collectSharedAssets = (shareInfo, snapshotShared)=>{
            var registeredShared = getRegisteredShare(origin.shareScopeMap, snapshotShared.sharedName, shareInfo, origin.sharedHandler.hooks.lifecycle.resolveShare);
            // If the global share does not exist, or the lib function does not exist, it means that the shared has not been loaded yet and can be preloaded.
            if (registeredShared && typeof registeredShared.lib === 'function') {
                snapshotShared.assets.js.sync.forEach((asset)=>{
                    loadedSharedJsAssets.add(asset);
                });
                snapshotShared.assets.css.sync.forEach((asset)=>{
                    loadedSharedCssAssets.add(asset);
                });
            }
        };
        remoteSnapshot.shared.forEach((shared)=>{
            var _options_shared;
            var shareInfos = (_options_shared = options.shared) == null ? void 0 : _options_shared[shared.sharedName];
            if (!shareInfos) {
                return;
            }
            // if no version, preload all shared
            var sharedOptions = shared.version ? shareInfos.find((s)=>s.version === shared.version) : shareInfos;
            if (!sharedOptions) {
                return;
            }
            var arrayShareInfo = arrayOptions(sharedOptions);
            arrayShareInfo.forEach((s)=>{
                collectSharedAssets(s, shared);
            });
        });
    }
    var needPreloadJsAssets = jsAssets.filter((asset)=>!loadedSharedJsAssets.has(asset) && !isExisted('script', asset));
    var needPreloadCssAssets = cssAssets.filter((asset)=>!loadedSharedCssAssets.has(asset) && !isExisted('link', asset));
    return {
        cssAssets: needPreloadCssAssets,
        jsAssetsWithoutEntry: needPreloadJsAssets,
        entryAssets: entryAssets.filter((entry)=>!isExisted('script', entry.url))
    };
}
var generatePreloadAssetsPlugin = function() {
    return {
        name: 'generate-preload-assets-plugin',
        generatePreloadAssets (args) {
            return _async_to_generator._(function*() {
                var origin = args.origin, preloadOptions = args.preloadOptions, remoteInfo = args.remoteInfo, remote = args.remote, globalSnapshot = args.globalSnapshot, remoteSnapshot = args.remoteSnapshot;
                if (!sdk.isBrowserEnv()) {
                    return {
                        cssAssets: [],
                        jsAssetsWithoutEntry: [],
                        entryAssets: []
                    };
                }
                if (isRemoteInfoWithEntry(remote) && isPureRemoteEntry(remote)) {
                    return {
                        cssAssets: [],
                        jsAssetsWithoutEntry: [],
                        entryAssets: [
                            {
                                name: remote.name,
                                url: remote.entry,
                                moduleInfo: {
                                    name: remoteInfo.name,
                                    entry: remote.entry,
                                    type: remoteInfo.type || 'global',
                                    entryGlobalName: '',
                                    shareScope: ''
                                }
                            }
                        ]
                    };
                }
                assignRemoteInfo(remoteInfo, remoteSnapshot);
                var assets = generatePreloadAssets(origin, preloadOptions, remoteInfo, globalSnapshot, remoteSnapshot);
                return assets;
            })();
        }
    };
};
function getGlobalRemoteInfo(moduleInfo, origin) {
    var hostGlobalSnapshot = getGlobalSnapshotInfoByModuleInfo({
        name: origin.options.name,
        version: origin.options.version
    });
    // get remote detail info from global
    var globalRemoteInfo = hostGlobalSnapshot && 'remotesInfo' in hostGlobalSnapshot && hostGlobalSnapshot.remotesInfo && getInfoWithoutType(hostGlobalSnapshot.remotesInfo, moduleInfo.name).value;
    if (globalRemoteInfo && globalRemoteInfo.matchedVersion) {
        return {
            hostGlobalSnapshot,
            globalSnapshot: getGlobalSnapshot(),
            remoteSnapshot: getGlobalSnapshotInfoByModuleInfo({
                name: moduleInfo.name,
                version: globalRemoteInfo.matchedVersion
            })
        };
    }
    return {
        hostGlobalSnapshot: undefined,
        globalSnapshot: getGlobalSnapshot(),
        remoteSnapshot: getGlobalSnapshotInfoByModuleInfo({
            name: moduleInfo.name,
            version: 'version' in moduleInfo ? moduleInfo.version : undefined
        })
    };
}
var SnapshotHandler = /*#__PURE__*/ function() {
    function SnapshotHandler(HostInstance) {
        _class_call_check._(this, SnapshotHandler);
        this.loadingHostSnapshot = null;
        this.manifestCache = new Map();
        this.hooks = new PluginSystem({
            beforeLoadRemoteSnapshot: new AsyncHook('beforeLoadRemoteSnapshot'),
            loadSnapshot: new AsyncWaterfallHook('loadGlobalSnapshot'),
            loadRemoteSnapshot: new AsyncWaterfallHook('loadRemoteSnapshot'),
            afterLoadSnapshot: new AsyncWaterfallHook('afterLoadSnapshot')
        });
        this.manifestLoading = Global.__FEDERATION__.__MANIFEST_LOADING__;
        this.HostInstance = HostInstance;
        this.loaderHook = HostInstance.loaderHook;
    }
    _create_class._(SnapshotHandler, [
        {
            key: "loadSnapshot",
            value: function loadSnapshot(moduleInfo) {
                return _async_to_generator._(function*() {
                    var options = this.HostInstance.options;
                    var _this_getGlobalRemoteInfo = this.getGlobalRemoteInfo(moduleInfo), hostGlobalSnapshot = _this_getGlobalRemoteInfo.hostGlobalSnapshot, remoteSnapshot = _this_getGlobalRemoteInfo.remoteSnapshot, globalSnapshot = _this_getGlobalRemoteInfo.globalSnapshot;
                    var _ref = yield this.hooks.lifecycle.loadSnapshot.emit({
                        options,
                        moduleInfo,
                        hostGlobalSnapshot,
                        remoteSnapshot,
                        globalSnapshot
                    }), globalRemoteSnapshot = _ref.remoteSnapshot, globalSnapshotRes = _ref.globalSnapshot;
                    return {
                        remoteSnapshot: globalRemoteSnapshot,
                        globalSnapshot: globalSnapshotRes
                    };
                }).call(this);
            }
        },
        {
            key: "loadRemoteSnapshotInfo",
            value: // eslint-disable-next-line max-lines-per-function
            function loadRemoteSnapshotInfo(moduleInfo) {
                return _async_to_generator._(function*() {
                    var options = this.HostInstance.options;
                    yield this.hooks.lifecycle.beforeLoadRemoteSnapshot.emit({
                        options,
                        moduleInfo
                    });
                    var hostSnapshot = getGlobalSnapshotInfoByModuleInfo({
                        name: this.HostInstance.options.name,
                        version: this.HostInstance.options.version
                    });
                    if (!hostSnapshot) {
                        hostSnapshot = {
                            version: this.HostInstance.options.version || '',
                            remoteEntry: '',
                            remotesInfo: {}
                        };
                        addGlobalSnapshot({
                            [this.HostInstance.options.name]: hostSnapshot
                        });
                    }
                    // In dynamic loadRemote scenarios, incomplete remotesInfo delivery may occur. In such cases, the remotesInfo in the host needs to be completed in the snapshot at runtime.
                    // This ensures the snapshot's integrity and helps the chrome plugin correctly identify all producer modules, ensuring that proxyable producer modules will not be missing.
                    if (hostSnapshot && 'remotesInfo' in hostSnapshot && !getInfoWithoutType(hostSnapshot.remotesInfo, moduleInfo.name).value) {
                        if ('version' in moduleInfo || 'entry' in moduleInfo) {
                            hostSnapshot.remotesInfo = polyfills._extends({}, hostSnapshot == null ? void 0 : hostSnapshot.remotesInfo, {
                                [moduleInfo.name]: {
                                    matchedVersion: 'version' in moduleInfo ? moduleInfo.version : moduleInfo.entry
                                }
                            });
                        }
                    }
                    var _this_getGlobalRemoteInfo = this.getGlobalRemoteInfo(moduleInfo), hostGlobalSnapshot = _this_getGlobalRemoteInfo.hostGlobalSnapshot, remoteSnapshot = _this_getGlobalRemoteInfo.remoteSnapshot, globalSnapshot = _this_getGlobalRemoteInfo.globalSnapshot;
                    var _ref = yield this.hooks.lifecycle.loadSnapshot.emit({
                        options,
                        moduleInfo,
                        hostGlobalSnapshot,
                        remoteSnapshot,
                        globalSnapshot
                    }), globalRemoteSnapshot = _ref.remoteSnapshot, globalSnapshotRes = _ref.globalSnapshot;
                    var mSnapshot;
                    var gSnapshot;
                    // global snapshot includes manifest or module info includes manifest
                    if (globalRemoteSnapshot) {
                        if (sdk.isManifestProvider(globalRemoteSnapshot)) {
                            var remoteEntry = sdk.isBrowserEnv() ? globalRemoteSnapshot.remoteEntry : globalRemoteSnapshot.ssrRemoteEntry || globalRemoteSnapshot.remoteEntry || '';
                            var moduleSnapshot = yield this.getManifestJson(remoteEntry, moduleInfo, {});
                            // eslint-disable-next-line @typescript-eslint/no-shadow
                            var globalSnapshotRes1 = setGlobalSnapshotInfoByModuleInfo(polyfills._extends({}, moduleInfo, {
                                // The global remote may be overridden
                                // Therefore, set the snapshot key to the global address of the actual request
                                entry: remoteEntry
                            }), moduleSnapshot);
                            mSnapshot = moduleSnapshot;
                            gSnapshot = globalSnapshotRes1;
                        } else {
                            var _ref1 = yield this.hooks.lifecycle.loadRemoteSnapshot.emit({
                                options: this.HostInstance.options,
                                moduleInfo,
                                remoteSnapshot: globalRemoteSnapshot,
                                from: 'global'
                            }), remoteSnapshotRes = _ref1.remoteSnapshot;
                            mSnapshot = remoteSnapshotRes;
                            gSnapshot = globalSnapshotRes;
                        }
                    } else {
                        if (isRemoteInfoWithEntry(moduleInfo)) {
                            // get from manifest.json and merge remote info from remote server
                            var moduleSnapshot1 = yield this.getManifestJson(moduleInfo.entry, moduleInfo, {});
                            // eslint-disable-next-line @typescript-eslint/no-shadow
                            var globalSnapshotRes2 = setGlobalSnapshotInfoByModuleInfo(moduleInfo, moduleSnapshot1);
                            var _ref2 = yield this.hooks.lifecycle.loadRemoteSnapshot.emit({
                                options: this.HostInstance.options,
                                moduleInfo,
                                remoteSnapshot: moduleSnapshot1,
                                from: 'global'
                            }), remoteSnapshotRes1 = _ref2.remoteSnapshot;
                            mSnapshot = remoteSnapshotRes1;
                            gSnapshot = globalSnapshotRes2;
                        } else {
                            error(errorCodes.getShortErrorMsg(errorCodes.RUNTIME_007, errorCodes.runtimeDescMap, {
                                hostName: moduleInfo.name,
                                hostVersion: moduleInfo.version,
                                globalSnapshot: JSON.stringify(globalSnapshotRes)
                            }));
                        }
                    }
                    yield this.hooks.lifecycle.afterLoadSnapshot.emit({
                        options,
                        moduleInfo,
                        remoteSnapshot: mSnapshot
                    });
                    return {
                        remoteSnapshot: mSnapshot,
                        globalSnapshot: gSnapshot
                    };
                }).call(this);
            }
        },
        {
            key: "getGlobalRemoteInfo",
            value: function getGlobalRemoteInfo1(moduleInfo) {
                return getGlobalRemoteInfo(moduleInfo, this.HostInstance);
            }
        },
        {
            key: "getManifestJson",
            value: function getManifestJson(manifestUrl, moduleInfo, extraOptions) {
                return _async_to_generator._(function*() {
                    var getManifest = ()=>_async_to_generator._(function*() {
                            var manifestJson = this.manifestCache.get(manifestUrl);
                            if (manifestJson) {
                                return manifestJson;
                            }
                            try {
                                var res = yield this.loaderHook.lifecycle.fetch.emit(manifestUrl, {});
                                if (!res || !(res instanceof Response)) {
                                    res = yield fetch(manifestUrl, {});
                                }
                                manifestJson = yield res.json();
                            } catch (err) {
                                manifestJson = yield this.HostInstance.remoteHandler.hooks.lifecycle.errorLoadRemote.emit({
                                    id: manifestUrl,
                                    error: err,
                                    from: 'runtime',
                                    lifecycle: 'afterResolve',
                                    origin: this.HostInstance
                                });
                                if (!manifestJson) {
                                    delete this.manifestLoading[manifestUrl];
                                    error(errorCodes.getShortErrorMsg(errorCodes.RUNTIME_003, errorCodes.runtimeDescMap, {
                                        manifestUrl,
                                        moduleName: moduleInfo.name
                                    }, `${err}`));
                                }
                            }
                            assert(manifestJson.metaData && manifestJson.exposes && manifestJson.shared, `${manifestUrl} is not a federation manifest`);
                            this.manifestCache.set(manifestUrl, manifestJson);
                            return manifestJson;
                        }).call(this);
                    var asyncLoadProcess = ()=>_async_to_generator._(function*() {
                            var manifestJson = yield getManifest();
                            var remoteSnapshot = sdk.generateSnapshotFromManifest(manifestJson, {
                                version: manifestUrl
                            });
                            var _ref = yield this.hooks.lifecycle.loadRemoteSnapshot.emit({
                                options: this.HostInstance.options,
                                moduleInfo,
                                manifestJson,
                                remoteSnapshot,
                                manifestUrl,
                                from: 'manifest'
                            }), remoteSnapshotRes = _ref.remoteSnapshot;
                            return remoteSnapshotRes;
                        }).call(this);
                    if (!this.manifestLoading[manifestUrl]) {
                        this.manifestLoading[manifestUrl] = asyncLoadProcess().then((res)=>res);
                    }
                    return this.manifestLoading[manifestUrl];
                }).call(this);
            }
        }
    ]);
    return SnapshotHandler;
}();
var SharedHandler = /*#__PURE__*/ function() {
    function SharedHandler(host) {
        _class_call_check._(this, SharedHandler);
        this.hooks = new PluginSystem({
            afterResolve: new AsyncWaterfallHook('afterResolve'),
            beforeLoadShare: new AsyncWaterfallHook('beforeLoadShare'),
            // not used yet
            loadShare: new AsyncHook(),
            resolveShare: new SyncWaterfallHook('resolveShare'),
            // maybe will change, temporarily for internal use only
            initContainerShareScopeMap: new SyncWaterfallHook('initContainerShareScopeMap')
        });
        this.host = host;
        this.shareScopeMap = {};
        this.initTokens = {};
        this._setGlobalShareScopeMap(host.options);
    }
    _create_class._(SharedHandler, [
        {
            // register shared in shareScopeMap
            key: "registerShared",
            value: function registerShared(globalOptions, userOptions) {
                var _formatShareConfigs = formatShareConfigs(globalOptions, userOptions), shareInfos = _formatShareConfigs.shareInfos, shared = _formatShareConfigs.shared;
                var sharedKeys = Object.keys(shareInfos);
                sharedKeys.forEach((sharedKey)=>{
                    var sharedVals = shareInfos[sharedKey];
                    sharedVals.forEach((sharedVal)=>{
                        var registeredShared = getRegisteredShare(this.shareScopeMap, sharedKey, sharedVal, this.hooks.lifecycle.resolveShare);
                        if (!registeredShared && sharedVal && sharedVal.lib) {
                            this.setShared({
                                pkgName: sharedKey,
                                lib: sharedVal.lib,
                                get: sharedVal.get,
                                loaded: true,
                                shared: sharedVal,
                                from: userOptions.name
                            });
                        }
                    });
                });
                return {
                    shareInfos,
                    shared
                };
            }
        },
        {
            key: "loadShare",
            value: function loadShare(pkgName, extraOptions) {
                return _async_to_generator._(function*() {
                    var host = this.host;
                    // This function performs the following steps:
                    // 1. Checks if the currently loaded share already exists, if not, it throws an error
                    // 2. Searches globally for a matching share, if found, it uses it directly
                    // 3. If not found, it retrieves it from the current share and stores the obtained share globally.
                    var shareInfo = getTargetSharedOptions({
                        pkgName,
                        extraOptions,
                        shareInfos: host.options.shared
                    });
                    if (shareInfo == null ? void 0 : shareInfo.scope) {
                        yield Promise.all(shareInfo.scope.map((shareScope)=>_async_to_generator._(function*() {
                                yield Promise.all(this.initializeSharing(shareScope, {
                                    strategy: shareInfo.strategy
                                }));
                                return;
                            }).call(this)));
                    }
                    var loadShareRes = yield this.hooks.lifecycle.beforeLoadShare.emit({
                        pkgName,
                        shareInfo,
                        shared: host.options.shared,
                        origin: host
                    });
                    var shareInfoRes = loadShareRes.shareInfo;
                    // Assert that shareInfoRes exists, if not, throw an error
                    assert(shareInfoRes, `Cannot find ${pkgName} Share in the ${host.options.name}. Please ensure that the ${pkgName} Share parameters have been injected`);
                    // Retrieve from cache
                    var registeredShared = getRegisteredShare(this.shareScopeMap, pkgName, shareInfoRes, this.hooks.lifecycle.resolveShare);
                    var addUseIn = (shared)=>{
                        if (!shared.useIn) {
                            shared.useIn = [];
                        }
                        addUniqueItem(shared.useIn, host.options.name);
                    };
                    if (registeredShared && registeredShared.lib) {
                        addUseIn(registeredShared);
                        return registeredShared.lib;
                    } else if (registeredShared && registeredShared.loading && !registeredShared.loaded) {
                        var factory = yield registeredShared.loading;
                        registeredShared.loaded = true;
                        if (!registeredShared.lib) {
                            registeredShared.lib = factory;
                        }
                        addUseIn(registeredShared);
                        return factory;
                    } else if (registeredShared) {
                        var asyncLoadProcess = ()=>_async_to_generator._(function*() {
                                var factory = yield registeredShared.get();
                                shareInfoRes.lib = factory;
                                shareInfoRes.loaded = true;
                                addUseIn(shareInfoRes);
                                var gShared = getRegisteredShare(this.shareScopeMap, pkgName, shareInfoRes, this.hooks.lifecycle.resolveShare);
                                if (gShared) {
                                    gShared.lib = factory;
                                    gShared.loaded = true;
                                }
                                return factory;
                            }).call(this);
                        var loading = asyncLoadProcess();
                        this.setShared({
                            pkgName,
                            loaded: false,
                            shared: registeredShared,
                            from: host.options.name,
                            lib: null,
                            loading
                        });
                        return loading;
                    } else {
                        if (extraOptions == null ? void 0 : extraOptions.customShareInfo) {
                            return false;
                        }
                        var asyncLoadProcess1 = ()=>_async_to_generator._(function*() {
                                var factory = yield shareInfoRes.get();
                                shareInfoRes.lib = factory;
                                shareInfoRes.loaded = true;
                                addUseIn(shareInfoRes);
                                var gShared = getRegisteredShare(this.shareScopeMap, pkgName, shareInfoRes, this.hooks.lifecycle.resolveShare);
                                if (gShared) {
                                    gShared.lib = factory;
                                    gShared.loaded = true;
                                }
                                return factory;
                            }).call(this);
                        var loading1 = asyncLoadProcess1();
                        this.setShared({
                            pkgName,
                            loaded: false,
                            shared: shareInfoRes,
                            from: host.options.name,
                            lib: null,
                            loading: loading1
                        });
                        return loading1;
                    }
                }).call(this);
            }
        },
        {
            /**
   * This function initializes the sharing sequence (executed only once per share scope).
   * It accepts one argument, the name of the share scope.
   * If the share scope does not exist, it creates one.
   */ // eslint-disable-next-line @typescript-eslint/member-ordering
            key: "initializeSharing",
            value: function initializeSharing(ref, extraOptions) {
                var shareScopeName = ref === void 0 ? DEFAULT_SCOPE : ref;
                var host = this.host;
                var from = extraOptions == null ? void 0 : extraOptions.from;
                var strategy = extraOptions == null ? void 0 : extraOptions.strategy;
                var initScope = extraOptions == null ? void 0 : extraOptions.initScope;
                var promises = [];
                if (from !== 'build') {
                    var initTokens = this.initTokens;
                    if (!initScope) initScope = [];
                    var initToken = initTokens[shareScopeName];
                    if (!initToken) initToken = initTokens[shareScopeName] = {
                        from: this.host.name
                    };
                    if (initScope.indexOf(initToken) >= 0) return promises;
                    initScope.push(initToken);
                }
                var shareScope = this.shareScopeMap;
                var hostName = host.options.name;
                // Creates a new share scope if necessary
                if (!shareScope[shareScopeName]) {
                    shareScope[shareScopeName] = {};
                }
                // Executes all initialization snippets from all accessible modules
                var scope = shareScope[shareScopeName];
                var register = (name1, shared)=>{
                    var _activeVersion_shareConfig;
                    var version = shared.version, eager = shared.eager;
                    scope[name1] = scope[name1] || {};
                    var versions = scope[name1];
                    var activeVersion = versions[version];
                    var activeVersionEager = Boolean(activeVersion && (activeVersion.eager || ((_activeVersion_shareConfig = activeVersion.shareConfig) == null ? void 0 : _activeVersion_shareConfig.eager)));
                    if (!activeVersion || activeVersion.strategy !== 'loaded-first' && !activeVersion.loaded && (Boolean(!eager) !== !activeVersionEager ? eager : hostName > activeVersion.from)) {
                        versions[version] = shared;
                    }
                };
                var initFn = (mod)=>mod && mod.init && mod.init(shareScope[shareScopeName], initScope);
                var initRemoteModule = (key)=>_async_to_generator._(function*() {
                        var module = (yield host.remoteHandler.getRemoteModuleAndOptions({
                            id: key
                        })).module;
                        if (module.getEntry) {
                            var remoteEntryExports;
                            try {
                                remoteEntryExports = yield module.getEntry();
                            } catch (error) {
                                remoteEntryExports = yield host.remoteHandler.hooks.lifecycle.errorLoadRemote.emit({
                                    id: key,
                                    error,
                                    from: 'runtime',
                                    lifecycle: 'beforeLoadShare',
                                    origin: host
                                });
                            }
                            if (!module.inited) {
                                yield initFn(remoteEntryExports);
                                module.inited = true;
                            }
                        }
                    })();
                Object.keys(host.options.shared).forEach((shareName)=>{
                    var sharedArr = host.options.shared[shareName];
                    sharedArr.forEach((shared)=>{
                        if (shared.scope.includes(shareScopeName)) {
                            register(shareName, shared);
                        }
                    });
                });
                // TODO: strategy==='version-first' need to be removed in the future
                if (host.options.shareStrategy === 'version-first' || strategy === 'version-first') {
                    host.options.remotes.forEach((remote)=>{
                        if (remote.shareScope === shareScopeName) {
                            promises.push(initRemoteModule(remote.name));
                        }
                    });
                }
                return promises;
            }
        },
        {
            // The lib function will only be available if the shared set by eager or runtime init is set or the shared is successfully loaded.
            // 1. If the loaded shared already exists globally, then it will be reused
            // 2. If lib exists in local shared, it will be used directly
            // 3. If the local get returns something other than Promise, then it will be used directly
            key: "loadShareSync",
            value: function loadShareSync(pkgName, extraOptions) {
                var host = this.host;
                var shareInfo = getTargetSharedOptions({
                    pkgName,
                    extraOptions,
                    shareInfos: host.options.shared
                });
                if (shareInfo == null ? void 0 : shareInfo.scope) {
                    shareInfo.scope.forEach((shareScope)=>{
                        this.initializeSharing(shareScope, {
                            strategy: shareInfo.strategy
                        });
                    });
                }
                var registeredShared = getRegisteredShare(this.shareScopeMap, pkgName, shareInfo, this.hooks.lifecycle.resolveShare);
                var addUseIn = (shared)=>{
                    if (!shared.useIn) {
                        shared.useIn = [];
                    }
                    addUniqueItem(shared.useIn, host.options.name);
                };
                if (registeredShared) {
                    if (typeof registeredShared.lib === 'function') {
                        addUseIn(registeredShared);
                        if (!registeredShared.loaded) {
                            registeredShared.loaded = true;
                            if (registeredShared.from === host.options.name) {
                                shareInfo.loaded = true;
                            }
                        }
                        return registeredShared.lib;
                    }
                    if (typeof registeredShared.get === 'function') {
                        var module = registeredShared.get();
                        if (!(module instanceof Promise)) {
                            addUseIn(registeredShared);
                            this.setShared({
                                pkgName,
                                loaded: true,
                                from: host.options.name,
                                lib: module,
                                shared: registeredShared
                            });
                            return module;
                        }
                    }
                }
                if (shareInfo.lib) {
                    if (!shareInfo.loaded) {
                        shareInfo.loaded = true;
                    }
                    return shareInfo.lib;
                }
                if (shareInfo.get) {
                    var module1 = shareInfo.get();
                    if (module1 instanceof Promise) {
                        var errorCode = (extraOptions == null ? void 0 : extraOptions.from) === 'build' ? errorCodes.RUNTIME_005 : errorCodes.RUNTIME_006;
                        throw new Error(errorCodes.getShortErrorMsg(errorCode, errorCodes.runtimeDescMap, {
                            hostName: host.options.name,
                            sharedPkgName: pkgName
                        }));
                    }
                    shareInfo.lib = module1;
                    this.setShared({
                        pkgName,
                        loaded: true,
                        from: host.options.name,
                        lib: shareInfo.lib,
                        shared: shareInfo
                    });
                    return shareInfo.lib;
                }
                throw new Error(errorCodes.getShortErrorMsg(errorCodes.RUNTIME_006, errorCodes.runtimeDescMap, {
                    hostName: host.options.name,
                    sharedPkgName: pkgName
                }));
            }
        },
        {
            key: "initShareScopeMap",
            value: function initShareScopeMap(scopeName, shareScope, ref) {
                var extraOptions = ref === void 0 ? {} : ref;
                var host = this.host;
                this.shareScopeMap[scopeName] = shareScope;
                this.hooks.lifecycle.initContainerShareScopeMap.emit({
                    shareScope,
                    options: host.options,
                    origin: host,
                    scopeName,
                    hostShareScopeMap: extraOptions.hostShareScopeMap
                });
            }
        },
        {
            key: "setShared",
            value: function setShared(ref) {
                var pkgName = ref.pkgName, shared = ref.shared, from = ref.from, lib = ref.lib, loading = ref.loading, loaded = ref.loaded, get = ref.get;
                var version = shared.version, _shared_scope = shared.scope, scope = _shared_scope === void 0 ? 'default' : _shared_scope, shareInfo = polyfills._object_without_properties_loose(shared, [
                    "version",
                    "scope"
                ]);
                var scopes = Array.isArray(scope) ? scope : [
                    scope
                ];
                scopes.forEach((sc)=>{
                    if (!this.shareScopeMap[sc]) {
                        this.shareScopeMap[sc] = {};
                    }
                    if (!this.shareScopeMap[sc][pkgName]) {
                        this.shareScopeMap[sc][pkgName] = {};
                    }
                    if (!this.shareScopeMap[sc][pkgName][version]) {
                        this.shareScopeMap[sc][pkgName][version] = polyfills._extends({
                            version,
                            scope: [
                                'default'
                            ]
                        }, shareInfo, {
                            lib,
                            loaded,
                            loading
                        });
                        if (get) {
                            this.shareScopeMap[sc][pkgName][version].get = get;
                        }
                        return;
                    }
                    var registeredShared = this.shareScopeMap[sc][pkgName][version];
                    if (loading && !registeredShared.loading) {
                        registeredShared.loading = loading;
                    }
                });
            }
        },
        {
            key: "_setGlobalShareScopeMap",
            value: function _setGlobalShareScopeMap(hostOptions) {
                var globalShareScopeMap = getGlobalShareScope();
                var identifier = hostOptions.id || hostOptions.name;
                if (identifier && !globalShareScopeMap[identifier]) {
                    globalShareScopeMap[identifier] = this.shareScopeMap;
                }
            }
        }
    ]);
    return SharedHandler;
}();
var RemoteHandler = /*#__PURE__*/ function() {
    function RemoteHandler(host) {
        _class_call_check._(this, RemoteHandler);
        this.hooks = new PluginSystem({
            beforeRegisterRemote: new SyncWaterfallHook('beforeRegisterRemote'),
            registerRemote: new SyncWaterfallHook('registerRemote'),
            beforeRequest: new AsyncWaterfallHook('beforeRequest'),
            onLoad: new AsyncHook('onLoad'),
            handlePreloadModule: new SyncHook('handlePreloadModule'),
            errorLoadRemote: new AsyncHook('errorLoadRemote'),
            beforePreloadRemote: new AsyncHook('beforePreloadRemote'),
            generatePreloadAssets: new AsyncHook('generatePreloadAssets'),
            // not used yet
            afterPreloadRemote: new AsyncHook(),
            loadEntry: new AsyncHook()
        });
        this.host = host;
        this.idToRemoteMap = {};
    }
    _create_class._(RemoteHandler, [
        {
            key: "formatAndRegisterRemote",
            value: function formatAndRegisterRemote(globalOptions, userOptions) {
                var userRemotes = userOptions.remotes || [];
                return userRemotes.reduce((res, remote)=>{
                    this.registerRemote(remote, res, {
                        force: false
                    });
                    return res;
                }, globalOptions.remotes);
            }
        },
        {
            key: "setIdToRemoteMap",
            value: function setIdToRemoteMap(id, remoteMatchInfo) {
                var remote = remoteMatchInfo.remote, expose = remoteMatchInfo.expose;
                var name1 = remote.name, alias = remote.alias;
                this.idToRemoteMap[id] = {
                    name: remote.name,
                    expose
                };
                if (alias && id.startsWith(name1)) {
                    var idWithAlias = id.replace(name1, alias);
                    this.idToRemoteMap[idWithAlias] = {
                        name: remote.name,
                        expose
                    };
                    return;
                }
                if (alias && id.startsWith(alias)) {
                    var idWithName = id.replace(alias, name1);
                    this.idToRemoteMap[idWithName] = {
                        name: remote.name,
                        expose
                    };
                }
            }
        },
        {
            key: "loadRemote",
            value: // eslint-disable-next-line max-lines-per-function
            // eslint-disable-next-line @typescript-eslint/member-ordering
            function loadRemote(id, options) {
                return _async_to_generator._(function*() {
                    var host = this.host;
                    try {
                        var _ref = options || {
                            loadFactory: true
                        }, _ref_loadFactory = _ref.loadFactory, loadFactory = _ref_loadFactory === void 0 ? true : _ref_loadFactory;
                        // 1. Validate the parameters of the retrieved module. There are two module request methods: pkgName + expose and alias + expose.
                        // 2. Request the snapshot information of the current host and globally store the obtained snapshot information. The retrieved module information is partially offline and partially online. The online module information will retrieve the modules used online.
                        // 3. Retrieve the detailed information of the current module from global (remoteEntry address, expose resource address)
                        // 4. After retrieving remoteEntry, call the init of the module, and then retrieve the exported content of the module through get
                        // id: pkgName(@federation/app1) + expose(button) = @federation/app1/button
                        // id: alias(app1) + expose(button) = app1/button
                        // id: alias(app1/utils) + expose(loadash/sort) = app1/utils/loadash/sort
                        var _ref1 = yield this.getRemoteModuleAndOptions({
                            id
                        }), module = _ref1.module, moduleOptions = _ref1.moduleOptions, remoteMatchInfo = _ref1.remoteMatchInfo;
                        var pkgNameOrAlias = remoteMatchInfo.pkgNameOrAlias, remote = remoteMatchInfo.remote, expose = remoteMatchInfo.expose, idRes = remoteMatchInfo.id, remoteSnapshot = remoteMatchInfo.remoteSnapshot;
                        var moduleOrFactory = yield module.get(idRes, expose, options, remoteSnapshot);
                        var moduleWrapper = yield this.hooks.lifecycle.onLoad.emit({
                            id: idRes,
                            pkgNameOrAlias,
                            expose,
                            exposeModule: loadFactory ? moduleOrFactory : undefined,
                            exposeModuleFactory: loadFactory ? undefined : moduleOrFactory,
                            remote,
                            options: moduleOptions,
                            moduleInstance: module,
                            origin: host
                        });
                        this.setIdToRemoteMap(id, remoteMatchInfo);
                        if (typeof moduleWrapper === 'function') {
                            return moduleWrapper;
                        }
                        return moduleOrFactory;
                    } catch (error) {
                        var _ref2 = options || {
                            from: 'runtime'
                        }, _ref_from = _ref2.from, from = _ref_from === void 0 ? 'runtime' : _ref_from;
                        var failOver = yield this.hooks.lifecycle.errorLoadRemote.emit({
                            id,
                            error,
                            from,
                            lifecycle: 'onLoad',
                            origin: host
                        });
                        if (!failOver) {
                            throw error;
                        }
                        return failOver;
                    }
                }).call(this);
            }
        },
        {
            key: "preloadRemote",
            value: // eslint-disable-next-line @typescript-eslint/member-ordering
            function preloadRemote(preloadOptions) {
                return _async_to_generator._(function*() {
                    var host = this.host;
                    yield this.hooks.lifecycle.beforePreloadRemote.emit({
                        preloadOps: preloadOptions,
                        options: host.options,
                        origin: host
                    });
                    var preloadOps = formatPreloadArgs(host.options.remotes, preloadOptions);
                    yield Promise.all(preloadOps.map((ops)=>_async_to_generator._(function*() {
                            var remote = ops.remote;
                            var remoteInfo = getRemoteInfo(remote);
                            var _ref = yield host.snapshotHandler.loadRemoteSnapshotInfo(remote), globalSnapshot = _ref.globalSnapshot, remoteSnapshot = _ref.remoteSnapshot;
                            var assets = yield this.hooks.lifecycle.generatePreloadAssets.emit({
                                origin: host,
                                preloadOptions: ops,
                                remote,
                                remoteInfo,
                                globalSnapshot,
                                remoteSnapshot
                            });
                            if (!assets) {
                                return;
                            }
                            preloadAssets(remoteInfo, host, assets);
                        }).call(this)));
                }).call(this);
            }
        },
        {
            key: "registerRemotes",
            value: function registerRemotes(remotes, options) {
                var host = this.host;
                remotes.forEach((remote)=>{
                    this.registerRemote(remote, host.options.remotes, {
                        force: options == null ? void 0 : options.force
                    });
                });
            }
        },
        {
            key: "getRemoteModuleAndOptions",
            value: function getRemoteModuleAndOptions(options) {
                return _async_to_generator._(function*() {
                    var host = this.host;
                    var id = options.id;
                    var loadRemoteArgs;
                    try {
                        loadRemoteArgs = yield this.hooks.lifecycle.beforeRequest.emit({
                            id,
                            options: host.options,
                            origin: host
                        });
                    } catch (error) {
                        loadRemoteArgs = yield this.hooks.lifecycle.errorLoadRemote.emit({
                            id,
                            options: host.options,
                            origin: host,
                            from: 'runtime',
                            error,
                            lifecycle: 'beforeRequest'
                        });
                        if (!loadRemoteArgs) {
                            throw error;
                        }
                    }
                    var idRes = loadRemoteArgs.id;
                    var remoteSplitInfo = matchRemoteWithNameAndExpose(host.options.remotes, idRes);
                    assert(remoteSplitInfo, errorCodes.getShortErrorMsg(errorCodes.RUNTIME_004, errorCodes.runtimeDescMap, {
                        hostName: host.options.name,
                        requestId: idRes
                    }));
                    var rawRemote = remoteSplitInfo.remote;
                    var remoteInfo = getRemoteInfo(rawRemote);
                    var matchInfo = yield host.sharedHandler.hooks.lifecycle.afterResolve.emit(polyfills._extends({
                        id: idRes
                    }, remoteSplitInfo, {
                        options: host.options,
                        origin: host,
                        remoteInfo
                    }));
                    var remote = matchInfo.remote, expose = matchInfo.expose;
                    assert(remote && expose, `The 'beforeRequest' hook was executed, but it failed to return the correct 'remote' and 'expose' values while loading ${idRes}.`);
                    var module = host.moduleCache.get(remote.name);
                    var moduleOptions = {
                        host: host,
                        remoteInfo
                    };
                    if (!module) {
                        module = new Module(moduleOptions);
                        host.moduleCache.set(remote.name, module);
                    }
                    return {
                        module,
                        moduleOptions,
                        remoteMatchInfo: matchInfo
                    };
                }).call(this);
            }
        },
        {
            key: "registerRemote",
            value: function registerRemote(remote, targetRemotes, options) {
                var host = this.host;
                var normalizeRemote = ()=>{
                    if (remote.alias) {
                        // Validate if alias equals the prefix of remote.name and remote.alias, if so, throw an error
                        // As multi-level path references cannot guarantee unique names, alias being a prefix of remote.name is not supported
                        var findEqual = targetRemotes.find((item)=>{
                            var _item_alias;
                            return remote.alias && (item.name.startsWith(remote.alias) || ((_item_alias = item.alias) == null ? void 0 : _item_alias.startsWith(remote.alias)));
                        });
                        assert(!findEqual, `The alias ${remote.alias} of remote ${remote.name} is not allowed to be the prefix of ${findEqual && findEqual.name} name or alias`);
                    }
                    // Set the remote entry to a complete path
                    if ('entry' in remote) {
                        if (sdk.isBrowserEnv() && !remote.entry.startsWith('http')) {
                            remote.entry = new URL(remote.entry, window.location.origin).href;
                        }
                    }
                    if (!remote.shareScope) {
                        remote.shareScope = DEFAULT_SCOPE;
                    }
                    if (!remote.type) {
                        remote.type = DEFAULT_REMOTE_TYPE;
                    }
                };
                this.hooks.lifecycle.beforeRegisterRemote.emit({
                    remote,
                    origin: host
                });
                var registeredRemote = targetRemotes.find((item)=>item.name === remote.name);
                if (!registeredRemote) {
                    normalizeRemote();
                    targetRemotes.push(remote);
                    this.hooks.lifecycle.registerRemote.emit({
                        remote,
                        origin: host
                    });
                } else {
                    var messages = [
                        `The remote "${remote.name}" is already registered.`,
                        'Please note that overriding it may cause unexpected errors.'
                    ];
                    if (options == null ? void 0 : options.force) {
                        // remove registered remote
                        this.removeRemote(registeredRemote);
                        normalizeRemote();
                        targetRemotes.push(remote);
                        this.hooks.lifecycle.registerRemote.emit({
                            remote,
                            origin: host
                        });
                        sdk.warn(messages.join(' '));
                    }
                }
            }
        },
        {
            key: "removeRemote",
            value: function removeRemote(remote) {
                try {
                    var host = this.host;
                    var name1 = remote.name;
                    var remoteIndex = host.options.remotes.findIndex((item)=>item.name === name1);
                    if (remoteIndex !== -1) {
                        host.options.remotes.splice(remoteIndex, 1);
                    }
                    var loadedModule = host.moduleCache.get(remote.name);
                    if (loadedModule) {
                        var remoteInfo = loadedModule.remoteInfo;
                        var key = remoteInfo.entryGlobalName;
                        if (CurrentGlobal[key]) {
                            var _Object_getOwnPropertyDescriptor;
                            if ((_Object_getOwnPropertyDescriptor = Object.getOwnPropertyDescriptor(CurrentGlobal, key)) == null ? void 0 : _Object_getOwnPropertyDescriptor.configurable) {
                                delete CurrentGlobal[key];
                            } else {
                                // @ts-ignore
                                CurrentGlobal[key] = undefined;
                            }
                        }
                        var remoteEntryUniqueKey = getRemoteEntryUniqueKey(loadedModule.remoteInfo);
                        if (globalLoading[remoteEntryUniqueKey]) {
                            delete globalLoading[remoteEntryUniqueKey];
                        }
                        host.snapshotHandler.manifestCache.delete(remoteInfo.entry);
                        // delete unloaded shared and instance
                        var remoteInsId = remoteInfo.buildVersion ? sdk.composeKeyWithSeparator(remoteInfo.name, remoteInfo.buildVersion) : remoteInfo.name;
                        var remoteInsIndex = CurrentGlobal.__FEDERATION__.__INSTANCES__.findIndex((ins)=>{
                            if (remoteInfo.buildVersion) {
                                return ins.options.id === remoteInsId;
                            } else {
                                return ins.name === remoteInsId;
                            }
                        });
                        if (remoteInsIndex !== -1) {
                            var remoteIns = CurrentGlobal.__FEDERATION__.__INSTANCES__[remoteInsIndex];
                            remoteInsId = remoteIns.options.id || remoteInsId;
                            var globalShareScopeMap = getGlobalShareScope();
                            var isAllSharedNotUsed = true;
                            var needDeleteKeys = [];
                            Object.keys(globalShareScopeMap).forEach((instId)=>{
                                var shareScopeMap = globalShareScopeMap[instId];
                                shareScopeMap && Object.keys(shareScopeMap).forEach((shareScope)=>{
                                    var shareScopeVal = shareScopeMap[shareScope];
                                    shareScopeVal && Object.keys(shareScopeVal).forEach((shareName)=>{
                                        var sharedPkgs = shareScopeVal[shareName];
                                        sharedPkgs && Object.keys(sharedPkgs).forEach((shareVersion)=>{
                                            var shared = sharedPkgs[shareVersion];
                                            if (shared && typeof shared === 'object' && shared.from === remoteInfo.name) {
                                                if (shared.loaded || shared.loading) {
                                                    shared.useIn = shared.useIn.filter((usedHostName)=>usedHostName !== remoteInfo.name);
                                                    if (shared.useIn.length) {
                                                        isAllSharedNotUsed = false;
                                                    } else {
                                                        needDeleteKeys.push([
                                                            instId,
                                                            shareScope,
                                                            shareName,
                                                            shareVersion
                                                        ]);
                                                    }
                                                } else {
                                                    needDeleteKeys.push([
                                                        instId,
                                                        shareScope,
                                                        shareName,
                                                        shareVersion
                                                    ]);
                                                }
                                            }
                                        });
                                    });
                                });
                            });
                            if (isAllSharedNotUsed) {
                                remoteIns.shareScopeMap = {};
                                delete globalShareScopeMap[remoteInsId];
                            }
                            needDeleteKeys.forEach((ref)=>{
                                var _ref = _sliced_to_array._(ref, 4), insId = _ref[0], shareScope = _ref[1], shareName = _ref[2], shareVersion = _ref[3];
                                var _globalShareScopeMap_insId_shareScope_shareName, _globalShareScopeMap_insId_shareScope, _globalShareScopeMap_insId;
                                (_globalShareScopeMap_insId = globalShareScopeMap[insId]) == null ? true : (_globalShareScopeMap_insId_shareScope = _globalShareScopeMap_insId[shareScope]) == null ? true : (_globalShareScopeMap_insId_shareScope_shareName = _globalShareScopeMap_insId_shareScope[shareName]) == null ? true : delete _globalShareScopeMap_insId_shareScope_shareName[shareVersion];
                            });
                            CurrentGlobal.__FEDERATION__.__INSTANCES__.splice(remoteInsIndex, 1);
                        }
                        var hostGlobalSnapshot = getGlobalRemoteInfo(remote, host).hostGlobalSnapshot;
                        if (hostGlobalSnapshot) {
                            var remoteKey = hostGlobalSnapshot && 'remotesInfo' in hostGlobalSnapshot && hostGlobalSnapshot.remotesInfo && getInfoWithoutType(hostGlobalSnapshot.remotesInfo, remote.name).key;
                            if (remoteKey) {
                                delete hostGlobalSnapshot.remotesInfo[remoteKey];
                                if (Boolean(Global.__FEDERATION__.__MANIFEST_LOADING__[remoteKey])) {
                                    delete Global.__FEDERATION__.__MANIFEST_LOADING__[remoteKey];
                                }
                            }
                        }
                        host.moduleCache.delete(remote.name);
                    }
                } catch (err) {
                    logger.log('removeRemote fail: ', err);
                }
            }
        }
    ]);
    return RemoteHandler;
}();
var FederationHost = /*#__PURE__*/ function() {
    function FederationHost(userOptions) {
        _class_call_check._(this, FederationHost);
        this.hooks = new PluginSystem({
            beforeInit: new SyncWaterfallHook('beforeInit'),
            init: new SyncHook(),
            // maybe will change, temporarily for internal use only
            beforeInitContainer: new AsyncWaterfallHook('beforeInitContainer'),
            // maybe will change, temporarily for internal use only
            initContainer: new AsyncWaterfallHook('initContainer')
        });
        this.version = "0.11.3";
        this.moduleCache = new Map();
        this.loaderHook = new PluginSystem({
            // FIXME: may not be suitable , not open to the public yet
            getModuleInfo: new SyncHook(),
            createScript: new SyncHook(),
            createLink: new SyncHook(),
            fetch: new AsyncHook(),
            loadEntryError: new AsyncHook(),
            getModuleFactory: new AsyncHook()
        });
        this.bridgeHook = new PluginSystem({
            beforeBridgeRender: new SyncHook(),
            afterBridgeRender: new SyncHook(),
            beforeBridgeDestroy: new SyncHook(),
            afterBridgeDestroy: new SyncHook()
        });
        // TODO: Validate the details of the options
        // Initialize options with default values
        var defaultOptions = {
            id: getBuilderId(),
            name: userOptions.name,
            plugins: [
                snapshotPlugin(),
                generatePreloadAssetsPlugin()
            ],
            remotes: [],
            shared: {},
            inBrowser: sdk.isBrowserEnv()
        };
        this.name = userOptions.name;
        this.options = defaultOptions;
        this.snapshotHandler = new SnapshotHandler(this);
        this.sharedHandler = new SharedHandler(this);
        this.remoteHandler = new RemoteHandler(this);
        this.shareScopeMap = this.sharedHandler.shareScopeMap;
        this.registerPlugins(_to_consumable_array._(defaultOptions.plugins).concat(_to_consumable_array._(userOptions.plugins || [])));
        this.options = this.formatOptions(defaultOptions, userOptions);
    }
    _create_class._(FederationHost, [
        {
            key: "initOptions",
            value: function initOptions(userOptions) {
                this.registerPlugins(userOptions.plugins);
                var options = this.formatOptions(this.options, userOptions);
                this.options = options;
                return options;
            }
        },
        {
            key: "loadShare",
            value: function loadShare(pkgName, extraOptions) {
                return _async_to_generator._(function*() {
                    return this.sharedHandler.loadShare(pkgName, extraOptions);
                }).call(this);
            }
        },
        {
            // The lib function will only be available if the shared set by eager or runtime init is set or the shared is successfully loaded.
            // 1. If the loaded shared already exists globally, then it will be reused
            // 2. If lib exists in local shared, it will be used directly
            // 3. If the local get returns something other than Promise, then it will be used directly
            key: "loadShareSync",
            value: function loadShareSync(pkgName, extraOptions) {
                return this.sharedHandler.loadShareSync(pkgName, extraOptions);
            }
        },
        {
            key: "initializeSharing",
            value: function initializeSharing(ref, extraOptions) {
                var shareScopeName = ref === void 0 ? DEFAULT_SCOPE : ref;
                return this.sharedHandler.initializeSharing(shareScopeName, extraOptions);
            }
        },
        {
            key: "initRawContainer",
            value: function initRawContainer(name1, url, container) {
                var remoteInfo = getRemoteInfo({
                    name: name1,
                    entry: url
                });
                var module = new Module({
                    host: this,
                    remoteInfo
                });
                module.remoteEntryExports = container;
                this.moduleCache.set(name1, module);
                return module;
            }
        },
        {
            key: "loadRemote",
            value: // eslint-disable-next-line max-lines-per-function
            // eslint-disable-next-line @typescript-eslint/member-ordering
            function loadRemote(id, options) {
                return _async_to_generator._(function*() {
                    return this.remoteHandler.loadRemote(id, options);
                }).call(this);
            }
        },
        {
            key: "preloadRemote",
            value: // eslint-disable-next-line @typescript-eslint/member-ordering
            function preloadRemote(preloadOptions) {
                return _async_to_generator._(function*() {
                    return this.remoteHandler.preloadRemote(preloadOptions);
                }).call(this);
            }
        },
        {
            key: "initShareScopeMap",
            value: function initShareScopeMap(scopeName, shareScope, ref) {
                var extraOptions = ref === void 0 ? {} : ref;
                this.sharedHandler.initShareScopeMap(scopeName, shareScope, extraOptions);
            }
        },
        {
            key: "formatOptions",
            value: function formatOptions(globalOptions, userOptions) {
                var shared = formatShareConfigs(globalOptions, userOptions).shared;
                var _this_hooks_lifecycle_beforeInit_emit = this.hooks.lifecycle.beforeInit.emit({
                    origin: this,
                    userOptions,
                    options: globalOptions,
                    shareInfo: shared
                }), userOptionsRes = _this_hooks_lifecycle_beforeInit_emit.userOptions, globalOptionsRes = _this_hooks_lifecycle_beforeInit_emit.options;
                var remotes = this.remoteHandler.formatAndRegisterRemote(globalOptionsRes, userOptionsRes);
                var _this_sharedHandler_registerShared = this.sharedHandler.registerShared(globalOptionsRes, userOptionsRes), handledShared = _this_sharedHandler_registerShared.shared;
                var plugins = _to_consumable_array._(globalOptionsRes.plugins);
                if (userOptionsRes.plugins) {
                    userOptionsRes.plugins.forEach((plugin)=>{
                        if (!plugins.includes(plugin)) {
                            plugins.push(plugin);
                        }
                    });
                }
                var optionsRes = polyfills._extends({}, globalOptions, userOptions, {
                    plugins,
                    remotes,
                    shared: handledShared
                });
                this.hooks.lifecycle.init.emit({
                    origin: this,
                    options: optionsRes
                });
                return optionsRes;
            }
        },
        {
            key: "registerPlugins",
            value: function registerPlugins1(plugins) {
                var pluginRes = registerPlugins(plugins, [
                    this.hooks,
                    this.remoteHandler.hooks,
                    this.sharedHandler.hooks,
                    this.snapshotHandler.hooks,
                    this.loaderHook,
                    this.bridgeHook
                ]);
                // Merge plugin
                this.options.plugins = this.options.plugins.reduce((res, plugin)=>{
                    if (!plugin) return res;
                    if (res && !res.find((item)=>item.name === plugin.name)) {
                        res.push(plugin);
                    }
                    return res;
                }, pluginRes || []);
            }
        },
        {
            key: "registerRemotes",
            value: function registerRemotes(remotes, options) {
                return this.remoteHandler.registerRemotes(remotes, options);
            }
        }
    ]);
    return FederationHost;
}();
var index = /*#__PURE__*/ Object.freeze({
    __proto__: null
});
Object.defineProperty(exports, "loadScript", ({
    enumerable: true,
    get: function() {
        return sdk.loadScript;
    }
}));
Object.defineProperty(exports, "loadScriptNode", ({
    enumerable: true,
    get: function() {
        return sdk.loadScriptNode;
    }
}));
exports.CurrentGlobal = CurrentGlobal;
exports.FederationHost = FederationHost;
exports.Global = Global;
exports.Module = Module;
exports.addGlobalSnapshot = addGlobalSnapshot;
exports.assert = assert;
exports.getGlobalFederationConstructor = getGlobalFederationConstructor;
exports.getGlobalSnapshot = getGlobalSnapshot;
exports.getInfoWithoutType = getInfoWithoutType;
exports.getRegisteredShare = getRegisteredShare;
exports.getRemoteEntry = getRemoteEntry;
exports.getRemoteInfo = getRemoteInfo;
exports.helpers = helpers;
exports.isStaticResourcesEqual = isStaticResourcesEqual;
exports.matchRemoteWithNameAndExpose = matchRemoteWithNameAndExpose;
exports.registerGlobalPlugins = registerGlobalPlugins;
exports.resetFederationGlobalInfo = resetFederationGlobalInfo;
exports.safeWrapper = safeWrapper;
exports.satisfy = satisfy;
exports.setGlobalFederationConstructor = setGlobalFederationConstructor;
exports.setGlobalFederationInstance = setGlobalFederationInstance;
exports.types = index;


}),
84656: (function (__unused_webpack_module, exports) {
"use strict";

function _extends() {
    _extends = Object.assign || function assign(target) {
        for(var i = 1; i < arguments.length; i++){
            var source = arguments[i];
            for(var key in source)if (Object.prototype.hasOwnProperty.call(source, key)) target[key] = source[key];
        }
        return target;
    };
    return _extends.apply(this, arguments);
}
function _object_without_properties_loose(source, excluded) {
    if (source == null) return {};
    var target = {};
    var sourceKeys = Object.keys(source);
    var key, i;
    for(i = 0; i < sourceKeys.length; i++){
        key = sourceKeys[i];
        if (excluded.indexOf(key) >= 0) continue;
        target[key] = source[key];
    }
    return target;
}
exports._extends = _extends;
exports._object_without_properties_loose = _object_without_properties_loose;


}),
10912: (function (__unused_webpack_module, exports, __webpack_require__) {
"use strict";

var runtimeCore = __webpack_require__(65280);
var utils = __webpack_require__(57464);
var FederationInstance = null;
function init(options) {
    // Retrieve the same instance with the same name
    var instance = utils.getGlobalFederationInstance(options.name, options.version);
    if (!instance) {
        // Retrieve debug constructor
        var FederationConstructor = runtimeCore.getGlobalFederationConstructor() || runtimeCore.FederationHost;
        FederationInstance = new FederationConstructor(options);
        runtimeCore.setGlobalFederationInstance(FederationInstance);
        return FederationInstance;
    } else {
        // Merge options
        instance.initOptions(options);
        if (!FederationInstance) {
            FederationInstance = instance;
        }
        return instance;
    }
}
function loadRemote(...args) {
    runtimeCore.assert(FederationInstance, 'Please call init first');
    var loadRemote1 = FederationInstance.loadRemote;
    // eslint-disable-next-line prefer-spread
    return loadRemote1.apply(FederationInstance, args);
}
function loadShare(...args) {
    runtimeCore.assert(FederationInstance, 'Please call init first');
    // eslint-disable-next-line prefer-spread
    var loadShare1 = FederationInstance.loadShare;
    return loadShare1.apply(FederationInstance, args);
}
function loadShareSync(...args) {
    runtimeCore.assert(FederationInstance, 'Please call init first');
    var loadShareSync1 = FederationInstance.loadShareSync;
    // eslint-disable-next-line prefer-spread
    return loadShareSync1.apply(FederationInstance, args);
}
function preloadRemote(...args) {
    runtimeCore.assert(FederationInstance, 'Please call init first');
    // eslint-disable-next-line prefer-spread
    return FederationInstance.preloadRemote.apply(FederationInstance, args);
}
function registerRemotes(...args) {
    runtimeCore.assert(FederationInstance, 'Please call init first');
    // eslint-disable-next-line prefer-spread
    return FederationInstance.registerRemotes.apply(FederationInstance, args);
}
function registerPlugins(...args) {
    runtimeCore.assert(FederationInstance, 'Please call init first');
    // eslint-disable-next-line prefer-spread
    return FederationInstance.registerPlugins.apply(FederationInstance, args);
}
function getInstance() {
    return FederationInstance;
}
// Inject for debug
runtimeCore.setGlobalFederationConstructor(runtimeCore.FederationHost);
Object.defineProperty(exports, "FederationHost", ({
    enumerable: true,
    get: function() {
        return runtimeCore.FederationHost;
    }
}));
Object.defineProperty(exports, "Module", ({
    enumerable: true,
    get: function() {
        return runtimeCore.Module;
    }
}));
Object.defineProperty(exports, "getRemoteEntry", ({
    enumerable: true,
    get: function() {
        return runtimeCore.getRemoteEntry;
    }
}));
Object.defineProperty(exports, "getRemoteInfo", ({
    enumerable: true,
    get: function() {
        return runtimeCore.getRemoteInfo;
    }
}));
Object.defineProperty(exports, "loadScript", ({
    enumerable: true,
    get: function() {
        return runtimeCore.loadScript;
    }
}));
Object.defineProperty(exports, "loadScriptNode", ({
    enumerable: true,
    get: function() {
        return runtimeCore.loadScriptNode;
    }
}));
Object.defineProperty(exports, "registerGlobalPlugins", ({
    enumerable: true,
    get: function() {
        return runtimeCore.registerGlobalPlugins;
    }
}));
exports.getInstance = getInstance;
exports.init = init;
exports.loadRemote = loadRemote;
exports.loadShare = loadShare;
exports.loadShareSync = loadShareSync;
exports.preloadRemote = preloadRemote;
exports.registerPlugins = registerPlugins;
exports.registerRemotes = registerRemotes;


}),
57464: (function (__unused_webpack_module, exports, __webpack_require__) {
"use strict";

var runtimeCore = __webpack_require__(65280);
// injected by bundler, so it can not use runtime-core stuff
function getBuilderId() {
    //@ts-ignore
    return  true ? "miniApp:0.0.1" : 0;
}
function getGlobalFederationInstance(name, version) {
    var buildId = getBuilderId();
    return runtimeCore.CurrentGlobal.__FEDERATION__.__INSTANCES__.find((GMInstance)=>{
        if (buildId && GMInstance.options.id === getBuilderId()) {
            return true;
        }
        if (GMInstance.options.name === name && !GMInstance.options.version && !version) {
            return true;
        }
        if (GMInstance.options.name === name && version && GMInstance.options.version === version) {
            return true;
        }
        return false;
    });
}
exports.getGlobalFederationInstance = getGlobalFederationInstance;


}),
57726: (function (__unused_webpack_module, exports, __webpack_require__) {
"use strict";

Object.defineProperty(exports, "__esModule", ({
    value: true
}));
var _async_to_generator = __webpack_require__(11809);
var _class_call_check = __webpack_require__(8864);
var _create_class = __webpack_require__(93072);
var _sliced_to_array = __webpack_require__(78474);
var _to_array = __webpack_require__(12309);
var _to_consumable_array = __webpack_require__(92716);
var polyfills = __webpack_require__(9176);
var FederationModuleManifest = 'federation-manifest.json';
var MANIFEST_EXT = '.json';
var BROWSER_LOG_KEY = 'FEDERATION_DEBUG';
var BROWSER_LOG_VALUE = '1';
var NameTransformSymbol = {
    AT: '@',
    HYPHEN: '-',
    SLASH: '/'
};
var NameTransformMap = {
    [NameTransformSymbol.AT]: 'scope_',
    [NameTransformSymbol.HYPHEN]: '_',
    [NameTransformSymbol.SLASH]: '__'
};
var EncodedNameTransformMap = {
    [NameTransformMap[NameTransformSymbol.AT]]: NameTransformSymbol.AT,
    [NameTransformMap[NameTransformSymbol.HYPHEN]]: NameTransformSymbol.HYPHEN,
    [NameTransformMap[NameTransformSymbol.SLASH]]: NameTransformSymbol.SLASH
};
var SEPARATOR = ':';
var ManifestFileName = 'mf-manifest.json';
var StatsFileName = 'mf-stats.json';
var MFModuleType = {
    NPM: 'npm',
    APP: 'app'
};
var MODULE_DEVTOOL_IDENTIFIER = '__MF_DEVTOOLS_MODULE_INFO__';
var ENCODE_NAME_PREFIX = 'ENCODE_NAME_PREFIX';
var TEMP_DIR = '.federation';
var MFPrefetchCommon = {
    identifier: 'MFDataPrefetch',
    globalKey: '__PREFETCH__',
    library: 'mf-data-prefetch',
    exportsKey: '__PREFETCH_EXPORTS__',
    fileName: 'bootstrap.js'
};
var ContainerPlugin = /*#__PURE__*/ Object.freeze({
    __proto__: null
});
var ContainerReferencePlugin = /*#__PURE__*/ Object.freeze({
    __proto__: null
});
var ModuleFederationPlugin = /*#__PURE__*/ Object.freeze({
    __proto__: null
});
var SharePlugin = /*#__PURE__*/ Object.freeze({
    __proto__: null
});
function isBrowserEnv() {
    return typeof window !== 'undefined' && typeof window.document !== 'undefined';
}
function isReactNativeEnv() {
    var _navigator;
    return typeof navigator !== 'undefined' && ((_navigator = navigator) == null ? void 0 : _navigator.product) === 'ReactNative';
}
function isBrowserDebug() {
    try {
        if (isBrowserEnv() && window.localStorage) {
            return localStorage.getItem(BROWSER_LOG_KEY) === BROWSER_LOG_VALUE;
        }
    } catch (error1) {
        return false;
    }
    return false;
}
function isDebugMode() {
    if (typeof process !== 'undefined' && process.env && process.env['FEDERATION_DEBUG']) {
        return Boolean(process.env['FEDERATION_DEBUG']);
    }
    if (typeof FEDERATION_DEBUG !== 'undefined' && Boolean(FEDERATION_DEBUG)) {
        return true;
    }
    return isBrowserDebug();
}
var getProcessEnv = function() {
    return typeof process !== 'undefined' && process.env ? process.env : {};
};
var LOG_CATEGORY = '[ Federation Runtime ]';
// entry: name:version   version : 1.0.0 | ^1.2.3
// entry: name:entry  entry:  https://localhost:9000/federation-manifest.json
var parseEntry = (str, devVerOrUrl, ref)=>{
    var separator = ref === void 0 ? SEPARATOR : ref;
    var strSplit = str.split(separator);
    var devVersionOrUrl = getProcessEnv()['NODE_ENV'] === 'development' && devVerOrUrl;
    var defaultVersion = '*';
    var isEntry = (s)=>s.startsWith('http') || s.includes(MANIFEST_EXT);
    // Check if the string starts with a type
    if (strSplit.length >= 2) {
        var _strSplit = _to_array._(strSplit), name = _strSplit[0], versionOrEntryArr = _strSplit.slice(1);
        // @name@manifest-url.json
        if (str.startsWith(separator)) {
            name = strSplit.slice(0, 2).join(separator);
            versionOrEntryArr = [
                devVersionOrUrl || strSplit.slice(2).join(separator)
            ];
        }
        var versionOrEntry = devVersionOrUrl || versionOrEntryArr.join(separator);
        if (isEntry(versionOrEntry)) {
            return {
                name,
                entry: versionOrEntry
            };
        } else {
            // Apply version rule
            // devVersionOrUrl => inputVersion => defaultVersion
            return {
                name,
                version: versionOrEntry || defaultVersion
            };
        }
    } else if (strSplit.length === 1) {
        var _strSplit1 = _sliced_to_array._(strSplit, 1), name1 = _strSplit1[0];
        if (devVersionOrUrl && isEntry(devVersionOrUrl)) {
            return {
                name: name1,
                entry: devVersionOrUrl
            };
        }
        return {
            name: name1,
            version: devVersionOrUrl || defaultVersion
        };
    } else {
        throw `Invalid entry value: ${str}`;
    }
};
var composeKeyWithSeparator = function(...args) {
    if (!args.length) {
        return '';
    }
    return args.reduce((sum, cur)=>{
        if (!cur) {
            return sum;
        }
        if (!sum) {
            return cur;
        }
        return `${sum}${SEPARATOR}${cur}`;
    }, '');
};
var encodeName = function(name, ref, ref1) {
    var prefix = ref === void 0 ? '' : ref, withExt = ref1 === void 0 ? false : ref1;
    try {
        var ext = withExt ? '.js' : '';
        return `${prefix}${name.replace(new RegExp(`${NameTransformSymbol.AT}`, 'g'), NameTransformMap[NameTransformSymbol.AT]).replace(new RegExp(`${NameTransformSymbol.HYPHEN}`, 'g'), NameTransformMap[NameTransformSymbol.HYPHEN]).replace(new RegExp(`${NameTransformSymbol.SLASH}`, 'g'), NameTransformMap[NameTransformSymbol.SLASH])}${ext}`;
    } catch (err) {
        throw err;
    }
};
var decodeName = function(name, prefix, withExt) {
    try {
        var decodedName = name;
        if (prefix) {
            if (!decodedName.startsWith(prefix)) {
                return decodedName;
            }
            decodedName = decodedName.replace(new RegExp(prefix, 'g'), '');
        }
        decodedName = decodedName.replace(new RegExp(`${NameTransformMap[NameTransformSymbol.AT]}`, 'g'), EncodedNameTransformMap[NameTransformMap[NameTransformSymbol.AT]]).replace(new RegExp(`${NameTransformMap[NameTransformSymbol.SLASH]}`, 'g'), EncodedNameTransformMap[NameTransformMap[NameTransformSymbol.SLASH]]).replace(new RegExp(`${NameTransformMap[NameTransformSymbol.HYPHEN]}`, 'g'), EncodedNameTransformMap[NameTransformMap[NameTransformSymbol.HYPHEN]]);
        if (withExt) {
            decodedName = decodedName.replace('.js', '');
        }
        return decodedName;
    } catch (err) {
        throw err;
    }
};
var generateExposeFilename = (exposeName, withExt)=>{
    if (!exposeName) {
        return '';
    }
    var expose = exposeName;
    if (expose === '.') {
        expose = 'default_export';
    }
    if (expose.startsWith('./')) {
        expose = expose.replace('./', '');
    }
    return encodeName(expose, '__federation_expose_', withExt);
};
var generateShareFilename = (pkgName, withExt)=>{
    if (!pkgName) {
        return '';
    }
    return encodeName(pkgName, '__federation_shared_', withExt);
};
var getResourceUrl = (module, sourceUrl)=>{
    if ('getPublicPath' in module) {
        var publicPath;
        if (!module.getPublicPath.startsWith('function')) {
            publicPath = new Function(module.getPublicPath)();
        } else {
            publicPath = new Function('return ' + module.getPublicPath)()();
        }
        return `${publicPath}${sourceUrl}`;
    } else if ('publicPath' in module) {
        return `${module.publicPath}${sourceUrl}`;
    } else {
        console.warn('Cannot get resource URL. If in debug mode, please ignore.', module, sourceUrl);
        return '';
    }
};
// eslint-disable-next-line @typescript-eslint/explicit-module-boundary-types
var assert = (condition, msg)=>{
    if (!condition) {
        error(msg);
    }
};
var error = (msg)=>{
    throw new Error(`${LOG_CATEGORY}: ${msg}`);
};
var warn = (msg)=>{
    console.warn(`${LOG_CATEGORY}: ${msg}`);
};
function safeToString(info) {
    try {
        return JSON.stringify(info, null, 2);
    } catch (e) {
        return '';
    }
}
// RegExp for version string
var VERSION_PATTERN_REGEXP = /^([\d^=v<>~]|[*xX]$)/;
function isRequiredVersion(str) {
    return VERSION_PATTERN_REGEXP.test(str);
}
var simpleJoinRemoteEntry = (rPath, rName)=>{
    if (!rPath) {
        return rName;
    }
    var transformPath = (str)=>{
        if (str === '.') {
            return '';
        }
        if (str.startsWith('./')) {
            return str.replace('./', '');
        }
        if (str.startsWith('/')) {
            var strWithoutSlash = str.slice(1);
            if (strWithoutSlash.endsWith('/')) {
                return strWithoutSlash.slice(0, -1);
            }
            return strWithoutSlash;
        }
        return str;
    };
    var transformedPath = transformPath(rPath);
    if (!transformedPath) {
        return rName;
    }
    if (transformedPath.endsWith('/')) {
        return `${transformedPath}${rName}`;
    }
    return `${transformedPath}/${rName}`;
};
function inferAutoPublicPath(url) {
    return url.replace(/#.*$/, '').replace(/\?.*$/, '').replace(/\/[^\/]+$/, '/');
}
// Priority: overrides > remotes
// eslint-disable-next-line max-lines-per-function
function generateSnapshotFromManifest(manifest, ref) {
    var options = ref === void 0 ? {} : ref;
    var _manifest_metaData, _manifest_metaData1;
    var _options_remotes = options.remotes, remotes = _options_remotes === void 0 ? {} : _options_remotes, _options_overrides = options.overrides, overrides = _options_overrides === void 0 ? {} : _options_overrides, version = options.version;
    var remoteSnapshot;
    var getPublicPath = ()=>{
        if ('publicPath' in manifest.metaData) {
            if (manifest.metaData.publicPath === 'auto' && version) {
                // use same implementation as publicPath auto runtime module implements
                return inferAutoPublicPath(version);
            }
            return manifest.metaData.publicPath;
        } else {
            return manifest.metaData.getPublicPath;
        }
    };
    var overridesKeys = Object.keys(overrides);
    var remotesInfo = {};
    // If remotes are not provided, only the remotes in the manifest will be read
    if (!Object.keys(remotes).length) {
        var _manifest_remotes;
        remotesInfo = ((_manifest_remotes = manifest.remotes) == null ? void 0 : _manifest_remotes.reduce((res, next)=>{
            var matchedVersion;
            var name = next.federationContainerName;
            // overrides have higher priority
            if (overridesKeys.includes(name)) {
                matchedVersion = overrides[name];
            } else {
                if ('version' in next) {
                    matchedVersion = next.version;
                } else {
                    matchedVersion = next.entry;
                }
            }
            res[name] = {
                matchedVersion
            };
            return res;
        }, {})) || {};
    }
    // If remotes (deploy scenario) are specified, they need to be traversed again
    Object.keys(remotes).forEach((key)=>remotesInfo[key] = {
            // overrides will override dependencies
            matchedVersion: overridesKeys.includes(key) ? overrides[key] : remotes[key]
        });
    var _manifest_metaData2 = manifest.metaData, _manifest_metaData_remoteEntry = _manifest_metaData2.remoteEntry, remoteEntryPath = _manifest_metaData_remoteEntry.path, remoteEntryName = _manifest_metaData_remoteEntry.name, remoteEntryType = _manifest_metaData_remoteEntry.type, remoteTypes = _manifest_metaData2.types, buildVersion = _manifest_metaData2.buildInfo.buildVersion, globalName = _manifest_metaData2.globalName, ssrRemoteEntry = _manifest_metaData2.ssrRemoteEntry;
    var exposes = manifest.exposes;
    var basicRemoteSnapshot = {
        version: version ? version : '',
        buildVersion,
        globalName,
        remoteEntry: simpleJoinRemoteEntry(remoteEntryPath, remoteEntryName),
        remoteEntryType,
        remoteTypes: simpleJoinRemoteEntry(remoteTypes.path, remoteTypes.name),
        remoteTypesZip: remoteTypes.zip || '',
        remoteTypesAPI: remoteTypes.api || '',
        remotesInfo,
        shared: manifest == null ? void 0 : manifest.shared.map((item)=>({
                assets: item.assets,
                sharedName: item.name,
                version: item.version
            })),
        modules: exposes == null ? void 0 : exposes.map((expose)=>({
                moduleName: expose.name,
                modulePath: expose.path,
                assets: expose.assets
            }))
    };
    if ((_manifest_metaData = manifest.metaData) == null ? void 0 : _manifest_metaData.prefetchInterface) {
        var prefetchInterface = manifest.metaData.prefetchInterface;
        basicRemoteSnapshot = polyfills._extends({}, basicRemoteSnapshot, {
            prefetchInterface
        });
    }
    if ((_manifest_metaData1 = manifest.metaData) == null ? void 0 : _manifest_metaData1.prefetchEntry) {
        var _manifest_metaData_prefetchEntry = manifest.metaData.prefetchEntry, path = _manifest_metaData_prefetchEntry.path, name = _manifest_metaData_prefetchEntry.name, type = _manifest_metaData_prefetchEntry.type;
        basicRemoteSnapshot = polyfills._extends({}, basicRemoteSnapshot, {
            prefetchEntry: simpleJoinRemoteEntry(path, name),
            prefetchEntryType: type
        });
    }
    if ('publicPath' in manifest.metaData) {
        remoteSnapshot = polyfills._extends({}, basicRemoteSnapshot, {
            publicPath: getPublicPath()
        });
    } else {
        remoteSnapshot = polyfills._extends({}, basicRemoteSnapshot, {
            getPublicPath: getPublicPath()
        });
    }
    if (ssrRemoteEntry) {
        var fullSSRRemoteEntry = simpleJoinRemoteEntry(ssrRemoteEntry.path, ssrRemoteEntry.name);
        remoteSnapshot.ssrRemoteEntry = fullSSRRemoteEntry;
        remoteSnapshot.ssrRemoteEntryType = ssrRemoteEntry.type || 'commonjs-module';
    }
    return remoteSnapshot;
}
function isManifestProvider(moduleInfo) {
    if ('remoteEntry' in moduleInfo && moduleInfo.remoteEntry.includes(MANIFEST_EXT)) {
        return true;
    } else {
        return false;
    }
}
var PREFIX = '[ Module Federation ]';
var Logger = /*#__PURE__*/ function() {
    function Logger1(prefix) {
        _class_call_check._(this, Logger1);
        this.prefix = prefix;
    }
    _create_class._(Logger1, [
        {
            key: "setPrefix",
            value: function setPrefix(prefix) {
                this.prefix = prefix;
            }
        },
        {
            key: "log",
            value: function log(...args) {
                var _console;
                (_console = console).log.apply(_console, [
                    this.prefix
                ].concat(_to_consumable_array._(args)));
            }
        },
        {
            key: "warn",
            value: function warn1(...args) {
                var _console;
                (_console = console).log.apply(_console, [
                    this.prefix
                ].concat(_to_consumable_array._(args)));
            }
        },
        {
            key: "error",
            value: function error1(...args) {
                var _console;
                (_console = console).log.apply(_console, [
                    this.prefix
                ].concat(_to_consumable_array._(args)));
            }
        },
        {
            key: "success",
            value: function success(...args) {
                var _console;
                (_console = console).log.apply(_console, [
                    this.prefix
                ].concat(_to_consumable_array._(args)));
            }
        },
        {
            key: "info",
            value: function info(...args) {
                var _console;
                (_console = console).log.apply(_console, [
                    this.prefix
                ].concat(_to_consumable_array._(args)));
            }
        },
        {
            key: "ready",
            value: function ready(...args) {
                var _console;
                (_console = console).log.apply(_console, [
                    this.prefix
                ].concat(_to_consumable_array._(args)));
            }
        },
        {
            key: "debug",
            value: function debug(...args) {
                if (isDebugMode()) {
                    var _console;
                    (_console = console).log.apply(_console, [
                        this.prefix
                    ].concat(_to_consumable_array._(args)));
                }
            }
        }
    ]);
    return Logger1;
}();
function createLogger(prefix) {
    return new Logger(prefix);
}
var logger = createLogger(PREFIX);
// eslint-disable-next-line @typescript-eslint/no-explicit-any
function safeWrapper(callback, disableWarn) {
    return _async_to_generator._(function*() {
        try {
            var res = yield callback();
            return res;
        } catch (e) {
            !disableWarn && warn(e);
            return;
        }
    })();
}
function isStaticResourcesEqual(url1, url2) {
    var REG_EXP = /^(https?:)?\/\//i;
    // Transform url1 and url2 into relative paths
    var relativeUrl1 = url1.replace(REG_EXP, '').replace(/\/$/, '');
    var relativeUrl2 = url2.replace(REG_EXP, '').replace(/\/$/, '');
    // Check if the relative paths are identical
    return relativeUrl1 === relativeUrl2;
}
function createScript(info) {
    // Retrieve the existing script element by its src attribute
    var script = null;
    var needAttach = true;
    var timeout = 20000;
    var timeoutId;
    var scripts = document.getElementsByTagName('script');
    for(var i = 0; i < scripts.length; i++){
        var s = scripts[i];
        var scriptSrc = s.getAttribute('src');
        if (scriptSrc && isStaticResourcesEqual(scriptSrc, info.url)) {
            script = s;
            needAttach = false;
            break;
        }
    }
    if (!script) {
        var attrs = info.attrs;
        script = document.createElement('script');
        script.type = (attrs == null ? void 0 : attrs['type']) === 'module' ? 'module' : 'text/javascript';
        var createScriptRes = undefined;
        if (info.createScriptHook) {
            createScriptRes = info.createScriptHook(info.url, info.attrs);
            if (createScriptRes instanceof HTMLScriptElement) {
                script = createScriptRes;
            } else if (typeof createScriptRes === 'object') {
                if ('script' in createScriptRes && createScriptRes.script) {
                    script = createScriptRes.script;
                }
                if ('timeout' in createScriptRes && createScriptRes.timeout) {
                    timeout = createScriptRes.timeout;
                }
            }
        }
        if (!script.src) {
            script.src = info.url;
        }
        if (attrs && !createScriptRes) {
            Object.keys(attrs).forEach((name)=>{
                if (script) {
                    if (name === 'async' || name === 'defer') {
                        script[name] = attrs[name];
                    // Attributes that do not exist are considered overridden
                    } else if (!script.getAttribute(name)) {
                        script.setAttribute(name, attrs[name]);
                    }
                }
            });
        }
    }
    var onScriptComplete = (prev, event)=>_async_to_generator._(function*() {
            clearTimeout(timeoutId);
            var onScriptCompleteCallback = ()=>{
                if ((event == null ? void 0 : event.type) === 'error') {
                    (info == null ? void 0 : info.onErrorCallback) && (info == null ? void 0 : info.onErrorCallback(event));
                } else {
                    (info == null ? void 0 : info.cb) && (info == null ? void 0 : info.cb());
                }
            };
            // Prevent memory leaks in IE.
            if (script) {
                script.onerror = null;
                script.onload = null;
                safeWrapper(()=>{
                    var _info_needDeleteScript = info.needDeleteScript, needDeleteScript = _info_needDeleteScript === void 0 ? true : _info_needDeleteScript;
                    if (needDeleteScript) {
                        (script == null ? void 0 : script.parentNode) && script.parentNode.removeChild(script);
                    }
                });
                if (prev && typeof prev === 'function') {
                    var result = prev(event);
                    if (result instanceof Promise) {
                        var res = yield result;
                        onScriptCompleteCallback();
                        return res;
                    }
                    onScriptCompleteCallback();
                    return result;
                }
            }
            onScriptCompleteCallback();
        })();
    script.onerror = onScriptComplete.bind(null, script.onerror);
    script.onload = onScriptComplete.bind(null, script.onload);
    timeoutId = setTimeout(()=>{
        onScriptComplete(null, new Error(`Remote script "${info.url}" time-outed.`));
    }, timeout);
    return {
        script,
        needAttach
    };
}
function createLink(info) {
    // <link rel="preload" href="script.js" as="script">
    // Retrieve the existing script element by its src attribute
    var link = null;
    var needAttach = true;
    var links = document.getElementsByTagName('link');
    for(var i = 0; i < links.length; i++){
        var l = links[i];
        var linkHref = l.getAttribute('href');
        var linkRel = l.getAttribute('rel');
        if (linkHref && isStaticResourcesEqual(linkHref, info.url) && linkRel === info.attrs['rel']) {
            link = l;
            needAttach = false;
            break;
        }
    }
    if (!link) {
        link = document.createElement('link');
        link.setAttribute('href', info.url);
        var createLinkRes = undefined;
        var attrs = info.attrs;
        if (info.createLinkHook) {
            createLinkRes = info.createLinkHook(info.url, attrs);
            if (createLinkRes instanceof HTMLLinkElement) {
                link = createLinkRes;
            }
        }
        if (attrs && !createLinkRes) {
            Object.keys(attrs).forEach((name)=>{
                if (link && !link.getAttribute(name)) {
                    link.setAttribute(name, attrs[name]);
                }
            });
        }
    }
    var onLinkComplete = (prev, event)=>{
        var onLinkCompleteCallback = ()=>{
            if ((event == null ? void 0 : event.type) === 'error') {
                (info == null ? void 0 : info.onErrorCallback) && (info == null ? void 0 : info.onErrorCallback(event));
            } else {
                (info == null ? void 0 : info.cb) && (info == null ? void 0 : info.cb());
            }
        };
        // Prevent memory leaks in IE.
        if (link) {
            link.onerror = null;
            link.onload = null;
            safeWrapper(()=>{
                var _info_needDeleteLink = info.needDeleteLink, needDeleteLink = _info_needDeleteLink === void 0 ? true : _info_needDeleteLink;
                if (needDeleteLink) {
                    (link == null ? void 0 : link.parentNode) && link.parentNode.removeChild(link);
                }
            });
            if (prev) {
                // eslint-disable-next-line @typescript-eslint/no-explicit-any
                var res = prev(event);
                onLinkCompleteCallback();
                return res;
            }
        }
        onLinkCompleteCallback();
    };
    link.onerror = onLinkComplete.bind(null, link.onerror);
    link.onload = onLinkComplete.bind(null, link.onload);
    return {
        link,
        needAttach
    };
}
function loadScript(url, info) {
    var _info_attrs = info.attrs, attrs = _info_attrs === void 0 ? {} : _info_attrs, createScriptHook = info.createScriptHook;
    return new Promise((resolve, reject)=>{
        var _createScript = createScript({
            url,
            cb: resolve,
            onErrorCallback: reject,
            attrs: polyfills._extends({
                fetchpriority: 'high'
            }, attrs),
            createScriptHook,
            needDeleteScript: true
        }), script = _createScript.script, needAttach = _createScript.needAttach;
        needAttach && document.head.appendChild(script);
    });
}
function importNodeModule(name) {
    if (!name) {
        throw new Error('import specifier is required');
    }
    var importModule = new Function('name', `return import(name)`);
    return importModule(name).then((res)=>res).catch((error1)=>{
        console.error(`Error importing module ${name}:`, error1);
        throw error1;
    });
}
var loadNodeFetch = ()=>_async_to_generator._(function*() {
        var fetchModule = yield importNodeModule('node-fetch');
        return fetchModule.default || fetchModule;
    })();
var lazyLoaderHookFetch = (input, init, loaderHook)=>_async_to_generator._(function*() {
        var hook = (url, init)=>{
            return loaderHook.lifecycle.fetch.emit(url, init);
        };
        var res = yield hook(input, init || {});
        if (!res || !(res instanceof Response)) {
            var fetchFunction = typeof fetch === 'undefined' ? yield loadNodeFetch() : fetch;
            return fetchFunction(input, init || {});
        }
        return res;
    })();
function createScriptNode(url, cb, attrs, loaderHook) {
    if (loaderHook == null ? void 0 : loaderHook.createScriptHook) {
        var hookResult = loaderHook.createScriptHook(url);
        if (hookResult && typeof hookResult === 'object' && 'url' in hookResult) {
            url = hookResult.url;
        }
    }
    var urlObj;
    try {
        urlObj = new URL(url);
    } catch (e) {
        console.error('Error constructing URL:', e);
        cb(new Error(`Invalid URL: ${e}`));
        return;
    }
    var getFetch = ()=>_async_to_generator._(function*() {
            if (loaderHook == null ? void 0 : loaderHook.fetch) {
                return (input, init)=>lazyLoaderHookFetch(input, init, loaderHook);
            }
            return typeof fetch === 'undefined' ? loadNodeFetch() : fetch;
        })();
    var handleScriptFetch = (f, urlObj)=>_async_to_generator._(function*() {
            try {
                var _vm_constants;
                var res = yield f(urlObj.href);
                var data = yield res.text();
                var _ref = _sliced_to_array._((yield Promise.all([
                    importNodeModule('path'),
                    importNodeModule('vm')
                ])), 2), path = _ref[0], vm = _ref[1];
                var scriptContext = {
                    exports: {},
                    module: {
                        exports: {}
                    }
                };
                var urlDirname = urlObj.pathname.split('/').slice(0, -1).join('/');
                var filename = path.basename(urlObj.pathname);
                var _vm_constants_USE_MAIN_CONTEXT_DEFAULT_LOADER;
                var script = new vm.Script(`(function(exports, module, require, __dirname, __filename) {${data}\n})`, {
                    filename,
                    importModuleDynamically: (_vm_constants_USE_MAIN_CONTEXT_DEFAULT_LOADER = (_vm_constants = vm.constants) == null ? void 0 : _vm_constants.USE_MAIN_CONTEXT_DEFAULT_LOADER) != null ? _vm_constants_USE_MAIN_CONTEXT_DEFAULT_LOADER : importNodeModule
                });
                script.runInThisContext()(scriptContext.exports, scriptContext.module, eval('require'), urlDirname, filename);
                var exportedInterface = scriptContext.module.exports || scriptContext.exports;
                if (attrs && exportedInterface && attrs['globalName']) {
                    var container = exportedInterface[attrs['globalName']] || exportedInterface;
                    cb(undefined, container);
                    return;
                }
                cb(undefined, exportedInterface);
            } catch (e) {
                cb(e instanceof Error ? e : new Error(`Script execution error: ${e}`));
            }
        })();
    getFetch().then((f)=>_async_to_generator._(function*() {
            if ((attrs == null ? void 0 : attrs['type']) === 'esm' || (attrs == null ? void 0 : attrs['type']) === 'module') {
                return loadModule(urlObj.href, {
                    fetch: f,
                    vm: yield importNodeModule('vm')
                }).then((module)=>_async_to_generator._(function*() {
                        yield module.evaluate();
                        cb(undefined, module.namespace);
                    })()).catch((e)=>{
                    cb(e instanceof Error ? e : new Error(`Script execution error: ${e}`));
                });
            }
            handleScriptFetch(f, urlObj);
        })()).catch((err)=>{
        cb(err);
    });
}
function loadScriptNode(url, info) {
    return new Promise((resolve, reject)=>{
        createScriptNode(url, (error1, scriptContext)=>{
            if (error1) {
                reject(error1);
            } else {
                var _info_attrs, _info_attrs1;
                var remoteEntryKey = (info == null ? void 0 : (_info_attrs = info.attrs) == null ? void 0 : _info_attrs['globalName']) || `__FEDERATION_${info == null ? void 0 : (_info_attrs1 = info.attrs) == null ? void 0 : _info_attrs1['name']}:custom__`;
                var entryExports = globalThis[remoteEntryKey] = scriptContext;
                resolve(entryExports);
            }
        }, info.attrs, info.loaderHook);
    });
}
function loadModule(url, options) {
    return _async_to_generator._(function*() {
        var fetch1 = options.fetch, vm = options.vm;
        var response = yield fetch1(url);
        var code = yield response.text();
        var module = new vm.SourceTextModule(code, {
            // @ts-ignore
            importModuleDynamically: (specifier, script)=>_async_to_generator._(function*() {
                    var resolvedUrl = new URL(specifier, url).href;
                    return loadModule(resolvedUrl, options);
                })()
        });
        yield module.link((specifier)=>_async_to_generator._(function*() {
                var resolvedUrl = new URL(specifier, url).href;
                var module = yield loadModule(resolvedUrl, options);
                return module;
            })());
        return module;
    })();
}
function normalizeOptions(enableDefault, defaultOptions, key) {
    return function(options) {
        if (options === false) {
            return false;
        }
        if (typeof options === 'undefined') {
            if (enableDefault) {
                return defaultOptions;
            } else {
                return false;
            }
        }
        if (options === true) {
            return defaultOptions;
        }
        if (options && typeof options === 'object') {
            return polyfills._extends({}, defaultOptions, options);
        }
        throw new Error(`Unexpected type for \`${key}\`, expect boolean/undefined/object, got: ${typeof options}`);
    };
}
exports.BROWSER_LOG_KEY = BROWSER_LOG_KEY;
exports.BROWSER_LOG_VALUE = BROWSER_LOG_VALUE;
exports.ENCODE_NAME_PREFIX = ENCODE_NAME_PREFIX;
exports.EncodedNameTransformMap = EncodedNameTransformMap;
exports.FederationModuleManifest = FederationModuleManifest;
exports.MANIFEST_EXT = MANIFEST_EXT;
exports.MFModuleType = MFModuleType;
exports.MFPrefetchCommon = MFPrefetchCommon;
exports.MODULE_DEVTOOL_IDENTIFIER = MODULE_DEVTOOL_IDENTIFIER;
exports.ManifestFileName = ManifestFileName;
exports.NameTransformMap = NameTransformMap;
exports.NameTransformSymbol = NameTransformSymbol;
exports.SEPARATOR = SEPARATOR;
exports.StatsFileName = StatsFileName;
exports.TEMP_DIR = TEMP_DIR;
exports.assert = assert;
exports.composeKeyWithSeparator = composeKeyWithSeparator;
exports.containerPlugin = ContainerPlugin;
exports.containerReferencePlugin = ContainerReferencePlugin;
exports.createLink = createLink;
exports.createLogger = createLogger;
exports.createScript = createScript;
exports.createScriptNode = createScriptNode;
exports.decodeName = decodeName;
exports.encodeName = encodeName;
exports.error = error;
exports.generateExposeFilename = generateExposeFilename;
exports.generateShareFilename = generateShareFilename;
exports.generateSnapshotFromManifest = generateSnapshotFromManifest;
exports.getProcessEnv = getProcessEnv;
exports.getResourceUrl = getResourceUrl;
exports.inferAutoPublicPath = inferAutoPublicPath;
exports.isBrowserEnv = isBrowserEnv;
exports.isDebugMode = isDebugMode;
exports.isManifestProvider = isManifestProvider;
exports.isReactNativeEnv = isReactNativeEnv;
exports.isRequiredVersion = isRequiredVersion;
exports.isStaticResourcesEqual = isStaticResourcesEqual;
exports.loadScript = loadScript;
exports.loadScriptNode = loadScriptNode;
exports.logger = logger;
exports.moduleFederationPlugin = ModuleFederationPlugin;
exports.normalizeOptions = normalizeOptions;
exports.parseEntry = parseEntry;
exports.safeToString = safeToString;
exports.safeWrapper = safeWrapper;
exports.sharePlugin = SharePlugin;
exports.simpleJoinRemoteEntry = simpleJoinRemoteEntry;
exports.warn = warn;


}),
9176: (function (__unused_webpack_module, exports) {
"use strict";

function _extends() {
    _extends = Object.assign || function assign(target) {
        for(var i = 1; i < arguments.length; i++){
            var source = arguments[i];
            for(var key in source)if (Object.prototype.hasOwnProperty.call(source, key)) target[key] = source[key];
        }
        return target;
    };
    return _extends.apply(this, arguments);
}
exports._extends = _extends;


}),
98773: (function (__unused_webpack_module, exports) {
"use strict";

var FEDERATION_SUPPORTED_TYPES = [
    'script'
];
exports.FEDERATION_SUPPORTED_TYPES = FEDERATION_SUPPORTED_TYPES;


}),
67657: (function (module, exports, __webpack_require__) {
"use strict";

Object.defineProperty(exports, "__esModule", ({
    value: true
}));
var _object_spread = __webpack_require__(36192);
var runtime = __webpack_require__(10912);
var constant = __webpack_require__(98773);
function _interopNamespaceDefault(e) {
    var n = Object.create(null);
    if (e) {
        Object.keys(e).forEach(function(k) {
            if (k !== 'default') {
                var d = Object.getOwnPropertyDescriptor(e, k);
                Object.defineProperty(n, k, d.get ? d : {
                    enumerable: true,
                    get: function() {
                        return e[k];
                    }
                });
            }
        });
    }
    n.default = e;
    return Object.freeze(n);
}
var runtime__namespace = /*#__PURE__*/ _interopNamespaceDefault(runtime);
function attachShareScopeMap(webpackRequire) {
    if (!webpackRequire.S || webpackRequire.federation.hasAttachShareScopeMap || !webpackRequire.federation.instance || !webpackRequire.federation.instance.shareScopeMap) {
        return;
    }
    webpackRequire.S = webpackRequire.federation.instance.shareScopeMap;
    webpackRequire.federation.hasAttachShareScopeMap = true;
}
var NameTransformSymbol = {
    AT: '@',
    HYPHEN: '-',
    SLASH: '/'
};
var NameTransformMap = {
    [NameTransformSymbol.AT]: 'scope_',
    [NameTransformSymbol.HYPHEN]: '_',
    [NameTransformSymbol.SLASH]: '__'
};
var EncodedNameTransformMap = {
    [NameTransformMap[NameTransformSymbol.AT]]: NameTransformSymbol.AT,
    [NameTransformMap[NameTransformSymbol.HYPHEN]]: NameTransformSymbol.HYPHEN,
    [NameTransformMap[NameTransformSymbol.SLASH]]: NameTransformSymbol.SLASH
};
var ENCODE_NAME_PREFIX = 'ENCODE_NAME_PREFIX';
var decodeName = function(name, prefix, withExt) {
    try {
        var decodedName = name;
        if (prefix) {
            if (!decodedName.startsWith(prefix)) {
                return decodedName;
            }
            decodedName = decodedName.replace(new RegExp(prefix, 'g'), '');
        }
        decodedName = decodedName.replace(new RegExp(`${NameTransformMap[NameTransformSymbol.AT]}`, 'g'), EncodedNameTransformMap[NameTransformMap[NameTransformSymbol.AT]]).replace(new RegExp(`${NameTransformMap[NameTransformSymbol.SLASH]}`, 'g'), EncodedNameTransformMap[NameTransformMap[NameTransformSymbol.SLASH]]).replace(new RegExp(`${NameTransformMap[NameTransformSymbol.HYPHEN]}`, 'g'), EncodedNameTransformMap[NameTransformMap[NameTransformSymbol.HYPHEN]]);
        if (withExt) ;
        return decodedName;
    } catch (err) {
        throw err;
    }
};
function remotes(options) {
    var chunkId = options.chunkId, promises = options.promises, chunkMapping = options.chunkMapping, idToExternalAndNameMapping = options.idToExternalAndNameMapping, webpackRequire = options.webpackRequire, idToRemoteMap = options.idToRemoteMap;
    attachShareScopeMap(webpackRequire);
    if (webpackRequire.o(chunkMapping, chunkId)) {
        chunkMapping[chunkId].forEach((id)=>{
            var getScope = webpackRequire.R;
            if (!getScope) {
                getScope = [];
            }
            var data = idToExternalAndNameMapping[id];
            var remoteInfos = idToRemoteMap[id];
            // @ts-ignore seems not work
            if (getScope.indexOf(data) >= 0) {
                return;
            }
            // @ts-ignore seems not work
            getScope.push(data);
            if (data.p) {
                return promises.push(data.p);
            }
            var onError = (error)=>{
                if (!error) {
                    error = new Error('Container missing');
                }
                if (typeof error.message === 'string') {
                    error.message += `\nwhile loading "${data[1]}" from ${data[2]}`;
                }
                webpackRequire.m[id] = ()=>{
                    throw error;
                };
                data.p = 0;
            };
            var handleFunction = (fn, arg1, arg2, d, next, first)=>{
                try {
                    var promise = fn(arg1, arg2);
                    if (promise && promise.then) {
                        var p = promise.then((result)=>next(result, d), onError);
                        if (first) {
                            promises.push(data.p = p);
                        } else {
                            return p;
                        }
                    } else {
                        return next(promise, d, first);
                    }
                } catch (error) {
                    onError(error);
                }
            };
            var onExternal = (external, _, first)=>external ? handleFunction(webpackRequire.I, data[0], 0, external, onInitialized, first) : onError();
            // eslint-disable-next-line no-var
            var onInitialized = (_, external, first)=>handleFunction(external.get, data[1], getScope, 0, onFactory, first);
            // eslint-disable-next-line no-var
            var onFactory = (factory)=>{
                data.p = 1;
                webpackRequire.m[id] = (module1)=>{
                    module1.exports = factory();
                };
            };
            var onRemoteLoaded = ()=>{
                try {
                    var remoteName = decodeName(remoteInfos[0].name, ENCODE_NAME_PREFIX);
                    var remoteModuleName = remoteName + data[1].slice(1);
                    var instance = webpackRequire.federation.instance;
                    var loadRemote = ()=>webpackRequire.federation.instance.loadRemote(remoteModuleName, {
                            loadFactory: false,
                            from: 'build'
                        });
                    if (instance.options.shareStrategy === 'version-first') {
                        return Promise.all(instance.sharedHandler.initializeSharing(data[0])).then(()=>{
                            return loadRemote();
                        });
                    }
                    return loadRemote();
                } catch (error) {
                    onError(error);
                }
            };
            var useRuntimeLoad = remoteInfos.length === 1 && constant.FEDERATION_SUPPORTED_TYPES.includes(remoteInfos[0].externalType) && remoteInfos[0].name;
            if (useRuntimeLoad) {
                handleFunction(onRemoteLoaded, data[2], 0, 0, onFactory, 1);
            } else {
                handleFunction(webpackRequire, data[2], 0, 0, onExternal, 1);
            }
        });
    }
}
function consumes(options) {
    var chunkId = options.chunkId, promises = options.promises, chunkMapping = options.chunkMapping, installedModules = options.installedModules, moduleToHandlerMapping = options.moduleToHandlerMapping, webpackRequire = options.webpackRequire;
    attachShareScopeMap(webpackRequire);
    if (webpackRequire.o(chunkMapping, chunkId)) {
        chunkMapping[chunkId].forEach((id)=>{
            if (webpackRequire.o(installedModules, id)) {
                return promises.push(installedModules[id]);
            }
            var onFactory = (factory)=>{
                installedModules[id] = 0;
                webpackRequire.m[id] = (module1)=>{
                    delete webpackRequire.c[id];
                    module1.exports = factory();
                };
            };
            var onError = (error)=>{
                delete installedModules[id];
                webpackRequire.m[id] = (module1)=>{
                    delete webpackRequire.c[id];
                    throw error;
                };
            };
            try {
                var federationInstance = webpackRequire.federation.instance;
                if (!federationInstance) {
                    throw new Error('Federation instance not found!');
                }
                var _moduleToHandlerMapping_id = moduleToHandlerMapping[id], shareKey = _moduleToHandlerMapping_id.shareKey, getter = _moduleToHandlerMapping_id.getter, shareInfo = _moduleToHandlerMapping_id.shareInfo;
                var promise = federationInstance.loadShare(shareKey, {
                    customShareInfo: shareInfo
                }).then((factory)=>{
                    if (factory === false) {
                        return getter();
                    }
                    return factory;
                });
                if (promise.then) {
                    promises.push(installedModules[id] = promise.then(onFactory).catch(onError));
                } else {
                    // @ts-ignore maintain previous logic
                    onFactory(promise);
                }
            } catch (e) {
                onError(e);
            }
        });
    }
}
function initializeSharing(ref) {
    var shareScopeName = ref.shareScopeName, webpackRequire = ref.webpackRequire, initPromises = ref.initPromises, initTokens = ref.initTokens, initScope = ref.initScope;
    if (!initScope) initScope = [];
    var mfInstance = webpackRequire.federation.instance;
    // handling circular init calls
    var initToken = initTokens[shareScopeName];
    if (!initToken) initToken = initTokens[shareScopeName] = {
        from: mfInstance.name
    };
    if (initScope.indexOf(initToken) >= 0) return;
    initScope.push(initToken);
    var promise = initPromises[shareScopeName];
    if (promise) return promise;
    var warn = (msg)=>typeof console !== 'undefined' && console.warn && console.warn(msg);
    var initExternal = (id)=>{
        var handleError = (err)=>warn('Initialization of sharing external failed: ' + err);
        try {
            var _$module = webpackRequire(id);
            if (!_$module) return;
            var initFn = (module1)=>module1 && module1.init && // @ts-ignore compat legacy mf shared behavior
                module1.init(webpackRequire.S[shareScopeName], initScope);
            if (_$module.then) return promises.push(_$module.then(initFn, handleError));
            var initResult = initFn(_$module);
            // @ts-ignore
            if (initResult && typeof initResult !== 'boolean' && initResult.then) // @ts-ignore
            return promises.push(initResult['catch'](handleError));
        } catch (err) {
            handleError(err);
        }
    };
    var promises = mfInstance.initializeSharing(shareScopeName, {
        strategy: mfInstance.options.shareStrategy,
        initScope,
        from: 'build'
    });
    attachShareScopeMap(webpackRequire);
    var bundlerRuntimeRemotesOptions = webpackRequire.federation.bundlerRuntimeOptions.remotes;
    if (bundlerRuntimeRemotesOptions) {
        Object.keys(bundlerRuntimeRemotesOptions.idToRemoteMap).forEach((moduleId)=>{
            var info = bundlerRuntimeRemotesOptions.idToRemoteMap[moduleId];
            var externalModuleId = bundlerRuntimeRemotesOptions.idToExternalAndNameMapping[moduleId][2];
            if (info.length > 1) {
                initExternal(externalModuleId);
            } else if (info.length === 1) {
                var remoteInfo = info[0];
                if (!constant.FEDERATION_SUPPORTED_TYPES.includes(remoteInfo.externalType)) {
                    initExternal(externalModuleId);
                }
            }
        });
    }
    if (!promises.length) {
        return initPromises[shareScopeName] = true;
    }
    return initPromises[shareScopeName] = Promise.all(promises).then(()=>initPromises[shareScopeName] = true);
}
function handleInitialConsumes(options) {
    var moduleId = options.moduleId, moduleToHandlerMapping = options.moduleToHandlerMapping, webpackRequire = options.webpackRequire;
    var federationInstance = webpackRequire.federation.instance;
    if (!federationInstance) {
        throw new Error('Federation instance not found!');
    }
    var _moduleToHandlerMapping_moduleId = moduleToHandlerMapping[moduleId], shareKey = _moduleToHandlerMapping_moduleId.shareKey, shareInfo = _moduleToHandlerMapping_moduleId.shareInfo;
    try {
        return federationInstance.loadShareSync(shareKey, {
            customShareInfo: shareInfo
        });
    } catch (err) {
        console.error('loadShareSync failed! The function should not be called unless you set "eager:true". If you do not set it, and encounter this issue, you can check whether an async boundary is implemented.');
        console.error('The original error message is as follows: ');
        throw err;
    }
}
function installInitialConsumes(options) {
    var moduleToHandlerMapping = options.moduleToHandlerMapping, webpackRequire = options.webpackRequire, installedModules = options.installedModules, initialConsumes = options.initialConsumes;
    initialConsumes.forEach((id)=>{
        webpackRequire.m[id] = (module1)=>{
            // Handle scenario when module is used synchronously
            installedModules[id] = 0;
            delete webpackRequire.c[id];
            var factory = handleInitialConsumes({
                moduleId: id,
                moduleToHandlerMapping,
                webpackRequire
            });
            if (typeof factory !== 'function') {
                throw new Error(`Shared module is not available for eager consumption: ${id}`);
            }
            module1.exports = factory();
        };
    });
}
function initContainerEntry(options) {
    var webpackRequire = options.webpackRequire, shareScope = options.shareScope, initScope = options.initScope, shareScopeKey = options.shareScopeKey, remoteEntryInitOptions = options.remoteEntryInitOptions;
    if (!webpackRequire.S) return;
    if (!webpackRequire.federation || !webpackRequire.federation.instance || !webpackRequire.federation.initOptions) return;
    var federationInstance = webpackRequire.federation.instance;
    var name = shareScopeKey || 'default';
    federationInstance.initOptions(_object_spread._({
        name: webpackRequire.federation.initOptions.name,
        remotes: []
    }, remoteEntryInitOptions));
    federationInstance.initShareScopeMap(name, shareScope, {
        hostShareScopeMap: (remoteEntryInitOptions === null || remoteEntryInitOptions === void 0 ? void 0 : remoteEntryInitOptions.shareScopeMap) || {}
    });
    if (webpackRequire.federation.attachShareScopeMap) {
        webpackRequire.federation.attachShareScopeMap(webpackRequire);
    }
    if (typeof webpackRequire.federation.prefetch === 'function') {
        webpackRequire.federation.prefetch();
    }
    // @ts-ignore
    return webpackRequire.I(name, initScope);
}
var federation = {
    runtime: runtime__namespace,
    instance: undefined,
    initOptions: undefined,
    bundlerRuntime: {
        remotes,
        consumes,
        I: initializeSharing,
        S: {},
        installInitialConsumes,
        initContainerEntry
    },
    attachShareScopeMap,
    bundlerRuntimeOptions: {}
};
module.exports = federation;


}),
92954: (function (__unused_webpack_module, exports) {
"use strict";

function _array_like_to_array(arr, len) {
    if (len == null || len > arr.length) len = arr.length;
    for(var i = 0, arr2 = new Array(len); i < len; i++)arr2[i] = arr[i];
    return arr2;
}
exports._ = _array_like_to_array;


}),
52066: (function (__unused_webpack_module, exports) {
"use strict";

function _array_with_holes(arr) {
    if (Array.isArray(arr)) return arr;
}
exports._ = _array_with_holes;


}),
15769: (function (__unused_webpack_module, exports, __webpack_require__) {
"use strict";

var _array_like_to_array = __webpack_require__(92954);
function _array_without_holes(arr) {
    if (Array.isArray(arr)) return _array_like_to_array._(arr);
}
exports._ = _array_without_holes;


}),
95111: (function (__unused_webpack_module, exports) {
"use strict";

function _assert_this_initialized(self) {
    if (self === void 0) throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
    return self;
}
exports._ = _assert_this_initialized;


}),
11809: (function (__unused_webpack_module, exports) {
"use strict";

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {
    try {
        var info = gen[key](arg);
        var value = info.value;
    } catch (error) {
        reject(error);
        return;
    }
    if (info.done) resolve(value);
    else Promise.resolve(value).then(_next, _throw);
}
function _async_to_generator(fn) {
    return function() {
        var self = this, args = arguments;
        return new Promise(function(resolve, reject) {
            var gen = fn.apply(self, args);
            function _next(value) {
                asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value);
            }
            function _throw(err) {
                asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err);
            }
            _next(undefined);
        });
    };
}
exports._ = _async_to_generator;


}),
19436: (function (__unused_webpack_module, exports, __webpack_require__) {
"use strict";

var _get_prototype_of = __webpack_require__(86880);
var _is_native_reflect_construct = __webpack_require__(26019);
var _possible_constructor_return = __webpack_require__(55176);
function _call_super(_this, derived, args) {
    // Super
    derived = _get_prototype_of._(derived);
    return _possible_constructor_return._(_this, _is_native_reflect_construct._() ? Reflect.construct(derived, args || [], _get_prototype_of._(_this).constructor) : derived.apply(_this, args));
}
exports._ = _call_super;


}),
8864: (function (__unused_webpack_module, exports) {
"use strict";

function _class_call_check(instance, Constructor) {
    if (!(instance instanceof Constructor)) throw new TypeError("Cannot call a class as a function");
}
exports._ = _class_call_check;


}),
28713: (function (__unused_webpack_module, exports) {
"use strict";

function _class_private_field_loose_base(receiver, privateKey) {
    if (!Object.prototype.hasOwnProperty.call(receiver, privateKey)) {
        throw new TypeError("attempted to use private field on non-instance");
    }
    return receiver;
}
exports._ = _class_private_field_loose_base;


}),
7979: (function (__unused_webpack_module, exports) {
"use strict";

var id = 0;
function _class_private_field_loose_key(name) {
    return "__private_" + id++ + "_" + name;
}
exports._ = _class_private_field_loose_key;


}),
98812: (function (__unused_webpack_module, exports, __webpack_require__) {
"use strict";

var _is_native_reflect_construct = __webpack_require__(26019);
var _set_prototype_of = __webpack_require__(40998);
function _construct(Parent, args, Class) {
    if (_is_native_reflect_construct._()) exports._ = _construct = Reflect.construct;
    else {
        exports._ = _construct = function construct(Parent, args, Class) {
            var a = [
                null
            ];
            a.push.apply(a, args);
            var Constructor = Function.bind.apply(Parent, a);
            var instance = new Constructor();
            if (Class) _set_prototype_of._(instance, Class.prototype);
            return instance;
        };
    }
    return _construct.apply(null, arguments);
}
exports._ = _construct;


}),
93072: (function (__unused_webpack_module, exports) {
"use strict";

function _defineProperties(target, props) {
    for(var i = 0; i < props.length; i++){
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor) descriptor.writable = true;
        Object.defineProperty(target, descriptor.key, descriptor);
    }
}
function _create_class(Constructor, protoProps, staticProps) {
    if (protoProps) _defineProperties(Constructor.prototype, protoProps);
    if (staticProps) _defineProperties(Constructor, staticProps);
    return Constructor;
}
exports._ = _create_class;


}),
52193: (function (__unused_webpack_module, exports) {
"use strict";

function _define_property(obj, key, value) {
    if (key in obj) {
        Object.defineProperty(obj, key, {
            value: value,
            enumerable: true,
            configurable: true,
            writable: true
        });
    } else obj[key] = value;
    return obj;
}
exports._ = _define_property;


}),
4084: (function (__unused_webpack_module, exports) {
"use strict";

function _export_star(from, to) {
    Object.keys(from).forEach(function(k) {
        if (k !== "default" && !Object.prototype.hasOwnProperty.call(to, k)) {
            Object.defineProperty(to, k, {
                enumerable: true,
                get: function() {
                    return from[k];
                }
            });
        }
    });
    return from;
}
exports._ = _export_star;


}),
616: (function (__unused_webpack_module, exports, __webpack_require__) {
"use strict";

var _super_prop_base = __webpack_require__(70777);
function _get(target, property, receiver) {
    if (typeof Reflect !== "undefined" && Reflect.get) exports._ = _get = Reflect.get;
    else {
        exports._ = _get = function get(target, property, receiver) {
            var base = _super_prop_base._(target, property);
            if (!base) return;
            var desc = Object.getOwnPropertyDescriptor(base, property);
            if (desc.get) return desc.get.call(receiver || target);
            return desc.value;
        };
    }
    return _get(target, property, receiver || target);
}
exports._ = _get;


}),
86880: (function (__unused_webpack_module, exports) {
"use strict";

function _get_prototype_of(o) {
    exports._ = _get_prototype_of = Object.setPrototypeOf ? Object.getPrototypeOf : function getPrototypeOf(o) {
        return o.__proto__ || Object.getPrototypeOf(o);
    };
    return _get_prototype_of(o);
}
exports._ = _get_prototype_of;


}),
82397: (function (__unused_webpack_module, exports, __webpack_require__) {
"use strict";

var _set_prototype_of = __webpack_require__(40998);
function _inherits(subClass, superClass) {
    if (typeof superClass !== "function" && superClass !== null) {
        throw new TypeError("Super expression must either be null or a function");
    }
    subClass.prototype = Object.create(superClass && superClass.prototype, {
        constructor: {
            value: subClass,
            writable: true,
            configurable: true
        }
    });
    if (superClass) _set_prototype_of._(subClass, superClass);
}
exports._ = _inherits;


}),
66705: (function (__unused_webpack_module, exports) {
"use strict";

function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
exports._ = _interop_require_default;


}),
83610: (function (__unused_webpack_module, exports) {
"use strict";

function _getRequireWildcardCache(nodeInterop) {
    if (typeof WeakMap !== "function") return null;
    var cacheBabelInterop = new WeakMap();
    var cacheNodeInterop = new WeakMap();
    return (_getRequireWildcardCache = function(nodeInterop) {
        return nodeInterop ? cacheNodeInterop : cacheBabelInterop;
    })(nodeInterop);
}
function _interop_require_wildcard(obj, nodeInterop) {
    if (!nodeInterop && obj && obj.__esModule) return obj;
    if (obj === null || typeof obj !== "object" && typeof obj !== "function") return {
        default: obj
    };
    var cache = _getRequireWildcardCache(nodeInterop);
    if (cache && cache.has(obj)) return cache.get(obj);
    var newObj = {
        __proto__: null
    };
    var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
    for(var key in obj){
        if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
            var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
            if (desc && (desc.get || desc.set)) Object.defineProperty(newObj, key, desc);
            else newObj[key] = obj[key];
        }
    }
    newObj.default = obj;
    if (cache) cache.set(obj, newObj);
    return newObj;
}
exports._ = _interop_require_wildcard;


}),
5534: (function (__unused_webpack_module, exports) {
"use strict";

function _is_native_function(fn) {
    return Function.toString.call(fn).indexOf("[native code]") !== -1;
}
exports._ = _is_native_function;


}),
26019: (function (__unused_webpack_module, exports) {
"use strict";

function _is_native_reflect_construct() {
    // Since Reflect.construct can't be properly polyfilled, some
    // implementations (e.g. core-js@2) don't set the correct internal slots.
    // Those polyfills don't allow us to subclass built-ins, so we need to
    // use our fallback implementation.
    try {
        // If the internal slots aren't set, this throws an error similar to
        //   TypeError: this is not a Boolean object.
        var result = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {}));
    } catch (_) {}
    return (exports._ = _is_native_reflect_construct = function() {
        return !!result;
    })();
}
exports._ = _is_native_reflect_construct;


}),
22104: (function (__unused_webpack_module, exports) {
"use strict";

function _iterable_to_array(iter) {
    if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) {
        return Array.from(iter);
    }
}
exports._ = _iterable_to_array;


}),
55730: (function (__unused_webpack_module, exports) {
"use strict";

function _iterable_to_array_limit(arr, i) {
    var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"];
    if (_i == null) return;
    var _arr = [];
    var _n = true;
    var _d = false;
    var _s, _e;
    try {
        for(_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true){
            _arr.push(_s.value);
            if (i && _arr.length === i) break;
        }
    } catch (err) {
        _d = true;
        _e = err;
    } finally{
        try {
            if (!_n && _i["return"] != null) _i["return"]();
        } finally{
            if (_d) throw _e;
        }
    }
    return _arr;
}
exports._ = _iterable_to_array_limit;


}),
93467: (function (__unused_webpack_module, exports) {
"use strict";

function _non_iterable_rest() {
    throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}
exports._ = _non_iterable_rest;


}),
61506: (function (__unused_webpack_module, exports) {
"use strict";

function _non_iterable_spread() {
    throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}
exports._ = _non_iterable_spread;


}),
36192: (function (__unused_webpack_module, exports, __webpack_require__) {
"use strict";

var _define_property = __webpack_require__(52193);
function _object_spread(target) {
    for(var i = 1; i < arguments.length; i++){
        var source = arguments[i] != null ? arguments[i] : {};
        var ownKeys = Object.keys(source);
        if (typeof Object.getOwnPropertySymbols === "function") {
            ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function(sym) {
                return Object.getOwnPropertyDescriptor(source, sym).enumerable;
            }));
        }
        ownKeys.forEach(function(key) {
            _define_property._(target, key, source[key]);
        });
    }
    return target;
}
exports._ = _object_spread;


}),
83590: (function (__unused_webpack_module, exports) {
"use strict";

function ownKeys(object, enumerableOnly) {
    var keys = Object.keys(object);
    if (Object.getOwnPropertySymbols) {
        var symbols = Object.getOwnPropertySymbols(object);
        if (enumerableOnly) {
            symbols = symbols.filter(function(sym) {
                return Object.getOwnPropertyDescriptor(object, sym).enumerable;
            });
        }
        keys.push.apply(keys, symbols);
    }
    return keys;
}
function _object_spread_props(target, source) {
    source = source != null ? source : {};
    if (Object.getOwnPropertyDescriptors) Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
    else {
        ownKeys(Object(source)).forEach(function(key) {
            Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
        });
    }
    return target;
}
exports._ = _object_spread_props;


}),
86136: (function (__unused_webpack_module, exports, __webpack_require__) {
"use strict";

var _object_without_properties_loose = __webpack_require__(3574);
function _object_without_properties(source, excluded) {
    if (source == null) return {};
    var target = _object_without_properties_loose._(source, excluded);
    var key, i;
    if (Object.getOwnPropertySymbols) {
        var sourceSymbolKeys = Object.getOwnPropertySymbols(source);
        for(i = 0; i < sourceSymbolKeys.length; i++){
            key = sourceSymbolKeys[i];
            if (excluded.indexOf(key) >= 0) continue;
            if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;
            target[key] = source[key];
        }
    }
    return target;
}
exports._ = _object_without_properties;


}),
3574: (function (__unused_webpack_module, exports) {
"use strict";

function _object_without_properties_loose(source, excluded) {
    if (source == null) return {};
    var target = {};
    var sourceKeys = Object.keys(source);
    var key, i;
    for(i = 0; i < sourceKeys.length; i++){
        key = sourceKeys[i];
        if (excluded.indexOf(key) >= 0) continue;
        target[key] = source[key];
    }
    return target;
}
exports._ = _object_without_properties_loose;


}),
55176: (function (__unused_webpack_module, exports, __webpack_require__) {
"use strict";

var _assert_this_initialized = __webpack_require__(95111);
var _type_of = __webpack_require__(94210);
function _possible_constructor_return(self, call) {
    if (call && (_type_of._(call) === "object" || typeof call === "function")) return call;
    return _assert_this_initialized._(self);
}
exports._ = _possible_constructor_return;


}),
40998: (function (__unused_webpack_module, exports) {
"use strict";

function _set_prototype_of(o, p) {
    exports._ = _set_prototype_of = Object.setPrototypeOf || function setPrototypeOf(o, p) {
        o.__proto__ = p;
        return o;
    };
    return _set_prototype_of(o, p);
}
exports._ = _set_prototype_of;


}),
78474: (function (__unused_webpack_module, exports, __webpack_require__) {
"use strict";

var _array_with_holes = __webpack_require__(52066);
var _iterable_to_array_limit = __webpack_require__(55730);
var _non_iterable_rest = __webpack_require__(93467);
var _unsupported_iterable_to_array = __webpack_require__(21859);
function _sliced_to_array(arr, i) {
    return _array_with_holes._(arr) || _iterable_to_array_limit._(arr, i) || _unsupported_iterable_to_array._(arr, i) || _non_iterable_rest._();
}
exports._ = _sliced_to_array;


}),
70777: (function (__unused_webpack_module, exports, __webpack_require__) {
"use strict";

var _get_prototype_of = __webpack_require__(86880);
function _super_prop_base(object, property) {
    while(!Object.prototype.hasOwnProperty.call(object, property)){
        object = _get_prototype_of._(object);
        if (object === null) break;
    }
    return object;
}
exports._ = _super_prop_base;


}),
12309: (function (__unused_webpack_module, exports, __webpack_require__) {
"use strict";

var _array_with_holes = __webpack_require__(52066);
var _iterable_to_array = __webpack_require__(22104);
var _non_iterable_rest = __webpack_require__(93467);
var _unsupported_iterable_to_array = __webpack_require__(21859);
function _to_array(arr) {
    return _array_with_holes._(arr) || _iterable_to_array._(arr) || _unsupported_iterable_to_array._(arr) || _non_iterable_rest._();
}
exports._ = _to_array;


}),
92716: (function (__unused_webpack_module, exports, __webpack_require__) {
"use strict";

var _array_without_holes = __webpack_require__(15769);
var _iterable_to_array = __webpack_require__(22104);
var _non_iterable_spread = __webpack_require__(61506);
var _unsupported_iterable_to_array = __webpack_require__(21859);
function _to_consumable_array(arr) {
    return _array_without_holes._(arr) || _iterable_to_array._(arr) || _unsupported_iterable_to_array._(arr) || _non_iterable_spread._();
}
exports._ = _to_consumable_array;


}),
94210: (function (__unused_webpack_module, exports) {
"use strict";

function _type_of(obj) {
    "@swc/helpers - typeof";
    return obj && typeof Symbol !== "undefined" && obj.constructor === Symbol ? "symbol" : typeof obj;
}
exports._ = _type_of;


}),
21859: (function (__unused_webpack_module, exports, __webpack_require__) {
"use strict";

var _array_like_to_array = __webpack_require__(92954);
function _unsupported_iterable_to_array(o, minLen) {
    if (!o) return;
    if (typeof o === "string") return _array_like_to_array._(o, minLen);
    var n = Object.prototype.toString.call(o).slice(8, -1);
    if (n === "Object" && o.constructor) n = o.constructor.name;
    if (n === "Map" || n === "Set") return Array.from(n);
    if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _array_like_to_array._(o, minLen);
}
exports._ = _unsupported_iterable_to_array;


}),
30753: (function (__unused_webpack_module, exports, __webpack_require__) {
"use strict";

var _construct = __webpack_require__(98812);
var _get_prototype_of = __webpack_require__(86880);
var _is_native_function = __webpack_require__(5534);
var _set_prototype_of = __webpack_require__(40998);
function _wrap_native_super(Class) {
    var _cache = typeof Map === "function" ? new Map() : undefined;
    exports._ = _wrap_native_super = function(Class) {
        if (Class === null || !_is_native_function._(Class)) return Class;
        if (typeof Class !== "function") throw new TypeError("Super expression must either be null or a function");
        if (typeof _cache !== "undefined") {
            if (_cache.has(Class)) return _cache.get(Class);
            _cache.set(Class, Wrapper);
        }
        function Wrapper() {
            return _construct._(Class, arguments, _get_prototype_of._(this).constructor);
        }
        Wrapper.prototype = Object.create(Class.prototype, {
            constructor: {
                value: Wrapper,
                enumerable: false,
                writable: true,
                configurable: true
            }
        });
        return _set_prototype_of._(Wrapper, Class);
    };
    return _wrap_native_super(Class);
}
exports._ = _wrap_native_super;


}),
33352: (function (module, exports, __webpack_require__) {
"use strict";
/**
 * @author Toru Nagashima <https://github.com/mysticatea>
 * See LICENSE file in root directory for full license.
 */ 
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
var _call_super = __webpack_require__(19436);
var _class_call_check = __webpack_require__(8864);
var _create_class = __webpack_require__(93072);
var _inherits = __webpack_require__(82397);
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
var eventTargetShim = __webpack_require__(65803);
/**
 * The signal class.
 * @see https://dom.spec.whatwg.org/#abortsignal
 */ var AbortSignal = /*#__PURE__*/ function(_eventTargetShim_EventTarget) {
    _inherits._(AbortSignal, _eventTargetShim_EventTarget);
    function AbortSignal() {
        _class_call_check._(this, AbortSignal);
        var _this;
        _this = _call_super._(this, AbortSignal);
        throw new TypeError("AbortSignal cannot be constructed directly");
        return _this;
    }
    _create_class._(AbortSignal, [
        {
            key: "aborted",
            get: /**
     * Returns `true` if this `AbortSignal`'s `AbortController` has signaled to abort, and `false` otherwise.
     */ function() {
                var aborted = abortedFlags.get(this);
                if (typeof aborted !== "boolean") {
                    throw new TypeError(`Expected 'this' to be an 'AbortSignal' object, but got ${this === null ? "null" : typeof this}`);
                }
                return aborted;
            }
        }
    ]);
    return AbortSignal;
}(eventTargetShim.EventTarget);
eventTargetShim.defineEventAttribute(AbortSignal.prototype, "abort");
/**
 * Create an AbortSignal object.
 */ function createAbortSignal() {
    var signal = Object.create(AbortSignal.prototype);
    eventTargetShim.EventTarget.call(signal);
    abortedFlags.set(signal, false);
    return signal;
}
/**
 * Abort a given signal.
 */ function abortSignal(signal) {
    if (abortedFlags.get(signal) !== false) {
        return;
    }
    abortedFlags.set(signal, true);
    signal.dispatchEvent({
        type: "abort"
    });
}
/**
 * Aborted flag for each instances.
 */ var abortedFlags = new WeakMap();
// Properties should be enumerable.
Object.defineProperties(AbortSignal.prototype, {
    aborted: {
        enumerable: true
    }
});
// `toString()` should return `"[object AbortSignal]"`
if (typeof Symbol === "function" && typeof Symbol.toStringTag === "symbol") {
    Object.defineProperty(AbortSignal.prototype, Symbol.toStringTag, {
        configurable: true,
        value: "AbortSignal"
    });
}
/**
 * The AbortController.
 * @see https://dom.spec.whatwg.org/#abortcontroller
 */ var AbortController = /*#__PURE__*/ function() {
    function AbortController() {
        _class_call_check._(this, AbortController);
        signals.set(this, createAbortSignal());
    }
    _create_class._(AbortController, [
        {
            key: "signal",
            get: /**
     * Returns the `AbortSignal` object associated with this object.
     */ function() {
                return getSignal(this);
            }
        },
        {
            /**
     * Abort and signal to any observers that the associated activity is to be aborted.
     */ key: "abort",
            value: function abort() {
                abortSignal(getSignal(this));
            }
        }
    ]);
    return AbortController;
}();
/**
 * Associated signals.
 */ var signals = new WeakMap();
/**
 * Get the associated signal of a given controller.
 */ function getSignal(controller) {
    var signal = signals.get(controller);
    if (signal == null) {
        throw new TypeError(`Expected 'this' to be an 'AbortController' object, but got ${controller === null ? "null" : typeof controller}`);
    }
    return signal;
}
// Properties should be enumerable.
Object.defineProperties(AbortController.prototype, {
    signal: {
        enumerable: true
    },
    abort: {
        enumerable: true
    }
});
if (typeof Symbol === "function" && typeof Symbol.toStringTag === "symbol") {
    Object.defineProperty(AbortController.prototype, Symbol.toStringTag, {
        configurable: true,
        value: "AbortController"
    });
}
exports.AbortController = AbortController;
exports.AbortSignal = AbortSignal;
exports["default"] = AbortController;
module.exports = AbortController;
module.exports.AbortController = module.exports["default"] = AbortController;
module.exports.AbortSignal = AbortSignal; //# sourceMappingURL=abort-controller.js.map


}),
66656: (function (__unused_webpack_module, exports, __webpack_require__) {
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: Object.getOwnPropertyDescriptor(all, name).get
    });
}
_export(exports, {
    get NormalizedScriptLocatorHTTPMethod () {
        return NormalizedScriptLocatorHTTPMethod;
    },
    get NormalizedScriptLocatorSignatureVerificationMode () {
        return NormalizedScriptLocatorSignatureVerificationMode;
    },
    get default () {
        return _default;
    }
});
var _reactnative = __webpack_require__(3345);
var NormalizedScriptLocatorHTTPMethod = function(NormalizedScriptLocatorHTTPMethod) {
    NormalizedScriptLocatorHTTPMethod["GET"] = "GET";
    NormalizedScriptLocatorHTTPMethod["POST"] = "POST";
    return NormalizedScriptLocatorHTTPMethod;
}({});
var NormalizedScriptLocatorSignatureVerificationMode = function(NormalizedScriptLocatorSignatureVerificationMode) {
    NormalizedScriptLocatorSignatureVerificationMode["STRICT"] = "strict";
    NormalizedScriptLocatorSignatureVerificationMode["LAX"] = "lax";
    NormalizedScriptLocatorSignatureVerificationMode["OFF"] = "off";
    return NormalizedScriptLocatorSignatureVerificationMode;
}({});
var _default = _reactnative.TurboModuleRegistry.get('ScriptManager');


}),
25608: (function (__unused_webpack_module, exports) {
"use strict";

exports.byteLength = byteLength;
exports.toByteArray = toByteArray;
exports.fromByteArray = fromByteArray;
var lookup = [];
var revLookup = [];
var Arr = typeof Uint8Array !== 'undefined' ? Uint8Array : Array;
var code = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';
for(var i = 0, len = code.length; i < len; ++i){
    lookup[i] = code[i];
    revLookup[code.charCodeAt(i)] = i;
}
// Support decoding URL-safe base64 strings, as Node.js does.
// See: https://en.wikipedia.org/wiki/Base64#URL_applications
revLookup['-'.charCodeAt(0)] = 62;
revLookup['_'.charCodeAt(0)] = 63;
function getLens(b64) {
    var len = b64.length;
    if (len % 4 > 0) {
        throw new Error('Invalid string. Length must be a multiple of 4');
    }
    // Trim off extra bytes after placeholder bytes are found
    // See: https://github.com/beatgammit/base64-js/issues/42
    var validLen = b64.indexOf('=');
    if (validLen === -1) validLen = len;
    var placeHoldersLen = validLen === len ? 0 : 4 - validLen % 4;
    return [
        validLen,
        placeHoldersLen
    ];
}
// base64 is 4/3 + up to two characters of the original data
function byteLength(b64) {
    var lens = getLens(b64);
    var validLen = lens[0];
    var placeHoldersLen = lens[1];
    return (validLen + placeHoldersLen) * 3 / 4 - placeHoldersLen;
}
function _byteLength(b64, validLen, placeHoldersLen) {
    return (validLen + placeHoldersLen) * 3 / 4 - placeHoldersLen;
}
function toByteArray(b64) {
    var tmp;
    var lens = getLens(b64);
    var validLen = lens[0];
    var placeHoldersLen = lens[1];
    var arr = new Arr(_byteLength(b64, validLen, placeHoldersLen));
    var curByte = 0;
    // if there are placeholders, only get up to the last complete 4 chars
    var len = placeHoldersLen > 0 ? validLen - 4 : validLen;
    var i;
    for(i = 0; i < len; i += 4){
        tmp = revLookup[b64.charCodeAt(i)] << 18 | revLookup[b64.charCodeAt(i + 1)] << 12 | revLookup[b64.charCodeAt(i + 2)] << 6 | revLookup[b64.charCodeAt(i + 3)];
        arr[curByte++] = tmp >> 16 & 0xFF;
        arr[curByte++] = tmp >> 8 & 0xFF;
        arr[curByte++] = tmp & 0xFF;
    }
    if (placeHoldersLen === 2) {
        tmp = revLookup[b64.charCodeAt(i)] << 2 | revLookup[b64.charCodeAt(i + 1)] >> 4;
        arr[curByte++] = tmp & 0xFF;
    }
    if (placeHoldersLen === 1) {
        tmp = revLookup[b64.charCodeAt(i)] << 10 | revLookup[b64.charCodeAt(i + 1)] << 4 | revLookup[b64.charCodeAt(i + 2)] >> 2;
        arr[curByte++] = tmp >> 8 & 0xFF;
        arr[curByte++] = tmp & 0xFF;
    }
    return arr;
}
function tripletToBase64(num) {
    return lookup[num >> 18 & 0x3F] + lookup[num >> 12 & 0x3F] + lookup[num >> 6 & 0x3F] + lookup[num & 0x3F];
}
function encodeChunk(uint8, start, end) {
    var tmp;
    var output = [];
    for(var i = start; i < end; i += 3){
        tmp = (uint8[i] << 16 & 0xFF0000) + (uint8[i + 1] << 8 & 0xFF00) + (uint8[i + 2] & 0xFF);
        output.push(tripletToBase64(tmp));
    }
    return output.join('');
}
function fromByteArray(uint8) {
    var tmp;
    var len = uint8.length;
    var extraBytes = len % 3 // if we have 1 byte left, pad 2 bytes
    ;
    var parts = [];
    var maxChunkLength = 16383 // must be multiple of 3
    ;
    // go through the array every three bytes, we'll deal with trailing stuff later
    for(var i = 0, len2 = len - extraBytes; i < len2; i += maxChunkLength){
        parts.push(encodeChunk(uint8, i, i + maxChunkLength > len2 ? len2 : i + maxChunkLength));
    }
    // pad the end with zeros, but make sure to not forget the extra bytes
    if (extraBytes === 1) {
        tmp = uint8[len - 1];
        parts.push(lookup[tmp >> 2] + lookup[tmp << 4 & 0x3F] + '==');
    } else if (extraBytes === 2) {
        tmp = (uint8[len - 2] << 8) + uint8[len - 1];
        parts.push(lookup[tmp >> 10] + lookup[tmp >> 4 & 0x3F] + lookup[tmp << 2 & 0x3F] + '=');
    }
    return parts.join('');
}


}),
65803: (function (module, exports) {
"use strict";
/**
 * @author Toru Nagashima <https://github.com/mysticatea>
 * @copyright 2015 Toru Nagashima. All rights reserved.
 * See LICENSE file in root directory for full license.
 */ 
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
/**
 * @typedef {object} PrivateData
 * @property {EventTarget} eventTarget The event target.
 * @property {{type:string}} event The original event object.
 * @property {number} eventPhase The current event phase.
 * @property {EventTarget|null} currentTarget The current event target.
 * @property {boolean} canceled The flag to prevent default.
 * @property {boolean} stopped The flag to stop propagation.
 * @property {boolean} immediateStopped The flag to stop propagation immediately.
 * @property {Function|null} passiveListener The listener if the current listener is passive. Otherwise this is null.
 * @property {number} timeStamp The unix time.
 * @private
 */ /**
 * Private data for event wrappers.
 * @type {WeakMap<Event, PrivateData>}
 * @private
 */ var privateData = new WeakMap();
/**
 * Cache for wrapper classes.
 * @type {WeakMap<Object, Function>}
 * @private
 */ var wrappers = new WeakMap();
/**
 * Get private data.
 * @param {Event} event The event object to get private data.
 * @returns {PrivateData} The private data of the event.
 * @private
 */ function pd(event) {
    var retv = privateData.get(event);
    console.assert(retv != null, "'this' is expected an Event object, but got", event);
    return retv;
}
/**
 * https://dom.spec.whatwg.org/#set-the-canceled-flag
 * @param data {PrivateData} private data.
 */ function setCancelFlag(data) {
    if (data.passiveListener != null) {
        if (typeof console !== "undefined" && typeof console.error === "function") {
            console.error("Unable to preventDefault inside passive event listener invocation.", data.passiveListener);
        }
        return;
    }
    if (!data.event.cancelable) {
        return;
    }
    data.canceled = true;
    if (typeof data.event.preventDefault === "function") {
        data.event.preventDefault();
    }
}
/**
 * @see https://dom.spec.whatwg.org/#interface-event
 * @private
 */ /**
 * The event wrapper.
 * @constructor
 * @param {EventTarget} eventTarget The event target of this dispatching.
 * @param {Event|{type:string}} event The original event to wrap.
 */ function Event(eventTarget, event) {
    privateData.set(this, {
        eventTarget,
        event,
        eventPhase: 2,
        currentTarget: eventTarget,
        canceled: false,
        stopped: false,
        immediateStopped: false,
        passiveListener: null,
        timeStamp: event.timeStamp || Date.now()
    });
    // https://heycam.github.io/webidl/#Unforgeable
    Object.defineProperty(this, "isTrusted", {
        value: false,
        enumerable: true
    });
    // Define accessors
    var keys = Object.keys(event);
    for(var i = 0; i < keys.length; ++i){
        var key = keys[i];
        if (!(key in this)) {
            Object.defineProperty(this, key, defineRedirectDescriptor(key));
        }
    }
}
// Should be enumerable, but class methods are not enumerable.
Event.prototype = {
    /**
     * The type of this event.
     * @type {string}
     */ get type () {
        return pd(this).event.type;
    },
    /**
     * The target of this event.
     * @type {EventTarget}
     */ get target () {
        return pd(this).eventTarget;
    },
    /**
     * The target of this event.
     * @type {EventTarget}
     */ get currentTarget () {
        return pd(this).currentTarget;
    },
    /**
     * @returns {EventTarget[]} The composed path of this event.
     */ composedPath () {
        var currentTarget = pd(this).currentTarget;
        if (currentTarget == null) {
            return [];
        }
        return [
            currentTarget
        ];
    },
    /**
     * Constant of NONE.
     * @type {number}
     */ get NONE () {
        return 0;
    },
    /**
     * Constant of CAPTURING_PHASE.
     * @type {number}
     */ get CAPTURING_PHASE () {
        return 1;
    },
    /**
     * Constant of AT_TARGET.
     * @type {number}
     */ get AT_TARGET () {
        return 2;
    },
    /**
     * Constant of BUBBLING_PHASE.
     * @type {number}
     */ get BUBBLING_PHASE () {
        return 3;
    },
    /**
     * The target of this event.
     * @type {number}
     */ get eventPhase () {
        return pd(this).eventPhase;
    },
    /**
     * Stop event bubbling.
     * @returns {void}
     */ stopPropagation () {
        var data = pd(this);
        data.stopped = true;
        if (typeof data.event.stopPropagation === "function") {
            data.event.stopPropagation();
        }
    },
    /**
     * Stop event bubbling.
     * @returns {void}
     */ stopImmediatePropagation () {
        var data = pd(this);
        data.stopped = true;
        data.immediateStopped = true;
        if (typeof data.event.stopImmediatePropagation === "function") {
            data.event.stopImmediatePropagation();
        }
    },
    /**
     * The flag to be bubbling.
     * @type {boolean}
     */ get bubbles () {
        return Boolean(pd(this).event.bubbles);
    },
    /**
     * The flag to be cancelable.
     * @type {boolean}
     */ get cancelable () {
        return Boolean(pd(this).event.cancelable);
    },
    /**
     * Cancel this event.
     * @returns {void}
     */ preventDefault () {
        setCancelFlag(pd(this));
    },
    /**
     * The flag to indicate cancellation state.
     * @type {boolean}
     */ get defaultPrevented () {
        return pd(this).canceled;
    },
    /**
     * The flag to be composed.
     * @type {boolean}
     */ get composed () {
        return Boolean(pd(this).event.composed);
    },
    /**
     * The unix time of this event.
     * @type {number}
     */ get timeStamp () {
        return pd(this).timeStamp;
    },
    /**
     * The target of this event.
     * @type {EventTarget}
     * @deprecated
     */ get srcElement () {
        return pd(this).eventTarget;
    },
    /**
     * The flag to stop event bubbling.
     * @type {boolean}
     * @deprecated
     */ get cancelBubble () {
        return pd(this).stopped;
    },
    set cancelBubble (value){
        if (!value) {
            return;
        }
        var data = pd(this);
        data.stopped = true;
        if (typeof data.event.cancelBubble === "boolean") {
            data.event.cancelBubble = true;
        }
    },
    /**
     * The flag to indicate cancellation state.
     * @type {boolean}
     * @deprecated
     */ get returnValue () {
        return !pd(this).canceled;
    },
    set returnValue (value){
        if (!value) {
            setCancelFlag(pd(this));
        }
    },
    /**
     * Initialize this event object. But do nothing under event dispatching.
     * @param {string} type The event type.
     * @param {boolean} [bubbles=false] The flag to be possible to bubble up.
     * @param {boolean} [cancelable=false] The flag to be possible to cancel.
     * @deprecated
     */ initEvent () {
    // Do nothing.
    }
};
// `constructor` is not enumerable.
Object.defineProperty(Event.prototype, "constructor", {
    value: Event,
    configurable: true,
    writable: true
});
// Ensure `event instanceof window.Event` is `true`.
if (typeof window !== "undefined" && typeof window.Event !== "undefined") {
    Object.setPrototypeOf(Event.prototype, window.Event.prototype);
    // Make association for wrappers.
    wrappers.set(window.Event.prototype, Event);
}
/**
 * Get the property descriptor to redirect a given property.
 * @param {string} key Property name to define property descriptor.
 * @returns {PropertyDescriptor} The property descriptor to redirect the property.
 * @private
 */ function defineRedirectDescriptor(key) {
    return {
        get () {
            return pd(this).event[key];
        },
        set (value1) {
            pd(this).event[key] = value1;
        },
        configurable: true,
        enumerable: true
    };
}
/**
 * Get the property descriptor to call a given method property.
 * @param {string} key Property name to define property descriptor.
 * @returns {PropertyDescriptor} The property descriptor to call the method property.
 * @private
 */ function defineCallDescriptor(key) {
    return {
        value () {
            var event = pd(this).event;
            return event[key].apply(event, arguments);
        },
        configurable: true,
        enumerable: true
    };
}
/**
 * Define new wrapper class.
 * @param {Function} BaseEvent The base wrapper class.
 * @param {Object} proto The prototype of the original event.
 * @returns {Function} The defined wrapper class.
 * @private
 */ function defineWrapper(BaseEvent, proto) {
    var keys = Object.keys(proto);
    if (keys.length === 0) {
        return BaseEvent;
    }
    /** CustomEvent */ function CustomEvent(eventTarget, event) {
        BaseEvent.call(this, eventTarget, event);
    }
    CustomEvent.prototype = Object.create(BaseEvent.prototype, {
        constructor: {
            value: CustomEvent,
            configurable: true,
            writable: true
        }
    });
    // Define accessors.
    for(var i = 0; i < keys.length; ++i){
        var key = keys[i];
        if (!(key in BaseEvent.prototype)) {
            var descriptor = Object.getOwnPropertyDescriptor(proto, key);
            var isFunc = typeof descriptor.value === "function";
            Object.defineProperty(CustomEvent.prototype, key, isFunc ? defineCallDescriptor(key) : defineRedirectDescriptor(key));
        }
    }
    return CustomEvent;
}
/**
 * Get the wrapper class of a given prototype.
 * @param {Object} proto The prototype of the original event to get its wrapper.
 * @returns {Function} The wrapper class.
 * @private
 */ function getWrapper(proto) {
    if (proto == null || proto === Object.prototype) {
        return Event;
    }
    var wrapper = wrappers.get(proto);
    if (wrapper == null) {
        wrapper = defineWrapper(getWrapper(Object.getPrototypeOf(proto)), proto);
        wrappers.set(proto, wrapper);
    }
    return wrapper;
}
/**
 * Wrap a given event to management a dispatching.
 * @param {EventTarget} eventTarget The event target of this dispatching.
 * @param {Object} event The event to wrap.
 * @returns {Event} The wrapper instance.
 * @private
 */ function wrapEvent(eventTarget, event) {
    var Wrapper = getWrapper(Object.getPrototypeOf(event));
    return new Wrapper(eventTarget, event);
}
/**
 * Get the immediateStopped flag of a given event.
 * @param {Event} event The event to get.
 * @returns {boolean} The flag to stop propagation immediately.
 * @private
 */ function isStopped(event) {
    return pd(event).immediateStopped;
}
/**
 * Set the current event phase of a given event.
 * @param {Event} event The event to set current target.
 * @param {number} eventPhase New event phase.
 * @returns {void}
 * @private
 */ function setEventPhase(event, eventPhase) {
    pd(event).eventPhase = eventPhase;
}
/**
 * Set the current target of a given event.
 * @param {Event} event The event to set current target.
 * @param {EventTarget|null} currentTarget New current target.
 * @returns {void}
 * @private
 */ function setCurrentTarget(event, currentTarget) {
    pd(event).currentTarget = currentTarget;
}
/**
 * Set a passive listener of a given event.
 * @param {Event} event The event to set current target.
 * @param {Function|null} passiveListener New passive listener.
 * @returns {void}
 * @private
 */ function setPassiveListener(event, passiveListener) {
    pd(event).passiveListener = passiveListener;
}
/**
 * @typedef {object} ListenerNode
 * @property {Function} listener
 * @property {1|2|3} listenerType
 * @property {boolean} passive
 * @property {boolean} once
 * @property {ListenerNode|null} next
 * @private
 */ /**
 * @type {WeakMap<object, Map<string, ListenerNode>>}
 * @private
 */ var listenersMap = new WeakMap();
// Listener types
var CAPTURE = 1;
var BUBBLE = 2;
var ATTRIBUTE = 3;
/**
 * Check whether a given value is an object or not.
 * @param {any} x The value to check.
 * @returns {boolean} `true` if the value is an object.
 */ function isObject(x) {
    return x !== null && typeof x === "object" //eslint-disable-line no-restricted-syntax
    ;
}
/**
 * Get listeners.
 * @param {EventTarget} eventTarget The event target to get.
 * @returns {Map<string, ListenerNode>} The listeners.
 * @private
 */ function getListeners(eventTarget) {
    var listeners = listenersMap.get(eventTarget);
    if (listeners == null) {
        throw new TypeError("'this' is expected an EventTarget object, but got another value.");
    }
    return listeners;
}
/**
 * Get the property descriptor for the event attribute of a given event.
 * @param {string} eventName The event name to get property descriptor.
 * @returns {PropertyDescriptor} The property descriptor.
 * @private
 */ function defineEventAttributeDescriptor(eventName) {
    return {
        get () {
            var listeners = getListeners(this);
            var node = listeners.get(eventName);
            while(node != null){
                if (node.listenerType === ATTRIBUTE) {
                    return node.listener;
                }
                node = node.next;
            }
            return null;
        },
        set (listener) {
            if (typeof listener !== "function" && !isObject(listener)) {
                listener = null; // eslint-disable-line no-param-reassign
            }
            var listeners = getListeners(this);
            // Traverse to the tail while removing old value.
            var prev = null;
            var node = listeners.get(eventName);
            while(node != null){
                if (node.listenerType === ATTRIBUTE) {
                    // Remove old value.
                    if (prev !== null) {
                        prev.next = node.next;
                    } else if (node.next !== null) {
                        listeners.set(eventName, node.next);
                    } else {
                        listeners.delete(eventName);
                    }
                } else {
                    prev = node;
                }
                node = node.next;
            }
            // Add new value.
            if (listener !== null) {
                var newNode = {
                    listener,
                    listenerType: ATTRIBUTE,
                    passive: false,
                    once: false,
                    next: null
                };
                if (prev === null) {
                    listeners.set(eventName, newNode);
                } else {
                    prev.next = newNode;
                }
            }
        },
        configurable: true,
        enumerable: true
    };
}
/**
 * Define an event attribute (e.g. `eventTarget.onclick`).
 * @param {Object} eventTargetPrototype The event target prototype to define an event attrbite.
 * @param {string} eventName The event name to define.
 * @returns {void}
 */ function defineEventAttribute(eventTargetPrototype, eventName) {
    Object.defineProperty(eventTargetPrototype, `on${eventName}`, defineEventAttributeDescriptor(eventName));
}
/**
 * Define a custom EventTarget with event attributes.
 * @param {string[]} eventNames Event names for event attributes.
 * @returns {EventTarget} The custom EventTarget.
 * @private
 */ function defineCustomEventTarget(eventNames) {
    /** CustomEventTarget */ function CustomEventTarget() {
        EventTarget.call(this);
    }
    CustomEventTarget.prototype = Object.create(EventTarget.prototype, {
        constructor: {
            value: CustomEventTarget,
            configurable: true,
            writable: true
        }
    });
    for(var i = 0; i < eventNames.length; ++i){
        defineEventAttribute(CustomEventTarget.prototype, eventNames[i]);
    }
    return CustomEventTarget;
}
/**
 * EventTarget.
 *
 * - This is constructor if no arguments.
 * - This is a function which returns a CustomEventTarget constructor if there are arguments.
 *
 * For example:
 *
 *     class A extends EventTarget {}
 *     class B extends EventTarget("message") {}
 *     class C extends EventTarget("message", "error") {}
 *     class D extends EventTarget(["message", "error"]) {}
 */ function EventTarget() {
    /*eslint-disable consistent-return */ if (this instanceof EventTarget) {
        listenersMap.set(this, new Map());
        return;
    }
    if (arguments.length === 1 && Array.isArray(arguments[0])) {
        return defineCustomEventTarget(arguments[0]);
    }
    if (arguments.length > 0) {
        var types = new Array(arguments.length);
        for(var i = 0; i < arguments.length; ++i){
            types[i] = arguments[i];
        }
        return defineCustomEventTarget(types);
    }
    throw new TypeError("Cannot call a class as a function");
/*eslint-enable consistent-return */ }
// Should be enumerable, but class methods are not enumerable.
EventTarget.prototype = {
    /**
     * Add a given listener to this event target.
     * @param {string} eventName The event name to add.
     * @param {Function} listener The listener to add.
     * @param {boolean|{capture?:boolean,passive?:boolean,once?:boolean}} [options] The options for this listener.
     * @returns {void}
     */ addEventListener (eventName, listener, options) {
        if (listener == null) {
            return;
        }
        if (typeof listener !== "function" && !isObject(listener)) {
            throw new TypeError("'listener' should be a function or an object.");
        }
        var listeners = getListeners(this);
        var optionsIsObj = isObject(options);
        var capture = optionsIsObj ? Boolean(options.capture) : Boolean(options);
        var listenerType = capture ? CAPTURE : BUBBLE;
        var newNode = {
            listener,
            listenerType,
            passive: optionsIsObj && Boolean(options.passive),
            once: optionsIsObj && Boolean(options.once),
            next: null
        };
        // Set it as the first node if the first node is null.
        var node = listeners.get(eventName);
        if (node === undefined) {
            listeners.set(eventName, newNode);
            return;
        }
        // Traverse to the tail while checking duplication..
        var prev = null;
        while(node != null){
            if (node.listener === listener && node.listenerType === listenerType) {
                // Should ignore duplication.
                return;
            }
            prev = node;
            node = node.next;
        }
        // Add it.
        prev.next = newNode;
    },
    /**
     * Remove a given listener from this event target.
     * @param {string} eventName The event name to remove.
     * @param {Function} listener The listener to remove.
     * @param {boolean|{capture?:boolean,passive?:boolean,once?:boolean}} [options] The options for this listener.
     * @returns {void}
     */ removeEventListener (eventName, listener, options) {
        if (listener == null) {
            return;
        }
        var listeners = getListeners(this);
        var capture = isObject(options) ? Boolean(options.capture) : Boolean(options);
        var listenerType = capture ? CAPTURE : BUBBLE;
        var prev = null;
        var node = listeners.get(eventName);
        while(node != null){
            if (node.listener === listener && node.listenerType === listenerType) {
                if (prev !== null) {
                    prev.next = node.next;
                } else if (node.next !== null) {
                    listeners.set(eventName, node.next);
                } else {
                    listeners.delete(eventName);
                }
                return;
            }
            prev = node;
            node = node.next;
        }
    },
    /**
     * Dispatch a given event.
     * @param {Event|{type:string}} event The event to dispatch.
     * @returns {boolean} `false` if canceled.
     */ dispatchEvent (event) {
        if (event == null || typeof event.type !== "string") {
            throw new TypeError('"event.type" should be a string.');
        }
        // If listeners aren't registered, terminate.
        var listeners = getListeners(this);
        var eventName = event.type;
        var node = listeners.get(eventName);
        if (node == null) {
            return true;
        }
        // Since we cannot rewrite several properties, so wrap object.
        var wrappedEvent = wrapEvent(this, event);
        // This doesn't process capturing phase and bubbling phase.
        // This isn't participating in a tree.
        var prev = null;
        while(node != null){
            // Remove this listener if it's once
            if (node.once) {
                if (prev !== null) {
                    prev.next = node.next;
                } else if (node.next !== null) {
                    listeners.set(eventName, node.next);
                } else {
                    listeners.delete(eventName);
                }
            } else {
                prev = node;
            }
            // Call this listener
            setPassiveListener(wrappedEvent, node.passive ? node.listener : null);
            if (typeof node.listener === "function") {
                try {
                    node.listener.call(this, wrappedEvent);
                } catch (err) {
                    if (typeof console !== "undefined" && typeof console.error === "function") {
                        console.error(err);
                    }
                }
            } else if (node.listenerType !== ATTRIBUTE && typeof node.listener.handleEvent === "function") {
                node.listener.handleEvent(wrappedEvent);
            }
            // Break if `event.stopImmediatePropagation` was called.
            if (isStopped(wrappedEvent)) {
                break;
            }
            node = node.next;
        }
        setPassiveListener(wrappedEvent, null);
        setEventPhase(wrappedEvent, 0);
        setCurrentTarget(wrappedEvent, null);
        return !wrappedEvent.defaultPrevented;
    }
};
// `constructor` is not enumerable.
Object.defineProperty(EventTarget.prototype, "constructor", {
    value: EventTarget,
    configurable: true,
    writable: true
});
// Ensure `eventTarget instanceof window.EventTarget` is `true`.
if (typeof window !== "undefined" && typeof window.EventTarget !== "undefined") {
    Object.setPrototypeOf(EventTarget.prototype, window.EventTarget.prototype);
}
exports.defineEventAttribute = defineEventAttribute;
exports.EventTarget = EventTarget;
exports["default"] = EventTarget;
module.exports = EventTarget;
module.exports.EventTarget = module.exports["default"] = EventTarget;
module.exports.defineEventAttribute = defineEventAttribute; //# sourceMappingURL=event-target-shim.js.map


}),
96014: (function (module) {
"use strict";
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

var R = typeof Reflect === 'object' ? Reflect : null;
var ReflectApply = R && typeof R.apply === 'function' ? R.apply : function ReflectApply(target, receiver, args) {
    return Function.prototype.apply.call(target, receiver, args);
};
var ReflectOwnKeys;
if (R && typeof R.ownKeys === 'function') {
    ReflectOwnKeys = R.ownKeys;
} else if (Object.getOwnPropertySymbols) {
    ReflectOwnKeys = function ReflectOwnKeys(target) {
        return Object.getOwnPropertyNames(target).concat(Object.getOwnPropertySymbols(target));
    };
} else {
    ReflectOwnKeys = function ReflectOwnKeys(target) {
        return Object.getOwnPropertyNames(target);
    };
}
function ProcessEmitWarning(warning) {
    if (console && console.warn) console.warn(warning);
}
var NumberIsNaN = Number.isNaN || function NumberIsNaN(value) {
    return value !== value;
};
function EventEmitter() {
    EventEmitter.init.call(this);
}
module.exports = EventEmitter;
module.exports.once = once;
// Backwards-compat with node 0.10.x
EventEmitter.EventEmitter = EventEmitter;
EventEmitter.prototype._events = undefined;
EventEmitter.prototype._eventsCount = 0;
EventEmitter.prototype._maxListeners = undefined;
// By default EventEmitters will print a warning if more than 10 listeners are
// added to it. This is a useful default which helps finding memory leaks.
var defaultMaxListeners = 10;
function checkListener(listener) {
    if (typeof listener !== 'function') {
        throw new TypeError('The "listener" argument must be of type Function. Received type ' + typeof listener);
    }
}
Object.defineProperty(EventEmitter, 'defaultMaxListeners', {
    enumerable: true,
    get: function() {
        return defaultMaxListeners;
    },
    set: function(arg) {
        if (typeof arg !== 'number' || arg < 0 || NumberIsNaN(arg)) {
            throw new RangeError('The value of "defaultMaxListeners" is out of range. It must be a non-negative number. Received ' + arg + '.');
        }
        defaultMaxListeners = arg;
    }
});
EventEmitter.init = function() {
    if (this._events === undefined || this._events === Object.getPrototypeOf(this)._events) {
        this._events = Object.create(null);
        this._eventsCount = 0;
    }
    this._maxListeners = this._maxListeners || undefined;
};
// Obviously not all Emitters should be limited to 10. This function allows
// that to be increased. Set to zero for unlimited.
EventEmitter.prototype.setMaxListeners = function setMaxListeners(n) {
    if (typeof n !== 'number' || n < 0 || NumberIsNaN(n)) {
        throw new RangeError('The value of "n" is out of range. It must be a non-negative number. Received ' + n + '.');
    }
    this._maxListeners = n;
    return this;
};
function _getMaxListeners(that) {
    if (that._maxListeners === undefined) return EventEmitter.defaultMaxListeners;
    return that._maxListeners;
}
EventEmitter.prototype.getMaxListeners = function getMaxListeners() {
    return _getMaxListeners(this);
};
EventEmitter.prototype.emit = function emit(type) {
    var args = [];
    for(var i = 1; i < arguments.length; i++)args.push(arguments[i]);
    var doError = type === 'error';
    var events = this._events;
    if (events !== undefined) doError = doError && events.error === undefined;
    else if (!doError) return false;
    // If there is no 'error' event listener then throw.
    if (doError) {
        var er;
        if (args.length > 0) er = args[0];
        if (er instanceof Error) {
            // Note: The comments on the `throw` lines are intentional, they show
            // up in Node's output if this results in an unhandled exception.
            throw er; // Unhandled 'error' event
        }
        // At least give some kind of context to the user
        var err = new Error('Unhandled error.' + (er ? ' (' + er.message + ')' : ''));
        err.context = er;
        throw err; // Unhandled 'error' event
    }
    var handler = events[type];
    if (handler === undefined) return false;
    if (typeof handler === 'function') {
        ReflectApply(handler, this, args);
    } else {
        var len = handler.length;
        var listeners = arrayClone(handler, len);
        for(var i = 0; i < len; ++i)ReflectApply(listeners[i], this, args);
    }
    return true;
};
function _addListener(target, type, listener, prepend) {
    var m;
    var events;
    var existing;
    checkListener(listener);
    events = target._events;
    if (events === undefined) {
        events = target._events = Object.create(null);
        target._eventsCount = 0;
    } else {
        // To avoid recursion in the case that type === "newListener"! Before
        // adding it to the listeners, first emit "newListener".
        if (events.newListener !== undefined) {
            target.emit('newListener', type, listener.listener ? listener.listener : listener);
            // Re-assign `events` because a newListener handler could have caused the
            // this._events to be assigned to a new object
            events = target._events;
        }
        existing = events[type];
    }
    if (existing === undefined) {
        // Optimize the case of one listener. Don't need the extra array object.
        existing = events[type] = listener;
        ++target._eventsCount;
    } else {
        if (typeof existing === 'function') {
            // Adding the second element, need to change to array.
            existing = events[type] = prepend ? [
                listener,
                existing
            ] : [
                existing,
                listener
            ];
        // If we've already got an array, just append.
        } else if (prepend) {
            existing.unshift(listener);
        } else {
            existing.push(listener);
        }
        // Check for listener leak
        m = _getMaxListeners(target);
        if (m > 0 && existing.length > m && !existing.warned) {
            existing.warned = true;
            // No error code for this since it is a Warning
            // eslint-disable-next-line no-restricted-syntax
            var w = new Error('Possible EventEmitter memory leak detected. ' + existing.length + ' ' + String(type) + ' listeners ' + 'added. Use emitter.setMaxListeners() to ' + 'increase limit');
            w.name = 'MaxListenersExceededWarning';
            w.emitter = target;
            w.type = type;
            w.count = existing.length;
            ProcessEmitWarning(w);
        }
    }
    return target;
}
EventEmitter.prototype.addListener = function addListener(type, listener) {
    return _addListener(this, type, listener, false);
};
EventEmitter.prototype.on = EventEmitter.prototype.addListener;
EventEmitter.prototype.prependListener = function prependListener(type, listener) {
    return _addListener(this, type, listener, true);
};
function onceWrapper() {
    if (!this.fired) {
        this.target.removeListener(this.type, this.wrapFn);
        this.fired = true;
        if (arguments.length === 0) return this.listener.call(this.target);
        return this.listener.apply(this.target, arguments);
    }
}
function _onceWrap(target, type, listener) {
    var state = {
        fired: false,
        wrapFn: undefined,
        target: target,
        type: type,
        listener: listener
    };
    var wrapped = onceWrapper.bind(state);
    wrapped.listener = listener;
    state.wrapFn = wrapped;
    return wrapped;
}
EventEmitter.prototype.once = function once(type, listener) {
    checkListener(listener);
    this.on(type, _onceWrap(this, type, listener));
    return this;
};
EventEmitter.prototype.prependOnceListener = function prependOnceListener(type, listener) {
    checkListener(listener);
    this.prependListener(type, _onceWrap(this, type, listener));
    return this;
};
// Emits a 'removeListener' event if and only if the listener was removed.
EventEmitter.prototype.removeListener = function removeListener(type, listener) {
    var list, events, position, i, originalListener;
    checkListener(listener);
    events = this._events;
    if (events === undefined) return this;
    list = events[type];
    if (list === undefined) return this;
    if (list === listener || list.listener === listener) {
        if (--this._eventsCount === 0) this._events = Object.create(null);
        else {
            delete events[type];
            if (events.removeListener) this.emit('removeListener', type, list.listener || listener);
        }
    } else if (typeof list !== 'function') {
        position = -1;
        for(i = list.length - 1; i >= 0; i--){
            if (list[i] === listener || list[i].listener === listener) {
                originalListener = list[i].listener;
                position = i;
                break;
            }
        }
        if (position < 0) return this;
        if (position === 0) list.shift();
        else {
            spliceOne(list, position);
        }
        if (list.length === 1) events[type] = list[0];
        if (events.removeListener !== undefined) this.emit('removeListener', type, originalListener || listener);
    }
    return this;
};
EventEmitter.prototype.off = EventEmitter.prototype.removeListener;
EventEmitter.prototype.removeAllListeners = function removeAllListeners(type) {
    var listeners, events, i;
    events = this._events;
    if (events === undefined) return this;
    // not listening for removeListener, no need to emit
    if (events.removeListener === undefined) {
        if (arguments.length === 0) {
            this._events = Object.create(null);
            this._eventsCount = 0;
        } else if (events[type] !== undefined) {
            if (--this._eventsCount === 0) this._events = Object.create(null);
            else delete events[type];
        }
        return this;
    }
    // emit removeListener for all listeners on all events
    if (arguments.length === 0) {
        var keys = Object.keys(events);
        var key;
        for(i = 0; i < keys.length; ++i){
            key = keys[i];
            if (key === 'removeListener') continue;
            this.removeAllListeners(key);
        }
        this.removeAllListeners('removeListener');
        this._events = Object.create(null);
        this._eventsCount = 0;
        return this;
    }
    listeners = events[type];
    if (typeof listeners === 'function') {
        this.removeListener(type, listeners);
    } else if (listeners !== undefined) {
        // LIFO order
        for(i = listeners.length - 1; i >= 0; i--){
            this.removeListener(type, listeners[i]);
        }
    }
    return this;
};
function _listeners(target, type, unwrap) {
    var events = target._events;
    if (events === undefined) return [];
    var evlistener = events[type];
    if (evlistener === undefined) return [];
    if (typeof evlistener === 'function') return unwrap ? [
        evlistener.listener || evlistener
    ] : [
        evlistener
    ];
    return unwrap ? unwrapListeners(evlistener) : arrayClone(evlistener, evlistener.length);
}
EventEmitter.prototype.listeners = function listeners(type) {
    return _listeners(this, type, true);
};
EventEmitter.prototype.rawListeners = function rawListeners(type) {
    return _listeners(this, type, false);
};
EventEmitter.listenerCount = function(emitter, type) {
    if (typeof emitter.listenerCount === 'function') {
        return emitter.listenerCount(type);
    } else {
        return listenerCount.call(emitter, type);
    }
};
EventEmitter.prototype.listenerCount = listenerCount;
function listenerCount(type) {
    var events = this._events;
    if (events !== undefined) {
        var evlistener = events[type];
        if (typeof evlistener === 'function') {
            return 1;
        } else if (evlistener !== undefined) {
            return evlistener.length;
        }
    }
    return 0;
}
EventEmitter.prototype.eventNames = function eventNames() {
    return this._eventsCount > 0 ? ReflectOwnKeys(this._events) : [];
};
function arrayClone(arr, n) {
    var copy = new Array(n);
    for(var i = 0; i < n; ++i)copy[i] = arr[i];
    return copy;
}
function spliceOne(list, index) {
    for(; index + 1 < list.length; index++)list[index] = list[index + 1];
    list.pop();
}
function unwrapListeners(arr) {
    var ret = new Array(arr.length);
    for(var i = 0; i < ret.length; ++i){
        ret[i] = arr[i].listener || arr[i];
    }
    return ret;
}
function once(emitter, name) {
    return new Promise(function(resolve, reject) {
        function errorListener(err) {
            emitter.removeListener(name, resolver);
            reject(err);
        }
        function resolver() {
            if (typeof emitter.removeListener === 'function') {
                emitter.removeListener('error', errorListener);
            }
            resolve([].slice.call(arguments));
        }
        ;
        eventTargetAgnosticAddListener(emitter, name, resolver, {
            once: true
        });
        if (name !== 'error') {
            addErrorHandlerIfEventEmitter(emitter, errorListener, {
                once: true
            });
        }
    });
}
function addErrorHandlerIfEventEmitter(emitter, handler, flags) {
    if (typeof emitter.on === 'function') {
        eventTargetAgnosticAddListener(emitter, 'error', handler, flags);
    }
}
function eventTargetAgnosticAddListener(emitter, name, listener, flags) {
    if (typeof emitter.on === 'function') {
        if (flags.once) {
            emitter.once(name, listener);
        } else {
            emitter.on(name, listener);
        }
    } else if (typeof emitter.addEventListener === 'function') {
        // EventTarget does not have `error` event semantics like Node
        // EventEmitters, we do not listen for `error` events here.
        emitter.addEventListener(name, function wrapListener(arg) {
            // IE does not have builtin `{ once: true }` support so we
            // have to do it manually.
            if (flags.once) {
                emitter.removeEventListener(name, wrapListener);
            }
            listener(arg);
        });
    } else {
        throw new TypeError('The "emitter" argument must be of type EventEmitter. Received type ' + typeof emitter);
    }
}


}),
56481: (function (module) {
"use strict";
/**
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */ 
/**
 * Use invariant() to assert state which your program assumes to be true.
 *
 * Provide sprintf-style format (only %s is supported) and arguments
 * to provide information about what broke and what you were
 * expecting.
 *
 * The invariant message will be stripped in production, but the invariant
 * will remain to ensure logic does not differ in production.
 */ var invariant = function(condition, format, a, b, c, d, e, f) {
    if (false) {}
    if (!condition) {
        var error;
        if (format === undefined) {
            error = new Error('Minified exception occurred; use the non-minified dev environment ' + 'for the full error message and additional helpful warnings.');
        } else {
            var args = [
                a,
                b,
                c,
                d,
                e,
                f
            ];
            var argIndex = 0;
            error = new Error(format.replace(/%s/g, function() {
                return args[argIndex++];
            }));
            error.name = 'Invariant Violation';
        }
        error.framesToPop = 1; // we don't care about invariant's own frame
        throw error;
    }
};
module.exports = invariant;


}),
92956: (function (module) {
"use strict";

function nullthrows(x, message) {
    if (x != null) {
        return x;
    }
    var error = new Error(message !== undefined ? message : 'Got unexpected ' + x);
    error.framesToPop = 1; // Skip nullthrows's own stack frame.
    throw error;
}
module.exports = nullthrows;
module.exports["default"] = nullthrows;
Object.defineProperty(module.exports, "__esModule", ({
    value: true
}));


}),
61826: (function (module) {
"use strict";

function noop() {}
// States:
//
// 0 - pending
// 1 - fulfilled with _value
// 2 - rejected with _value
// 3 - adopted the state of another promise, _value
//
// once the state is no longer pending (0) it is immutable
// All `_` prefixed properties will be reduced to `_{random number}`
// at build time to obfuscate them and discourage their use.
// We don't use symbols or Object.defineProperty to fully hide them
// because the performance isn't good enough.
// to avoid using try/catch inside critical functions, we
// extract them to here.
var LAST_ERROR = null;
var IS_ERROR = {};
function getThen(obj) {
    try {
        return obj.then;
    } catch (ex) {
        LAST_ERROR = ex;
        return IS_ERROR;
    }
}
function tryCallOne(fn, a) {
    try {
        return fn(a);
    } catch (ex) {
        LAST_ERROR = ex;
        return IS_ERROR;
    }
}
function tryCallTwo(fn, a, b) {
    try {
        fn(a, b);
    } catch (ex) {
        LAST_ERROR = ex;
        return IS_ERROR;
    }
}
module.exports = Promise;
function Promise(fn) {
    if (typeof this !== 'object') {
        throw new TypeError('Promises must be constructed via new');
    }
    if (typeof fn !== 'function') {
        throw new TypeError('Promise constructor\'s argument is not a function');
    }
    this._x = 0;
    this._y = 0;
    this._z = null;
    this._A = null;
    if (fn === noop) return;
    doResolve(fn, this);
}
Promise._B = null;
Promise._C = null;
Promise._D = noop;
Promise.prototype.then = function(onFulfilled, onRejected) {
    if (this.constructor !== Promise) {
        return safeThen(this, onFulfilled, onRejected);
    }
    var res = new Promise(noop);
    handle(this, new Handler(onFulfilled, onRejected, res));
    return res;
};
function safeThen(self, onFulfilled, onRejected) {
    return new self.constructor(function(resolve, reject) {
        var res = new Promise(noop);
        res.then(resolve, reject);
        handle(self, new Handler(onFulfilled, onRejected, res));
    });
}
function handle(self, deferred) {
    while(self._y === 3){
        self = self._z;
    }
    if (Promise._B) {
        Promise._B(self);
    }
    if (self._y === 0) {
        if (self._x === 0) {
            self._x = 1;
            self._A = deferred;
            return;
        }
        if (self._x === 1) {
            self._x = 2;
            self._A = [
                self._A,
                deferred
            ];
            return;
        }
        self._A.push(deferred);
        return;
    }
    handleResolved(self, deferred);
}
function handleResolved(self, deferred) {
    setImmediate(function() {
        var cb = self._y === 1 ? deferred.onFulfilled : deferred.onRejected;
        if (cb === null) {
            if (self._y === 1) {
                resolve(deferred.promise, self._z);
            } else {
                reject(deferred.promise, self._z);
            }
            return;
        }
        var ret = tryCallOne(cb, self._z);
        if (ret === IS_ERROR) {
            reject(deferred.promise, LAST_ERROR);
        } else {
            resolve(deferred.promise, ret);
        }
    });
}
function resolve(self, newValue) {
    // Promise Resolution Procedure: https://github.com/promises-aplus/promises-spec#the-promise-resolution-procedure
    if (newValue === self) {
        return reject(self, new TypeError('A promise cannot be resolved with itself.'));
    }
    if (newValue && (typeof newValue === 'object' || typeof newValue === 'function')) {
        var then = getThen(newValue);
        if (then === IS_ERROR) {
            return reject(self, LAST_ERROR);
        }
        if (then === self.then && newValue instanceof Promise) {
            self._y = 3;
            self._z = newValue;
            finale(self);
            return;
        } else if (typeof then === 'function') {
            doResolve(then.bind(newValue), self);
            return;
        }
    }
    self._y = 1;
    self._z = newValue;
    finale(self);
}
function reject(self, newValue) {
    self._y = 2;
    self._z = newValue;
    if (Promise._C) {
        Promise._C(self, newValue);
    }
    finale(self);
}
function finale(self) {
    if (self._x === 1) {
        handle(self, self._A);
        self._A = null;
    }
    if (self._x === 2) {
        for(var i = 0; i < self._A.length; i++){
            handle(self, self._A[i]);
        }
        self._A = null;
    }
}
function Handler(onFulfilled, onRejected, promise) {
    this.onFulfilled = typeof onFulfilled === 'function' ? onFulfilled : null;
    this.onRejected = typeof onRejected === 'function' ? onRejected : null;
    this.promise = promise;
}
/**
 * Take a potentially misbehaving resolver function and make sure
 * onFulfilled and onRejected are only called once.
 *
 * Makes no guarantees about asynchrony.
 */ function doResolve(fn, promise) {
    var done = false;
    var res = tryCallTwo(fn, function(value) {
        if (done) return;
        done = true;
        resolve(promise, value);
    }, function(reason) {
        if (done) return;
        done = true;
        reject(promise, reason);
    });
    if (!done && res === IS_ERROR) {
        done = true;
        reject(promise, LAST_ERROR);
    }
}


}),
46361: (function (module, __unused_webpack_exports, __webpack_require__) {
"use strict";

//This file contains the ES6 extensions to the core Promises/A+ API
var Promise = __webpack_require__(61826);
module.exports = Promise;
/* Static Functions */ var TRUE = valuePromise(true);
var FALSE = valuePromise(false);
var NULL = valuePromise(null);
var UNDEFINED = valuePromise(undefined);
var ZERO = valuePromise(0);
var EMPTYSTRING = valuePromise('');
function valuePromise(value) {
    var p = new Promise(Promise._D);
    p._y = 1;
    p._z = value;
    return p;
}
Promise.resolve = function(value) {
    if (value instanceof Promise) return value;
    if (value === null) return NULL;
    if (value === undefined) return UNDEFINED;
    if (value === true) return TRUE;
    if (value === false) return FALSE;
    if (value === 0) return ZERO;
    if (value === '') return EMPTYSTRING;
    if (typeof value === 'object' || typeof value === 'function') {
        try {
            var then = value.then;
            if (typeof then === 'function') {
                return new Promise(then.bind(value));
            }
        } catch (ex) {
            return new Promise(function(resolve, reject) {
                reject(ex);
            });
        }
    }
    return valuePromise(value);
};
var iterableToArray = function(iterable) {
    if (typeof Array.from === 'function') {
        // ES2015+, iterables exist
        iterableToArray = Array.from;
        return Array.from(iterable);
    }
    // ES5, only arrays and array-likes exist
    iterableToArray = function(x) {
        return Array.prototype.slice.call(x);
    };
    return Array.prototype.slice.call(iterable);
};
Promise.all = function(arr) {
    var args = iterableToArray(arr);
    return new Promise(function(resolve, reject) {
        if (args.length === 0) return resolve([]);
        var remaining = args.length;
        function res(i, val) {
            if (val && (typeof val === 'object' || typeof val === 'function')) {
                if (val instanceof Promise && val.then === Promise.prototype.then) {
                    while(val._y === 3){
                        val = val._z;
                    }
                    if (val._y === 1) return res(i, val._z);
                    if (val._y === 2) reject(val._z);
                    val.then(function(val) {
                        res(i, val);
                    }, reject);
                    return;
                } else {
                    var then = val.then;
                    if (typeof then === 'function') {
                        var p = new Promise(then.bind(val));
                        p.then(function(val) {
                            res(i, val);
                        }, reject);
                        return;
                    }
                }
            }
            args[i] = val;
            if (--remaining === 0) {
                resolve(args);
            }
        }
        for(var i = 0; i < args.length; i++){
            res(i, args[i]);
        }
    });
};
function onSettledFulfill(value) {
    return {
        status: 'fulfilled',
        value: value
    };
}
function onSettledReject(reason) {
    return {
        status: 'rejected',
        reason: reason
    };
}
function mapAllSettled(item) {
    if (item && (typeof item === 'object' || typeof item === 'function')) {
        if (item instanceof Promise && item.then === Promise.prototype.then) {
            return item.then(onSettledFulfill, onSettledReject);
        }
        var then = item.then;
        if (typeof then === 'function') {
            return new Promise(then.bind(item)).then(onSettledFulfill, onSettledReject);
        }
    }
    return onSettledFulfill(item);
}
Promise.allSettled = function(iterable) {
    return Promise.all(iterableToArray(iterable).map(mapAllSettled));
};
Promise.reject = function(value) {
    return new Promise(function(resolve, reject) {
        reject(value);
    });
};
Promise.race = function(values) {
    return new Promise(function(resolve, reject) {
        iterableToArray(values).forEach(function(value) {
            Promise.resolve(value).then(resolve, reject);
        });
    });
};
/* Prototype Methods */ Promise.prototype['catch'] = function(onRejected) {
    return this.then(null, onRejected);
};
function getAggregateError(errors) {
    if (typeof AggregateError === 'function') {
        return new AggregateError(errors, 'All promises were rejected');
    }
    var error = new Error('All promises were rejected');
    error.name = 'AggregateError';
    error.errors = errors;
    return error;
}
Promise.any = function promiseAny(values) {
    return new Promise(function(resolve, reject) {
        var promises = iterableToArray(values);
        var hasResolved = false;
        var rejectionReasons = [];
        function resolveOnce(value) {
            if (!hasResolved) {
                hasResolved = true;
                resolve(value);
            }
        }
        function rejectionCheck(reason) {
            rejectionReasons.push(reason);
            if (rejectionReasons.length === promises.length) {
                reject(getAggregateError(rejectionReasons));
            }
        }
        if (promises.length === 0) {
            reject(getAggregateError(rejectionReasons));
        } else {
            promises.forEach(function(value) {
                Promise.resolve(value).then(resolveOnce, rejectionCheck);
            });
        }
    });
};


}),
82639: (function (module, __unused_webpack_exports, __webpack_require__) {
"use strict";

var Promise = __webpack_require__(61826);
module.exports = Promise;
Promise.prototype.finally = function(f) {
    return this.then(function(value) {
        return Promise.resolve(f()).then(function() {
            return value;
        });
    }, function(err) {
        return Promise.resolve(f()).then(function() {
            throw err;
        });
    });
};


}),
1361: (function (__unused_webpack_module, exports) {
"use strict";
/**
 * @license React
 * react-jsx-runtime.production.js
 *
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */ 
var REACT_ELEMENT_TYPE = Symbol.for("react.transitional.element"), REACT_FRAGMENT_TYPE = Symbol.for("react.fragment");
function jsxProd(type, config, maybeKey) {
    var key = null;
    void 0 !== maybeKey && (key = "" + maybeKey);
    void 0 !== config.key && (key = "" + config.key);
    if ("key" in config) {
        maybeKey = {};
        for(var propName in config)"key" !== propName && (maybeKey[propName] = config[propName]);
    } else maybeKey = config;
    config = maybeKey.ref;
    return {
        $$typeof: REACT_ELEMENT_TYPE,
        type: type,
        key: key,
        ref: void 0 !== config ? config : null,
        props: maybeKey
    };
}
exports.Fragment = REACT_FRAGMENT_TYPE;
exports.jsx = jsxProd;
exports.jsxs = jsxProd;


}),
70095: (function (module, __unused_webpack_exports, __webpack_require__) {
"use strict";

if (true) {
    module.exports = __webpack_require__(1361);
} else {}


}),
74655: (function (module) {
/**
 * Copyright (c) 2014-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */ var runtime = function(exports) {
    "use strict";
    var Op = Object.prototype;
    var hasOwn = Op.hasOwnProperty;
    var defineProperty = Object.defineProperty || function(obj, key, desc) {
        obj[key] = desc.value;
    };
    var undefined; // More compressible than void 0.
    var $Symbol = typeof Symbol === "function" ? Symbol : {};
    var iteratorSymbol = $Symbol.iterator || "@@iterator";
    var asyncIteratorSymbol = $Symbol.asyncIterator || "@@asyncIterator";
    var toStringTagSymbol = $Symbol.toStringTag || "@@toStringTag";
    function define(obj, key, value) {
        Object.defineProperty(obj, key, {
            value: value,
            enumerable: true,
            configurable: true,
            writable: true
        });
        return obj[key];
    }
    try {
        // IE 8 has a broken Object.defineProperty that only works on DOM objects.
        define({}, "");
    } catch (err) {
        define = function(obj, key, value) {
            return obj[key] = value;
        };
    }
    function wrap(innerFn, outerFn, self, tryLocsList) {
        // If outerFn provided and outerFn.prototype is a Generator, then outerFn.prototype instanceof Generator.
        var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator;
        var generator = Object.create(protoGenerator.prototype);
        var context = new Context(tryLocsList || []);
        // The ._invoke method unifies the implementations of the .next,
        // .throw, and .return methods.
        defineProperty(generator, "_invoke", {
            value: makeInvokeMethod(innerFn, self, context)
        });
        return generator;
    }
    exports.wrap = wrap;
    // Try/catch helper to minimize deoptimizations. Returns a completion
    // record like context.tryEntries[i].completion. This interface could
    // have been (and was previously) designed to take a closure to be
    // invoked without arguments, but in all the cases we care about we
    // already have an existing method we want to call, so there's no need
    // to create a new function object. We can even get away with assuming
    // the method takes exactly one argument, since that happens to be true
    // in every case, so we don't have to touch the arguments object. The
    // only additional allocation required is the completion record, which
    // has a stable shape and so hopefully should be cheap to allocate.
    function tryCatch(fn, obj, arg) {
        try {
            return {
                type: "normal",
                arg: fn.call(obj, arg)
            };
        } catch (err) {
            return {
                type: "throw",
                arg: err
            };
        }
    }
    var GenStateSuspendedStart = "suspendedStart";
    var GenStateSuspendedYield = "suspendedYield";
    var GenStateExecuting = "executing";
    var GenStateCompleted = "completed";
    // Returning this object from the innerFn has the same effect as
    // breaking out of the dispatch switch statement.
    var ContinueSentinel = {};
    // Dummy constructor functions that we use as the .constructor and
    // .constructor.prototype properties for functions that return Generator
    // objects. For full spec compliance, you may wish to configure your
    // minifier not to mangle the names of these two functions.
    function Generator() {}
    function GeneratorFunction() {}
    function GeneratorFunctionPrototype() {}
    // This is a polyfill for %IteratorPrototype% for environments that
    // don't natively support it.
    var IteratorPrototype = {};
    define(IteratorPrototype, iteratorSymbol, function() {
        return this;
    });
    var getProto = Object.getPrototypeOf;
    var NativeIteratorPrototype = getProto && getProto(getProto(values([])));
    if (NativeIteratorPrototype && NativeIteratorPrototype !== Op && hasOwn.call(NativeIteratorPrototype, iteratorSymbol)) {
        // This environment has a native %IteratorPrototype%; use it instead
        // of the polyfill.
        IteratorPrototype = NativeIteratorPrototype;
    }
    var Gp = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(IteratorPrototype);
    GeneratorFunction.prototype = GeneratorFunctionPrototype;
    defineProperty(Gp, "constructor", {
        value: GeneratorFunctionPrototype,
        configurable: true
    });
    defineProperty(GeneratorFunctionPrototype, "constructor", {
        value: GeneratorFunction,
        configurable: true
    });
    GeneratorFunction.displayName = define(GeneratorFunctionPrototype, toStringTagSymbol, "GeneratorFunction");
    // Helper for defining the .next, .throw, and .return methods of the
    // Iterator interface in terms of a single ._invoke method.
    function defineIteratorMethods(prototype) {
        [
            "next",
            "throw",
            "return"
        ].forEach(function(method) {
            define(prototype, method, function(arg) {
                return this._invoke(method, arg);
            });
        });
    }
    exports.isGeneratorFunction = function(genFun) {
        var ctor = typeof genFun === "function" && genFun.constructor;
        return ctor ? ctor === GeneratorFunction || // For the native GeneratorFunction constructor, the best we can
        // do is to check its .name property.
        (ctor.displayName || ctor.name) === "GeneratorFunction" : false;
    };
    exports.mark = function(genFun) {
        if (Object.setPrototypeOf) {
            Object.setPrototypeOf(genFun, GeneratorFunctionPrototype);
        } else {
            genFun.__proto__ = GeneratorFunctionPrototype;
            define(genFun, toStringTagSymbol, "GeneratorFunction");
        }
        genFun.prototype = Object.create(Gp);
        return genFun;
    };
    // Within the body of any async function, `await x` is transformed to
    // `yield regeneratorRuntime.awrap(x)`, so that the runtime can test
    // `hasOwn.call(value, "__await")` to determine if the yielded value is
    // meant to be awaited.
    exports.awrap = function(arg) {
        return {
            __await: arg
        };
    };
    function AsyncIterator(generator, PromiseImpl) {
        function invoke(method, arg, resolve, reject) {
            var record = tryCatch(generator[method], generator, arg);
            if (record.type === "throw") {
                reject(record.arg);
            } else {
                var result = record.arg;
                var value = result.value;
                if (value && typeof value === "object" && hasOwn.call(value, "__await")) {
                    return PromiseImpl.resolve(value.__await).then(function(value) {
                        invoke("next", value, resolve, reject);
                    }, function(err) {
                        invoke("throw", err, resolve, reject);
                    });
                }
                return PromiseImpl.resolve(value).then(function(unwrapped) {
                    // When a yielded Promise is resolved, its final value becomes
                    // the .value of the Promise<{value,done}> result for the
                    // current iteration.
                    result.value = unwrapped;
                    resolve(result);
                }, function(error) {
                    // If a rejected Promise was yielded, throw the rejection back
                    // into the async generator function so it can be handled there.
                    return invoke("throw", error, resolve, reject);
                });
            }
        }
        var previousPromise;
        function enqueue(method, arg) {
            function callInvokeWithMethodAndArg() {
                return new PromiseImpl(function(resolve, reject) {
                    invoke(method, arg, resolve, reject);
                });
            }
            return previousPromise = // If enqueue has been called before, then we want to wait until
            // all previous Promises have been resolved before calling invoke,
            // so that results are always delivered in the correct order. If
            // enqueue has not been called before, then it is important to
            // call invoke immediately, without waiting on a callback to fire,
            // so that the async generator function has the opportunity to do
            // any necessary setup in a predictable way. This predictability
            // is why the Promise constructor synchronously invokes its
            // executor callback, and why async functions synchronously
            // execute code before the first await. Since we implement simple
            // async functions in terms of async generators, it is especially
            // important to get this right, even though it requires care.
            previousPromise ? previousPromise.then(callInvokeWithMethodAndArg, // Avoid propagating failures to Promises returned by later
            // invocations of the iterator.
            callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg();
        }
        // Define the unified helper method that is used to implement .next,
        // .throw, and .return (see defineIteratorMethods).
        defineProperty(this, "_invoke", {
            value: enqueue
        });
    }
    defineIteratorMethods(AsyncIterator.prototype);
    define(AsyncIterator.prototype, asyncIteratorSymbol, function() {
        return this;
    });
    exports.AsyncIterator = AsyncIterator;
    // Note that simple async functions are implemented on top of
    // AsyncIterator objects; they just return a Promise for the value of
    // the final result produced by the iterator.
    exports.async = function(innerFn, outerFn, self, tryLocsList, PromiseImpl) {
        if (PromiseImpl === void 0) PromiseImpl = Promise;
        var iter = new AsyncIterator(wrap(innerFn, outerFn, self, tryLocsList), PromiseImpl);
        return exports.isGeneratorFunction(outerFn) ? iter // If outerFn is a generator, return the full iterator.
         : iter.next().then(function(result) {
            return result.done ? result.value : iter.next();
        });
    };
    function makeInvokeMethod(innerFn, self, context) {
        var state = GenStateSuspendedStart;
        return function invoke(method, arg) {
            if (state === GenStateExecuting) {
                throw new Error("Generator is already running");
            }
            if (state === GenStateCompleted) {
                if (method === "throw") {
                    throw arg;
                }
                // Be forgiving, per 25.3.3.3.3 of the spec:
                // https://people.mozilla.org/~jorendorff/es6-draft.html#sec-generatorresume
                return doneResult();
            }
            context.method = method;
            context.arg = arg;
            while(true){
                var delegate = context.delegate;
                if (delegate) {
                    var delegateResult = maybeInvokeDelegate(delegate, context);
                    if (delegateResult) {
                        if (delegateResult === ContinueSentinel) continue;
                        return delegateResult;
                    }
                }
                if (context.method === "next") {
                    // Setting context._sent for legacy support of Babel's
                    // function.sent implementation.
                    context.sent = context._sent = context.arg;
                } else if (context.method === "throw") {
                    if (state === GenStateSuspendedStart) {
                        state = GenStateCompleted;
                        throw context.arg;
                    }
                    context.dispatchException(context.arg);
                } else if (context.method === "return") {
                    context.abrupt("return", context.arg);
                }
                state = GenStateExecuting;
                var record = tryCatch(innerFn, self, context);
                if (record.type === "normal") {
                    // If an exception is thrown from innerFn, we leave state ===
                    // GenStateExecuting and loop back for another invocation.
                    state = context.done ? GenStateCompleted : GenStateSuspendedYield;
                    if (record.arg === ContinueSentinel) {
                        continue;
                    }
                    return {
                        value: record.arg,
                        done: context.done
                    };
                } else if (record.type === "throw") {
                    state = GenStateCompleted;
                    // Dispatch the exception by looping back around to the
                    // context.dispatchException(context.arg) call above.
                    context.method = "throw";
                    context.arg = record.arg;
                }
            }
        };
    }
    // Call delegate.iterator[context.method](context.arg) and handle the
    // result, either by returning a { value, done } result from the
    // delegate iterator, or by modifying context.method and context.arg,
    // setting context.delegate to null, and returning the ContinueSentinel.
    function maybeInvokeDelegate(delegate, context) {
        var methodName = context.method;
        var method = delegate.iterator[methodName];
        if (method === undefined) {
            // A .throw or .return when the delegate iterator has no .throw
            // method, or a missing .next mehtod, always terminate the
            // yield* loop.
            context.delegate = null;
            // Note: ["return"] must be used for ES3 parsing compatibility.
            if (methodName === "throw" && delegate.iterator["return"]) {
                // If the delegate iterator has a return method, give it a
                // chance to clean up.
                context.method = "return";
                context.arg = undefined;
                maybeInvokeDelegate(delegate, context);
                if (context.method === "throw") {
                    // If maybeInvokeDelegate(context) changed context.method from
                    // "return" to "throw", let that override the TypeError below.
                    return ContinueSentinel;
                }
            }
            if (methodName !== "return") {
                context.method = "throw";
                context.arg = new TypeError("The iterator does not provide a '" + methodName + "' method");
            }
            return ContinueSentinel;
        }
        var record = tryCatch(method, delegate.iterator, context.arg);
        if (record.type === "throw") {
            context.method = "throw";
            context.arg = record.arg;
            context.delegate = null;
            return ContinueSentinel;
        }
        var info = record.arg;
        if (!info) {
            context.method = "throw";
            context.arg = new TypeError("iterator result is not an object");
            context.delegate = null;
            return ContinueSentinel;
        }
        if (info.done) {
            // Assign the result of the finished delegate to the temporary
            // variable specified by delegate.resultName (see delegateYield).
            context[delegate.resultName] = info.value;
            // Resume execution at the desired location (see delegateYield).
            context.next = delegate.nextLoc;
            // If context.method was "throw" but the delegate handled the
            // exception, let the outer generator proceed normally. If
            // context.method was "next", forget context.arg since it has been
            // "consumed" by the delegate iterator. If context.method was
            // "return", allow the original .return call to continue in the
            // outer generator.
            if (context.method !== "return") {
                context.method = "next";
                context.arg = undefined;
            }
        } else {
            // Re-yield the result returned by the delegate method.
            return info;
        }
        // The delegate iterator is finished, so forget it and continue with
        // the outer generator.
        context.delegate = null;
        return ContinueSentinel;
    }
    // Define Generator.prototype.{next,throw,return} in terms of the
    // unified ._invoke helper method.
    defineIteratorMethods(Gp);
    define(Gp, toStringTagSymbol, "Generator");
    // A Generator should always return itself as the iterator object when the
    // @@iterator function is called on it. Some browsers' implementations of the
    // iterator prototype chain incorrectly implement this, causing the Generator
    // object to not be returned from this call. This ensures that doesn't happen.
    // See https://github.com/facebook/regenerator/issues/274 for more details.
    define(Gp, iteratorSymbol, function() {
        return this;
    });
    define(Gp, "toString", function() {
        return "[object Generator]";
    });
    function pushTryEntry(locs) {
        var entry = {
            tryLoc: locs[0]
        };
        if (1 in locs) {
            entry.catchLoc = locs[1];
        }
        if (2 in locs) {
            entry.finallyLoc = locs[2];
            entry.afterLoc = locs[3];
        }
        this.tryEntries.push(entry);
    }
    function resetTryEntry(entry) {
        var record = entry.completion || {};
        record.type = "normal";
        delete record.arg;
        entry.completion = record;
    }
    function Context(tryLocsList) {
        // The root entry object (effectively a try statement without a catch
        // or a finally block) gives us a place to store values thrown from
        // locations where there is no enclosing try statement.
        this.tryEntries = [
            {
                tryLoc: "root"
            }
        ];
        tryLocsList.forEach(pushTryEntry, this);
        this.reset(true);
    }
    exports.keys = function(val) {
        var object = Object(val);
        var keys = [];
        for(var key in object){
            keys.push(key);
        }
        keys.reverse();
        // Rather than returning an object with a next method, we keep
        // things simple and return the next function itself.
        return function next() {
            while(keys.length){
                var key = keys.pop();
                if (key in object) {
                    next.value = key;
                    next.done = false;
                    return next;
                }
            }
            // To avoid creating an additional object, we just hang the .value
            // and .done properties off the next function object itself. This
            // also ensures that the minifier will not anonymize the function.
            next.done = true;
            return next;
        };
    };
    function values(iterable) {
        if (iterable) {
            var iteratorMethod = iterable[iteratorSymbol];
            if (iteratorMethod) {
                return iteratorMethod.call(iterable);
            }
            if (typeof iterable.next === "function") {
                return iterable;
            }
            if (!isNaN(iterable.length)) {
                var i = -1, next = function next() {
                    while(++i < iterable.length){
                        if (hasOwn.call(iterable, i)) {
                            next.value = iterable[i];
                            next.done = false;
                            return next;
                        }
                    }
                    next.value = undefined;
                    next.done = true;
                    return next;
                };
                return next.next = next;
            }
        }
        // Return an iterator with no values.
        return {
            next: doneResult
        };
    }
    exports.values = values;
    function doneResult() {
        return {
            value: undefined,
            done: true
        };
    }
    Context.prototype = {
        constructor: Context,
        reset: function(skipTempReset) {
            this.prev = 0;
            this.next = 0;
            // Resetting context._sent for legacy support of Babel's
            // function.sent implementation.
            this.sent = this._sent = undefined;
            this.done = false;
            this.delegate = null;
            this.method = "next";
            this.arg = undefined;
            this.tryEntries.forEach(resetTryEntry);
            if (!skipTempReset) {
                for(var name in this){
                    // Not sure about the optimal order of these conditions:
                    if (name.charAt(0) === "t" && hasOwn.call(this, name) && !isNaN(+name.slice(1))) {
                        this[name] = undefined;
                    }
                }
            }
        },
        stop: function() {
            this.done = true;
            var rootEntry = this.tryEntries[0];
            var rootRecord = rootEntry.completion;
            if (rootRecord.type === "throw") {
                throw rootRecord.arg;
            }
            return this.rval;
        },
        dispatchException: function(exception) {
            if (this.done) {
                throw exception;
            }
            var context = this;
            function handle(loc, caught) {
                record.type = "throw";
                record.arg = exception;
                context.next = loc;
                if (caught) {
                    // If the dispatched exception was caught by a catch block,
                    // then let that catch block handle the exception normally.
                    context.method = "next";
                    context.arg = undefined;
                }
                return !!caught;
            }
            for(var i = this.tryEntries.length - 1; i >= 0; --i){
                var entry = this.tryEntries[i];
                var record = entry.completion;
                if (entry.tryLoc === "root") {
                    // Exception thrown outside of any try block that could handle
                    // it, so set the completion value of the entire function to
                    // throw the exception.
                    return handle("end");
                }
                if (entry.tryLoc <= this.prev) {
                    var hasCatch = hasOwn.call(entry, "catchLoc");
                    var hasFinally = hasOwn.call(entry, "finallyLoc");
                    if (hasCatch && hasFinally) {
                        if (this.prev < entry.catchLoc) {
                            return handle(entry.catchLoc, true);
                        } else if (this.prev < entry.finallyLoc) {
                            return handle(entry.finallyLoc);
                        }
                    } else if (hasCatch) {
                        if (this.prev < entry.catchLoc) {
                            return handle(entry.catchLoc, true);
                        }
                    } else if (hasFinally) {
                        if (this.prev < entry.finallyLoc) {
                            return handle(entry.finallyLoc);
                        }
                    } else {
                        throw new Error("try statement without catch or finally");
                    }
                }
            }
        },
        abrupt: function(type, arg) {
            for(var i = this.tryEntries.length - 1; i >= 0; --i){
                var entry = this.tryEntries[i];
                if (entry.tryLoc <= this.prev && hasOwn.call(entry, "finallyLoc") && this.prev < entry.finallyLoc) {
                    var finallyEntry = entry;
                    break;
                }
            }
            if (finallyEntry && (type === "break" || type === "continue") && finallyEntry.tryLoc <= arg && arg <= finallyEntry.finallyLoc) {
                // Ignore the finally entry if control is not jumping to a
                // location outside the try/catch block.
                finallyEntry = null;
            }
            var record = finallyEntry ? finallyEntry.completion : {};
            record.type = type;
            record.arg = arg;
            if (finallyEntry) {
                this.method = "next";
                this.next = finallyEntry.finallyLoc;
                return ContinueSentinel;
            }
            return this.complete(record);
        },
        complete: function(record, afterLoc) {
            if (record.type === "throw") {
                throw record.arg;
            }
            if (record.type === "break" || record.type === "continue") {
                this.next = record.arg;
            } else if (record.type === "return") {
                this.rval = this.arg = record.arg;
                this.method = "return";
                this.next = "end";
            } else if (record.type === "normal" && afterLoc) {
                this.next = afterLoc;
            }
            return ContinueSentinel;
        },
        finish: function(finallyLoc) {
            for(var i = this.tryEntries.length - 1; i >= 0; --i){
                var entry = this.tryEntries[i];
                if (entry.finallyLoc === finallyLoc) {
                    this.complete(entry.completion, entry.afterLoc);
                    resetTryEntry(entry);
                    return ContinueSentinel;
                }
            }
        },
        "catch": function(tryLoc) {
            for(var i = this.tryEntries.length - 1; i >= 0; --i){
                var entry = this.tryEntries[i];
                if (entry.tryLoc === tryLoc) {
                    var record = entry.completion;
                    if (record.type === "throw") {
                        var thrown = record.arg;
                        resetTryEntry(entry);
                    }
                    return thrown;
                }
            }
            // The context.catch method must only be called with a location
            // argument that corresponds to a known catch block.
            throw new Error("illegal catch attempt");
        },
        delegateYield: function(iterable, resultName, nextLoc) {
            this.delegate = {
                iterator: values(iterable),
                resultName: resultName,
                nextLoc: nextLoc
            };
            if (this.method === "next") {
                // Deliberately forget the last sent value so that we don't
                // accidentally pass it on to the delegate.
                this.arg = undefined;
            }
            return ContinueSentinel;
        }
    };
    // Regardless of whether this script is executing as a CommonJS module
    // or not, return the runtime object so that we can declare the variable
    // regeneratorRuntime in the outer scope, which allows this module to be
    // injected easily by `bin/regenerator --include-runtime script.js`.
    return exports;
}(// If this script is executing as a CommonJS module, use module.exports
// as the regeneratorRuntime namespace. Otherwise create a new empty
// object. Either way, the resulting object will be used to initialize
// the regeneratorRuntime variable at the top of this file.
 true ? module.exports : 0);
try {
    regeneratorRuntime = runtime;
} catch (accidentalStrictMode) {
    // This module should not be running in strict mode, so the above
    // assignment should always work unless something is misconfigured. Just
    // in case runtime.js accidentally runs in strict mode, in modern engines
    // we can explicitly access globalThis. In older engines we can escape
    // strict mode using a global Function call. This could conceivably fail
    // if a Content Security Policy forbids using Function, but in that case
    // the proper solution is to fix the accidental strict mode problem. If
    // you've misconfigured your bundler to force strict mode and applied a
    // CSP to forbid Function, and you're not willing to fix either of those
    // problems, please detail your unique predicament in a GitHub issue.
    if (typeof globalThis === "object") {
        globalThis.regeneratorRuntime = runtime;
    } else {
        Function("r", "regeneratorRuntime = r")(runtime);
    }
}


}),
46288: (function (__unused_webpack_module, exports) {
"use strict";
/**
 * @license React
 * scheduler.native.production.js
 *
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */ 
function push(heap, node) {
    var index = heap.length;
    heap.push(node);
    a: for(; 0 < index;){
        var parentIndex = index - 1 >>> 1, parent = heap[parentIndex];
        if (0 < compare(parent, node)) heap[parentIndex] = node, heap[index] = parent, index = parentIndex;
        else break a;
    }
}
function peek(heap) {
    return 0 === heap.length ? null : heap[0];
}
function pop(heap) {
    if (0 === heap.length) return null;
    var first = heap[0], last = heap.pop();
    if (last !== first) {
        heap[0] = last;
        a: for(var index = 0, length = heap.length, halfLength = length >>> 1; index < halfLength;){
            var leftIndex = 2 * (index + 1) - 1, left = heap[leftIndex], rightIndex = leftIndex + 1, right = heap[rightIndex];
            if (0 > compare(left, last)) rightIndex < length && 0 > compare(right, left) ? (heap[index] = right, heap[rightIndex] = last, index = rightIndex) : (heap[index] = left, heap[leftIndex] = last, index = leftIndex);
            else if (rightIndex < length && 0 > compare(right, last)) heap[index] = right, heap[rightIndex] = last, index = rightIndex;
            else break a;
        }
    }
    return first;
}
function compare(a, b) {
    var diff = a.sortIndex - b.sortIndex;
    return 0 !== diff ? diff : a.id - b.id;
}
var getCurrentTime;
if ("object" === typeof performance && "function" === typeof performance.now) {
    var localPerformance = performance;
    getCurrentTime = function() {
        return localPerformance.now();
    };
} else {
    var localDate = Date, initialTime = localDate.now();
    getCurrentTime = function() {
        return localDate.now() - initialTime;
    };
}
var taskQueue = [], timerQueue = [], taskIdCounter = 1, currentTask = null, currentPriorityLevel = 3, isPerformingWork = !1, isHostCallbackScheduled = !1, isHostTimeoutScheduled = !1, localSetTimeout = "function" === typeof setTimeout ? setTimeout : null, localClearTimeout = "function" === typeof clearTimeout ? clearTimeout : null, localSetImmediate = "undefined" !== typeof setImmediate ? setImmediate : null;
function advanceTimers(currentTime) {
    for(var timer = peek(timerQueue); null !== timer;){
        if (null === timer.callback) pop(timerQueue);
        else if (timer.startTime <= currentTime) pop(timerQueue), timer.sortIndex = timer.expirationTime, push(taskQueue, timer);
        else break;
        timer = peek(timerQueue);
    }
}
function handleTimeout(currentTime) {
    isHostTimeoutScheduled = !1;
    advanceTimers(currentTime);
    if (!isHostCallbackScheduled) if (null !== peek(taskQueue)) isHostCallbackScheduled = !0, isMessageLoopRunning || (isMessageLoopRunning = !0, schedulePerformWorkUntilDeadline());
    else {
        var firstTimer = peek(timerQueue);
        null !== firstTimer && requestHostTimeout(handleTimeout, firstTimer.startTime - currentTime);
    }
}
function unstable_scheduleCallback$1(priorityLevel, callback, options) {
    var currentTime = getCurrentTime();
    "object" === typeof options && null !== options ? (options = options.delay, options = "number" === typeof options && 0 < options ? currentTime + options : currentTime) : options = currentTime;
    switch(priorityLevel){
        case 1:
            var timeout = -1;
            break;
        case 2:
            timeout = 250;
            break;
        case 5:
            timeout = 1073741823;
            break;
        case 4:
            timeout = 1e4;
            break;
        default:
            timeout = 5e3;
    }
    timeout = options + timeout;
    priorityLevel = {
        id: taskIdCounter++,
        callback: callback,
        priorityLevel: priorityLevel,
        startTime: options,
        expirationTime: timeout,
        sortIndex: -1
    };
    options > currentTime ? (priorityLevel.sortIndex = options, push(timerQueue, priorityLevel), null === peek(taskQueue) && priorityLevel === peek(timerQueue) && (isHostTimeoutScheduled ? (localClearTimeout(taskTimeoutID), taskTimeoutID = -1) : isHostTimeoutScheduled = !0, requestHostTimeout(handleTimeout, options - currentTime))) : (priorityLevel.sortIndex = timeout, push(taskQueue, priorityLevel), isHostCallbackScheduled || isPerformingWork || (isHostCallbackScheduled = !0, isMessageLoopRunning || (isMessageLoopRunning = !0, schedulePerformWorkUntilDeadline())));
    return priorityLevel;
}
function unstable_cancelCallback$1(task) {
    task.callback = null;
}
function unstable_getCurrentPriorityLevel$1() {
    return currentPriorityLevel;
}
var isMessageLoopRunning = !1, taskTimeoutID = -1, startTime = -1;
function shouldYieldToHost() {
    return 5 > getCurrentTime() - startTime ? !1 : !0;
}
function requestPaint() {}
function performWorkUntilDeadline() {
    if (isMessageLoopRunning) {
        var currentTime = getCurrentTime();
        startTime = currentTime;
        var hasMoreWork = !0;
        try {
            a: {
                isHostCallbackScheduled = !1;
                isHostTimeoutScheduled && (isHostTimeoutScheduled = !1, localClearTimeout(taskTimeoutID), taskTimeoutID = -1);
                isPerformingWork = !0;
                var previousPriorityLevel = currentPriorityLevel;
                try {
                    b: {
                        advanceTimers(currentTime);
                        for(currentTask = peek(taskQueue); null !== currentTask && !(currentTask.expirationTime > currentTime && shouldYieldToHost());){
                            var callback = currentTask.callback;
                            if ("function" === typeof callback) {
                                currentTask.callback = null;
                                currentPriorityLevel = currentTask.priorityLevel;
                                var continuationCallback = callback(currentTask.expirationTime <= currentTime);
                                currentTime = getCurrentTime();
                                if ("function" === typeof continuationCallback) {
                                    currentTask.callback = continuationCallback;
                                    advanceTimers(currentTime);
                                    hasMoreWork = !0;
                                    break b;
                                }
                                currentTask === peek(taskQueue) && pop(taskQueue);
                                advanceTimers(currentTime);
                            } else pop(taskQueue);
                            currentTask = peek(taskQueue);
                        }
                        if (null !== currentTask) hasMoreWork = !0;
                        else {
                            var firstTimer = peek(timerQueue);
                            null !== firstTimer && requestHostTimeout(handleTimeout, firstTimer.startTime - currentTime);
                            hasMoreWork = !1;
                        }
                    }
                    break a;
                } finally{
                    currentTask = null, currentPriorityLevel = previousPriorityLevel, isPerformingWork = !1;
                }
                hasMoreWork = void 0;
            }
        } finally{
            hasMoreWork ? schedulePerformWorkUntilDeadline() : isMessageLoopRunning = !1;
        }
    }
}
var schedulePerformWorkUntilDeadline;
if ("function" === typeof localSetImmediate) schedulePerformWorkUntilDeadline = function() {
    localSetImmediate(performWorkUntilDeadline);
};
else if ("undefined" !== typeof MessageChannel) {
    var channel = new MessageChannel(), port = channel.port2;
    channel.port1.onmessage = performWorkUntilDeadline;
    schedulePerformWorkUntilDeadline = function() {
        port.postMessage(null);
    };
} else schedulePerformWorkUntilDeadline = function() {
    localSetTimeout(performWorkUntilDeadline, 0);
};
function requestHostTimeout(callback, ms) {
    taskTimeoutID = localSetTimeout(function() {
        callback(getCurrentTime());
    }, ms);
}
var unstable_UserBlockingPriority = "undefined" !== typeof nativeRuntimeScheduler ? nativeRuntimeScheduler.unstable_UserBlockingPriority : 2, unstable_NormalPriority = "undefined" !== typeof nativeRuntimeScheduler ? nativeRuntimeScheduler.unstable_NormalPriority : 3, unstable_LowPriority = "undefined" !== typeof nativeRuntimeScheduler ? nativeRuntimeScheduler.unstable_LowPriority : 4, unstable_ImmediatePriority = "undefined" !== typeof nativeRuntimeScheduler ? nativeRuntimeScheduler.unstable_ImmediatePriority : 1, unstable_scheduleCallback = "undefined" !== typeof nativeRuntimeScheduler ? nativeRuntimeScheduler.unstable_scheduleCallback : unstable_scheduleCallback$1, unstable_cancelCallback = "undefined" !== typeof nativeRuntimeScheduler ? nativeRuntimeScheduler.unstable_cancelCallback : unstable_cancelCallback$1, unstable_getCurrentPriorityLevel = "undefined" !== typeof nativeRuntimeScheduler ? nativeRuntimeScheduler.unstable_getCurrentPriorityLevel : unstable_getCurrentPriorityLevel$1, unstable_shouldYield = "undefined" !== typeof nativeRuntimeScheduler ? nativeRuntimeScheduler.unstable_shouldYield : shouldYieldToHost, unstable_requestPaint = "undefined" !== typeof nativeRuntimeScheduler ? nativeRuntimeScheduler.unstable_requestPaint : requestPaint, unstable_now = "undefined" !== typeof nativeRuntimeScheduler ? nativeRuntimeScheduler.unstable_now : getCurrentTime;
function throwNotImplemented() {
    throw Error("Not implemented.");
}
exports.unstable_IdlePriority = "undefined" !== typeof nativeRuntimeScheduler ? nativeRuntimeScheduler.unstable_IdlePriority : 5;
exports.unstable_ImmediatePriority = unstable_ImmediatePriority;
exports.unstable_LowPriority = unstable_LowPriority;
exports.unstable_NormalPriority = unstable_NormalPriority;
exports.unstable_Profiling = null;
exports.unstable_UserBlockingPriority = unstable_UserBlockingPriority;
exports.unstable_cancelCallback = unstable_cancelCallback;
exports.unstable_continueExecution = throwNotImplemented;
exports.unstable_forceFrameRate = throwNotImplemented;
exports.unstable_getCurrentPriorityLevel = unstable_getCurrentPriorityLevel;
exports.unstable_getFirstCallbackNode = throwNotImplemented;
exports.unstable_next = throwNotImplemented;
exports.unstable_now = unstable_now;
exports.unstable_pauseExecution = throwNotImplemented;
exports.unstable_requestPaint = unstable_requestPaint;
exports.unstable_runWithPriority = throwNotImplemented;
exports.unstable_scheduleCallback = unstable_scheduleCallback;
exports.unstable_shouldYield = unstable_shouldYield;
exports.unstable_wrapCallback = throwNotImplemented;


}),
43827: (function (module, __unused_webpack_exports, __webpack_require__) {
"use strict";

if (true) {
    module.exports = __webpack_require__(46288);
} else {}


}),
1120: (function (module) {
//
module.exports = function shallowEqual(objA, objB, compare, compareContext) {
    var ret = compare ? compare.call(compareContext, objA, objB) : void 0;
    if (ret !== void 0) {
        return !!ret;
    }
    if (objA === objB) {
        return true;
    }
    if (typeof objA !== "object" || !objA || typeof objB !== "object" || !objB) {
        return false;
    }
    var keysA = Object.keys(objA);
    var keysB = Object.keys(objB);
    if (keysA.length !== keysB.length) {
        return false;
    }
    var bHasOwnProperty = Object.prototype.hasOwnProperty.bind(objB);
    // Test for A's keys different from B.
    for(var idx = 0; idx < keysA.length; idx++){
        var key = keysA[idx];
        if (!bHasOwnProperty(key)) {
            return false;
        }
        var valueA = objA[key];
        var valueB = objB[key];
        ret = compare ? compare.call(compareContext, valueA, valueB, key) : void 0;
        if (ret === false || ret === void 0 && valueA !== valueB) {
            return false;
        }
    }
    return true;
};


}),
18881: (function (__unused_webpack_module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", ({
    value: true
}));
var UNKNOWN_FUNCTION = '<unknown>';
/**
 * This parses the different stack traces and puts them into one format
 * This borrows heavily from TraceKit (https://github.com/csnover/TraceKit)
 */ function parse(stackString) {
    var lines = stackString.split('\n');
    return lines.reduce(function(stack, line) {
        var parseResult = parseChrome(line) || parseWinjs(line) || parseGecko(line) || parseNode(line) || parseJSC(line);
        if (parseResult) {
            stack.push(parseResult);
        }
        return stack;
    }, []);
}
var chromeRe = /^\s*at (.*?) ?\(((?:file|https?|blob|chrome-extension|native|eval|webpack|rsc|<anonymous>|\/|[a-z]:\\|\\\\).*?)(?::(\d+))?(?::(\d+))?\)?\s*$/i;
var chromeEvalRe = /\((\S*)(?::(\d+))(?::(\d+))\)/;
function parseChrome(line) {
    var parts = chromeRe.exec(line);
    if (!parts) {
        return null;
    }
    var isNative = parts[2] && parts[2].indexOf('native') === 0; // start of line
    var isEval = parts[2] && parts[2].indexOf('eval') === 0; // start of line
    var submatch = chromeEvalRe.exec(parts[2]);
    if (isEval && submatch != null) {
        // throw out eval line/column and use top-most line/column number
        parts[2] = submatch[1]; // url
        parts[3] = submatch[2]; // line
        parts[4] = submatch[3]; // column
    }
    return {
        file: !isNative ? parts[2] : null,
        methodName: parts[1] || UNKNOWN_FUNCTION,
        arguments: isNative ? [
            parts[2]
        ] : [],
        lineNumber: parts[3] ? +parts[3] : null,
        column: parts[4] ? +parts[4] : null
    };
}
var winjsRe = /^\s*at (?:((?:\[object object\])?.+) )?\(?((?:file|ms-appx|https?|webpack|rsc|blob):.*?):(\d+)(?::(\d+))?\)?\s*$/i;
function parseWinjs(line) {
    var parts = winjsRe.exec(line);
    if (!parts) {
        return null;
    }
    return {
        file: parts[2],
        methodName: parts[1] || UNKNOWN_FUNCTION,
        arguments: [],
        lineNumber: +parts[3],
        column: parts[4] ? +parts[4] : null
    };
}
var geckoRe = /^\s*(.*?)(?:\((.*?)\))?(?:^|@)((?:file|https?|blob|chrome|webpack|rsc|resource|\[native).*?|[^@]*bundle)(?::(\d+))?(?::(\d+))?\s*$/i;
var geckoEvalRe = /(\S+) line (\d+)(?: > eval line \d+)* > eval/i;
function parseGecko(line) {
    var parts = geckoRe.exec(line);
    if (!parts) {
        return null;
    }
    var isEval = parts[3] && parts[3].indexOf(' > eval') > -1;
    var submatch = geckoEvalRe.exec(parts[3]);
    if (isEval && submatch != null) {
        // throw out eval line/column and use top-most line number
        parts[3] = submatch[1];
        parts[4] = submatch[2];
        parts[5] = null; // no column when eval
    }
    return {
        file: parts[3],
        methodName: parts[1] || UNKNOWN_FUNCTION,
        arguments: parts[2] ? parts[2].split(',') : [],
        lineNumber: parts[4] ? +parts[4] : null,
        column: parts[5] ? +parts[5] : null
    };
}
var javaScriptCoreRe = /^\s*(?:([^@]*)(?:\((.*?)\))?@)?(\S.*?):(\d+)(?::(\d+))?\s*$/i;
function parseJSC(line) {
    var parts = javaScriptCoreRe.exec(line);
    if (!parts) {
        return null;
    }
    return {
        file: parts[3],
        methodName: parts[1] || UNKNOWN_FUNCTION,
        arguments: [],
        lineNumber: +parts[4],
        column: parts[5] ? +parts[5] : null
    };
}
var nodeRe = /^\s*at (?:((?:\[object object\])?[^\\/]+(?: \[as \S+\])?) )?\(?(.*?):(\d+)(?::(\d+))?\)?\s*$/i;
function parseNode(line) {
    var parts = nodeRe.exec(line);
    if (!parts) {
        return null;
    }
    return {
        file: parts[2],
        methodName: parts[1] || UNKNOWN_FUNCTION,
        arguments: [],
        lineNumber: +parts[3],
        column: parts[4] ? +parts[4] : null
    };
}
exports.parse = parse;


}),
1533: (function (module, exports, __webpack_require__) {
"use strict";
/*
	MIT License http://www.opensource.org/licenses/mit-license.php
	Author Tobias Koppers @sokra
*/ 
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
var _call_super = __webpack_require__(19436);
var _class_call_check = __webpack_require__(8864);
var _create_class = __webpack_require__(93072);
var _inherits = __webpack_require__(82397);
var Hook = __webpack_require__(34666);
var HookCodeFactory = __webpack_require__(30403);
var AsyncParallelBailHookCodeFactory = /*#__PURE__*/ function(HookCodeFactory) {
    _inherits._(AsyncParallelBailHookCodeFactory, HookCodeFactory);
    function AsyncParallelBailHookCodeFactory() {
        _class_call_check._(this, AsyncParallelBailHookCodeFactory);
        return _call_super._(this, AsyncParallelBailHookCodeFactory, arguments);
    }
    _create_class._(AsyncParallelBailHookCodeFactory, [
        {
            key: "content",
            value: function content(ref) {
                var onError = ref.onError, onResult = ref.onResult, onDone = ref.onDone;
                var code = "";
                code += `var _results = new Array(${this.options.taps.length});\n`;
                code += "var _checkDone = function() {\n";
                code += "for(var i = 0; i < _results.length; i++) {\n";
                code += "var item = _results[i];\n";
                code += "if(item === undefined) return false;\n";
                code += "if(item.result !== undefined) {\n";
                code += onResult("item.result");
                code += "return true;\n";
                code += "}\n";
                code += "if(item.error) {\n";
                code += onError("item.error");
                code += "return true;\n";
                code += "}\n";
                code += "}\n";
                code += "return false;\n";
                code += "}\n";
                code += this.callTapsParallel({
                    onError: (i, err, done, doneBreak)=>{
                        var code = "";
                        code += `if(${i} < _results.length && ((_results.length = ${i + 1}), (_results[${i}] = { error: ${err} }), _checkDone())) {\n`;
                        code += doneBreak(true);
                        code += "} else {\n";
                        code += done();
                        code += "}\n";
                        return code;
                    },
                    onResult: (i, result, done, doneBreak)=>{
                        var code = "";
                        code += `if(${i} < _results.length && (${result} !== undefined && (_results.length = ${i + 1}), (_results[${i}] = { result: ${result} }), _checkDone())) {\n`;
                        code += doneBreak(true);
                        code += "} else {\n";
                        code += done();
                        code += "}\n";
                        return code;
                    },
                    onTap: (i, run, done, doneBreak)=>{
                        var code = "";
                        if (i > 0) {
                            code += `if(${i} >= _results.length) {\n`;
                            code += done();
                            code += "} else {\n";
                        }
                        code += run();
                        if (i > 0) code += "}\n";
                        return code;
                    },
                    onDone
                });
                return code;
            }
        }
    ]);
    return AsyncParallelBailHookCodeFactory;
}(HookCodeFactory);
var factory = new AsyncParallelBailHookCodeFactory();
var COMPILE = function(options) {
    factory.setup(this, options);
    return factory.create(options);
};
function AsyncParallelBailHook(ref, ref1) {
    var args = ref === void 0 ? [] : ref, name = ref1 === void 0 ? undefined : ref1;
    var hook = new Hook(args, name);
    hook.constructor = AsyncParallelBailHook;
    hook.compile = COMPILE;
    hook._call = undefined;
    hook.call = undefined;
    return hook;
}
AsyncParallelBailHook.prototype = null;
module.exports = AsyncParallelBailHook;


}),
298: (function (module, exports, __webpack_require__) {
"use strict";
/*
	MIT License http://www.opensource.org/licenses/mit-license.php
	Author Tobias Koppers @sokra
*/ 
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
var _call_super = __webpack_require__(19436);
var _class_call_check = __webpack_require__(8864);
var _create_class = __webpack_require__(93072);
var _inherits = __webpack_require__(82397);
var Hook = __webpack_require__(34666);
var HookCodeFactory = __webpack_require__(30403);
var AsyncParallelHookCodeFactory = /*#__PURE__*/ function(HookCodeFactory) {
    _inherits._(AsyncParallelHookCodeFactory, HookCodeFactory);
    function AsyncParallelHookCodeFactory() {
        _class_call_check._(this, AsyncParallelHookCodeFactory);
        return _call_super._(this, AsyncParallelHookCodeFactory, arguments);
    }
    _create_class._(AsyncParallelHookCodeFactory, [
        {
            key: "content",
            value: function content(ref) {
                var onError = ref.onError, onDone = ref.onDone;
                return this.callTapsParallel({
                    onError: (i, err, done, doneBreak)=>onError(err) + doneBreak(true),
                    onDone
                });
            }
        }
    ]);
    return AsyncParallelHookCodeFactory;
}(HookCodeFactory);
var factory = new AsyncParallelHookCodeFactory();
var COMPILE = function(options) {
    factory.setup(this, options);
    return factory.create(options);
};
function AsyncParallelHook(ref, ref1) {
    var args = ref === void 0 ? [] : ref, name = ref1 === void 0 ? undefined : ref1;
    var hook = new Hook(args, name);
    hook.constructor = AsyncParallelHook;
    hook.compile = COMPILE;
    hook._call = undefined;
    hook.call = undefined;
    return hook;
}
AsyncParallelHook.prototype = null;
module.exports = AsyncParallelHook;


}),
79737: (function (module, exports, __webpack_require__) {
"use strict";
/*
	MIT License http://www.opensource.org/licenses/mit-license.php
	Author Tobias Koppers @sokra
*/ 
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
var _call_super = __webpack_require__(19436);
var _class_call_check = __webpack_require__(8864);
var _create_class = __webpack_require__(93072);
var _inherits = __webpack_require__(82397);
var Hook = __webpack_require__(34666);
var HookCodeFactory = __webpack_require__(30403);
var AsyncSeriesBailHookCodeFactory = /*#__PURE__*/ function(HookCodeFactory) {
    _inherits._(AsyncSeriesBailHookCodeFactory, HookCodeFactory);
    function AsyncSeriesBailHookCodeFactory() {
        _class_call_check._(this, AsyncSeriesBailHookCodeFactory);
        return _call_super._(this, AsyncSeriesBailHookCodeFactory, arguments);
    }
    _create_class._(AsyncSeriesBailHookCodeFactory, [
        {
            key: "content",
            value: function content(ref) {
                var onError = ref.onError, onResult = ref.onResult, resultReturns = ref.resultReturns, onDone = ref.onDone;
                return this.callTapsSeries({
                    onError: (i, err, next, doneBreak)=>onError(err) + doneBreak(true),
                    onResult: (i, result, next)=>`if(${result} !== undefined) {\n${onResult(result)}\n} else {\n${next()}}\n`,
                    resultReturns,
                    onDone
                });
            }
        }
    ]);
    return AsyncSeriesBailHookCodeFactory;
}(HookCodeFactory);
var factory = new AsyncSeriesBailHookCodeFactory();
var COMPILE = function(options) {
    factory.setup(this, options);
    return factory.create(options);
};
function AsyncSeriesBailHook(ref, ref1) {
    var args = ref === void 0 ? [] : ref, name = ref1 === void 0 ? undefined : ref1;
    var hook = new Hook(args, name);
    hook.constructor = AsyncSeriesBailHook;
    hook.compile = COMPILE;
    hook._call = undefined;
    hook.call = undefined;
    return hook;
}
AsyncSeriesBailHook.prototype = null;
module.exports = AsyncSeriesBailHook;


}),
65195: (function (module, exports, __webpack_require__) {
"use strict";
/*
	MIT License http://www.opensource.org/licenses/mit-license.php
	Author Tobias Koppers @sokra
*/ 
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
var _call_super = __webpack_require__(19436);
var _class_call_check = __webpack_require__(8864);
var _create_class = __webpack_require__(93072);
var _inherits = __webpack_require__(82397);
var Hook = __webpack_require__(34666);
var HookCodeFactory = __webpack_require__(30403);
var AsyncSeriesHookCodeFactory = /*#__PURE__*/ function(HookCodeFactory) {
    _inherits._(AsyncSeriesHookCodeFactory, HookCodeFactory);
    function AsyncSeriesHookCodeFactory() {
        _class_call_check._(this, AsyncSeriesHookCodeFactory);
        return _call_super._(this, AsyncSeriesHookCodeFactory, arguments);
    }
    _create_class._(AsyncSeriesHookCodeFactory, [
        {
            key: "content",
            value: function content(ref) {
                var onError = ref.onError, onDone = ref.onDone;
                return this.callTapsSeries({
                    onError: (i, err, next, doneBreak)=>onError(err) + doneBreak(true),
                    onDone
                });
            }
        }
    ]);
    return AsyncSeriesHookCodeFactory;
}(HookCodeFactory);
var factory = new AsyncSeriesHookCodeFactory();
var COMPILE = function(options) {
    factory.setup(this, options);
    return factory.create(options);
};
function AsyncSeriesHook(ref, ref1) {
    var args = ref === void 0 ? [] : ref, name = ref1 === void 0 ? undefined : ref1;
    var hook = new Hook(args, name);
    hook.constructor = AsyncSeriesHook;
    hook.compile = COMPILE;
    hook._call = undefined;
    hook.call = undefined;
    return hook;
}
AsyncSeriesHook.prototype = null;
module.exports = AsyncSeriesHook;


}),
70791: (function (module, exports, __webpack_require__) {
"use strict";
/*
	MIT License http://www.opensource.org/licenses/mit-license.php
	Author Tobias Koppers @sokra
*/ 
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
var _call_super = __webpack_require__(19436);
var _class_call_check = __webpack_require__(8864);
var _create_class = __webpack_require__(93072);
var _inherits = __webpack_require__(82397);
var Hook = __webpack_require__(34666);
var HookCodeFactory = __webpack_require__(30403);
var AsyncSeriesLoopHookCodeFactory = /*#__PURE__*/ function(HookCodeFactory) {
    _inherits._(AsyncSeriesLoopHookCodeFactory, HookCodeFactory);
    function AsyncSeriesLoopHookCodeFactory() {
        _class_call_check._(this, AsyncSeriesLoopHookCodeFactory);
        return _call_super._(this, AsyncSeriesLoopHookCodeFactory, arguments);
    }
    _create_class._(AsyncSeriesLoopHookCodeFactory, [
        {
            key: "content",
            value: function content(ref) {
                var onError = ref.onError, onDone = ref.onDone;
                return this.callTapsLooping({
                    onError: (i, err, next, doneBreak)=>onError(err) + doneBreak(true),
                    onDone
                });
            }
        }
    ]);
    return AsyncSeriesLoopHookCodeFactory;
}(HookCodeFactory);
var factory = new AsyncSeriesLoopHookCodeFactory();
var COMPILE = function(options) {
    factory.setup(this, options);
    return factory.create(options);
};
function AsyncSeriesLoopHook(ref, ref1) {
    var args = ref === void 0 ? [] : ref, name = ref1 === void 0 ? undefined : ref1;
    var hook = new Hook(args, name);
    hook.constructor = AsyncSeriesLoopHook;
    hook.compile = COMPILE;
    hook._call = undefined;
    hook.call = undefined;
    return hook;
}
AsyncSeriesLoopHook.prototype = null;
module.exports = AsyncSeriesLoopHook;


}),
16213: (function (module, exports, __webpack_require__) {
"use strict";
/*
	MIT License http://www.opensource.org/licenses/mit-license.php
	Author Tobias Koppers @sokra
*/ 
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
var _call_super = __webpack_require__(19436);
var _class_call_check = __webpack_require__(8864);
var _create_class = __webpack_require__(93072);
var _inherits = __webpack_require__(82397);
var Hook = __webpack_require__(34666);
var HookCodeFactory = __webpack_require__(30403);
var AsyncSeriesWaterfallHookCodeFactory = /*#__PURE__*/ function(HookCodeFactory) {
    _inherits._(AsyncSeriesWaterfallHookCodeFactory, HookCodeFactory);
    function AsyncSeriesWaterfallHookCodeFactory() {
        _class_call_check._(this, AsyncSeriesWaterfallHookCodeFactory);
        return _call_super._(this, AsyncSeriesWaterfallHookCodeFactory, arguments);
    }
    _create_class._(AsyncSeriesWaterfallHookCodeFactory, [
        {
            key: "content",
            value: function content(ref) {
                var onError = ref.onError, onResult = ref.onResult, onDone = ref.onDone;
                return this.callTapsSeries({
                    onError: (i, err, next, doneBreak)=>onError(err) + doneBreak(true),
                    onResult: (i, result, next)=>{
                        var code = "";
                        code += `if(${result} !== undefined) {\n`;
                        code += `${this._args[0]} = ${result};\n`;
                        code += `}\n`;
                        code += next();
                        return code;
                    },
                    onDone: ()=>onResult(this._args[0])
                });
            }
        }
    ]);
    return AsyncSeriesWaterfallHookCodeFactory;
}(HookCodeFactory);
var factory = new AsyncSeriesWaterfallHookCodeFactory();
var COMPILE = function(options) {
    factory.setup(this, options);
    return factory.create(options);
};
function AsyncSeriesWaterfallHook(ref, ref1) {
    var args = ref === void 0 ? [] : ref, name = ref1 === void 0 ? undefined : ref1;
    if (args.length < 1) throw new Error("Waterfall hooks must have at least one argument");
    var hook = new Hook(args, name);
    hook.constructor = AsyncSeriesWaterfallHook;
    hook.compile = COMPILE;
    hook._call = undefined;
    hook.call = undefined;
    return hook;
}
AsyncSeriesWaterfallHook.prototype = null;
module.exports = AsyncSeriesWaterfallHook;


}),
34666: (function (module, exports, __webpack_require__) {
"use strict";
/*
	MIT License http://www.opensource.org/licenses/mit-license.php
	Author Tobias Koppers @sokra
*/ 
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
var _class_call_check = __webpack_require__(8864);
var _create_class = __webpack_require__(93072);
var _to_consumable_array = __webpack_require__(92716);
var util = __webpack_require__(25709);
var deprecateContext = util.deprecate(()=>{}, "Hook.context is deprecated and will be removed");
var CALL_DELEGATE = function(...args) {
    this.call = this._createCall("sync");
    return this.call.apply(this, _to_consumable_array._(args));
};
var CALL_ASYNC_DELEGATE = function(...args) {
    this.callAsync = this._createCall("async");
    return this.callAsync.apply(this, _to_consumable_array._(args));
};
var PROMISE_DELEGATE = function(...args) {
    this.promise = this._createCall("promise");
    return this.promise.apply(this, _to_consumable_array._(args));
};
var Hook = /*#__PURE__*/ function() {
    function Hook(ref, ref1) {
        var args = ref === void 0 ? [] : ref, name = ref1 === void 0 ? undefined : ref1;
        _class_call_check._(this, Hook);
        this._args = args;
        this.name = name;
        this.taps = [];
        this.interceptors = [];
        this._call = CALL_DELEGATE;
        this.call = CALL_DELEGATE;
        this._callAsync = CALL_ASYNC_DELEGATE;
        this.callAsync = CALL_ASYNC_DELEGATE;
        this._promise = PROMISE_DELEGATE;
        this.promise = PROMISE_DELEGATE;
        this._x = undefined;
        this.compile = this.compile;
        this.tap = this.tap;
        this.tapAsync = this.tapAsync;
        this.tapPromise = this.tapPromise;
    }
    _create_class._(Hook, [
        {
            key: "compile",
            value: function compile(options) {
                throw new Error("Abstract: should be overridden");
            }
        },
        {
            key: "_createCall",
            value: function _createCall(type) {
                return this.compile({
                    taps: this.taps,
                    interceptors: this.interceptors,
                    args: this._args,
                    type: type
                });
            }
        },
        {
            key: "_tap",
            value: function _tap(type, options, fn) {
                if (typeof options === "string") {
                    options = {
                        name: options.trim()
                    };
                } else if (typeof options !== "object" || options === null) {
                    throw new Error("Invalid tap options");
                }
                if (typeof options.name !== "string" || options.name === "") {
                    throw new Error("Missing name for tap");
                }
                if (typeof options.context !== "undefined") {
                    deprecateContext();
                }
                options = Object.assign({
                    type,
                    fn
                }, options);
                options = this._runRegisterInterceptors(options);
                this._insert(options);
            }
        },
        {
            key: "tap",
            value: function tap(options, fn) {
                this._tap("sync", options, fn);
            }
        },
        {
            key: "tapAsync",
            value: function tapAsync(options, fn) {
                this._tap("async", options, fn);
            }
        },
        {
            key: "tapPromise",
            value: function tapPromise(options, fn) {
                this._tap("promise", options, fn);
            }
        },
        {
            key: "_runRegisterInterceptors",
            value: function _runRegisterInterceptors(options) {
                for (var interceptor of this.interceptors){
                    if (interceptor.register) {
                        var newOptions = interceptor.register(options);
                        if (newOptions !== undefined) {
                            options = newOptions;
                        }
                    }
                }
                return options;
            }
        },
        {
            key: "withOptions",
            value: function withOptions(options) {
                var mergeOptions = (opt)=>Object.assign({}, options, typeof opt === "string" ? {
                        name: opt
                    } : opt);
                return {
                    name: this.name,
                    tap: (opt, fn)=>this.tap(mergeOptions(opt), fn),
                    tapAsync: (opt, fn)=>this.tapAsync(mergeOptions(opt), fn),
                    tapPromise: (opt, fn)=>this.tapPromise(mergeOptions(opt), fn),
                    intercept: (interceptor)=>this.intercept(interceptor),
                    isUsed: ()=>this.isUsed(),
                    withOptions: (opt)=>this.withOptions(mergeOptions(opt))
                };
            }
        },
        {
            key: "isUsed",
            value: function isUsed() {
                return this.taps.length > 0 || this.interceptors.length > 0;
            }
        },
        {
            key: "intercept",
            value: function intercept(interceptor) {
                this._resetCompilation();
                this.interceptors.push(Object.assign({}, interceptor));
                if (interceptor.register) {
                    for(var i = 0; i < this.taps.length; i++){
                        this.taps[i] = interceptor.register(this.taps[i]);
                    }
                }
            }
        },
        {
            key: "_resetCompilation",
            value: function _resetCompilation() {
                this.call = this._call;
                this.callAsync = this._callAsync;
                this.promise = this._promise;
            }
        },
        {
            key: "_insert",
            value: function _insert(item) {
                this._resetCompilation();
                var before;
                if (typeof item.before === "string") {
                    before = new Set([
                        item.before
                    ]);
                } else if (Array.isArray(item.before)) {
                    before = new Set(item.before);
                }
                var stage = 0;
                if (typeof item.stage === "number") {
                    stage = item.stage;
                }
                var i = this.taps.length;
                while(i > 0){
                    i--;
                    var x = this.taps[i];
                    this.taps[i + 1] = x;
                    var xStage = x.stage || 0;
                    if (before) {
                        if (before.has(x.name)) {
                            before.delete(x.name);
                            continue;
                        }
                        if (before.size > 0) {
                            continue;
                        }
                    }
                    if (xStage > stage) {
                        continue;
                    }
                    i++;
                    break;
                }
                this.taps[i] = item;
            }
        }
    ]);
    return Hook;
}();
Object.setPrototypeOf(Hook.prototype, null);
module.exports = Hook;


}),
30403: (function (module, exports, __webpack_require__) {
"use strict";
/*
	MIT License http://www.opensource.org/licenses/mit-license.php
	Author Tobias Koppers @sokra
*/ 
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
var _class_call_check = __webpack_require__(8864);
var _create_class = __webpack_require__(93072);
var HookCodeFactory = /*#__PURE__*/ function() {
    function HookCodeFactory(config) {
        _class_call_check._(this, HookCodeFactory);
        this.config = config;
        this.options = undefined;
        this._args = undefined;
    }
    _create_class._(HookCodeFactory, [
        {
            key: "create",
            value: function create(options) {
                this.init(options);
                var fn;
                switch(this.options.type){
                    case "sync":
                        fn = new Function(this.args(), '"use strict";\n' + this.header() + this.contentWithInterceptors({
                            onError: (err)=>`throw ${err};\n`,
                            onResult: (result)=>`return ${result};\n`,
                            resultReturns: true,
                            onDone: ()=>"",
                            rethrowIfPossible: true
                        }));
                        break;
                    case "async":
                        fn = new Function(this.args({
                            after: "_callback"
                        }), '"use strict";\n' + this.header() + this.contentWithInterceptors({
                            onError: (err)=>`_callback(${err});\n`,
                            onResult: (result)=>`_callback(null, ${result});\n`,
                            onDone: ()=>"_callback();\n"
                        }));
                        break;
                    case "promise":
                        var errorHelperUsed = false;
                        var content = this.contentWithInterceptors({
                            onError: (err)=>{
                                errorHelperUsed = true;
                                return `_error(${err});\n`;
                            },
                            onResult: (result)=>`_resolve(${result});\n`,
                            onDone: ()=>"_resolve();\n"
                        });
                        var code = "";
                        code += '"use strict";\n';
                        code += this.header();
                        code += "return new Promise((function(_resolve, _reject) {\n";
                        if (errorHelperUsed) {
                            code += "var _sync = true;\n";
                            code += "function _error(_err) {\n";
                            code += "if(_sync)\n";
                            code += "_resolve(Promise.resolve().then((function() { throw _err; })));\n";
                            code += "else\n";
                            code += "_reject(_err);\n";
                            code += "};\n";
                        }
                        code += content;
                        if (errorHelperUsed) {
                            code += "_sync = false;\n";
                        }
                        code += "}));\n";
                        fn = new Function(this.args(), code);
                        break;
                }
                this.deinit();
                return fn;
            }
        },
        {
            key: "setup",
            value: function setup(instance, options) {
                instance._x = options.taps.map((t)=>t.fn);
            }
        },
        {
            /**
	 * @param {{ type: "sync" | "promise" | "async", taps: Array<Tap>, interceptors: Array<Interceptor> }} options
	 */ key: "init",
            value: function init(options) {
                this.options = options;
                this._args = options.args.slice();
            }
        },
        {
            key: "deinit",
            value: function deinit() {
                this.options = undefined;
                this._args = undefined;
            }
        },
        {
            key: "contentWithInterceptors",
            value: function contentWithInterceptors(options) {
                if (this.options.interceptors.length > 0) {
                    var onError = options.onError;
                    var onResult = options.onResult;
                    var onDone = options.onDone;
                    var code = "";
                    for(var i = 0; i < this.options.interceptors.length; i++){
                        var interceptor = this.options.interceptors[i];
                        if (interceptor.call) {
                            code += `${this.getInterceptor(i)}.call(${this.args({
                                before: interceptor.context ? "_context" : undefined
                            })});\n`;
                        }
                    }
                    code += this.content(Object.assign(options, {
                        onError: onError && ((err)=>{
                            var code = "";
                            for(var i = 0; i < this.options.interceptors.length; i++){
                                var interceptor = this.options.interceptors[i];
                                if (interceptor.error) {
                                    code += `${this.getInterceptor(i)}.error(${err});\n`;
                                }
                            }
                            code += onError(err);
                            return code;
                        }),
                        onResult: onResult && ((result)=>{
                            var code = "";
                            for(var i = 0; i < this.options.interceptors.length; i++){
                                var interceptor = this.options.interceptors[i];
                                if (interceptor.result) {
                                    code += `${this.getInterceptor(i)}.result(${result});\n`;
                                }
                            }
                            code += onResult(result);
                            return code;
                        }),
                        onDone: onDone && (()=>{
                            var code = "";
                            for(var i = 0; i < this.options.interceptors.length; i++){
                                var interceptor = this.options.interceptors[i];
                                if (interceptor.done) {
                                    code += `${this.getInterceptor(i)}.done();\n`;
                                }
                            }
                            code += onDone();
                            return code;
                        })
                    }));
                    return code;
                } else {
                    return this.content(options);
                }
            }
        },
        {
            key: "header",
            value: function header() {
                var code = "";
                if (this.needContext()) {
                    code += "var _context = {};\n";
                } else {
                    code += "var _context;\n";
                }
                code += "var _x = this._x;\n";
                if (this.options.interceptors.length > 0) {
                    code += "var _taps = this.taps;\n";
                    code += "var _interceptors = this.interceptors;\n";
                }
                return code;
            }
        },
        {
            key: "needContext",
            value: function needContext() {
                for (var tap of this.options.taps)if (tap.context) return true;
                return false;
            }
        },
        {
            key: "callTap",
            value: function callTap(tapIndex, ref) {
                var onError = ref.onError, onResult = ref.onResult, onDone = ref.onDone, rethrowIfPossible = ref.rethrowIfPossible;
                var code = "";
                var hasTapCached = false;
                for(var i = 0; i < this.options.interceptors.length; i++){
                    var interceptor = this.options.interceptors[i];
                    if (interceptor.tap) {
                        if (!hasTapCached) {
                            code += `var _tap${tapIndex} = ${this.getTap(tapIndex)};\n`;
                            hasTapCached = true;
                        }
                        code += `${this.getInterceptor(i)}.tap(${interceptor.context ? "_context, " : ""}_tap${tapIndex});\n`;
                    }
                }
                code += `var _fn${tapIndex} = ${this.getTapFn(tapIndex)};\n`;
                var tap = this.options.taps[tapIndex];
                switch(tap.type){
                    case "sync":
                        if (!rethrowIfPossible) {
                            code += `var _hasError${tapIndex} = false;\n`;
                            code += "try {\n";
                        }
                        if (onResult) {
                            code += `var _result${tapIndex} = _fn${tapIndex}(${this.args({
                                before: tap.context ? "_context" : undefined
                            })});\n`;
                        } else {
                            code += `_fn${tapIndex}(${this.args({
                                before: tap.context ? "_context" : undefined
                            })});\n`;
                        }
                        if (!rethrowIfPossible) {
                            code += "} catch(_err) {\n";
                            code += `_hasError${tapIndex} = true;\n`;
                            code += onError("_err");
                            code += "}\n";
                            code += `if(!_hasError${tapIndex}) {\n`;
                        }
                        if (onResult) {
                            code += onResult(`_result${tapIndex}`);
                        }
                        if (onDone) {
                            code += onDone();
                        }
                        if (!rethrowIfPossible) {
                            code += "}\n";
                        }
                        break;
                    case "async":
                        var cbCode = "";
                        if (onResult) cbCode += `(function(_err${tapIndex}, _result${tapIndex}) {\n`;
                        else cbCode += `(function(_err${tapIndex}) {\n`;
                        cbCode += `if(_err${tapIndex}) {\n`;
                        cbCode += onError(`_err${tapIndex}`);
                        cbCode += "} else {\n";
                        if (onResult) {
                            cbCode += onResult(`_result${tapIndex}`);
                        }
                        if (onDone) {
                            cbCode += onDone();
                        }
                        cbCode += "}\n";
                        cbCode += "})";
                        code += `_fn${tapIndex}(${this.args({
                            before: tap.context ? "_context" : undefined,
                            after: cbCode
                        })});\n`;
                        break;
                    case "promise":
                        code += `var _hasResult${tapIndex} = false;\n`;
                        code += `var _promise${tapIndex} = _fn${tapIndex}(${this.args({
                            before: tap.context ? "_context" : undefined
                        })});\n`;
                        code += `if (!_promise${tapIndex} || !_promise${tapIndex}.then)\n`;
                        code += `  throw new Error('Tap function (tapPromise) did not return promise (returned ' + _promise${tapIndex} + ')');\n`;
                        code += `_promise${tapIndex}.then((function(_result${tapIndex}) {\n`;
                        code += `_hasResult${tapIndex} = true;\n`;
                        if (onResult) {
                            code += onResult(`_result${tapIndex}`);
                        }
                        if (onDone) {
                            code += onDone();
                        }
                        code += `}), function(_err${tapIndex}) {\n`;
                        code += `if(_hasResult${tapIndex}) throw _err${tapIndex};\n`;
                        code += onError(`_err${tapIndex}`);
                        code += "});\n";
                        break;
                }
                return code;
            }
        },
        {
            key: "callTapsSeries",
            value: function callTapsSeries(ref) {
                var _this, _loop = function(j) {
                    var i = j;
                    var unroll = current !== onDone && (_this.options.taps[i].type !== "sync" || unrollCounter++ > 20);
                    if (unroll) {
                        unrollCounter = 0;
                        code += `function _next${i}() {\n`;
                        code += current();
                        code += `}\n`;
                        current = ()=>`${somethingReturns ? "return " : ""}_next${i}();\n`;
                    }
                    var done = current;
                    var doneBreak = (skipDone)=>{
                        if (skipDone) return "";
                        return onDone();
                    };
                    var content = _this.callTap(i, {
                        onError: (error)=>onError(i, error, done, doneBreak),
                        onResult: onResult && ((result)=>{
                            return onResult(i, result, done, doneBreak);
                        }),
                        onDone: !onResult && done,
                        rethrowIfPossible: rethrowIfPossible && (firstAsync < 0 || i < firstAsync)
                    });
                    current = ()=>content;
                };
                var onError = ref.onError, onResult = ref.onResult, resultReturns = ref.resultReturns, onDone = ref.onDone, doneReturns = ref.doneReturns, rethrowIfPossible = ref.rethrowIfPossible;
                if (this.options.taps.length === 0) return onDone();
                var firstAsync = this.options.taps.findIndex((t)=>t.type !== "sync");
                var somethingReturns = resultReturns || doneReturns;
                var code = "";
                var current = onDone;
                var unrollCounter = 0;
                for(var j = this.options.taps.length - 1; j >= 0; j--)_this = this, _loop(j);
                code += current();
                return code;
            }
        },
        {
            key: "callTapsLooping",
            value: function callTapsLooping(ref) {
                var onError = ref.onError, onDone = ref.onDone, rethrowIfPossible = ref.rethrowIfPossible;
                if (this.options.taps.length === 0) return onDone();
                var syncOnly = this.options.taps.every((t)=>t.type === "sync");
                var code = "";
                if (!syncOnly) {
                    code += "var _looper = (function() {\n";
                    code += "var _loopAsync = false;\n";
                }
                code += "var _loop;\n";
                code += "do {\n";
                code += "_loop = false;\n";
                for(var i = 0; i < this.options.interceptors.length; i++){
                    var interceptor = this.options.interceptors[i];
                    if (interceptor.loop) {
                        code += `${this.getInterceptor(i)}.loop(${this.args({
                            before: interceptor.context ? "_context" : undefined
                        })});\n`;
                    }
                }
                code += this.callTapsSeries({
                    onError,
                    onResult: (i, result, next, doneBreak)=>{
                        var code = "";
                        code += `if(${result} !== undefined) {\n`;
                        code += "_loop = true;\n";
                        if (!syncOnly) code += "if(_loopAsync) _looper();\n";
                        code += doneBreak(true);
                        code += `} else {\n`;
                        code += next();
                        code += `}\n`;
                        return code;
                    },
                    onDone: onDone && (()=>{
                        var code = "";
                        code += "if(!_loop) {\n";
                        code += onDone();
                        code += "}\n";
                        return code;
                    }),
                    rethrowIfPossible: rethrowIfPossible && syncOnly
                });
                code += "} while(_loop);\n";
                if (!syncOnly) {
                    code += "_loopAsync = true;\n";
                    code += "});\n";
                    code += "_looper();\n";
                }
                return code;
            }
        },
        {
            key: "callTapsParallel",
            value: function callTapsParallel(ref) {
                var _this, _loop = function(i) {
                    var done = ()=>{
                        if (onDone) return "if(--_counter === 0) _done();\n";
                        else return "--_counter;";
                    };
                    var doneBreak = (skipDone)=>{
                        if (skipDone || !onDone) return "_counter = 0;\n";
                        else return "_counter = 0;\n_done();\n";
                    };
                    code += "if(_counter <= 0) break;\n";
                    code += onTap(i, ()=>_this.callTap(i, {
                            onError: (error)=>{
                                var code = "";
                                code += "if(_counter > 0) {\n";
                                code += onError(i, error, done, doneBreak);
                                code += "}\n";
                                return code;
                            },
                            onResult: onResult && ((result)=>{
                                var code = "";
                                code += "if(_counter > 0) {\n";
                                code += onResult(i, result, done, doneBreak);
                                code += "}\n";
                                return code;
                            }),
                            onDone: !onResult && (()=>{
                                return done();
                            }),
                            rethrowIfPossible
                        }), done, doneBreak);
                };
                var onError = ref.onError, onResult = ref.onResult, onDone = ref.onDone, rethrowIfPossible = ref.rethrowIfPossible, _ref_onTap = ref.onTap, onTap = _ref_onTap === void 0 ? (i, run)=>run() : _ref_onTap;
                if (this.options.taps.length <= 1) {
                    return this.callTapsSeries({
                        onError,
                        onResult,
                        onDone,
                        rethrowIfPossible
                    });
                }
                var code = "";
                code += "do {\n";
                code += `var _counter = ${this.options.taps.length};\n`;
                if (onDone) {
                    code += "var _done = (function() {\n";
                    code += onDone();
                    code += "});\n";
                }
                for(var i = 0; i < this.options.taps.length; i++)_this = this, _loop(i);
                code += "} while(false);\n";
                return code;
            }
        },
        {
            key: "args",
            value: function args(ref) {
                var _ref = ref === void 0 ? {} : ref, before = _ref.before, after = _ref.after;
                var allArgs = this._args;
                if (before) allArgs = [
                    before
                ].concat(allArgs);
                if (after) allArgs = allArgs.concat(after);
                if (allArgs.length === 0) {
                    return "";
                } else {
                    return allArgs.join(", ");
                }
            }
        },
        {
            key: "getTapFn",
            value: function getTapFn(idx) {
                return `_x[${idx}]`;
            }
        },
        {
            key: "getTap",
            value: function getTap(idx) {
                return `_taps[${idx}]`;
            }
        },
        {
            key: "getInterceptor",
            value: function getInterceptor(idx) {
                return `_interceptors[${idx}]`;
            }
        }
    ]);
    return HookCodeFactory;
}();
module.exports = HookCodeFactory;


}),
15641: (function (module, exports, __webpack_require__) {
"use strict";
/*
	MIT License http://www.opensource.org/licenses/mit-license.php
	Author Tobias Koppers @sokra
*/ 
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
var _class_call_check = __webpack_require__(8864);
var _create_class = __webpack_require__(93072);
var util = __webpack_require__(25709);
var defaultFactory = (key, hook)=>hook;
var HookMap = /*#__PURE__*/ function() {
    function HookMap(factory, ref) {
        var name = ref === void 0 ? undefined : ref;
        _class_call_check._(this, HookMap);
        this._map = new Map();
        this.name = name;
        this._factory = factory;
        this._interceptors = [];
    }
    _create_class._(HookMap, [
        {
            key: "get",
            value: function get(key) {
                return this._map.get(key);
            }
        },
        {
            key: "for",
            value: function _for(key) {
                var hook = this.get(key);
                if (hook !== undefined) {
                    return hook;
                }
                var newHook = this._factory(key);
                var interceptors = this._interceptors;
                for(var i = 0; i < interceptors.length; i++){
                    newHook = interceptors[i].factory(key, newHook);
                }
                this._map.set(key, newHook);
                return newHook;
            }
        },
        {
            key: "intercept",
            value: function intercept(interceptor) {
                this._interceptors.push(Object.assign({
                    factory: defaultFactory
                }, interceptor));
            }
        }
    ]);
    return HookMap;
}();
HookMap.prototype.tap = util.deprecate(function(key, options, fn) {
    return this.for(key).tap(options, fn);
}, "HookMap#tap(key,\u2026) is deprecated. Use HookMap#for(key).tap(\u2026) instead.");
HookMap.prototype.tapAsync = util.deprecate(function(key, options, fn) {
    return this.for(key).tapAsync(options, fn);
}, "HookMap#tapAsync(key,\u2026) is deprecated. Use HookMap#for(key).tapAsync(\u2026) instead.");
HookMap.prototype.tapPromise = util.deprecate(function(key, options, fn) {
    return this.for(key).tapPromise(options, fn);
}, "HookMap#tapPromise(key,\u2026) is deprecated. Use HookMap#for(key).tapPromise(\u2026) instead.");
module.exports = HookMap;


}),
166: (function (module, exports, __webpack_require__) {
"use strict";
/*
	MIT License http://www.opensource.org/licenses/mit-license.php
	Author Tobias Koppers @sokra
*/ 
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
var _class_call_check = __webpack_require__(8864);
var _create_class = __webpack_require__(93072);
var Hook = __webpack_require__(34666);
var MultiHook = /*#__PURE__*/ function() {
    function MultiHook(hooks, ref) {
        var name = ref === void 0 ? undefined : ref;
        _class_call_check._(this, MultiHook);
        this.hooks = hooks;
        this.name = name;
    }
    _create_class._(MultiHook, [
        {
            key: "tap",
            value: function tap(options, fn) {
                for (var hook of this.hooks){
                    hook.tap(options, fn);
                }
            }
        },
        {
            key: "tapAsync",
            value: function tapAsync(options, fn) {
                for (var hook of this.hooks){
                    hook.tapAsync(options, fn);
                }
            }
        },
        {
            key: "tapPromise",
            value: function tapPromise(options, fn) {
                for (var hook of this.hooks){
                    hook.tapPromise(options, fn);
                }
            }
        },
        {
            key: "isUsed",
            value: function isUsed() {
                for (var hook of this.hooks){
                    if (hook.isUsed()) return true;
                }
                return false;
            }
        },
        {
            key: "intercept",
            value: function intercept(interceptor) {
                for (var hook of this.hooks){
                    hook.intercept(interceptor);
                }
            }
        },
        {
            key: "withOptions",
            value: function withOptions(options) {
                return new MultiHook(this.hooks.map((h)=>h.withOptions(options)), this.name);
            }
        }
    ]);
    return MultiHook;
}();
module.exports = MultiHook;


}),
39314: (function (module, exports, __webpack_require__) {
"use strict";
/*
	MIT License http://www.opensource.org/licenses/mit-license.php
	Author Tobias Koppers @sokra
*/ 
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
var _call_super = __webpack_require__(19436);
var _class_call_check = __webpack_require__(8864);
var _create_class = __webpack_require__(93072);
var _inherits = __webpack_require__(82397);
var Hook = __webpack_require__(34666);
var HookCodeFactory = __webpack_require__(30403);
var SyncBailHookCodeFactory = /*#__PURE__*/ function(HookCodeFactory) {
    _inherits._(SyncBailHookCodeFactory, HookCodeFactory);
    function SyncBailHookCodeFactory() {
        _class_call_check._(this, SyncBailHookCodeFactory);
        return _call_super._(this, SyncBailHookCodeFactory, arguments);
    }
    _create_class._(SyncBailHookCodeFactory, [
        {
            key: "content",
            value: function content(ref) {
                var onError = ref.onError, onResult = ref.onResult, resultReturns = ref.resultReturns, onDone = ref.onDone, rethrowIfPossible = ref.rethrowIfPossible;
                return this.callTapsSeries({
                    onError: (i, err)=>onError(err),
                    onResult: (i, result, next)=>`if(${result} !== undefined) {\n${onResult(result)};\n} else {\n${next()}}\n`,
                    resultReturns,
                    onDone,
                    rethrowIfPossible
                });
            }
        }
    ]);
    return SyncBailHookCodeFactory;
}(HookCodeFactory);
var factory = new SyncBailHookCodeFactory();
var TAP_ASYNC = ()=>{
    throw new Error("tapAsync is not supported on a SyncBailHook");
};
var TAP_PROMISE = ()=>{
    throw new Error("tapPromise is not supported on a SyncBailHook");
};
var COMPILE = function(options) {
    factory.setup(this, options);
    return factory.create(options);
};
function SyncBailHook(ref, ref1) {
    var args = ref === void 0 ? [] : ref, name = ref1 === void 0 ? undefined : ref1;
    var hook = new Hook(args, name);
    hook.constructor = SyncBailHook;
    hook.tapAsync = TAP_ASYNC;
    hook.tapPromise = TAP_PROMISE;
    hook.compile = COMPILE;
    return hook;
}
SyncBailHook.prototype = null;
module.exports = SyncBailHook;


}),
30727: (function (module, exports, __webpack_require__) {
"use strict";
/*
	MIT License http://www.opensource.org/licenses/mit-license.php
	Author Tobias Koppers @sokra
*/ 
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
var _call_super = __webpack_require__(19436);
var _class_call_check = __webpack_require__(8864);
var _create_class = __webpack_require__(93072);
var _inherits = __webpack_require__(82397);
var Hook = __webpack_require__(34666);
var HookCodeFactory = __webpack_require__(30403);
var SyncHookCodeFactory = /*#__PURE__*/ function(HookCodeFactory) {
    _inherits._(SyncHookCodeFactory, HookCodeFactory);
    function SyncHookCodeFactory() {
        _class_call_check._(this, SyncHookCodeFactory);
        return _call_super._(this, SyncHookCodeFactory, arguments);
    }
    _create_class._(SyncHookCodeFactory, [
        {
            key: "content",
            value: function content(ref) {
                var onError = ref.onError, onDone = ref.onDone, rethrowIfPossible = ref.rethrowIfPossible;
                return this.callTapsSeries({
                    onError: (i, err)=>onError(err),
                    onDone,
                    rethrowIfPossible
                });
            }
        }
    ]);
    return SyncHookCodeFactory;
}(HookCodeFactory);
var factory = new SyncHookCodeFactory();
var TAP_ASYNC = ()=>{
    throw new Error("tapAsync is not supported on a SyncHook");
};
var TAP_PROMISE = ()=>{
    throw new Error("tapPromise is not supported on a SyncHook");
};
var COMPILE = function(options) {
    factory.setup(this, options);
    return factory.create(options);
};
function SyncHook(ref, ref1) {
    var args = ref === void 0 ? [] : ref, name = ref1 === void 0 ? undefined : ref1;
    var hook = new Hook(args, name);
    hook.constructor = SyncHook;
    hook.tapAsync = TAP_ASYNC;
    hook.tapPromise = TAP_PROMISE;
    hook.compile = COMPILE;
    return hook;
}
SyncHook.prototype = null;
module.exports = SyncHook;


}),
98540: (function (module, exports, __webpack_require__) {
"use strict";
/*
	MIT License http://www.opensource.org/licenses/mit-license.php
	Author Tobias Koppers @sokra
*/ 
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
var _call_super = __webpack_require__(19436);
var _class_call_check = __webpack_require__(8864);
var _create_class = __webpack_require__(93072);
var _inherits = __webpack_require__(82397);
var Hook = __webpack_require__(34666);
var HookCodeFactory = __webpack_require__(30403);
var SyncLoopHookCodeFactory = /*#__PURE__*/ function(HookCodeFactory) {
    _inherits._(SyncLoopHookCodeFactory, HookCodeFactory);
    function SyncLoopHookCodeFactory() {
        _class_call_check._(this, SyncLoopHookCodeFactory);
        return _call_super._(this, SyncLoopHookCodeFactory, arguments);
    }
    _create_class._(SyncLoopHookCodeFactory, [
        {
            key: "content",
            value: function content(ref) {
                var onError = ref.onError, onDone = ref.onDone, rethrowIfPossible = ref.rethrowIfPossible;
                return this.callTapsLooping({
                    onError: (i, err)=>onError(err),
                    onDone,
                    rethrowIfPossible
                });
            }
        }
    ]);
    return SyncLoopHookCodeFactory;
}(HookCodeFactory);
var factory = new SyncLoopHookCodeFactory();
var TAP_ASYNC = ()=>{
    throw new Error("tapAsync is not supported on a SyncLoopHook");
};
var TAP_PROMISE = ()=>{
    throw new Error("tapPromise is not supported on a SyncLoopHook");
};
var COMPILE = function(options) {
    factory.setup(this, options);
    return factory.create(options);
};
function SyncLoopHook(ref, ref1) {
    var args = ref === void 0 ? [] : ref, name = ref1 === void 0 ? undefined : ref1;
    var hook = new Hook(args, name);
    hook.constructor = SyncLoopHook;
    hook.tapAsync = TAP_ASYNC;
    hook.tapPromise = TAP_PROMISE;
    hook.compile = COMPILE;
    return hook;
}
SyncLoopHook.prototype = null;
module.exports = SyncLoopHook;


}),
1410: (function (module, exports, __webpack_require__) {
"use strict";
/*
	MIT License http://www.opensource.org/licenses/mit-license.php
	Author Tobias Koppers @sokra
*/ 
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
var _call_super = __webpack_require__(19436);
var _class_call_check = __webpack_require__(8864);
var _create_class = __webpack_require__(93072);
var _inherits = __webpack_require__(82397);
var Hook = __webpack_require__(34666);
var HookCodeFactory = __webpack_require__(30403);
var SyncWaterfallHookCodeFactory = /*#__PURE__*/ function(HookCodeFactory) {
    _inherits._(SyncWaterfallHookCodeFactory, HookCodeFactory);
    function SyncWaterfallHookCodeFactory() {
        _class_call_check._(this, SyncWaterfallHookCodeFactory);
        return _call_super._(this, SyncWaterfallHookCodeFactory, arguments);
    }
    _create_class._(SyncWaterfallHookCodeFactory, [
        {
            key: "content",
            value: function content(ref) {
                var onError = ref.onError, onResult = ref.onResult, resultReturns = ref.resultReturns, rethrowIfPossible = ref.rethrowIfPossible;
                return this.callTapsSeries({
                    onError: (i, err)=>onError(err),
                    onResult: (i, result, next)=>{
                        var code = "";
                        code += `if(${result} !== undefined) {\n`;
                        code += `${this._args[0]} = ${result};\n`;
                        code += `}\n`;
                        code += next();
                        return code;
                    },
                    onDone: ()=>onResult(this._args[0]),
                    doneReturns: resultReturns,
                    rethrowIfPossible
                });
            }
        }
    ]);
    return SyncWaterfallHookCodeFactory;
}(HookCodeFactory);
var factory = new SyncWaterfallHookCodeFactory();
var TAP_ASYNC = ()=>{
    throw new Error("tapAsync is not supported on a SyncWaterfallHook");
};
var TAP_PROMISE = ()=>{
    throw new Error("tapPromise is not supported on a SyncWaterfallHook");
};
var COMPILE = function(options) {
    factory.setup(this, options);
    return factory.create(options);
};
function SyncWaterfallHook(ref, ref1) {
    var args = ref === void 0 ? [] : ref, name = ref1 === void 0 ? undefined : ref1;
    if (args.length < 1) throw new Error("Waterfall hooks must have at least one argument");
    var hook = new Hook(args, name);
    hook.constructor = SyncWaterfallHook;
    hook.tapAsync = TAP_ASYNC;
    hook.tapPromise = TAP_PROMISE;
    hook.compile = COMPILE;
    return hook;
}
SyncWaterfallHook.prototype = null;
module.exports = SyncWaterfallHook;


}),
26898: (function (__unused_webpack_module, exports, __webpack_require__) {
"use strict";
/*
	MIT License http://www.opensource.org/licenses/mit-license.php
	Author Tobias Koppers @sokra
*/ 
exports.__esModule = true;
exports.SyncHook = __webpack_require__(30727);
exports.SyncBailHook = __webpack_require__(39314);
exports.SyncWaterfallHook = __webpack_require__(1410);
exports.SyncLoopHook = __webpack_require__(98540);
exports.AsyncParallelHook = __webpack_require__(298);
exports.AsyncParallelBailHook = __webpack_require__(1533);
exports.AsyncSeriesHook = __webpack_require__(65195);
exports.AsyncSeriesBailHook = __webpack_require__(79737);
exports.AsyncSeriesLoopHook = __webpack_require__(70791);
exports.AsyncSeriesWaterfallHook = __webpack_require__(16213);
exports.HookMap = __webpack_require__(15641);
exports.MultiHook = __webpack_require__(166);


}),
25709: (function (__unused_webpack_module, exports) {
"use strict";
/*
	MIT License http://www.opensource.org/licenses/mit-license.php
	Author Tobias Koppers @sokra
*/ 
exports.deprecate = (fn, msg)=>{
    var once = true;
    return function() {
        if (once) {
            console.warn("DeprecationWarning: " + msg);
            once = false;
        }
        return fn.apply(this, arguments);
    };
};


}),
71840: (function (__unused_webpack_module, exports, __webpack_require__) {
(function(global1, factory) {
     true ? factory(exports) : 0;
})(this, function(exports1) {
    'use strict';
    /* eslint-disable no-prototype-builtins */ var g = typeof globalThis !== 'undefined' && globalThis || typeof self !== 'undefined' && self || // eslint-disable-next-line no-undef
    typeof __webpack_require__.g !== 'undefined' && __webpack_require__.g || {};
    var support = {
        searchParams: 'URLSearchParams' in g,
        iterable: 'Symbol' in g && 'iterator' in Symbol,
        blob: 'FileReader' in g && 'Blob' in g && function() {
            try {
                new Blob();
                return true;
            } catch (e) {
                return false;
            }
        }(),
        formData: 'FormData' in g,
        arrayBuffer: 'ArrayBuffer' in g
    };
    function isDataView(obj) {
        return obj && DataView.prototype.isPrototypeOf(obj);
    }
    if (support.arrayBuffer) {
        var viewClasses = [
            '[object Int8Array]',
            '[object Uint8Array]',
            '[object Uint8ClampedArray]',
            '[object Int16Array]',
            '[object Uint16Array]',
            '[object Int32Array]',
            '[object Uint32Array]',
            '[object Float32Array]',
            '[object Float64Array]'
        ];
        var isArrayBufferView = ArrayBuffer.isView || function(obj) {
            return obj && viewClasses.indexOf(Object.prototype.toString.call(obj)) > -1;
        };
    }
    function normalizeName(name) {
        if (typeof name !== 'string') {
            name = String(name);
        }
        if (/[^a-z0-9\-#$%&'*+.^_`|~!]/i.test(name) || name === '') {
            throw new TypeError('Invalid character in header field name: "' + name + '"');
        }
        return name.toLowerCase();
    }
    function normalizeValue(value) {
        if (typeof value !== 'string') {
            value = String(value);
        }
        return value;
    }
    // Build a destructive iterator for the value list
    function iteratorFor(items) {
        var iterator = {
            next: function() {
                var value = items.shift();
                return {
                    done: value === undefined,
                    value: value
                };
            }
        };
        if (support.iterable) {
            iterator[Symbol.iterator] = function() {
                return iterator;
            };
        }
        return iterator;
    }
    function Headers(headers) {
        this.map = {};
        if (headers instanceof Headers) {
            headers.forEach(function(value, name) {
                this.append(name, value);
            }, this);
        } else if (Array.isArray(headers)) {
            headers.forEach(function(header) {
                if (header.length != 2) {
                    throw new TypeError('Headers constructor: expected name/value pair to be length 2, found' + header.length);
                }
                this.append(header[0], header[1]);
            }, this);
        } else if (headers) {
            Object.getOwnPropertyNames(headers).forEach(function(name) {
                this.append(name, headers[name]);
            }, this);
        }
    }
    Headers.prototype.append = function(name, value) {
        name = normalizeName(name);
        value = normalizeValue(value);
        var oldValue = this.map[name];
        this.map[name] = oldValue ? oldValue + ', ' + value : value;
    };
    Headers.prototype['delete'] = function(name) {
        delete this.map[normalizeName(name)];
    };
    Headers.prototype.get = function(name) {
        name = normalizeName(name);
        return this.has(name) ? this.map[name] : null;
    };
    Headers.prototype.has = function(name) {
        return this.map.hasOwnProperty(normalizeName(name));
    };
    Headers.prototype.set = function(name, value) {
        this.map[normalizeName(name)] = normalizeValue(value);
    };
    Headers.prototype.forEach = function(callback, thisArg) {
        for(var name in this.map){
            if (this.map.hasOwnProperty(name)) {
                callback.call(thisArg, this.map[name], name, this);
            }
        }
    };
    Headers.prototype.keys = function() {
        var items = [];
        this.forEach(function(value, name) {
            items.push(name);
        });
        return iteratorFor(items);
    };
    Headers.prototype.values = function() {
        var items = [];
        this.forEach(function(value) {
            items.push(value);
        });
        return iteratorFor(items);
    };
    Headers.prototype.entries = function() {
        var items = [];
        this.forEach(function(value, name) {
            items.push([
                name,
                value
            ]);
        });
        return iteratorFor(items);
    };
    if (support.iterable) {
        Headers.prototype[Symbol.iterator] = Headers.prototype.entries;
    }
    function consumed(body) {
        if (body._noBody) return;
        if (body.bodyUsed) {
            return Promise.reject(new TypeError('Already read'));
        }
        body.bodyUsed = true;
    }
    function fileReaderReady(reader) {
        return new Promise(function(resolve, reject) {
            reader.onload = function() {
                resolve(reader.result);
            };
            reader.onerror = function() {
                reject(reader.error);
            };
        });
    }
    function readBlobAsArrayBuffer(blob) {
        var reader = new FileReader();
        var promise = fileReaderReady(reader);
        reader.readAsArrayBuffer(blob);
        return promise;
    }
    function readBlobAsText(blob) {
        var reader = new FileReader();
        var promise = fileReaderReady(reader);
        var match = /charset=([A-Za-z0-9_-]+)/.exec(blob.type);
        var encoding = match ? match[1] : 'utf-8';
        reader.readAsText(blob, encoding);
        return promise;
    }
    function readArrayBufferAsText(buf) {
        var view = new Uint8Array(buf);
        var chars = new Array(view.length);
        for(var i = 0; i < view.length; i++){
            chars[i] = String.fromCharCode(view[i]);
        }
        return chars.join('');
    }
    function bufferClone(buf) {
        if (buf.slice) {
            return buf.slice(0);
        } else {
            var view = new Uint8Array(buf.byteLength);
            view.set(new Uint8Array(buf));
            return view.buffer;
        }
    }
    function Body() {
        this.bodyUsed = false;
        this._initBody = function(body) {
            /*
        fetch-mock wraps the Response object in an ES6 Proxy to
        provide useful test harness features such as flush. However, on
        ES5 browsers without fetch or Proxy support pollyfills must be used;
        the proxy-pollyfill is unable to proxy an attribute unless it exists
        on the object before the Proxy is created. This change ensures
        Response.bodyUsed exists on the instance, while maintaining the
        semantic of setting Request.bodyUsed in the constructor before
        _initBody is called.
      */ // eslint-disable-next-line no-self-assign
            this.bodyUsed = this.bodyUsed;
            this._bodyInit = body;
            if (!body) {
                this._noBody = true;
                this._bodyText = '';
            } else if (typeof body === 'string') {
                this._bodyText = body;
            } else if (support.blob && Blob.prototype.isPrototypeOf(body)) {
                this._bodyBlob = body;
            } else if (support.formData && FormData.prototype.isPrototypeOf(body)) {
                this._bodyFormData = body;
            } else if (support.searchParams && URLSearchParams.prototype.isPrototypeOf(body)) {
                this._bodyText = body.toString();
            } else if (support.arrayBuffer && support.blob && isDataView(body)) {
                this._bodyArrayBuffer = bufferClone(body.buffer);
                // IE 10-11 can't handle a DataView body.
                this._bodyInit = new Blob([
                    this._bodyArrayBuffer
                ]);
            } else if (support.arrayBuffer && (ArrayBuffer.prototype.isPrototypeOf(body) || isArrayBufferView(body))) {
                this._bodyArrayBuffer = bufferClone(body);
            } else {
                this._bodyText = body = Object.prototype.toString.call(body);
            }
            if (!this.headers.get('content-type')) {
                if (typeof body === 'string') {
                    this.headers.set('content-type', 'text/plain;charset=UTF-8');
                } else if (this._bodyBlob && this._bodyBlob.type) {
                    this.headers.set('content-type', this._bodyBlob.type);
                } else if (support.searchParams && URLSearchParams.prototype.isPrototypeOf(body)) {
                    this.headers.set('content-type', 'application/x-www-form-urlencoded;charset=UTF-8');
                }
            }
        };
        if (support.blob) {
            this.blob = function() {
                var rejected = consumed(this);
                if (rejected) {
                    return rejected;
                }
                if (this._bodyBlob) {
                    return Promise.resolve(this._bodyBlob);
                } else if (this._bodyArrayBuffer) {
                    return Promise.resolve(new Blob([
                        this._bodyArrayBuffer
                    ]));
                } else if (this._bodyFormData) {
                    throw new Error('could not read FormData body as blob');
                } else {
                    return Promise.resolve(new Blob([
                        this._bodyText
                    ]));
                }
            };
        }
        this.arrayBuffer = function() {
            if (this._bodyArrayBuffer) {
                var isConsumed = consumed(this);
                if (isConsumed) {
                    return isConsumed;
                } else if (ArrayBuffer.isView(this._bodyArrayBuffer)) {
                    return Promise.resolve(this._bodyArrayBuffer.buffer.slice(this._bodyArrayBuffer.byteOffset, this._bodyArrayBuffer.byteOffset + this._bodyArrayBuffer.byteLength));
                } else {
                    return Promise.resolve(this._bodyArrayBuffer);
                }
            } else if (support.blob) {
                return this.blob().then(readBlobAsArrayBuffer);
            } else {
                throw new Error('could not read as ArrayBuffer');
            }
        };
        this.text = function() {
            var rejected = consumed(this);
            if (rejected) {
                return rejected;
            }
            if (this._bodyBlob) {
                return readBlobAsText(this._bodyBlob);
            } else if (this._bodyArrayBuffer) {
                return Promise.resolve(readArrayBufferAsText(this._bodyArrayBuffer));
            } else if (this._bodyFormData) {
                throw new Error('could not read FormData body as text');
            } else {
                return Promise.resolve(this._bodyText);
            }
        };
        if (support.formData) {
            this.formData = function() {
                return this.text().then(decode);
            };
        }
        this.json = function() {
            return this.text().then(JSON.parse);
        };
        return this;
    }
    // HTTP methods whose capitalization should be normalized
    var methods = [
        'CONNECT',
        'DELETE',
        'GET',
        'HEAD',
        'OPTIONS',
        'PATCH',
        'POST',
        'PUT',
        'TRACE'
    ];
    function normalizeMethod(method) {
        var upcased = method.toUpperCase();
        return methods.indexOf(upcased) > -1 ? upcased : method;
    }
    function Request(input, options) {
        if (!(this instanceof Request)) {
            throw new TypeError('Please use the "new" operator, this DOM object constructor cannot be called as a function.');
        }
        options = options || {};
        var body = options.body;
        if (input instanceof Request) {
            if (input.bodyUsed) {
                throw new TypeError('Already read');
            }
            this.url = input.url;
            this.credentials = input.credentials;
            if (!options.headers) {
                this.headers = new Headers(input.headers);
            }
            this.method = input.method;
            this.mode = input.mode;
            this.signal = input.signal;
            if (!body && input._bodyInit != null) {
                body = input._bodyInit;
                input.bodyUsed = true;
            }
        } else {
            this.url = String(input);
        }
        this.credentials = options.credentials || this.credentials || 'same-origin';
        if (options.headers || !this.headers) {
            this.headers = new Headers(options.headers);
        }
        this.method = normalizeMethod(options.method || this.method || 'GET');
        this.mode = options.mode || this.mode || null;
        this.signal = options.signal || this.signal || function() {
            if ('AbortController' in g) {
                var ctrl = new AbortController();
                return ctrl.signal;
            }
        }();
        this.referrer = null;
        if ((this.method === 'GET' || this.method === 'HEAD') && body) {
            throw new TypeError('Body not allowed for GET or HEAD requests');
        }
        this._initBody(body);
        if (this.method === 'GET' || this.method === 'HEAD') {
            if (options.cache === 'no-store' || options.cache === 'no-cache') {
                // Search for a '_' parameter in the query string
                var reParamSearch = /([?&])_=[^&]*/;
                if (reParamSearch.test(this.url)) {
                    // If it already exists then set the value with the current time
                    this.url = this.url.replace(reParamSearch, '$1_=' + new Date().getTime());
                } else {
                    // Otherwise add a new '_' parameter to the end with the current time
                    var reQueryString = /\?/;
                    this.url += (reQueryString.test(this.url) ? '&' : '?') + '_=' + new Date().getTime();
                }
            }
        }
    }
    Request.prototype.clone = function() {
        return new Request(this, {
            body: this._bodyInit
        });
    };
    function decode(body) {
        var form = new FormData();
        body.trim().split('&').forEach(function(bytes) {
            if (bytes) {
                var split = bytes.split('=');
                var name = split.shift().replace(/\+/g, ' ');
                var value = split.join('=').replace(/\+/g, ' ');
                form.append(decodeURIComponent(name), decodeURIComponent(value));
            }
        });
        return form;
    }
    function parseHeaders(rawHeaders) {
        var headers = new Headers();
        // Replace instances of \r\n and \n followed by at least one space or horizontal tab with a space
        // https://tools.ietf.org/html/rfc7230#section-3.2
        var preProcessedHeaders = rawHeaders.replace(/\r?\n[\t ]+/g, ' ');
        // Avoiding split via regex to work around a common IE11 bug with the core-js 3.6.0 regex polyfill
        // https://github.com/github/fetch/issues/748
        // https://github.com/zloirock/core-js/issues/751
        preProcessedHeaders.split('\r').map(function(header) {
            return header.indexOf('\n') === 0 ? header.substr(1, header.length) : header;
        }).forEach(function(line) {
            var parts = line.split(':');
            var key = parts.shift().trim();
            if (key) {
                var value = parts.join(':').trim();
                try {
                    headers.append(key, value);
                } catch (error) {
                    console.warn('Response ' + error.message);
                }
            }
        });
        return headers;
    }
    Body.call(Request.prototype);
    function Response(bodyInit, options) {
        if (!(this instanceof Response)) {
            throw new TypeError('Please use the "new" operator, this DOM object constructor cannot be called as a function.');
        }
        if (!options) {
            options = {};
        }
        this.type = 'default';
        this.status = options.status === undefined ? 200 : options.status;
        if (this.status < 200 || this.status > 599) {
            throw new RangeError("Failed to construct 'Response': The status provided (0) is outside the range [200, 599].");
        }
        this.ok = this.status >= 200 && this.status < 300;
        this.statusText = options.statusText === undefined ? '' : '' + options.statusText;
        this.headers = new Headers(options.headers);
        this.url = options.url || '';
        this._initBody(bodyInit);
    }
    Body.call(Response.prototype);
    Response.prototype.clone = function() {
        return new Response(this._bodyInit, {
            status: this.status,
            statusText: this.statusText,
            headers: new Headers(this.headers),
            url: this.url
        });
    };
    Response.error = function() {
        var response = new Response(null, {
            status: 200,
            statusText: ''
        });
        response.ok = false;
        response.status = 0;
        response.type = 'error';
        return response;
    };
    var redirectStatuses = [
        301,
        302,
        303,
        307,
        308
    ];
    Response.redirect = function(url, status) {
        if (redirectStatuses.indexOf(status) === -1) {
            throw new RangeError('Invalid status code');
        }
        return new Response(null, {
            status: status,
            headers: {
                location: url
            }
        });
    };
    exports1.DOMException = g.DOMException;
    try {
        new exports1.DOMException();
    } catch (err) {
        exports1.DOMException = function(message, name) {
            this.message = message;
            this.name = name;
            var error = Error(message);
            this.stack = error.stack;
        };
        exports1.DOMException.prototype = Object.create(Error.prototype);
        exports1.DOMException.prototype.constructor = exports1.DOMException;
    }
    function fetch(input, init) {
        return new Promise(function(resolve, reject) {
            var request = new Request(input, init);
            if (request.signal && request.signal.aborted) {
                return reject(new exports1.DOMException('Aborted', 'AbortError'));
            }
            var xhr = new XMLHttpRequest();
            function abortXhr() {
                xhr.abort();
            }
            xhr.onload = function() {
                var options = {
                    statusText: xhr.statusText,
                    headers: parseHeaders(xhr.getAllResponseHeaders() || '')
                };
                // This check if specifically for when a user fetches a file locally from the file system
                // Only if the status is out of a normal range
                if (request.url.indexOf('file://') === 0 && (xhr.status < 200 || xhr.status > 599)) {
                    options.status = 200;
                } else {
                    options.status = xhr.status;
                }
                options.url = 'responseURL' in xhr ? xhr.responseURL : options.headers.get('X-Request-URL');
                var body = 'response' in xhr ? xhr.response : xhr.responseText;
                setTimeout(function() {
                    resolve(new Response(body, options));
                }, 0);
            };
            xhr.onerror = function() {
                setTimeout(function() {
                    reject(new TypeError('Network request failed'));
                }, 0);
            };
            xhr.ontimeout = function() {
                setTimeout(function() {
                    reject(new TypeError('Network request timed out'));
                }, 0);
            };
            xhr.onabort = function() {
                setTimeout(function() {
                    reject(new exports1.DOMException('Aborted', 'AbortError'));
                }, 0);
            };
            function fixUrl(url) {
                try {
                    return url === '' && g.location.href ? g.location.href : url;
                } catch (e) {
                    return url;
                }
            }
            xhr.open(request.method, fixUrl(request.url), true);
            if (request.credentials === 'include') {
                xhr.withCredentials = true;
            } else if (request.credentials === 'omit') {
                xhr.withCredentials = false;
            }
            if ('responseType' in xhr) {
                if (support.blob) {
                    xhr.responseType = 'blob';
                } else if (support.arrayBuffer) {
                    xhr.responseType = 'arraybuffer';
                }
            }
            if (init && typeof init.headers === 'object' && !(init.headers instanceof Headers || g.Headers && init.headers instanceof g.Headers)) {
                var names = [];
                Object.getOwnPropertyNames(init.headers).forEach(function(name) {
                    names.push(normalizeName(name));
                    xhr.setRequestHeader(name, normalizeValue(init.headers[name]));
                });
                request.headers.forEach(function(value, name) {
                    if (names.indexOf(name) === -1) {
                        xhr.setRequestHeader(name, value);
                    }
                });
            } else {
                request.headers.forEach(function(value, name) {
                    xhr.setRequestHeader(name, value);
                });
            }
            if (request.signal) {
                request.signal.addEventListener('abort', abortXhr);
                xhr.onreadystatechange = function() {
                    // DONE (success or failure)
                    if (xhr.readyState === 4) {
                        request.signal.removeEventListener('abort', abortXhr);
                    }
                };
            }
            xhr.send(typeof request._bodyInit === 'undefined' ? null : request._bodyInit);
        });
    }
    fetch.polyfill = true;
    if (!g.fetch) {
        g.fetch = fetch;
        g.Headers = Headers;
        g.Request = Request;
        g.Response = Response;
    }
    exports1.Headers = Headers;
    exports1.Request = Request;
    exports1.Response = Response;
    exports1.fetch = fetch;
    Object.defineProperty(exports1, '__esModule', {
        value: true
    });
});


}),
15269: (function (__unused_webpack_module, exports, __webpack_require__) {
var __webpack_unused_export__;
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * @polyfill
 * @nolint
 * @format
 */ 'use client';
__webpack_unused_export__ = ({
    value: true
});
var _object_spread = __webpack_require__(36192);
var _object_spread_props = __webpack_require__(83590);
/* eslint-disable no-shadow, eqeqeq, curly, no-unused-vars, no-void, no-control-regex  */ /**
 * This pipes all of our console logging functions to native logging so that
 * JavaScript errors in required modules show up in Xcode via NSLog.
 */ var inspect = function() {
    // Copyright Joyent, Inc. and other Node contributors.
    //
    // Permission is hereby granted, free of charge, to any person obtaining a
    // copy of this software and associated documentation files (the
    // "Software"), to deal in the Software without restriction, including
    // without limitation the rights to use, copy, modify, merge, publish,
    // distribute, sublicense, and/or sell copies of the Software, and to permit
    // persons to whom the Software is furnished to do so, subject to the
    // following conditions:
    //
    // The above copyright notice and this permission notice shall be included
    // in all copies or substantial portions of the Software.
    //
    // THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
    // OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
    // MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
    // NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
    // DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
    // OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
    // USE OR OTHER DEALINGS IN THE SOFTWARE.
    //
    // https://github.com/joyent/node/blob/master/lib/util.js
    function inspect(obj, opts) {
        var ctx = {
            seen: [],
            formatValueCalls: 0,
            stylize: stylizeNoColor
        };
        return formatValue(ctx, obj, opts.depth);
    }
    function stylizeNoColor(str, styleType) {
        return str;
    }
    function arrayToHash(array) {
        var hash = {};
        array.forEach(function(val, idx) {
            hash[val] = true;
        });
        return hash;
    }
    function formatValue(ctx, value, recurseTimes) {
        ctx.formatValueCalls++;
        if (ctx.formatValueCalls > 200) {
            return `[TOO BIG formatValueCalls ${ctx.formatValueCalls} exceeded limit of 200]`;
        }
        // Primitive types cannot have properties
        var primitive = formatPrimitive(ctx, value);
        if (primitive) {
            return primitive;
        }
        // Look up the keys of the object.
        var keys = Object.keys(value);
        var visibleKeys = arrayToHash(keys);
        // IE doesn't make error fields non-enumerable
        // http://msdn.microsoft.com/en-us/library/ie/dww52sbt(v=vs.94).aspx
        if (isError(value) && (keys.indexOf('message') >= 0 || keys.indexOf('description') >= 0)) {
            return formatError(value);
        }
        // Some type of object without properties can be shortcutted.
        if (keys.length === 0) {
            if (isFunction(value)) {
                var name = value.name ? ': ' + value.name : '';
                return ctx.stylize('[Function' + name + ']', 'special');
            }
            if (isRegExp(value)) {
                return ctx.stylize(RegExp.prototype.toString.call(value), 'regexp');
            }
            if (isDate(value)) {
                return ctx.stylize(Date.prototype.toString.call(value), 'date');
            }
            if (isError(value)) {
                return formatError(value);
            }
        }
        var base = '', array = false, braces = [
            '{',
            '}'
        ];
        // Make Array say that they are Array
        if (isArray(value)) {
            array = true;
            braces = [
                '[',
                ']'
            ];
        }
        // Make functions say that they are functions
        if (isFunction(value)) {
            var n = value.name ? ': ' + value.name : '';
            base = ' [Function' + n + ']';
        }
        // Make RegExps say that they are RegExps
        if (isRegExp(value)) {
            base = ' ' + RegExp.prototype.toString.call(value);
        }
        // Make dates with properties first say the date
        if (isDate(value)) {
            base = ' ' + Date.prototype.toUTCString.call(value);
        }
        // Make error with message first say the error
        if (isError(value)) {
            base = ' ' + formatError(value);
        }
        if (keys.length === 0 && (!array || value.length == 0)) {
            return braces[0] + base + braces[1];
        }
        if (recurseTimes < 0) {
            if (isRegExp(value)) {
                return ctx.stylize(RegExp.prototype.toString.call(value), 'regexp');
            } else {
                return ctx.stylize('[Object]', 'special');
            }
        }
        ctx.seen.push(value);
        var output;
        if (array) {
            output = formatArray(ctx, value, recurseTimes, visibleKeys, keys);
        } else {
            output = keys.map(function(key) {
                return formatProperty(ctx, value, recurseTimes, visibleKeys, key, array);
            });
        }
        ctx.seen.pop();
        return reduceToSingleString(output, base, braces);
    }
    function formatPrimitive(ctx, value) {
        if (isUndefined(value)) return ctx.stylize('undefined', 'undefined');
        if (isString(value)) {
            var simple = "'" + JSON.stringify(value).replace(/^"|"$/g, '').replace(/'/g, "\\'").replace(/\\"/g, '"') + "'";
            return ctx.stylize(simple, 'string');
        }
        if (isNumber(value)) return ctx.stylize('' + value, 'number');
        if (isBoolean(value)) return ctx.stylize('' + value, 'boolean');
        // For some reason typeof null is "object", so special case here.
        if (isNull(value)) return ctx.stylize('null', 'null');
    }
    function formatError(value) {
        return '[' + Error.prototype.toString.call(value) + ']';
    }
    function formatArray(ctx, value, recurseTimes, visibleKeys, keys) {
        var output = [];
        for(var i = 0, l = value.length; i < l; ++i){
            if (hasOwnProperty(value, String(i))) {
                output.push(formatProperty(ctx, value, recurseTimes, visibleKeys, String(i), true));
            } else {
                output.push('');
            }
        }
        keys.forEach(function(key) {
            if (!key.match(/^\d+$/)) {
                output.push(formatProperty(ctx, value, recurseTimes, visibleKeys, key, true));
            }
        });
        return output;
    }
    function formatProperty(ctx, value, recurseTimes, visibleKeys, key, array) {
        var name, str, desc;
        desc = Object.getOwnPropertyDescriptor(value, key) || {
            value: value[key]
        };
        if (desc.get) {
            if (desc.set) {
                str = ctx.stylize('[Getter/Setter]', 'special');
            } else {
                str = ctx.stylize('[Getter]', 'special');
            }
        } else {
            if (desc.set) {
                str = ctx.stylize('[Setter]', 'special');
            }
        }
        if (!hasOwnProperty(visibleKeys, key)) {
            name = '[' + key + ']';
        }
        if (!str) {
            if (ctx.seen.indexOf(desc.value) < 0) {
                if (isNull(recurseTimes)) {
                    str = formatValue(ctx, desc.value, null);
                } else {
                    str = formatValue(ctx, desc.value, recurseTimes - 1);
                }
                if (str.indexOf('\n') > -1) {
                    if (array) {
                        str = str.split('\n').map(function(line) {
                            return '  ' + line;
                        }).join('\n').slice(2);
                    } else {
                        str = '\n' + str.split('\n').map(function(line) {
                            return '   ' + line;
                        }).join('\n');
                    }
                }
            } else {
                str = ctx.stylize('[Circular]', 'special');
            }
        }
        if (isUndefined(name)) {
            if (array && key.match(/^\d+$/)) {
                return str;
            }
            name = JSON.stringify('' + key);
            if (name.match(/^"([a-zA-Z_][a-zA-Z_0-9]*)"$/)) {
                name = name.slice(1, name.length - 1);
                name = ctx.stylize(name, 'name');
            } else {
                name = name.replace(/'/g, "\\'").replace(/\\"/g, '"').replace(/(^"|"$)/g, "'");
                name = ctx.stylize(name, 'string');
            }
        }
        return name + ': ' + str;
    }
    function reduceToSingleString(output, base, braces) {
        var numLinesEst = 0;
        var length = output.reduce(function(prev, cur) {
            numLinesEst++;
            if (cur.indexOf('\n') >= 0) numLinesEst++;
            return prev + cur.replace(/\u001b\[\d\d?m/g, '').length + 1;
        }, 0);
        if (length > 60) {
            return braces[0] + (base === '' ? '' : base + '\n ') + ' ' + output.join(',\n  ') + ' ' + braces[1];
        }
        return braces[0] + base + ' ' + output.join(', ') + ' ' + braces[1];
    }
    // NOTE: These type checking functions intentionally don't use `instanceof`
    // because it is fragile and can be easily faked with `Object.create()`.
    function isArray(ar) {
        return Array.isArray(ar);
    }
    function isBoolean(arg) {
        return typeof arg === 'boolean';
    }
    function isNull(arg) {
        return arg === null;
    }
    function isNullOrUndefined(arg) {
        return arg == null;
    }
    function isNumber(arg) {
        return typeof arg === 'number';
    }
    function isString(arg) {
        return typeof arg === 'string';
    }
    function isSymbol(arg) {
        return typeof arg === 'symbol';
    }
    function isUndefined(arg) {
        return arg === void 0;
    }
    function isRegExp(re) {
        return isObject(re) && objectToString(re) === '[object RegExp]';
    }
    function isObject(arg) {
        return typeof arg === 'object' && arg !== null;
    }
    function isDate(d) {
        return isObject(d) && objectToString(d) === '[object Date]';
    }
    function isError(e) {
        return isObject(e) && (objectToString(e) === '[object Error]' || e instanceof Error);
    }
    function isFunction(arg) {
        return typeof arg === 'function';
    }
    function objectToString(o) {
        return Object.prototype.toString.call(o);
    }
    function hasOwnProperty(obj, prop) {
        return Object.prototype.hasOwnProperty.call(obj, prop);
    }
    return inspect;
}();
var INDEX_COLUMN_NAME = '(index)';
var LOG_LEVELS = {
    trace: 0,
    info: 1,
    warn: 2,
    error: 3
};
function getNativeLogFunction(level) {
    return function() {
        var str;
        if (arguments.length === 1 && typeof arguments[0] === 'string') {
            str = arguments[0];
        } else {
            str = Array.prototype.map.call(arguments, function(arg) {
                return inspect(arg, {
                    depth: 10
                });
            }).join(', ');
        }
        // TRICKY
        // If more than one argument is provided, the code above collapses them all
        // into a single formatted string. This transform wraps string arguments in
        // single quotes (e.g. "foo" -> "'foo'") which then breaks the "Warning:"
        // check below. So it's important that we look at the first argument, rather
        // than the formatted argument string.
        var firstArg = arguments[0];
        var logLevel = level;
        if (typeof firstArg === 'string' && firstArg.slice(0, 9) === 'Warning: ' && logLevel >= LOG_LEVELS.error) {
            // React warnings use console.error so that a stack trace is shown,
            // but we don't (currently) want these to show a redbox
            // (Note: Logic duplicated in ExceptionsManager.js.)
            logLevel = LOG_LEVELS.warn;
        }
        if (groupStack.length) {
            str = groupFormat('', str);
        }
        __webpack_require__.g.nativeLoggingHook(str, logLevel);
    };
}
function repeat(element, n) {
    return Array.apply(null, Array(n)).map(function() {
        return element;
    });
}
function formatCellValue(cell, key) {
    if (key === INDEX_COLUMN_NAME) {
        return cell[key];
    }
    if (cell.hasOwnProperty(key)) {
        var cellValue = cell[key];
        switch(typeof cellValue){
            case 'function':
                return "\u0192";
            case 'string':
                return "'" + cellValue + "'";
            case 'object':
                return cellValue == null ? 'null' : "{\u2026}";
        }
        return String(cellValue);
    }
    return '';
}
function consoleTablePolyfill(data, columns) {
    var rows;
    // convert object -> array
    if (Array.isArray(data)) {
        rows = data.map((row, index)=>{
            var processedRow = {};
            processedRow[INDEX_COLUMN_NAME] = String(index);
            Object.assign(processedRow, row);
            return processedRow;
        });
    } else {
        rows = [];
        for(var key in data){
            if (data.hasOwnProperty(key)) {
                var processedRow = {};
                processedRow[INDEX_COLUMN_NAME] = key;
                Object.assign(processedRow, data[key]);
                rows.push(processedRow);
            }
        }
    }
    if (rows.length === 0) {
        __webpack_require__.g.nativeLoggingHook('', LOG_LEVELS.info);
        return;
    }
    if (Array.isArray(columns)) {
        columns = [
            INDEX_COLUMN_NAME
        ].concat(columns);
    } else {
        columns = Array.from(rows.reduce((columnSet, row)=>{
            Object.keys(row).forEach((key)=>columnSet.add(key));
            return columnSet;
        }, new Set()));
    }
    var stringRows = [];
    var columnWidths = [];
    // Convert each cell to a string. Also
    // figure out max cell width for each column
    columns.forEach(function(k, i) {
        columnWidths[i] = k.length;
        for(var j = 0; j < rows.length; j++){
            var cellStr = formatCellValue(rows[j], k);
            stringRows[j] = stringRows[j] || [];
            stringRows[j][i] = cellStr;
            columnWidths[i] = Math.max(columnWidths[i], cellStr.length);
        }
    });
    // Join all elements in the row into a single string with | separators
    // (appends extra spaces to each cell to make separators  | aligned)
    function joinRow(row, space) {
        var cells = row.map(function(cell, i) {
            var extraSpaces = repeat(' ', columnWidths[i] - cell.length).join('');
            return cell + extraSpaces;
        });
        space = space || ' ';
        return '| ' + cells.join(space + '|' + space) + ' |';
    }
    var separators = columnWidths.map(function(columnWidth) {
        return repeat('-', columnWidth).join('');
    });
    var separatorRow = joinRow(separators);
    var header = joinRow(columns);
    var table = [
        header,
        separatorRow
    ];
    for(var i = 0; i < rows.length; i++){
        table.push(joinRow(stringRows[i]));
    }
    // Notice extra empty line at the beginning.
    // Native logging hook adds "RCTLog >" at the front of every
    // logged string, which would shift the header and screw up
    // the table
    __webpack_require__.g.nativeLoggingHook('\n' + table.join('\n'), LOG_LEVELS.info);
}
var GROUP_PAD = '\u2502'; // Box light vertical
var GROUP_OPEN = '\u2510'; // Box light down+left
var GROUP_CLOSE = '\u2518'; // Box light up+left
var groupStack = [];
function groupFormat(prefix, msg) {
    // Insert group formatting before the console message
    return groupStack.join('') + prefix + ' ' + (msg || '');
}
function consoleGroupPolyfill(label) {
    __webpack_require__.g.nativeLoggingHook(groupFormat(GROUP_OPEN, label), LOG_LEVELS.info);
    groupStack.push(GROUP_PAD);
}
function consoleGroupCollapsedPolyfill(label) {
    __webpack_require__.g.nativeLoggingHook(groupFormat(GROUP_CLOSE, label), LOG_LEVELS.info);
    groupStack.push(GROUP_PAD);
}
function consoleGroupEndPolyfill() {
    groupStack.pop();
    __webpack_require__.g.nativeLoggingHook(groupFormat(GROUP_CLOSE), LOG_LEVELS.info);
}
function consoleAssertPolyfill(expression, label) {
    if (!expression) {
        __webpack_require__.g.nativeLoggingHook('Assertion failed: ' + label, LOG_LEVELS.error);
    }
}
if (__webpack_require__.g.nativeLoggingHook) {
    var originalConsole = __webpack_require__.g.console;
    // Preserve the original `console` as `originalConsole`
    if (false) { var descriptor }
    __webpack_require__.g.console = _object_spread_props._(_object_spread._({}, originalConsole ?? {}), {
        error: getNativeLogFunction(LOG_LEVELS.error),
        info: getNativeLogFunction(LOG_LEVELS.info),
        log: getNativeLogFunction(LOG_LEVELS.info),
        warn: getNativeLogFunction(LOG_LEVELS.warn),
        trace: getNativeLogFunction(LOG_LEVELS.trace),
        debug: getNativeLogFunction(LOG_LEVELS.trace),
        table: consoleTablePolyfill,
        group: consoleGroupPolyfill,
        groupEnd: consoleGroupEndPolyfill,
        groupCollapsed: consoleGroupCollapsedPolyfill,
        assert: consoleAssertPolyfill
    });
    // TODO(T206796580): This was copy-pasted from ExceptionsManager.js
    // Delete the copy there after the c++ pipeline is rolled out everywhere.
    if (__webpack_require__.g.RN$useAlwaysAvailableJSErrorHandling === true) {
        var originalConsoleError = console.error;
        console.reportErrorsAsExceptions = true;
        function stringifySafe(arg) {
            return inspect(arg, {
                depth: 10
            }).replace(/\n\s*/g, ' ');
        }
        console.error = function(...args) {
            var _global_RN$inExceptionHandler, _global;
            originalConsoleError.apply(this, args);
            if (!console.reportErrorsAsExceptions) {
                return;
            }
            if ((_global_RN$inExceptionHandler = (_global = __webpack_require__.g).RN$inExceptionHandler) === null || _global_RN$inExceptionHandler === void 0 ? void 0 : _global_RN$inExceptionHandler.call(_global)) {
                return;
            }
            var error;
            var firstArg = args[0];
            if (firstArg === null || firstArg === void 0 ? void 0 : firstArg.stack) {
                // RN$handleException will console.error this with high enough fidelity.
                error = firstArg;
            } else {
                if (typeof firstArg === 'string' && firstArg.startsWith('Warning: ')) {
                    // React warnings use console.error so that a stack trace is shown, but
                    // we don't (currently) want these to show a redbox
                    return;
                }
                var message = args.map((arg)=>typeof arg === 'string' ? arg : stringifySafe(arg)).join(' ');
                error = new Error(message);
                error.name = 'console.error';
            }
            var isFatal = false;
            var reportToConsole = false;
            __webpack_require__.g.RN$handleException(error, isFatal, reportToConsole);
        };
    }
    Object.defineProperty(console, '_isPolyfilled', {
        value: true,
        enumerable: false
    });
    // If available, also call the original `console` method since that is
    // sometimes useful. Ex: on OS X, this will let you see rich output in
    // the Safari Web Inspector console.
    if (false) {}
} else if (!__webpack_require__.g.console) {
    function stub() {}
    var log = __webpack_require__.g.print || stub;
    __webpack_require__.g.console = {
        debug: log,
        error: log,
        info: log,
        log: log,
        trace: log,
        warn: log,
        assert (expression, label) {
            if (!expression) {
                log('Assertion failed: ' + label);
            }
        },
        clear: stub,
        dir: stub,
        dirxml: stub,
        group: stub,
        groupCollapsed: stub,
        groupEnd: stub,
        profile: stub,
        profileEnd: stub,
        table: stub
    };
    Object.defineProperty(console, '_isPolyfilled', {
        value: true,
        enumerable: false
    });
}


}),
97599: (function (__unused_webpack_module, __unused_webpack_exports, __webpack_require__) {
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * @format
 *       strict
 * @polyfill
 */ var _inGuard = 0;
/**
 * This is the error handler that is called when we encounter an exception
 * when loading a module. This will report any errors encountered before
 * ExceptionsManager is configured.
 */ var _globalHandler = __webpack_require__.g.RN$useAlwaysAvailableJSErrorHandling === true ? __webpack_require__.g.RN$handleException : (e, isFatal)=>{
    throw e;
};
/**
 * The particular require runtime that we are using looks for a global
 * `ErrorUtils` object and if it exists, then it requires modules with the
 * error handler specified via ErrorUtils.setGlobalHandler by calling the
 * require function with applyWithGuard. Since the require module is loaded
 * before any of the modules, this ErrorUtils must be defined (and the handler
 * set) globally before requiring anything.
 */ var ErrorUtils = {
    setGlobalHandler (fun) {
        _globalHandler = fun;
    },
    getGlobalHandler () {
        return _globalHandler;
    },
    reportError (error) {
        _globalHandler && _globalHandler(error, false);
    },
    reportFatalError (error) {
        // NOTE: This has an untyped call site in Metro.
        _globalHandler && _globalHandler(error, true);
    },
    applyWithGuard (fun, context, args, // Unused, but some code synced from www sets it to null.
    unused_onError, // Some callers pass a name here, which we ignore.
    unused_name) {
        try {
            _inGuard++;
            /* $FlowFixMe[incompatible-call] : TODO T48204745 (1) apply(context,
       * null) is fine. (2) array -> rest array should work */ /* $FlowFixMe[incompatible-type] : TODO T48204745 (1) apply(context,
       * null) is fine. (2) array -> rest array should work */ return fun.apply(context, args);
        } catch (e) {
            ErrorUtils.reportError(e);
        } finally{
            _inGuard--;
        }
        return null;
    },
    applyWithGuardIfNeeded (fun, context, args) {
        if (ErrorUtils.inGuard()) {
            /* $FlowFixMe[incompatible-call] : TODO T48204745 (1) apply(context,
       * null) is fine. (2) array -> rest array should work */ /* $FlowFixMe[incompatible-type] : TODO T48204745 (1) apply(context,
       * null) is fine. (2) array -> rest array should work */ return fun.apply(context, args);
        } else {
            ErrorUtils.applyWithGuard(fun, context, args);
        }
        return null;
    },
    inGuard () {
        return !!_inGuard;
    },
    guard (fun, name, context) {
        // TODO: (moti) T48204753 Make sure this warning is never hit and remove it - types
        // should be sufficient.
        if (typeof fun !== 'function') {
            console.warn('A function must be passed to ErrorUtils.guard, got ', fun);
            return null;
        }
        var guardName = name ?? fun.name ?? '<generated guard>';
        /* $FlowFixMe[missing-this-annot] The 'this' type annotation(s) required by
     * Flow's LTI update could not be added via codemod */ function guarded(...args) {
            return ErrorUtils.applyWithGuard(fun, context ?? this, args, null, guardName);
        }
        return guarded;
    }
};
__webpack_require__.g.ErrorUtils = ErrorUtils;


}),
60217: (function (__unused_webpack_module, exports, __webpack_require__) {
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return _default;
    }
}));
var _export_star = __webpack_require__(4084);
var _interop_require_default = __webpack_require__(66705);
var _NativeAlertManager = /*#__PURE__*/ _interop_require_default._(_export_star._(__webpack_require__(14374), exports));
var _default = _NativeAlertManager.default;


}),
40225: (function (module, exports, __webpack_require__) {
"use strict";

Object.defineProperty(exports, "__esModule", ({
    value: true
}));
var _sliced_to_array = __webpack_require__(78474);
var BatchedBridge = __webpack_require__(63531);
var invariant = __webpack_require__(56481);
function genModule(config, moduleID) {
    if (!config) {
        return null;
    }
    var _config = _sliced_to_array._(config, 5), moduleName = _config[0], constants = _config[1], methods = _config[2], promiseMethods = _config[3], syncMethods = _config[4];
    invariant(!moduleName.startsWith('RCT') && !moduleName.startsWith('RK'), "Module name prefixes should've been stripped by the native side " + "but wasn't for " + moduleName);
    if (!constants && !methods) {
        return {
            name: moduleName
        };
    }
    var _$module = {};
    methods && methods.forEach((methodName, methodID)=>{
        var isPromise = promiseMethods && arrayContains(promiseMethods, methodID) || false;
        var isSync = syncMethods && arrayContains(syncMethods, methodID) || false;
        invariant(!isPromise || !isSync, 'Cannot have a method that is both async and a sync hook');
        var methodType = isPromise ? 'promise' : isSync ? 'sync' : 'async';
        _$module[methodName] = genMethod(moduleID, methodID, methodType);
    });
    Object.assign(_$module, constants);
    if (_$module.getConstants == null) {
        _$module.getConstants = ()=>constants || Object.freeze({});
    } else {
        console.warn(`Unable to define method 'getConstants()' on NativeModule '${moduleName}'. NativeModule '${moduleName}' already has a constant or method called 'getConstants'. Please remove it.`);
    }
    if (false) {}
    return {
        name: moduleName,
        module: _$module
    };
}
__webpack_require__.g.__fbGenNativeModule = genModule;
function loadModule(name, moduleID) {
    invariant(__webpack_require__.g.nativeRequireModuleConfig, "Can't lazily create module without nativeRequireModuleConfig");
    var config = __webpack_require__.g.nativeRequireModuleConfig(name);
    var info = genModule(config, moduleID);
    return info && info.module;
}
function genMethod(moduleID, methodID, type) {
    var fn = null;
    if (type === 'promise') {
        fn = function promiseMethodWrapper(...args) {
            var enqueueingFrameError = new Error();
            return new Promise((resolve, reject)=>{
                BatchedBridge.enqueueNativeCall(moduleID, methodID, args, (data)=>resolve(data), (errorData)=>reject(updateErrorWithErrorData(errorData, enqueueingFrameError)));
            });
        };
    } else {
        fn = function nonPromiseMethodWrapper(...args) {
            var lastArg = args.length > 0 ? args[args.length - 1] : null;
            var secondLastArg = args.length > 1 ? args[args.length - 2] : null;
            var hasSuccessCallback = typeof lastArg === 'function';
            var hasErrorCallback = typeof secondLastArg === 'function';
            hasErrorCallback && invariant(hasSuccessCallback, 'Cannot have a non-function arg after a function arg.');
            var onSuccess = hasSuccessCallback ? lastArg : null;
            var onFail = hasErrorCallback ? secondLastArg : null;
            var callbackCount = hasSuccessCallback + hasErrorCallback;
            var newArgs = args.slice(0, args.length - callbackCount);
            if (type === 'sync') {
                return BatchedBridge.callNativeSyncHook(moduleID, methodID, newArgs, onFail, onSuccess);
            } else {
                BatchedBridge.enqueueNativeCall(moduleID, methodID, newArgs, onFail, onSuccess);
            }
        };
    }
    fn.type = type;
    return fn;
}
function arrayContains(array, value) {
    return array.indexOf(value) !== -1;
}
function updateErrorWithErrorData(errorData, error) {
    return Object.assign(error, errorData || {});
}
var NativeModules = {};
if (__webpack_require__.g.nativeModuleProxy) {
    NativeModules = __webpack_require__.g.nativeModuleProxy;
} else {
    var bridgeConfig = __webpack_require__.g.__fbBatchedBridgeConfig;
    invariant(bridgeConfig, '__fbBatchedBridgeConfig is not set, cannot invoke native modules');
    var defineLazyObjectProperty = __webpack_require__(53077);
    (bridgeConfig.remoteModuleConfig || []).forEach((config, moduleID)=>{
        var info = genModule(config, moduleID);
        if (!info) {
            return;
        }
        if (info.module) {
            NativeModules[info.name] = info.module;
        } else {
            defineLazyObjectProperty(NativeModules, info.name, {
                get: ()=>loadModule(info.name, moduleID)
            });
        }
    });
}
module.exports = NativeModules;


}),
63903: (function (__unused_webpack_module, exports, __webpack_require__) {
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return _default;
    }
}));
var _export_star = __webpack_require__(4084);
var _interop_require_default = __webpack_require__(66705);
var _NativeBlobModule = /*#__PURE__*/ _interop_require_default._(_export_star._(__webpack_require__(64305), exports));
var _default = _NativeBlobModule.default;


}),
88873: (function (__unused_webpack_module, exports, __webpack_require__) {
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return _default;
    }
}));
var _export_star = __webpack_require__(4084);
var _interop_require_default = __webpack_require__(66705);
var _NativeFileReaderModule = /*#__PURE__*/ _interop_require_default._(_export_star._(__webpack_require__(8257), exports));
var _default = _NativeFileReaderModule.default;


}),
81683: (function (__unused_webpack_module, exports, __webpack_require__) {
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return _default;
    }
}));
var _export_star = __webpack_require__(4084);
var _interop_require_default = __webpack_require__(66705);
var _NativeBugReporting = /*#__PURE__*/ _interop_require_default._(_export_star._(__webpack_require__(50884), exports));
var _default = _NativeBugReporting.default;


}),
99318: (function (__unused_webpack_module, exports, __webpack_require__) {
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: Object.getOwnPropertyDescriptor(all, name).get
    });
}
_export(exports, {
    get Commands () {
        return Commands;
    },
    get default () {
        return _default;
    }
});
var _interop_require_default = __webpack_require__(66705);
var _interop_require_wildcard = __webpack_require__(83610);
var _NativeComponentRegistry = /*#__PURE__*/ _interop_require_wildcard._(__webpack_require__(97267));
var _codegenNativeCommands = /*#__PURE__*/ _interop_require_default._(__webpack_require__(21852));
var ViewNativeComponent = _NativeComponentRegistry.get('RCTView', ()=>({
        uiViewClassName: 'RCTView'
    }));
var Commands = (0, _codegenNativeCommands.default)({
    supportedCommands: [
        'hotspotUpdate',
        'setPressed'
    ]
});
var _default = ViewNativeComponent;


}),
83822: (function (__unused_webpack_module, exports, __webpack_require__) {
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return _default;
    }
}));
var _export_star = __webpack_require__(4084);
var _interop_require_default = __webpack_require__(66705);
var _NativeExceptionsManager = /*#__PURE__*/ _interop_require_default._(_export_star._(__webpack_require__(5642), exports));
var _default = _NativeExceptionsManager.default;


}),
64978: (function (__unused_webpack_module, exports, __webpack_require__) {
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return _default;
    }
}));
var _export_star = __webpack_require__(4084);
var _interop_require_default = __webpack_require__(66705);
var _NativeSegmentFetcher = /*#__PURE__*/ _interop_require_default._(_export_star._(__webpack_require__(16771), exports));
var _default = _NativeSegmentFetcher.default;


}),
90399: (function (__unused_webpack_module, exports, __webpack_require__) {
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return _default;
    }
}));
var _export_star = __webpack_require__(4084);
var _interop_require_default = __webpack_require__(66705);
var _NativeTiming = /*#__PURE__*/ _interop_require_default._(_export_star._(__webpack_require__(59222), exports));
var _default = _NativeTiming.default;


}),
55438: (function (__unused_webpack_module, exports, __webpack_require__) {
"use strict";

Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return NativeEventEmitter;
    }
}));
var _class_call_check = __webpack_require__(8864);
var _create_class = __webpack_require__(93072);
var _interop_require_default = __webpack_require__(66705);
var _to_consumable_array = __webpack_require__(92716);
var _Platform = /*#__PURE__*/ _interop_require_default._(__webpack_require__(181));
var _RCTDeviceEventEmitter = /*#__PURE__*/ _interop_require_default._(__webpack_require__(75296));
var _invariant = /*#__PURE__*/ _interop_require_default._(__webpack_require__(56481));
var NativeEventEmitter = /*#__PURE__*/ function() {
    function NativeEventEmitter(nativeModule) {
        _class_call_check._(this, NativeEventEmitter);
        if (_Platform.default.OS === 'ios') {
            (0, _invariant.default)(nativeModule != null, '`new NativeEventEmitter()` requires a non-null argument.');
        }
        var hasAddListener = !!nativeModule && typeof nativeModule.addListener === 'function';
        var hasRemoveListeners = !!nativeModule && typeof nativeModule.removeListeners === 'function';
        if (nativeModule && hasAddListener && hasRemoveListeners) {
            this._nativeModule = nativeModule;
        } else if (nativeModule != null) {
            if (!hasAddListener) {
                console.warn('`new NativeEventEmitter()` was called with a non-null argument without the required `addListener` method.');
            }
            if (!hasRemoveListeners) {
                console.warn('`new NativeEventEmitter()` was called with a non-null argument without the required `removeListeners` method.');
            }
        }
    }
    _create_class._(NativeEventEmitter, [
        {
            key: "addListener",
            value: function addListener(eventType, listener, context) {
                var _this__nativeModule;
                (_this__nativeModule = this._nativeModule) === null || _this__nativeModule === void 0 ? void 0 : _this__nativeModule.addListener(eventType);
                var subscription = _RCTDeviceEventEmitter.default.addListener(eventType, listener, context);
                return {
                    remove: ()=>{
                        if (subscription != null) {
                            var _this__nativeModule;
                            (_this__nativeModule = this._nativeModule) === null || _this__nativeModule === void 0 ? void 0 : _this__nativeModule.removeListeners(1);
                            subscription.remove();
                            subscription = null;
                        }
                    }
                };
            }
        },
        {
            key: "emit",
            value: function emit(eventType, ...args) {
                var _RCTDeviceEventEmitter1;
                (_RCTDeviceEventEmitter1 = _RCTDeviceEventEmitter.default).emit.apply(_RCTDeviceEventEmitter1, [
                    eventType
                ].concat(_to_consumable_array._(args)));
            }
        },
        {
            key: "removeAllListeners",
            value: function removeAllListeners(eventType) {
                var _this__nativeModule;
                (0, _invariant.default)(eventType != null, '`NativeEventEmitter.removeAllListener()` requires a non-null argument.');
                (_this__nativeModule = this._nativeModule) === null || _this__nativeModule === void 0 ? void 0 : _this__nativeModule.removeListeners(this.listenerCount(eventType));
                _RCTDeviceEventEmitter.default.removeAllListeners(eventType);
            }
        },
        {
            key: "listenerCount",
            value: function listenerCount(eventType) {
                return _RCTDeviceEventEmitter.default.listenerCount(eventType);
            }
        }
    ]);
    return NativeEventEmitter;
}();


}),
97267: (function (__unused_webpack_module, exports, __webpack_require__) {
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: Object.getOwnPropertyDescriptor(all, name).get
    });
}
_export(exports, {
    get get () {
        return get;
    },
    get getWithFallback_DEPRECATED () {
        return getWithFallback_DEPRECATED;
    },
    get setRuntimeConfigProvider () {
        return setRuntimeConfigProvider;
    },
    get unstable_hasStaticViewConfig () {
        return unstable_hasStaticViewConfig;
    }
});
var _interop_require_default = __webpack_require__(66705);
var _interop_require_wildcard = __webpack_require__(83610);
var _getNativeComponentAttributes = /*#__PURE__*/ _interop_require_default._(__webpack_require__(69093));
var _UIManager = /*#__PURE__*/ _interop_require_default._(__webpack_require__(74853));
var _ReactNativeViewConfigRegistry = /*#__PURE__*/ _interop_require_wildcard._(__webpack_require__(25232));
var _StaticViewConfigValidator = /*#__PURE__*/ _interop_require_wildcard._(__webpack_require__(65181));
var _ViewConfig = __webpack_require__(20764);
var _invariant = /*#__PURE__*/ _interop_require_default._(__webpack_require__(56481));
var _react = /*#__PURE__*/ _interop_require_wildcard._(__webpack_require__(31399));
var getRuntimeConfig;
function setRuntimeConfigProvider(runtimeConfigProvider) {
    if (getRuntimeConfig === undefined) {
        getRuntimeConfig = runtimeConfigProvider;
    }
}
function get(name, viewConfigProvider) {
    _ReactNativeViewConfigRegistry.register(name, ()=>{
        var _ref = (getRuntimeConfig === null || getRuntimeConfig === void 0 ? void 0 : getRuntimeConfig(name)) ?? {
            native: !__webpack_require__.g.RN$Bridgeless,
            verify: false
        }, native = _ref.native, verify = _ref.verify;
        var viewConfig;
        if (native) {
            viewConfig = (0, _getNativeComponentAttributes.default)(name) ?? (0, _ViewConfig.createViewConfig)(viewConfigProvider());
        } else {
            viewConfig = (0, _ViewConfig.createViewConfig)(viewConfigProvider()) ?? (0, _getNativeComponentAttributes.default)(name);
        }
        (0, _invariant.default)(viewConfig != null, 'NativeComponentRegistry.get: both static and native view config are missing for native component "%s".', name);
        if (verify) {
            var nativeViewConfig = native ? viewConfig : (0, _getNativeComponentAttributes.default)(name);
            if (nativeViewConfig == null) {
                return viewConfig;
            }
            var staticViewConfig = native ? (0, _ViewConfig.createViewConfig)(viewConfigProvider()) : viewConfig;
            var validationOutput = _StaticViewConfigValidator.validate(name, nativeViewConfig, staticViewConfig);
            if (validationOutput.type === 'invalid') {
                console.error(_StaticViewConfigValidator.stringifyValidationResult(name, validationOutput));
            }
        }
        return viewConfig;
    });
    return name;
}
function getWithFallback_DEPRECATED(name, viewConfigProvider) {
    if (getRuntimeConfig == null) {
        if (hasNativeViewConfig(name)) {
            return get(name, viewConfigProvider);
        }
    } else {
        if (getRuntimeConfig(name) != null) {
            return get(name, viewConfigProvider);
        }
    }
    var FallbackNativeComponent = function(props) {
        return null;
    };
    FallbackNativeComponent.displayName = `Fallback(${name})`;
    return FallbackNativeComponent;
}
function hasNativeViewConfig(name) {
    (0, _invariant.default)(getRuntimeConfig == null, 'Unexpected invocation!');
    return _UIManager.default.getViewManagerConfig(name) != null;
}
function unstable_hasStaticViewConfig(name) {
    var native = ((getRuntimeConfig === null || getRuntimeConfig === void 0 ? void 0 : getRuntimeConfig(name)) ?? {
        native: true
    }).native;
    return !native;
}


}),
53655: (function (__unused_webpack_module, exports, __webpack_require__) {
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "unstable_hasComponent", ({
    enumerable: true,
    get: function() {
        return unstable_hasComponent;
    }
}));
var componentNameToExists = new Map();
function unstable_hasComponent(name) {
    var hasNativeComponent = componentNameToExists.get(name);
    if (hasNativeComponent == null) {
        if (__webpack_require__.g.__nativeComponentRegistry__hasComponent) {
            hasNativeComponent = __webpack_require__.g.__nativeComponentRegistry__hasComponent(name);
            componentNameToExists.set(name, hasNativeComponent);
        } else {
            throw `unstable_hasComponent('${name}'): Global function is not registered`;
        }
    }
    return hasNativeComponent;
}


}),
98207: (function (__unused_webpack_module, exports, __webpack_require__) {
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return _default;
    }
}));
var _export_star = __webpack_require__(4084);
var _interop_require_default = __webpack_require__(66705);
var _NativeDialogManagerAndroid = /*#__PURE__*/ _interop_require_default._(_export_star._(__webpack_require__(20955), exports));
var _default = _NativeDialogManagerAndroid.default;


}),
57896: (function (__unused_webpack_module, exports, __webpack_require__) {
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return _default;
    }
}));
var _export_star = __webpack_require__(4084);
var _interop_require_default = __webpack_require__(66705);
var _NativeRedBox = /*#__PURE__*/ _interop_require_default._(_export_star._(__webpack_require__(8754), exports));
var _default = _NativeRedBox.default;


}),
84925: (function (__unused_webpack_module, exports, __webpack_require__) {
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return _default;
    }
}));
var _export_star = __webpack_require__(4084);
var _interop_require_default = __webpack_require__(66705);
var _NativeSourceCode = /*#__PURE__*/ _interop_require_default._(_export_star._(__webpack_require__(94356), exports));
var _default = _NativeSourceCode.default;


}),
4036: (function (__unused_webpack_module, exports, __webpack_require__) {
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return _default;
    }
}));
var _export_star = __webpack_require__(4084);
var _interop_require_default = __webpack_require__(66705);
var _NativeNetworkingIOS = /*#__PURE__*/ _interop_require_default._(_export_star._(__webpack_require__(52602), exports));
var _default = _NativeNetworkingIOS.default;


}),
24149: (function (__unused_webpack_module, exports, __webpack_require__) {
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return _default;
    }
}));
var _export_star = __webpack_require__(4084);
var _interop_require_default = __webpack_require__(66705);
var _NativeHeadlessJsTaskSupport = /*#__PURE__*/ _interop_require_default._(_export_star._(__webpack_require__(5045), exports));
var _default = _NativeHeadlessJsTaskSupport.default;


}),
40142: (function (__unused_webpack_module, exports, __webpack_require__) {
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return _default;
    }
}));
var _export_star = __webpack_require__(4084);
var _interop_require_default = __webpack_require__(66705);
var _NativeUIManager = /*#__PURE__*/ _interop_require_default._(_export_star._(__webpack_require__(23242), exports));
var _default = _NativeUIManager.default;


}),
19784: (function (__unused_webpack_module, exports, __webpack_require__) {
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return _default;
    }
}));
var _export_star = __webpack_require__(4084);
var _interop_require_default = __webpack_require__(66705);
var _NativeDeviceInfo = /*#__PURE__*/ _interop_require_default._(_export_star._(__webpack_require__(48754), exports));
var _default = _NativeDeviceInfo.default;


}),
30631: (function (__unused_webpack_module, exports, __webpack_require__) {
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return _default;
    }
}));
var _export_star = __webpack_require__(4084);
var _interop_require_default = __webpack_require__(66705);
var _NativePlatformConstantsIOS = /*#__PURE__*/ _interop_require_default._(_export_star._(__webpack_require__(52738), exports));
var _default = _NativePlatformConstantsIOS.default;


}),
10967: (function (__unused_webpack_module, exports, __webpack_require__) {
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return _default;
    }
}));
var _export_star = __webpack_require__(4084);
var _interop_require_default = __webpack_require__(66705);
var _NativeWebSocketModule = /*#__PURE__*/ _interop_require_default._(_export_star._(__webpack_require__(32847), exports));
var _default = _NativeWebSocketModule.default;


}),
51038: (function (__unused_webpack_module, exports, __webpack_require__) {
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return _default;
    }
}));
var _interop_require_wildcard = __webpack_require__(83610);
var _TurboModuleRegistry = /*#__PURE__*/ _interop_require_wildcard._(__webpack_require__(76645));
var NativeReactNativeFeatureFlags = _TurboModuleRegistry.get('NativeReactNativeFeatureFlagsCxx');
var _default = NativeReactNativeFeatureFlags;


}),
14374: (function (__unused_webpack_module, exports, __webpack_require__) {
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return _default;
    }
}));
var _interop_require_wildcard = __webpack_require__(83610);
var _TurboModuleRegistry = /*#__PURE__*/ _interop_require_wildcard._(__webpack_require__(76645));
var _default = _TurboModuleRegistry.get('AlertManager');


}),
64305: (function (__unused_webpack_module, exports, __webpack_require__) {
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return _default;
    }
}));
var _interop_require_wildcard = __webpack_require__(83610);
var _TurboModuleRegistry = /*#__PURE__*/ _interop_require_wildcard._(__webpack_require__(76645));
var NativeModule = _TurboModuleRegistry.get('BlobModule');
var constants = null;
var NativeBlobModule = null;
if (NativeModule != null) {
    NativeBlobModule = {
        getConstants () {
            if (constants == null) {
                constants = NativeModule.getConstants();
            }
            return constants;
        },
        addNetworkingHandler () {
            NativeModule.addNetworkingHandler();
        },
        addWebSocketHandler (id) {
            NativeModule.addWebSocketHandler(id);
        },
        removeWebSocketHandler (id) {
            NativeModule.removeWebSocketHandler(id);
        },
        sendOverSocket (blob, socketID) {
            NativeModule.sendOverSocket(blob, socketID);
        },
        createFromParts (parts, withId) {
            NativeModule.createFromParts(parts, withId);
        },
        release (blobId) {
            NativeModule.release(blobId);
        }
    };
}
var _default = NativeBlobModule;


}),
50884: (function (__unused_webpack_module, exports, __webpack_require__) {
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return _default;
    }
}));
var _interop_require_wildcard = __webpack_require__(83610);
var _TurboModuleRegistry = /*#__PURE__*/ _interop_require_wildcard._(__webpack_require__(76645));
var _default = _TurboModuleRegistry.get('BugReporting');


}),
48754: (function (__unused_webpack_module, exports, __webpack_require__) {
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return _default;
    }
}));
var _interop_require_wildcard = __webpack_require__(83610);
var _TurboModuleRegistry = /*#__PURE__*/ _interop_require_wildcard._(__webpack_require__(76645));
var NativeModule = _TurboModuleRegistry.getEnforcing('DeviceInfo');
var constants = null;
var NativeDeviceInfo = {
    getConstants () {
        if (constants == null) {
            constants = NativeModule.getConstants();
        }
        return constants;
    }
};
var _default = NativeDeviceInfo;


}),
20955: (function (__unused_webpack_module, exports, __webpack_require__) {
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return _default;
    }
}));
var _interop_require_wildcard = __webpack_require__(83610);
var _TurboModuleRegistry = /*#__PURE__*/ _interop_require_wildcard._(__webpack_require__(76645));
var _default = _TurboModuleRegistry.get('DialogManagerAndroid');


}),
5642: (function (__unused_webpack_module, exports, __webpack_require__) {
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return _default;
    }
}));
var _interop_require_wildcard = __webpack_require__(83610);
var _TurboModuleRegistry = /*#__PURE__*/ _interop_require_wildcard._(__webpack_require__(76645));
var Platform = __webpack_require__(181);
var NativeModule = _TurboModuleRegistry.getEnforcing('ExceptionsManager');
var ExceptionsManager = {
    reportFatalException (message, stack, exceptionId) {
        NativeModule.reportFatalException(message, stack, exceptionId);
    },
    reportSoftException (message, stack, exceptionId) {
        NativeModule.reportSoftException(message, stack, exceptionId);
    },
    dismissRedbox () {
        if (Platform.OS !== 'ios' && NativeModule.dismissRedbox) {
            NativeModule.dismissRedbox();
        }
    },
    reportException (data) {
        if (NativeModule.reportException) {
            NativeModule.reportException(data);
            return;
        }
        if (data.isFatal) {
            ExceptionsManager.reportFatalException(data.message, data.stack, data.id);
        } else {
            ExceptionsManager.reportSoftException(data.message, data.stack, data.id);
        }
    }
};
var _default = ExceptionsManager;


}),
8257: (function (__unused_webpack_module, exports, __webpack_require__) {
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return _default;
    }
}));
var _interop_require_wildcard = __webpack_require__(83610);
var _TurboModuleRegistry = /*#__PURE__*/ _interop_require_wildcard._(__webpack_require__(76645));
var _default = _TurboModuleRegistry.getEnforcing('FileReaderModule');


}),
5045: (function (__unused_webpack_module, exports, __webpack_require__) {
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return _default;
    }
}));
var _interop_require_wildcard = __webpack_require__(83610);
var _TurboModuleRegistry = /*#__PURE__*/ _interop_require_wildcard._(__webpack_require__(76645));
var _default = _TurboModuleRegistry.get('HeadlessJsTaskSupport');


}),
52602: (function (__unused_webpack_module, exports, __webpack_require__) {
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return _default;
    }
}));
var _interop_require_wildcard = __webpack_require__(83610);
var _TurboModuleRegistry = /*#__PURE__*/ _interop_require_wildcard._(__webpack_require__(76645));
var _default = _TurboModuleRegistry.getEnforcing('Networking');


}),
52738: (function (__unused_webpack_module, exports, __webpack_require__) {
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return _default;
    }
}));
var _interop_require_wildcard = __webpack_require__(83610);
var _TurboModuleRegistry = /*#__PURE__*/ _interop_require_wildcard._(__webpack_require__(76645));
var _default = _TurboModuleRegistry.getEnforcing('PlatformConstants');


}),
8754: (function (__unused_webpack_module, exports, __webpack_require__) {
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return _default;
    }
}));
var _interop_require_wildcard = __webpack_require__(83610);
var _TurboModuleRegistry = /*#__PURE__*/ _interop_require_wildcard._(__webpack_require__(76645));
var _default = _TurboModuleRegistry.get('RedBox');


}),
16771: (function (__unused_webpack_module, exports, __webpack_require__) {
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return _default;
    }
}));
var _interop_require_wildcard = __webpack_require__(83610);
var _TurboModuleRegistry = /*#__PURE__*/ _interop_require_wildcard._(__webpack_require__(76645));
var _default = _TurboModuleRegistry.getEnforcing('SegmentFetcher');


}),
94356: (function (__unused_webpack_module, exports, __webpack_require__) {
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return _default;
    }
}));
var _interop_require_wildcard = __webpack_require__(83610);
var _TurboModuleRegistry = /*#__PURE__*/ _interop_require_wildcard._(__webpack_require__(76645));
var NativeModule = _TurboModuleRegistry.getEnforcing('SourceCode');
var constants = null;
var NativeSourceCode = {
    getConstants () {
        if (constants == null) {
            constants = NativeModule.getConstants();
        }
        return constants;
    }
};
var _default = NativeSourceCode;


}),
59222: (function (__unused_webpack_module, exports, __webpack_require__) {
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return _default;
    }
}));
var _interop_require_wildcard = __webpack_require__(83610);
var _TurboModuleRegistry = /*#__PURE__*/ _interop_require_wildcard._(__webpack_require__(76645));
var _default = _TurboModuleRegistry.get('Timing');


}),
23242: (function (__unused_webpack_module, exports, __webpack_require__) {
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return _default;
    }
}));
var _interop_require_wildcard = __webpack_require__(83610);
var _TurboModuleRegistry = /*#__PURE__*/ _interop_require_wildcard._(__webpack_require__(76645));
var _default = _TurboModuleRegistry.getEnforcing('UIManager');


}),
32847: (function (__unused_webpack_module, exports, __webpack_require__) {
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return _default;
    }
}));
var _interop_require_wildcard = __webpack_require__(83610);
var _TurboModuleRegistry = /*#__PURE__*/ _interop_require_wildcard._(__webpack_require__(76645));
var _default = _TurboModuleRegistry.getEnforcing('WebSocketModule');


}),
10792: (function (__unused_webpack_module, exports, __webpack_require__) {
var __webpack_unused_export__;
__webpack_unused_export__ = ({
    value: true
});
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return _default;
    }
}));
var _interop_require_wildcard = __webpack_require__(83610);
var _TurboModuleRegistry = /*#__PURE__*/ _interop_require_wildcard._(__webpack_require__(76645));
var _default = _TurboModuleRegistry.getEnforcing('NativeIdleCallbacksCxx');


}),
24887: (function (__unused_webpack_module, exports, __webpack_require__) {
var __webpack_unused_export__;
__webpack_unused_export__ = ({
    value: true
});
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return _default;
    }
}));
var _interop_require_wildcard = __webpack_require__(83610);
var _TurboModuleRegistry = /*#__PURE__*/ _interop_require_wildcard._(__webpack_require__(76645));
var _default = _TurboModuleRegistry.getEnforcing('NativeMicrotasksCxx');


}),
23806: (function (__unused_webpack_module, exports, __webpack_require__) {
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return _default;
    }
}));
var _interop_require_wildcard = __webpack_require__(83610);
var _TurboModuleRegistry = /*#__PURE__*/ _interop_require_wildcard._(__webpack_require__(76645));
var _default = _TurboModuleRegistry.get('NativePerformanceCxx');


}),
8306: (function (module, exports, __webpack_require__) {
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * @format
 *      
 */ Object.defineProperty(exports, "__esModule", ({
    value: true
}));
var _class_call_check = __webpack_require__(8864);
var _create_class = __webpack_require__(93072);
var _interop_require_default = __webpack_require__(66705);
var _Platform = /*#__PURE__*/ _interop_require_default._(__webpack_require__(181));
var _RCTAlertManager = /*#__PURE__*/ _interop_require_default._(__webpack_require__(23675));
/**
 * Launches an alert dialog with the specified title and message.
 *
 * See https://reactnative.dev/docs/alert
 */ var Alert = /*#__PURE__*/ function() {
    "use strict";
    function Alert() {
        _class_call_check._(this, Alert);
    }
    _create_class._(Alert, null, [
        {
            key: "alert",
            value: function alert(title, message, buttons, options) {
                if (_Platform.default.OS === 'ios') {
                    Alert.prompt(title, message, buttons, 'default', undefined, undefined, options);
                } else if (_Platform.default.OS === 'android') {
                    var NativeDialogManagerAndroid = (__webpack_require__(98207)/* ["default"] */["default"]);
                    if (!NativeDialogManagerAndroid) {
                        return;
                    }
                    var constants = NativeDialogManagerAndroid.getConstants();
                    var config = {
                        title: title || '',
                        message: message || '',
                        cancelable: false
                    };
                    if (options && options.cancelable) {
                        config.cancelable = options.cancelable;
                    }
                    // At most three buttons (neutral, negative, positive). Ignore rest.
                    // The text 'OK' should be probably localized. iOS Alert does that in native.
                    var defaultPositiveText = 'OK';
                    var validButtons = buttons ? buttons.slice(0, 3) : [
                        {
                            text: defaultPositiveText
                        }
                    ];
                    var buttonPositive = validButtons.pop();
                    var buttonNegative = validButtons.pop();
                    var buttonNeutral = validButtons.pop();
                    if (buttonNeutral) {
                        config.buttonNeutral = buttonNeutral.text || '';
                    }
                    if (buttonNegative) {
                        config.buttonNegative = buttonNegative.text || '';
                    }
                    if (buttonPositive) {
                        config.buttonPositive = buttonPositive.text || defaultPositiveText;
                    }
                    /* $FlowFixMe[missing-local-annot] The type annotation(s) required by
       * Flow's LTI update could not be added via codemod */ var onAction = (action, buttonKey)=>{
                        if (action === constants.buttonClicked) {
                            if (buttonKey === constants.buttonNeutral) {
                                // $FlowFixMe[incompatible-type]
                                buttonNeutral.onPress && buttonNeutral.onPress();
                            } else if (buttonKey === constants.buttonNegative) {
                                // $FlowFixMe[incompatible-type]
                                buttonNegative.onPress && buttonNegative.onPress();
                            } else if (buttonKey === constants.buttonPositive) {
                                // $FlowFixMe[incompatible-type]
                                buttonPositive.onPress && buttonPositive.onPress();
                            }
                        } else if (action === constants.dismissed) {
                            options && options.onDismiss && options.onDismiss();
                        }
                    };
                    var onError = (errorMessage)=>console.warn(errorMessage);
                    NativeDialogManagerAndroid.showAlert(config, onError, onAction);
                }
            }
        },
        {
            key: "prompt",
            value: function prompt(title, message, callbackOrButtons, ref, defaultValue, keyboardType, options) {
                var type = ref === void 0 ? 'plain-text' : ref;
                if (_Platform.default.OS === 'ios') {
                    var callbacks = [];
                    var buttons = [];
                    var cancelButtonKey;
                    var destructiveButtonKey;
                    var preferredButtonKey;
                    if (typeof callbackOrButtons === 'function') {
                        callbacks = [
                            callbackOrButtons
                        ];
                    } else if (Array.isArray(callbackOrButtons)) {
                        callbackOrButtons.forEach((btn, index)=>{
                            callbacks[index] = btn.onPress;
                            if (btn.style === 'cancel') {
                                cancelButtonKey = String(index);
                            } else if (btn.style === 'destructive') {
                                destructiveButtonKey = String(index);
                            }
                            if (btn.isPreferred) {
                                preferredButtonKey = String(index);
                            }
                            if (btn.text || index < (callbackOrButtons || []).length - 1) {
                                var btnDef = {};
                                btnDef[index] = btn.text || '';
                                buttons.push(btnDef);
                            }
                        });
                    }
                    _RCTAlertManager.default.alertWithArgs({
                        title: title || '',
                        message: message || undefined,
                        buttons,
                        type: type || undefined,
                        defaultValue,
                        cancelButtonKey,
                        destructiveButtonKey,
                        preferredButtonKey,
                        keyboardType,
                        userInterfaceStyle: (options === null || options === void 0 ? void 0 : options.userInterfaceStyle) || undefined
                    }, (id, value)=>{
                        var cb = callbacks[id];
                        cb && cb(value);
                    });
                }
            }
        }
    ]);
    return Alert;
}();
module.exports = Alert;


}),
23675: (function (module, exports, __webpack_require__) {
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * @format
 *       strict-local
 */ Object.defineProperty(exports, "__esModule", ({
    value: true
}));
var _interop_require_default = __webpack_require__(66705);
var _NativeAlertManager = /*#__PURE__*/ _interop_require_default._(__webpack_require__(60217));
module.exports = {
    alertWithArgs (args, callback) {
        if (_NativeAlertManager.default == null) {
            return;
        }
        _NativeAlertManager.default.alertWithArgs(args, callback);
    }
};


}),
63531: (function (module, __unused_webpack_exports, __webpack_require__) {
"use strict";
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * @format
 *       strict
 */ 
var MessageQueue = __webpack_require__(8867);
var BatchedBridge = new MessageQueue();
// Wire up the batched bridge on the global object so that we can call into it.
// Ideally, this would be the inverse relationship. I.e. the native environment
// provides this global directly with its script embedded. Then this module
// would export it. A possible fix would be to trim the dependencies in
// MessageQueue to its minimal features and embed that in the native runtime.
Object.defineProperty(__webpack_require__.g, '__fbBatchedBridge', {
    configurable: true,
    value: BatchedBridge
});
module.exports = BatchedBridge;


}),
8867: (function (module, exports, __webpack_require__) {
"use strict";
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 *       strict
 * @format
 */ 
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
var _class_call_check = __webpack_require__(8864);
var _create_class = __webpack_require__(93072);
var _to_consumable_array = __webpack_require__(92716);
var Systrace = __webpack_require__(725);
var deepFreezeAndThrowOnMutationInDev = __webpack_require__(14702);
var stringifySafe = (__webpack_require__(47264)/* ["default"] */["default"]);
var warnOnce = __webpack_require__(93473);
var ErrorUtils = __webpack_require__(78549);
var invariant = __webpack_require__(56481);
var TO_JS = 0;
var TO_NATIVE = 1;
var MODULE_IDS = 0;
var METHOD_IDS = 1;
var PARAMS = 2;
var MIN_TIME_BETWEEN_FLUSHES_MS = 5;
// eslint-disable-next-line no-bitwise
var TRACE_TAG_REACT_APPS = (/* unused pure expression or super */ null && (1 << 17));
var DEBUG_INFO_LIMIT = 32;
var MessageQueue = /*#__PURE__*/ function() {
    function MessageQueue() {
        _class_call_check._(this, MessageQueue);
        this._lazyCallableModules = {};
        this._queue = [
            [],
            [],
            [],
            0
        ];
        this._successCallbacks = new Map();
        this._failureCallbacks = new Map();
        this._callID = 0;
        this._lastFlush = 0;
        this._eventLoopStartTime = Date.now();
        this._reactNativeMicrotasksCallback = null;
        if (false) {}
        // $FlowFixMe[cannot-write]
        this.callFunctionReturnFlushedQueue = // $FlowFixMe[method-unbinding] added when improving typing for this parameters
        this.callFunctionReturnFlushedQueue.bind(this);
        // $FlowFixMe[cannot-write]
        // $FlowFixMe[method-unbinding] added when improving typing for this parameters
        this.flushedQueue = this.flushedQueue.bind(this);
        // $FlowFixMe[cannot-write]
        this.invokeCallbackAndReturnFlushedQueue = // $FlowFixMe[method-unbinding] added when improving typing for this parameters
        this.invokeCallbackAndReturnFlushedQueue.bind(this);
    }
    _create_class._(MessageQueue, [
        {
            key: "callFunctionReturnFlushedQueue",
            value: function callFunctionReturnFlushedQueue(module1, method, args) {
                this.__guard(()=>{
                    this.__callFunction(module1, method, args);
                });
                return this.flushedQueue();
            }
        },
        {
            key: "invokeCallbackAndReturnFlushedQueue",
            value: function invokeCallbackAndReturnFlushedQueue(cbID, args) {
                this.__guard(()=>{
                    this.__invokeCallback(cbID, args);
                });
                return this.flushedQueue();
            }
        },
        {
            key: "flushedQueue",
            value: function flushedQueue() {
                this.__guard(()=>{
                    this.__callReactNativeMicrotasks();
                });
                var queue = this._queue;
                this._queue = [
                    [],
                    [],
                    [],
                    this._callID
                ];
                return queue[0].length ? queue : null;
            }
        },
        {
            key: "getEventLoopRunningTime",
            value: function getEventLoopRunningTime() {
                return Date.now() - this._eventLoopStartTime;
            }
        },
        {
            key: "registerCallableModule",
            value: function registerCallableModule(name, module1) {
                this._lazyCallableModules[name] = ()=>module1;
            }
        },
        {
            key: "registerLazyCallableModule",
            value: function registerLazyCallableModule(name, factory) {
                var _$module;
                var getValue = factory;
                this._lazyCallableModules[name] = ()=>{
                    if (getValue) {
                        _$module = getValue();
                        getValue = null;
                    }
                    /* $FlowFixMe[class-object-subtyping] added when improving typing for
       * this parameters */ return _$module;
                };
            }
        },
        {
            key: "getCallableModule",
            value: function getCallableModule(name) {
                var getValue = this._lazyCallableModules[name];
                return getValue ? getValue() : null;
            }
        },
        {
            key: "callNativeSyncHook",
            value: function callNativeSyncHook(moduleID, methodID, params, onFail, onSucc) {
                if (false) {}
                this.processCallbacks(moduleID, methodID, params, onFail, onSucc);
                return __webpack_require__.g.nativeCallSyncHook(moduleID, methodID, params);
            }
        },
        {
            key: "processCallbacks",
            value: function processCallbacks(moduleID, methodID, params, onFail, onSucc) {
                if (onFail || onSucc) {
                    if (false) { var info }
                    // Encode callIDs into pairs of callback identifiers by shifting left and using the rightmost bit
                    // to indicate fail (0) or success (1)
                    // eslint-disable-next-line no-bitwise
                    onFail && params.push(this._callID << 1);
                    // eslint-disable-next-line no-bitwise
                    onSucc && params.push(this._callID << 1 | 1);
                    this._successCallbacks.set(this._callID, onSucc);
                    this._failureCallbacks.set(this._callID, onFail);
                }
                if (false) {}
                this._callID++;
            }
        },
        {
            key: "enqueueNativeCall",
            value: function enqueueNativeCall(moduleID, methodID, params, onFail, onSucc) {
                this.processCallbacks(moduleID, methodID, params, onFail, onSucc);
                this._queue[MODULE_IDS].push(moduleID);
                this._queue[METHOD_IDS].push(methodID);
                if (false) { var replacer, isValidArgument }
                this._queue[PARAMS].push(params);
                var now = Date.now();
                if (__webpack_require__.g.nativeFlushQueueImmediate && now - this._lastFlush >= MIN_TIME_BETWEEN_FLUSHES_MS) {
                    var queue = this._queue;
                    this._queue = [
                        [],
                        [],
                        [],
                        this._callID
                    ];
                    this._lastFlush = now;
                    __webpack_require__.g.nativeFlushQueueImmediate(queue);
                }
                Systrace.counterEvent('pending_js_to_native_queue', this._queue[0].length);
                if (false) {} else if (this.__spy) {
                    this.__spy({
                        type: TO_NATIVE,
                        module: moduleID + '',
                        method: methodID,
                        args: params
                    });
                }
            }
        },
        {
            key: "createDebugLookup",
            value: function createDebugLookup(moduleID, name, methods) {
                if (false) {}
            }
        },
        {
            // For JSTimers to register its callback. Otherwise a circular dependency
            // between modules is introduced. Note that only one callback may be
            // registered at a time.
            key: "setReactNativeMicrotasksCallback",
            value: function setReactNativeMicrotasksCallback(fn) {
                this._reactNativeMicrotasksCallback = fn;
            }
        },
        {
            /**
   * Private methods
   */ key: "__guard",
            value: function __guard(fn) {
                if (this.__shouldPauseOnThrow()) {
                    fn();
                } else {
                    try {
                        fn();
                    } catch (error) {
                        ErrorUtils.reportFatalError(error);
                    }
                }
            }
        },
        {
            // MessageQueue installs a global handler to catch all exceptions where JS users can register their own behavior
            // This handler makes all exceptions to be propagated from inside MessageQueue rather than by the VM at their origin
            // This makes stacktraces to be placed at MessageQueue rather than at where they were launched
            // The parameter DebuggerInternal.shouldPauseOnThrow is used to check before catching all exceptions and
            // can be configured by the VM or any Inspector
            key: "__shouldPauseOnThrow",
            value: function __shouldPauseOnThrow() {
                return(// $FlowFixMe[cannot-resolve-name]
                typeof DebuggerInternal !== 'undefined' && // $FlowFixMe[cannot-resolve-name]
                DebuggerInternal.shouldPauseOnThrow === true);
            }
        },
        {
            key: "__callReactNativeMicrotasks",
            value: function __callReactNativeMicrotasks() {
                Systrace.beginEvent('JSTimers.callReactNativeMicrotasks()');
                try {
                    if (this._reactNativeMicrotasksCallback != null) {
                        this._reactNativeMicrotasksCallback();
                    }
                } finally{
                    Systrace.endEvent();
                }
            }
        },
        {
            key: "__callFunction",
            value: function __callFunction(module1, method, args) {
                this._lastFlush = Date.now();
                this._eventLoopStartTime = this._lastFlush;
                if ( false || this.__spy) {
                    Systrace.beginEvent(`${module1}.${method}(${stringifySafe(args)})`);
                } else {
                    Systrace.beginEvent(`${module1}.${method}(...)`);
                }
                try {
                    if (this.__spy) {
                        this.__spy({
                            type: TO_JS,
                            module: module1,
                            method,
                            args
                        });
                    }
                    var moduleMethods = this.getCallableModule(module1);
                    if (!moduleMethods) {
                        var callableModuleNames = Object.keys(this._lazyCallableModules);
                        var n = callableModuleNames.length;
                        var callableModuleNameList = callableModuleNames.join(', ');
                        // TODO(T122225939): Remove after investigation: Why are we getting to this line in bridgeless mode?
                        var isBridgelessMode = __webpack_require__.g.RN$Bridgeless === true ? 'true' : 'false';
                        invariant(false, `Failed to call into JavaScript module method ${module1}.${method}(). Module has not been registered as callable. Bridgeless Mode: ${isBridgelessMode}. Registered callable JavaScript modules (n = ${n}): ${callableModuleNameList}.
          A frequent cause of the error is that the application entry file path is incorrect. This can also happen when the JS bundle is corrupt or there is an early initialization error when loading React Native.`);
                    }
                    // $FlowFixMe[invalid-computed-prop]
                    if (!moduleMethods[method]) {
                        invariant(false, `Failed to call into JavaScript module method ${module1}.${method}(). Module exists, but the method is undefined.`);
                    }
                    moduleMethods[method].apply(moduleMethods, args);
                } finally{
                    Systrace.endEvent();
                }
            }
        },
        {
            key: "__invokeCallback",
            value: function __invokeCallback(cbID, args) {
                this._lastFlush = Date.now();
                this._eventLoopStartTime = this._lastFlush;
                // The rightmost bit of cbID indicates fail (0) or success (1), the other bits are the callID shifted left.
                // eslint-disable-next-line no-bitwise
                var callID = cbID >>> 1;
                // eslint-disable-next-line no-bitwise
                var isSuccess = cbID & 1;
                var callback = isSuccess ? this._successCallbacks.get(callID) : this._failureCallbacks.get(callID);
                if (false) { var profileName, debug, _$module, method }
                try {
                    if (!callback) {
                        return;
                    }
                    this._successCallbacks.delete(callID);
                    this._failureCallbacks.delete(callID);
                    callback.apply(void 0, _to_consumable_array._(args));
                } finally{
                    if (false) {}
                }
            }
        }
    ], [
        {
            key: "spy",
            value: /**
   * Public APIs
   */ function spy(spyOrToggle) {
                if (spyOrToggle === true) {
                    MessageQueue.prototype.__spy = (info)=>{
                        console.log(`${info.type === TO_JS ? 'N->JS' : 'JS->N'} : ` + `${info.module != null ? info.module + '.' : ''}${info.method}` + `(${JSON.stringify(info.args)})`);
                    };
                } else if (spyOrToggle === false) {
                    MessageQueue.prototype.__spy = null;
                } else {
                    MessageQueue.prototype.__spy = spyOrToggle;
                }
            }
        }
    ]);
    return MessageQueue;
}();
module.exports = MessageQueue;


}),
56540: (function (module, exports, __webpack_require__) {
"use strict";
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 *       strict-local
 * @format
 */ 
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
var _class_call_check = __webpack_require__(8864);
var _create_class = __webpack_require__(93072);
/**
 * Opaque JS representation of some binary data in native.
 *
 * The API is modeled after the W3C Blob API, with one caveat
 * regarding explicit deallocation. Refer to the `close()`
 * method for further details.
 *
 * Example usage in a React component:
 *
 *   class WebSocketImage extends React.Component {
 *      state = {blob: null};
 *      componentDidMount() {
 *        let ws = this.ws = new WebSocket(...);
 *        ws.binaryType = 'blob';
 *        ws.onmessage = (event) => {
 *          if (this.state.blob) {
 *            this.state.blob.close();
 *          }
 *          this.setState({blob: event.data});
 *        };
 *      }
 *      componentUnmount() {
 *        if (this.state.blob) {
 *          this.state.blob.close();
 *        }
 *        this.ws.close();
 *      }
 *      render() {
 *        if (!this.state.blob) {
 *          return <View />;
 *        }
 *        return <Image source={{uri: URL.createObjectURL(this.state.blob)}} />;
 *      }
 *   }
 *
 * Reference: https://developer.mozilla.org/en-US/docs/Web/API/Blob
 */ var Blob = /*#__PURE__*/ function() {
    function Blob(ref, options) {
        var parts = ref === void 0 ? [] : ref;
        _class_call_check._(this, Blob);
        var BlobManager = __webpack_require__(28586);
        this.data = BlobManager.createFromParts(parts, options).data;
    }
    _create_class._(Blob, [
        {
            key: "data",
            get: // $FlowFixMe[unsafe-getters-setters]
            function() {
                if (!this._data) {
                    throw new Error('Blob has been closed and is no longer available');
                }
                return this._data;
            },
            set: /*
   * This method is used to create a new Blob object containing
   * the data in the specified range of bytes of the source Blob.
   * Reference: https://developer.mozilla.org/en-US/docs/Web/API/Blob/slice
   */ // $FlowFixMe[unsafe-getters-setters]
            function(data) {
                this._data = data;
            }
        },
        {
            key: "slice",
            value: function slice(start, end, ref) {
                var contentType = ref === void 0 ? '' : ref;
                var BlobManager = __webpack_require__(28586);
                var _this_data = this.data, offset = _this_data.offset, size = _this_data.size;
                if (typeof start === 'number') {
                    if (start > size) {
                        // $FlowFixMe[reassign-const]
                        start = size;
                    }
                    offset += start;
                    size -= start;
                    if (typeof end === 'number') {
                        if (end < 0) {
                            // $FlowFixMe[reassign-const]
                            end = this.size + end;
                        }
                        if (end > this.size) {
                            // $FlowFixMe[reassign-const]
                            end = this.size;
                        }
                        size = end - start;
                    }
                }
                return BlobManager.createFromOptions({
                    blobId: this.data.blobId,
                    offset,
                    size,
                    type: contentType,
                    /* Since `blob.slice()` creates a new view onto the same binary
       * data as the original blob, we should re-use the same collector
       * object so that the underlying resource gets deallocated when
       * the last view into the data is released, not the first.
       */ __collector: this.data.__collector
                });
            }
        },
        {
            /**
   * This method is in the standard, but not actually implemented by
   * any browsers at this point. It's important for how Blobs work in
   * React Native, however, since we cannot de-allocate resources automatically,
   * so consumers need to explicitly de-allocate them.
   *
   * Note that the semantics around Blobs created via `blob.slice()`
   * and `new Blob([blob])` are different. `blob.slice()` creates a
   * new *view* onto the same binary data, so calling `close()` on any
   * of those views is enough to deallocate the data, whereas
   * `new Blob([blob, ...])` actually copies the data in memory.
   */ key: "close",
            value: function close() {
                var BlobManager = __webpack_require__(28586);
                BlobManager.release(this.data.blobId);
                this.data = null;
            }
        },
        {
            key: "size",
            get: /**
   * Size of the data contained in the Blob object, in bytes.
   */ // $FlowFixMe[unsafe-getters-setters]
            function() {
                return this.data.size;
            }
        },
        {
            key: "type",
            get: /*
   * String indicating the MIME type of the data contained in the Blob.
   * If the type is unknown, this string is empty.
   */ // $FlowFixMe[unsafe-getters-setters]
            function() {
                return this.data.type || '';
            }
        }
    ]);
    return Blob;
}();
module.exports = Blob;


}),
28586: (function (module, exports, __webpack_require__) {
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 *       strict-local
 * @format
 */ Object.defineProperty(exports, "__esModule", ({
    value: true
}));
var _class_call_check = __webpack_require__(8864);
var _create_class = __webpack_require__(93072);
var _interop_require_default = __webpack_require__(66705);
var _object_spread = __webpack_require__(36192);
var _object_spread_props = __webpack_require__(83590);
var _NativeBlobModule = /*#__PURE__*/ _interop_require_default._(__webpack_require__(63903));
var _invariant = /*#__PURE__*/ _interop_require_default._(__webpack_require__(56481));
var Blob = __webpack_require__(56540);
var BlobRegistry = __webpack_require__(31719);
/*eslint-disable no-bitwise */ /*eslint-disable eqeqeq */ /**
 * Based on the rfc4122-compliant solution posted at
 * http://stackoverflow.com/questions/105034
 */ function uuidv4() {
    return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, (c)=>{
        var r = Math.random() * 16 | 0, v = c == 'x' ? r : r & 0x3 | 0x8;
        return v.toString(16);
    });
}
// **Temporary workaround**
// TODO(#24654): Use turbomodules for the Blob module.
// Blob collector is a jsi::HostObject that is used by native to know
// when the a Blob instance is deallocated. This allows to free the
// underlying native resources. This is a hack to workaround the fact
// that the current bridge infra doesn't allow to track js objects
// deallocation. Ideally the whole Blob object should be a jsi::HostObject.
function createBlobCollector(blobId) {
    if (__webpack_require__.g.__blobCollectorProvider == null) {
        return null;
    } else {
        return __webpack_require__.g.__blobCollectorProvider(blobId);
    }
}
/**
 * Module to manage blobs. Wrapper around the native blob module.
 */ var BlobManager = /*#__PURE__*/ function() {
    "use strict";
    function BlobManager() {
        _class_call_check._(this, BlobManager);
    }
    _create_class._(BlobManager, null, [
        {
            key: "createFromParts",
            value: /**
   * Create blob from existing array of blobs.
   */ function createFromParts(parts, options) {
                (0, _invariant.default)(_NativeBlobModule.default, 'NativeBlobModule is available.');
                var blobId = uuidv4();
                var items = parts.map((part)=>{
                    if (part instanceof ArrayBuffer || ArrayBuffer.isView(part)) {
                        throw new Error("Creating blobs from 'ArrayBuffer' and 'ArrayBufferView' are not supported");
                    }
                    if (part instanceof Blob) {
                        return {
                            data: part.data,
                            type: 'blob'
                        };
                    } else {
                        return {
                            data: String(part),
                            type: 'string'
                        };
                    }
                });
                var size = items.reduce((acc, curr)=>{
                    if (curr.type === 'string') {
                        return acc + __webpack_require__.g.unescape(encodeURI(curr.data)).length;
                    } else {
                        return acc + curr.data.size;
                    }
                }, 0);
                _NativeBlobModule.default.createFromParts(items, blobId);
                return BlobManager.createFromOptions({
                    blobId,
                    offset: 0,
                    size,
                    type: options ? options.type : '',
                    lastModified: options ? options.lastModified : Date.now()
                });
            }
        },
        {
            key: "createFromOptions",
            value: /**
   * Create blob instance from blob data from native.
   * Used internally by modules like XHR, WebSocket, etc.
   */ function createFromOptions(options) {
                BlobRegistry.register(options.blobId);
                // $FlowFixMe[prop-missing]
                return Object.assign(Object.create(Blob.prototype), {
                    data: // Reuse the collector instance when creating from an existing blob.
                    // This will make sure that the underlying resource is only deallocated
                    // when all blobs that refer to it are deallocated.
                    options.__collector == null ? _object_spread_props._(_object_spread._({}, options), {
                        __collector: createBlobCollector(options.blobId)
                    }) : options
                });
            }
        },
        {
            key: "release",
            value: /**
   * Deallocate resources for a blob.
   */ function release(blobId) {
                (0, _invariant.default)(_NativeBlobModule.default, 'NativeBlobModule is available.');
                BlobRegistry.unregister(blobId);
                if (BlobRegistry.has(blobId)) {
                    return;
                }
                _NativeBlobModule.default.release(blobId);
            }
        },
        {
            key: "addNetworkingHandler",
            value: /**
   * Inject the blob content handler in the networking module to support blob
   * requests and responses.
   */ function addNetworkingHandler() {
                (0, _invariant.default)(_NativeBlobModule.default, 'NativeBlobModule is available.');
                _NativeBlobModule.default.addNetworkingHandler();
            }
        },
        {
            key: "addWebSocketHandler",
            value: /**
   * Indicate the websocket should return a blob for incoming binary
   * messages.
   */ function addWebSocketHandler(socketId) {
                (0, _invariant.default)(_NativeBlobModule.default, 'NativeBlobModule is available.');
                _NativeBlobModule.default.addWebSocketHandler(socketId);
            }
        },
        {
            key: "removeWebSocketHandler",
            value: /**
   * Indicate the websocket should no longer return a blob for incoming
   * binary messages.
   */ function removeWebSocketHandler(socketId) {
                (0, _invariant.default)(_NativeBlobModule.default, 'NativeBlobModule is available.');
                _NativeBlobModule.default.removeWebSocketHandler(socketId);
            }
        },
        {
            key: "sendOverSocket",
            value: /**
   * Send a blob message to a websocket.
   */ function sendOverSocket(blob, socketId) {
                (0, _invariant.default)(_NativeBlobModule.default, 'NativeBlobModule is available.');
                _NativeBlobModule.default.sendOverSocket(blob.data, socketId);
            }
        }
    ]);
    return BlobManager;
}();
/**
   * If the native blob module is available.
   */ BlobManager.isAvailable = !!_NativeBlobModule.default;
module.exports = BlobManager;


}),
31719: (function (module) {
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 *       strict
 * @format
 */ var registry = new Map();
var register = (id)=>{
    var used = registry.get(id);
    if (used != null) {
        registry.set(id, used + 1);
    } else {
        registry.set(id, 1);
    }
};
var unregister = (id)=>{
    var used = registry.get(id);
    if (used != null) {
        if (used <= 1) {
            registry.delete(id);
        } else {
            registry.set(id, used - 1);
        }
    }
};
var has = (id)=>{
    return registry.get(id) || false;
};
module.exports = {
    register,
    unregister,
    has
};


}),
85403: (function (module, exports, __webpack_require__) {
"use strict";
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 *      
 * @format
 */ 
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
var _call_super = __webpack_require__(19436);
var _class_call_check = __webpack_require__(8864);
var _create_class = __webpack_require__(93072);
var _inherits = __webpack_require__(82397);
var _wrap_native_super = __webpack_require__(30753);
var Blob = __webpack_require__(56540);
var invariant = __webpack_require__(56481);
/**
 * The File interface provides information about files.
 */ var File = /*#__PURE__*/ function(Blob) {
    _inherits._(File, Blob);
    function File(parts, name, options) {
        _class_call_check._(this, File);
        var _this;
        invariant(parts != null && name != null, 'Failed to construct `File`: Must pass both `parts` and `name` arguments.');
        _this = _call_super._(this, File, [
            parts,
            options
        ]);
        _this.data.name = name;
        return _this;
    }
    _create_class._(File, [
        {
            key: "name",
            get: /**
   * Name of the file.
   */ function() {
                invariant(this.data.name != null, 'Files must have a name set.');
                return this.data.name;
            }
        },
        {
            key: "lastModified",
            get: /*
   * Last modified time of the file.
   */ function() {
                return this.data.lastModified || 0;
            }
        }
    ]);
    return File;
}(_wrap_native_super._(Blob));
module.exports = File;


}),
98175: (function (module, exports, __webpack_require__) {
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 *      
 * @format
 */ Object.defineProperty(exports, "__esModule", ({
    value: true
}));
var _call_super = __webpack_require__(19436);
var _class_call_check = __webpack_require__(8864);
var _create_class = __webpack_require__(93072);
var _inherits = __webpack_require__(82397);
var _interop_require_default = __webpack_require__(66705);
var _to_consumable_array = __webpack_require__(92716);
var _NativeFileReaderModule = /*#__PURE__*/ _interop_require_default._(__webpack_require__(88873));
var _base64js = __webpack_require__(25608);
var _eventtargetshim = /*#__PURE__*/ _interop_require_default._(__webpack_require__(65803));
// DONE
var READER_EVENTS = [
    'abort',
    'error',
    'load',
    'loadstart',
    'loadend',
    'progress'
];
var EMPTY = 0;
var LOADING = 1;
var DONE = 2;
var FileReader = /*#__PURE__*/ function(_EventTarget) {
    "use strict";
    _inherits._(FileReader, _EventTarget);
    function FileReader() {
        _class_call_check._(this, FileReader);
        var _this;
        _this = _call_super._(this, FileReader), _this.EMPTY = EMPTY, _this.LOADING = LOADING, _this.DONE = DONE, _this._aborted = false;
        _this._reset();
        return _this;
    }
    _create_class._(FileReader, [
        {
            key: "_reset",
            value: function _reset() {
                this._readyState = EMPTY;
                this._error = null;
                this._result = null;
            }
        },
        {
            key: "_setReadyState",
            value: function _setReadyState(newState) {
                this._readyState = newState;
                this.dispatchEvent({
                    type: 'readystatechange'
                });
                if (newState === DONE) {
                    if (this._aborted) {
                        this.dispatchEvent({
                            type: 'abort'
                        });
                    } else if (this._error) {
                        this.dispatchEvent({
                            type: 'error'
                        });
                    } else {
                        this.dispatchEvent({
                            type: 'load'
                        });
                    }
                    this.dispatchEvent({
                        type: 'loadend'
                    });
                }
            }
        },
        {
            key: "readAsArrayBuffer",
            value: function readAsArrayBuffer(blob) {
                this._aborted = false;
                if (blob == null) {
                    throw new TypeError("Failed to execute 'readAsArrayBuffer' on 'FileReader': parameter 1 is not of type 'Blob'");
                }
                _NativeFileReaderModule.default.readAsDataURL(blob.data).then((text)=>{
                    if (this._aborted) {
                        return;
                    }
                    var base64 = text.split(',')[1];
                    var typedArray = (0, _base64js.toByteArray)(base64);
                    this._result = typedArray.buffer;
                    this._setReadyState(DONE);
                }, (error)=>{
                    if (this._aborted) {
                        return;
                    }
                    this._error = error;
                    this._setReadyState(DONE);
                });
            }
        },
        {
            key: "readAsDataURL",
            value: function readAsDataURL(blob) {
                this._aborted = false;
                if (blob == null) {
                    throw new TypeError("Failed to execute 'readAsDataURL' on 'FileReader': parameter 1 is not of type 'Blob'");
                }
                _NativeFileReaderModule.default.readAsDataURL(blob.data).then((text)=>{
                    if (this._aborted) {
                        return;
                    }
                    this._result = text;
                    this._setReadyState(DONE);
                }, (error)=>{
                    if (this._aborted) {
                        return;
                    }
                    this._error = error;
                    this._setReadyState(DONE);
                });
            }
        },
        {
            key: "readAsText",
            value: function readAsText(blob, ref) {
                var encoding = ref === void 0 ? 'UTF-8' : ref;
                this._aborted = false;
                if (blob == null) {
                    throw new TypeError("Failed to execute 'readAsText' on 'FileReader': parameter 1 is not of type 'Blob'");
                }
                _NativeFileReaderModule.default.readAsText(blob.data, encoding).then((text)=>{
                    if (this._aborted) {
                        return;
                    }
                    this._result = text;
                    this._setReadyState(DONE);
                }, (error)=>{
                    if (this._aborted) {
                        return;
                    }
                    this._error = error;
                    this._setReadyState(DONE);
                });
            }
        },
        {
            key: "abort",
            value: function abort() {
                this._aborted = true;
                // only call onreadystatechange if there is something to abort, as per spec
                if (this._readyState !== EMPTY && this._readyState !== DONE) {
                    this._reset();
                    this._setReadyState(DONE);
                }
                // Reset again after, in case modified in handler
                this._reset();
            }
        },
        {
            key: "readyState",
            get: function() {
                return this._readyState;
            }
        },
        {
            key: "error",
            get: function() {
                return this._error;
            }
        },
        {
            key: "result",
            get: function() {
                return this._result;
            }
        }
    ]);
    return FileReader;
}(_eventtargetshim.default.apply(void 0, _to_consumable_array._(READER_EVENTS)));
FileReader.EMPTY = EMPTY;
FileReader.LOADING = LOADING;
FileReader.DONE = DONE;
module.exports = FileReader;


}),
30787: (function (__unused_webpack_module, exports, __webpack_require__) {
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * @format
 *      
 */ Object.defineProperty(exports, "__esModule", ({
    value: true
}));
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: Object.getOwnPropertyDescriptor(all, name).get
    });
}
_export(exports, {
    get URL () {
        return URL;
    },
    get URLSearchParams () {
        return _URLSearchParams.URLSearchParams;
    }
});
var _class_call_check = __webpack_require__(8864);
var _create_class = __webpack_require__(93072);
var _interop_require_default = __webpack_require__(66705);
var _NativeBlobModule = /*#__PURE__*/ _interop_require_default._(__webpack_require__(63903));
var _URLSearchParams = __webpack_require__(11363);
var BLOB_URL_PREFIX = null;
if (_NativeBlobModule.default && typeof _NativeBlobModule.default.getConstants().BLOB_URI_SCHEME === 'string') {
    var constants = _NativeBlobModule.default.getConstants();
    // $FlowFixMe[incompatible-type] asserted above
    // $FlowFixMe[unsafe-addition]
    BLOB_URL_PREFIX = constants.BLOB_URI_SCHEME + ':';
    if (typeof constants.BLOB_URI_HOST === 'string') {
        BLOB_URL_PREFIX += `//${constants.BLOB_URI_HOST}/`;
    }
}
function validateBaseUrl(url) {
    // from this MIT-licensed gist: https://gist.github.com/dperini/729294
    return /^(?:(?:(?:https?|ftp):)?\/\/)(?:(?:[1-9]\d?|1\d\d|2[01]\d|22[0-3])(?:\.(?:1?\d{1,2}|2[0-4]\d|25[0-5])){2}(?:\.(?:[1-9]\d?|1\d\d|2[0-4]\d|25[0-4]))|(?:(?:[a-z0-9\u00a1-\uffff][a-z0-9\u00a1-\uffff_-]{0,62})?[a-z0-9\u00a1-\uffff]\.)*(?:[a-z\u00a1-\uffff]{2,}\.?))(?::\d{2,5})?(?:[/?#]\S*)?$/.test(url);
}
var URL = /*#__PURE__*/ function() {
    "use strict";
    function URL(url, base) {
        _class_call_check._(this, URL);
        this._searchParamsInstance = null;
        var baseUrl = null;
        if (!base || validateBaseUrl(url)) {
            this._url = url;
            if (!this._url.endsWith('/')) {
                this._url += '/';
            }
        } else {
            if (typeof base === 'string') {
                baseUrl = base;
                if (!validateBaseUrl(baseUrl)) {
                    throw new TypeError(`Invalid base URL: ${baseUrl}`);
                }
            } else {
                baseUrl = base.toString();
            }
            if (baseUrl.endsWith('/')) {
                baseUrl = baseUrl.slice(0, baseUrl.length - 1);
            }
            if (!url.startsWith('/')) {
                url = `/${url}`;
            }
            if (baseUrl.endsWith(url)) {
                url = '';
            }
            this._url = `${baseUrl}${url}`;
        }
    }
    _create_class._(URL, [
        {
            key: "hash",
            get: function() {
                throw new Error('URL.hash is not implemented');
            }
        },
        {
            key: "host",
            get: function() {
                throw new Error('URL.host is not implemented');
            }
        },
        {
            key: "hostname",
            get: function() {
                throw new Error('URL.hostname is not implemented');
            }
        },
        {
            key: "href",
            get: function() {
                return this.toString();
            }
        },
        {
            key: "origin",
            get: function() {
                throw new Error('URL.origin is not implemented');
            }
        },
        {
            key: "password",
            get: function() {
                throw new Error('URL.password is not implemented');
            }
        },
        {
            key: "pathname",
            get: function() {
                throw new Error('URL.pathname not implemented');
            }
        },
        {
            key: "port",
            get: function() {
                throw new Error('URL.port is not implemented');
            }
        },
        {
            key: "protocol",
            get: function() {
                throw new Error('URL.protocol is not implemented');
            }
        },
        {
            key: "search",
            get: function() {
                throw new Error('URL.search is not implemented');
            }
        },
        {
            key: "searchParams",
            get: function() {
                if (this._searchParamsInstance == null) {
                    this._searchParamsInstance = new URLSearchParams();
                }
                return this._searchParamsInstance;
            }
        },
        {
            key: "toJSON",
            value: function toJSON() {
                return this.toString();
            }
        },
        {
            key: "toString",
            value: function toString() {
                if (this._searchParamsInstance === null) {
                    return this._url;
                }
                // $FlowFixMe[incompatible-use]
                var instanceString = this._searchParamsInstance.toString();
                var separator = this._url.indexOf('?') > -1 ? '&' : '?';
                return this._url + separator + instanceString;
            }
        },
        {
            key: "username",
            get: function() {
                throw new Error('URL.username is not implemented');
            }
        }
    ], [
        {
            key: "createObjectURL",
            value: function createObjectURL(blob) {
                if (BLOB_URL_PREFIX === null) {
                    throw new Error('Cannot create URL for blob!');
                }
                return `${BLOB_URL_PREFIX}${blob.data.blobId}?offset=${blob.data.offset}&size=${blob.size}`;
            }
        },
        {
            key: "revokeObjectURL",
            value: function revokeObjectURL(url) {
            // Do nothing.
            }
        }
    ]);
    return URL;
}();


}),
11363: (function (__unused_webpack_module, exports, __webpack_require__) {
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * @format
 *      
 */ // Small subset from whatwg-url: https://github.com/jsdom/whatwg-url/tree/master/src
// The reference code bloat comes from Unicode issues with URLs, so those won't work here.
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "URLSearchParams", ({
    enumerable: true,
    get: function() {
        return URLSearchParams;
    }
}));
var _class_call_check = __webpack_require__(8864);
var _create_class = __webpack_require__(93072);
var URLSearchParams = /*#__PURE__*/ function() {
    "use strict";
    function URLSearchParams(params) {
        _class_call_check._(this, URLSearchParams);
        this._searchParams = [];
        if (typeof params === 'object') {
            Object.keys(params).forEach((key)=>this.append(key, params[key]));
        }
    }
    _create_class._(URLSearchParams, [
        {
            key: "append",
            value: function append(key, value) {
                this._searchParams.push([
                    key,
                    value
                ]);
            }
        },
        {
            key: "delete",
            value: function _delete(name) {
                throw new Error('URLSearchParams.delete is not implemented');
            }
        },
        {
            key: "get",
            value: function get(name) {
                throw new Error('URLSearchParams.get is not implemented');
            }
        },
        {
            key: "getAll",
            value: function getAll(name) {
                throw new Error('URLSearchParams.getAll is not implemented');
            }
        },
        {
            key: "has",
            value: function has(name) {
                throw new Error('URLSearchParams.has is not implemented');
            }
        },
        {
            key: "set",
            value: function set(name, value) {
                throw new Error('URLSearchParams.set is not implemented');
            }
        },
        {
            key: "sort",
            value: function sort() {
                throw new Error('URLSearchParams.sort is not implemented');
            }
        },
        {
            // $FlowFixMe[unsupported-syntax]
            // $FlowFixMe[missing-local-annot]
            key: Symbol.iterator,
            value: function() {
                return this._searchParams[Symbol.iterator]();
            }
        },
        {
            key: "toString",
            value: function toString() {
                if (this._searchParams.length === 0) {
                    return '';
                }
                var last = this._searchParams.length - 1;
                return this._searchParams.reduce((acc, curr, index)=>{
                    return acc + encodeURIComponent(curr[0]) + '=' + encodeURIComponent(curr[1]) + (index === last ? '' : '&');
                }, '');
            }
        }
    ]);
    return URLSearchParams;
}();


}),
47895: (function (module, exports, __webpack_require__) {
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * @format
 *       strict-local
 */ Object.defineProperty(exports, "__esModule", ({
    value: true
}));
var _class_call_check = __webpack_require__(8864);
var _create_class = __webpack_require__(93072);
var _interop_require_default = __webpack_require__(66705);
var _sliced_to_array = __webpack_require__(78474);
var _RCTDeviceEventEmitter = /*#__PURE__*/ _interop_require_default._(__webpack_require__(75296));
var _NativeRedBox = /*#__PURE__*/ _interop_require_default._(__webpack_require__(57896));
var _NativeBugReporting = /*#__PURE__*/ _interop_require_default._(__webpack_require__(81683));
function defaultExtras() {
    BugReporting.addFileSource('react_hierarchy.txt', ()=>__webpack_require__(9094)());
}
/**
 * A simple class for collecting bug report data. Components can add sources that will be queried when a bug report
 * is created via `collectExtraData`. For example, a list component might add a source that provides the list of rows
 * that are currently visible on screen. Components should also remember to call `remove()` on the object that is
 * returned by `addSource` when they are unmounted.
 */ var BugReporting = /*#__PURE__*/ function() {
    "use strict";
    function BugReporting() {
        _class_call_check._(this, BugReporting);
    }
    _create_class._(BugReporting, null, [
        {
            key: "_maybeInit",
            value: function _maybeInit() {
                if (!BugReporting._subscription) {
                    BugReporting._subscription = _RCTDeviceEventEmitter.default.addListener('collectBugExtraData', // $FlowFixMe[method-unbinding]
                    BugReporting.collectExtraData, null);
                    defaultExtras();
                }
                if (!BugReporting._redboxSubscription) {
                    BugReporting._redboxSubscription = _RCTDeviceEventEmitter.default.addListener('collectRedBoxExtraData', // $FlowFixMe[method-unbinding]
                    BugReporting.collectExtraData, null);
                }
            }
        },
        {
            key: "addSource",
            value: /**
   * Maps a string key to a simple callback that should return a string payload to be attached
   * to a bug report. Source callbacks are called when `collectExtraData` is called.
   *
   * Returns an object to remove the source when the component unmounts.
   *
   * Conflicts trample with a warning.
   */ function addSource(key, callback) {
                return this._addSource(key, callback, BugReporting._extraSources);
            }
        },
        {
            key: "addFileSource",
            value: /**
   * Maps a string key to a simple callback that should return a string payload to be attached
   * to a bug report. Source callbacks are called when `collectExtraData` is called.
   *
   * Returns an object to remove the source when the component unmounts.
   *
   * Conflicts trample with a warning.
   */ function addFileSource(key, callback) {
                return this._addSource(key, callback, BugReporting._fileSources);
            }
        },
        {
            key: "_addSource",
            value: function _addSource(key, callback, source) {
                BugReporting._maybeInit();
                if (source.has(key)) {
                    console.warn(`BugReporting.add* called multiple times for same key '${key}'`);
                }
                source.set(key, callback);
                return {
                    remove: ()=>{
                        source.delete(key);
                    }
                };
            }
        },
        {
            key: "collectExtraData",
            value: /**
   * This can be called from a native bug reporting flow, or from JS code.
   *
   * If available, this will call `NativeModules.BugReporting.setExtraData(extraData)`
   * after collecting `extraData`.
   */ function collectExtraData() {
                var extraData = {};
                for (var ref of BugReporting._extraSources){
                    var _ref = _sliced_to_array._(ref, 2), key = _ref[0], callback = _ref[1];
                    extraData[key] = callback();
                }
                var fileData = {};
                for (var ref1 of BugReporting._fileSources){
                    var _ref1 = _sliced_to_array._(ref1, 2), key1 = _ref1[0], callback1 = _ref1[1];
                    fileData[key1] = callback1();
                }
                if (_NativeBugReporting.default != null && _NativeBugReporting.default.setExtraData != null) {
                    _NativeBugReporting.default.setExtraData(extraData, fileData);
                }
                if (_NativeRedBox.default != null && _NativeRedBox.default.setExtraData != null) {
                    _NativeRedBox.default.setExtraData(extraData, 'From BugReporting.js');
                }
                return {
                    extras: extraData,
                    files: fileData
                };
            }
        }
    ]);
    return BugReporting;
}();
BugReporting._extraSources = new Map();
BugReporting._fileSources = new Map();
BugReporting._subscription = null;
BugReporting._redboxSubscription = null;
module.exports = BugReporting;


}),
9094: (function (module) {
"use strict";
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * @format
 *       strict
 */ 
/*
const getReactData = require('getReactData');

const INDENTATION_SIZE = 2;
const MAX_DEPTH = 2;
const MAX_STRING_LENGTH = 50;
*/ /**
 * Dump all React Native root views and their content. This function tries
 * it best to get the content but ultimately relies on implementation details
 * of React and will fail in future versions.
 */ function dumpReactTree() {
    try {
        return getReactTree();
    } catch (e) {
        return 'Failed to dump react tree: ' + e;
    }
}
function getReactTree() {
    // TODO(sema): Reenable tree dumps using the Fiber tree structure. #15945684
    return 'React tree dumps have been temporarily disabled while React is ' + 'upgraded to Fiber.';
/*
  let output = '';
  const rootIds = Object.getOwnPropertyNames(ReactNativeMount._instancesByContainerID);
  for (const rootId of rootIds) {
    const instance = ReactNativeMount._instancesByContainerID[rootId];
    output += `============ Root ID: ${rootId} ============\n`;
    output += dumpNode(instance, 0);
    output += `============ End root ID: ${rootId} ============\n`;
  }
  return output;
*/ }
/*
function dumpNode(node: Object, indentation: number) {
  const data = getReactData(node);
  if (data.nodeType === 'Text') {
    return indent(indentation) + data.text + '\n';
  } else if (data.nodeType === 'Empty') {
    return '';
  }
  let output = indent(indentation) + `<${data.name}`;
  if (data.nodeType === 'Composite') {
    for (const propName of Object.getOwnPropertyNames(data.props || {})) {
      if (isNormalProp(propName)) {
        try {
          const value = convertValue(data.props[propName]);
          if (value) {
            output += ` ${propName}=${value}`;
          }
        } catch (e) {
          const message = `[Failed to get property: ${e}]`;
          output += ` ${propName}=${message}`;
        }
      }
    }
  }
  let childOutput = '';
  for (const child of data.children || []) {
    childOutput += dumpNode(child, indentation + 1);
  }

  if (childOutput) {
    output += '>\n' + childOutput + indent(indentation) + `</${data.name}>\n`;
  } else {
    output += ' />\n';
  }

  return output;
}

function isNormalProp(name: string): boolean {
  switch (name) {
    case 'children':
    case 'key':
    case 'ref':
      return false;
    default:
      return true;
  }
}

function convertObject(object: Object, depth: number) {
  if (depth >= MAX_DEPTH) {
    return '[...omitted]';
  }
  let output = '{';
  let first = true;
  for (const key of Object.getOwnPropertyNames(object)) {
    if (!first) {
      output += ', ';
    }
    output += `${key}: ${convertValue(object[key], depth + 1)}`;
    first = false;
  }
  return output + '}';
}

function convertValue(value, depth = 0): ?string {
  if (!value) {
    return null;
  }

  switch (typeof value) {
    case 'string':
      return JSON.stringify(possiblyEllipsis(value).replace('\n', '\\n'));
    case 'boolean':
    case 'number':
      return JSON.stringify(value);
    case 'function':
      return '[function]';
    case 'object':
      return convertObject(value, depth);
    default:
      return null;
  }
}

function possiblyEllipsis(value: string) {
  if (value.length > MAX_STRING_LENGTH) {
    return value.slice(0, MAX_STRING_LENGTH) + '...';
  } else {
    return value;
  }
}

function indent(size: number) {
  return ' '.repeat(size * INDENTATION_SIZE);
}
*/ module.exports = dumpReactTree;


}),
34650: (function (module, exports, __webpack_require__) {
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * @format strict-local
 *       strict-local
 */ Object.defineProperty(exports, "__esModule", ({
    value: true
}));
var _interop_require_default = __webpack_require__(66705);
var _processAspectRatio = /*#__PURE__*/ _interop_require_default._(__webpack_require__(5304));
var _processBackgroundImage = /*#__PURE__*/ _interop_require_default._(__webpack_require__(33518));
var _processBoxShadow = /*#__PURE__*/ _interop_require_default._(__webpack_require__(47204));
var _processColor = /*#__PURE__*/ _interop_require_default._(__webpack_require__(23865));
var _processFilter = /*#__PURE__*/ _interop_require_default._(__webpack_require__(62354));
var _processFontVariant = /*#__PURE__*/ _interop_require_default._(__webpack_require__(45989));
var _processTransform = /*#__PURE__*/ _interop_require_default._(__webpack_require__(88823));
var _processTransformOrigin = /*#__PURE__*/ _interop_require_default._(__webpack_require__(91166));
var _sizesDiffer = /*#__PURE__*/ _interop_require_default._(__webpack_require__(24395));
var colorAttributes = {
    process: _processColor.default
};
var ReactNativeStyleAttributes = {
    /**
   * Layout
   */ alignContent: true,
    alignItems: true,
    alignSelf: true,
    aspectRatio: {
        process: _processAspectRatio.default
    },
    borderBottomWidth: true,
    borderEndWidth: true,
    borderLeftWidth: true,
    borderRightWidth: true,
    borderStartWidth: true,
    borderTopWidth: true,
    boxSizing: true,
    columnGap: true,
    borderWidth: true,
    bottom: true,
    direction: true,
    display: true,
    end: true,
    flex: true,
    flexBasis: true,
    flexDirection: true,
    flexGrow: true,
    flexShrink: true,
    flexWrap: true,
    gap: true,
    height: true,
    inset: true,
    insetBlock: true,
    insetBlockEnd: true,
    insetBlockStart: true,
    insetInline: true,
    insetInlineEnd: true,
    insetInlineStart: true,
    justifyContent: true,
    left: true,
    margin: true,
    marginBlock: true,
    marginBlockEnd: true,
    marginBlockStart: true,
    marginBottom: true,
    marginEnd: true,
    marginHorizontal: true,
    marginInline: true,
    marginInlineEnd: true,
    marginInlineStart: true,
    marginLeft: true,
    marginRight: true,
    marginStart: true,
    marginTop: true,
    marginVertical: true,
    maxHeight: true,
    maxWidth: true,
    minHeight: true,
    minWidth: true,
    overflow: true,
    padding: true,
    paddingBlock: true,
    paddingBlockEnd: true,
    paddingBlockStart: true,
    paddingBottom: true,
    paddingEnd: true,
    paddingHorizontal: true,
    paddingInline: true,
    paddingInlineEnd: true,
    paddingInlineStart: true,
    paddingLeft: true,
    paddingRight: true,
    paddingStart: true,
    paddingTop: true,
    paddingVertical: true,
    position: true,
    right: true,
    rowGap: true,
    start: true,
    top: true,
    width: true,
    zIndex: true,
    /**
   * Shadow
   */ elevation: true,
    shadowColor: colorAttributes,
    shadowOffset: {
        diff: _sizesDiffer.default
    },
    shadowOpacity: true,
    shadowRadius: true,
    /**
   * Transform
   */ transform: {
        process: _processTransform.default
    },
    transformOrigin: {
        process: _processTransformOrigin.default
    },
    /**
   * Filter
   */ filter: {
        process: _processFilter.default
    },
    /**
   * MixBlendMode
   */ mixBlendMode: true,
    /**
   * Isolation
   */ isolation: true,
    /*
   * BoxShadow
   */ boxShadow: {
        process: _processBoxShadow.default
    },
    /**
   * Linear Gradient
   */ experimental_backgroundImage: {
        process: _processBackgroundImage.default
    },
    /**
   * View
   */ backfaceVisibility: true,
    backgroundColor: colorAttributes,
    borderBlockColor: colorAttributes,
    borderBlockEndColor: colorAttributes,
    borderBlockStartColor: colorAttributes,
    borderBottomColor: colorAttributes,
    borderBottomEndRadius: true,
    borderBottomLeftRadius: true,
    borderBottomRightRadius: true,
    borderBottomStartRadius: true,
    borderColor: colorAttributes,
    borderCurve: true,
    borderEndColor: colorAttributes,
    borderEndEndRadius: true,
    borderEndStartRadius: true,
    borderLeftColor: colorAttributes,
    borderRadius: true,
    borderRightColor: colorAttributes,
    borderStartColor: colorAttributes,
    borderStartEndRadius: true,
    borderStartStartRadius: true,
    borderStyle: true,
    borderTopColor: colorAttributes,
    borderTopEndRadius: true,
    borderTopLeftRadius: true,
    borderTopRightRadius: true,
    borderTopStartRadius: true,
    cursor: true,
    opacity: true,
    outlineColor: colorAttributes,
    outlineOffset: true,
    outlineStyle: true,
    outlineWidth: true,
    pointerEvents: true,
    /**
   * Text
   */ color: colorAttributes,
    fontFamily: true,
    fontSize: true,
    fontStyle: true,
    fontVariant: {
        process: _processFontVariant.default
    },
    fontWeight: true,
    includeFontPadding: true,
    letterSpacing: true,
    lineHeight: true,
    textAlign: true,
    textAlignVertical: true,
    textDecorationColor: colorAttributes,
    textDecorationLine: true,
    textDecorationStyle: true,
    textShadowColor: colorAttributes,
    textShadowOffset: true,
    textShadowRadius: true,
    textTransform: true,
    userSelect: true,
    verticalAlign: true,
    writingDirection: true,
    /**
   * Image
   */ overlayColor: colorAttributes,
    resizeMode: true,
    tintColor: colorAttributes,
    objectFit: true
};
module.exports = ReactNativeStyleAttributes;


}),
87847: (function (module, exports, __webpack_require__) {
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * @format
 *       strict-local
 */ Object.defineProperty(exports, "__esModule", ({
    value: true
}));
var _interop_require_default = __webpack_require__(66705);
var _interop_require_wildcard = __webpack_require__(83610);
var _object_spread = __webpack_require__(36192);
var _object_spread_props = __webpack_require__(83590);
var _object_without_properties = __webpack_require__(86136);
var _jsxruntime = __webpack_require__(70095);
var _TextAncestor = /*#__PURE__*/ _interop_require_default._(__webpack_require__(86981));
var _ViewNativeComponent = /*#__PURE__*/ _interop_require_default._(__webpack_require__(99318));
var _react = /*#__PURE__*/ _interop_require_wildcard._(__webpack_require__(31399));
/**
 * The most fundamental component for building a UI, View is a container that
 * supports layout with flexbox, style, some touch handling, and accessibility
 * controls.
 *
 * @see https://reactnative.dev/docs/view
 */ var View = /*#__PURE__*/ _react.forwardRef((_param, forwardedRef)=>{
    var accessibilityElementsHidden = _param.accessibilityElementsHidden, accessibilityLabel = _param.accessibilityLabel, accessibilityLabelledBy = _param.accessibilityLabelledBy, accessibilityLiveRegion = _param.accessibilityLiveRegion, accessibilityState = _param.accessibilityState, accessibilityValue = _param.accessibilityValue, ariaBusy = _param['aria-busy'], ariaChecked = _param['aria-checked'], ariaDisabled = _param['aria-disabled'], ariaExpanded = _param['aria-expanded'], ariaHidden = _param['aria-hidden'], ariaLabel = _param['aria-label'], ariaLabelledBy = _param['aria-labelledby'], ariaLive = _param['aria-live'], ariaSelected = _param['aria-selected'], ariaValueMax = _param['aria-valuemax'], ariaValueMin = _param['aria-valuemin'], ariaValueNow = _param['aria-valuenow'], ariaValueText = _param['aria-valuetext'], focusable = _param.focusable, id = _param.id, importantForAccessibility = _param.importantForAccessibility, nativeID = _param.nativeID, tabIndex = _param.tabIndex, otherProps = _object_without_properties._(_param, [
        "accessibilityElementsHidden",
        "accessibilityLabel",
        "accessibilityLabelledBy",
        "accessibilityLiveRegion",
        "accessibilityState",
        "accessibilityValue",
        'aria-busy',
        'aria-checked',
        'aria-disabled',
        'aria-expanded',
        'aria-hidden',
        'aria-label',
        'aria-labelledby',
        'aria-live',
        'aria-selected',
        'aria-valuemax',
        'aria-valuemin',
        'aria-valuenow',
        'aria-valuetext',
        "focusable",
        "id",
        "importantForAccessibility",
        "nativeID",
        "tabIndex"
    ]);
    var hasTextAncestor = _react.useContext(_TextAncestor.default);
    var _accessibilityLabelledBy = (ariaLabelledBy === null || ariaLabelledBy === void 0 ? void 0 : ariaLabelledBy.split(/\s*,\s*/g)) ?? accessibilityLabelledBy;
    var _accessibilityState;
    if (accessibilityState != null || ariaBusy != null || ariaChecked != null || ariaDisabled != null || ariaExpanded != null || ariaSelected != null) {
        _accessibilityState = {
            busy: ariaBusy ?? (accessibilityState === null || accessibilityState === void 0 ? void 0 : accessibilityState.busy),
            checked: ariaChecked ?? (accessibilityState === null || accessibilityState === void 0 ? void 0 : accessibilityState.checked),
            disabled: ariaDisabled ?? (accessibilityState === null || accessibilityState === void 0 ? void 0 : accessibilityState.disabled),
            expanded: ariaExpanded ?? (accessibilityState === null || accessibilityState === void 0 ? void 0 : accessibilityState.expanded),
            selected: ariaSelected ?? (accessibilityState === null || accessibilityState === void 0 ? void 0 : accessibilityState.selected)
        };
    }
    var _accessibilityValue;
    if (accessibilityValue != null || ariaValueMax != null || ariaValueMin != null || ariaValueNow != null || ariaValueText != null) {
        _accessibilityValue = {
            max: ariaValueMax ?? (accessibilityValue === null || accessibilityValue === void 0 ? void 0 : accessibilityValue.max),
            min: ariaValueMin ?? (accessibilityValue === null || accessibilityValue === void 0 ? void 0 : accessibilityValue.min),
            now: ariaValueNow ?? (accessibilityValue === null || accessibilityValue === void 0 ? void 0 : accessibilityValue.now),
            text: ariaValueText ?? (accessibilityValue === null || accessibilityValue === void 0 ? void 0 : accessibilityValue.text)
        };
    }
    var actualView = /*#__PURE__*/ (0, _jsxruntime.jsx)(_ViewNativeComponent.default, _object_spread_props._(_object_spread._({}, otherProps), {
        accessibilityLiveRegion: ariaLive === 'off' ? 'none' : ariaLive ?? accessibilityLiveRegion,
        accessibilityLabel: ariaLabel ?? accessibilityLabel,
        focusable: tabIndex !== undefined ? !tabIndex : focusable,
        accessibilityState: _accessibilityState,
        accessibilityElementsHidden: ariaHidden ?? accessibilityElementsHidden,
        accessibilityLabelledBy: _accessibilityLabelledBy,
        accessibilityValue: _accessibilityValue,
        importantForAccessibility: ariaHidden === true ? 'no-hide-descendants' : importantForAccessibility,
        nativeID: id ?? nativeID,
        ref: forwardedRef
    }));
    if (hasTextAncestor) {
        return /*#__PURE__*/ (0, _jsxruntime.jsx)(_TextAncestor.default.Provider, {
            value: false,
            children: actualView
        });
    }
    return actualView;
});
View.displayName = 'View';
module.exports = View;


}),
20042: (function (module, exports, __webpack_require__) {
"use strict";
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * @format
 *       strict
 */ 
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
var _object_spread = __webpack_require__(36192);
var _object_spread_props = __webpack_require__(83590);
var parseHermesStack = __webpack_require__(26290);
function convertHermesStack(stack) {
    var frames = [];
    for (var entry of stack.entries){
        if (entry.type !== 'FRAME') {
            continue;
        }
        var location = entry.location, functionName = entry.functionName;
        if (location.type === 'NATIVE' || location.type === 'INTERNAL_BYTECODE') {
            continue;
        }
        frames.push({
            methodName: functionName,
            file: location.sourceUrl,
            lineNumber: location.line1Based,
            column: location.type === 'SOURCE' ? location.column1Based - 1 : location.virtualOffset0Based
        });
    }
    return frames;
}
function parseErrorStack(errorStack) {
    if (errorStack == null) {
        return [];
    }
    var stacktraceParser = __webpack_require__(18881);
    var parsedStack = Array.isArray(errorStack) ? errorStack : __webpack_require__.g.HermesInternal ? convertHermesStack(parseHermesStack(errorStack)) : stacktraceParser.parse(errorStack).map((frame)=>_object_spread_props._(_object_spread._({}, frame), {
            column: frame.column != null ? frame.column - 1 : null
        }));
    return parsedStack;
}
module.exports = parseErrorStack;


}),
26290: (function (module) {
"use strict";
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * @format
 *       strict
 */ 
// Capturing groups:
// 1. function name
// 2. is this a native stack frame?
// 3. is this a bytecode address or a source location?
// 4. source URL (filename)
// 5. line number (1 based)
// 6. column number (1 based) or virtual offset (0 based)
var RE_FRAME = /^ {4}at (.+?)(?: \((native)\)?| \((address at )?(.*?):(\d+):(\d+)\))$/;
// Capturing groups:
// 1. count of skipped frames
var RE_SKIPPED = /^ {4}... skipping (\d+) frames$/;
var RE_COMPONENT_NO_STACK = /^ {4}at .*$/;
function isInternalBytecodeSourceUrl(sourceUrl) {
    // See https://github.com/facebook/hermes/blob/3332fa020cae0bab751f648db7c94e1d687eeec7/lib/VM/Runtime.cpp#L1100
    return sourceUrl === 'InternalBytecode.js';
}
function parseLine(line) {
    var asFrame = line.match(RE_FRAME);
    if (asFrame) {
        return {
            type: 'FRAME',
            functionName: asFrame[1],
            location: asFrame[2] === 'native' ? {
                type: 'NATIVE'
            } : asFrame[3] === 'address at ' ? isInternalBytecodeSourceUrl(asFrame[4]) ? {
                type: 'INTERNAL_BYTECODE',
                sourceUrl: asFrame[4],
                line1Based: Number.parseInt(asFrame[5], 10),
                virtualOffset0Based: Number.parseInt(asFrame[6], 10)
            } : {
                type: 'BYTECODE',
                sourceUrl: asFrame[4],
                line1Based: Number.parseInt(asFrame[5], 10),
                virtualOffset0Based: Number.parseInt(asFrame[6], 10)
            } : {
                type: 'SOURCE',
                sourceUrl: asFrame[4],
                line1Based: Number.parseInt(asFrame[5], 10),
                column1Based: Number.parseInt(asFrame[6], 10)
            }
        };
    }
    var asSkipped = line.match(RE_SKIPPED);
    if (asSkipped) {
        return {
            type: 'SKIPPED',
            count: Number.parseInt(asSkipped[1], 10)
        };
    }
}
module.exports = function parseHermesStack(stack) {
    var lines = stack.split(/\n/);
    var entries = [];
    var lastMessageLine = -1;
    for(var i = 0; i < lines.length; ++i){
        var line = lines[i];
        if (!line) {
            continue;
        }
        var entry = parseLine(line);
        if (entry) {
            entries.push(entry);
            continue;
        }
        if (RE_COMPONENT_NO_STACK.test(line)) {
            continue;
        }
        // No match - we're still in the message
        lastMessageLine = i;
        entries = [];
    }
    var message = lines.slice(0, lastMessageLine + 1).join('\n');
    return {
        message,
        entries
    };
};


}),
48065: (function (module, exports, __webpack_require__) {
"use strict";
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * @format
 *       strict
 */ 
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
var _call_super = __webpack_require__(19436);
var _class_call_check = __webpack_require__(8864);
var _inherits = __webpack_require__(82397);
var _object_spread = __webpack_require__(36192);
var _object_spread_props = __webpack_require__(83590);
var _to_consumable_array = __webpack_require__(92716);
var _wrap_native_super = __webpack_require__(30753);
var SyntheticError = /*#__PURE__*/ function(Error1) {
    _inherits._(SyntheticError, Error1);
    function SyntheticError() {
        _class_call_check._(this, SyntheticError);
        var _this;
        _this = _call_super._(this, SyntheticError, arguments), _this.name = '';
        return _this;
    }
    return SyntheticError;
}(_wrap_native_super._(Error));
var userExceptionDecorator;
var inUserExceptionDecorator = false;
// This string is used to decorate an ExtendedError with extra data in select usecases.
// Note that data passed using this method should be strictly contained,
// as data that's not serializable/too large may cause issues with passing the error to the native code.
// TODO(T204185517): We should use a Symbol for this, but jsi through jsc doesn't support it yet.
var decoratedExtraDataKey = 'RN$ErrorExtraDataKey';
/**
 * Allows the app to add information to the exception report before it is sent
 * to native. This API is not final.
 */ function unstable_setExceptionDecorator(exceptionDecorator) {
    userExceptionDecorator = exceptionDecorator;
}
function preprocessException(data) {
    if (userExceptionDecorator && !inUserExceptionDecorator) {
        inUserExceptionDecorator = true;
        try {
            return userExceptionDecorator(data);
        } catch  {
        // Fall through
        } finally{
            inUserExceptionDecorator = false;
        }
    }
    return data;
}
/**
 * Handles the developer-visible aspect of errors and exceptions
 */ var exceptionID = 0;
function reportException(e, isFatal, reportToConsole) {
    var parseErrorStack = __webpack_require__(20042);
    var stack = parseErrorStack(e === null || e === void 0 ? void 0 : e.stack);
    var currentExceptionID = ++exceptionID;
    var originalMessage = e.message || '';
    var message = originalMessage;
    if (e.componentStack != null) {
        message += `\n\nThis error is located at:${e.componentStack}`;
    }
    var namePrefix = e.name == null || e.name === '' ? '' : `${e.name}: `;
    if (!message.startsWith(namePrefix)) {
        message = namePrefix + message;
    }
    message = e.jsEngine == null ? message : `${message}, js engine: ${e.jsEngine}`;
    // $FlowFixMe[unclear-type]
    var extraData = _object_spread_props._(_object_spread._({}, e[decoratedExtraDataKey]), {
        jsEngine: e.jsEngine,
        rawStack: e.stack
    });
    if (e.cause != null && typeof e.cause === 'object') {
        extraData.stackSymbols = e.cause.stackSymbols;
        extraData.stackReturnAddresses = e.cause.stackReturnAddresses;
        extraData.stackElements = e.cause.stackElements;
    }
    var data = preprocessException({
        message,
        originalMessage: message === originalMessage ? null : originalMessage,
        name: e.name == null || e.name === '' ? null : e.name,
        componentStack: typeof e.componentStack === 'string' ? e.componentStack : null,
        stack,
        id: currentExceptionID,
        isFatal,
        extraData
    });
    if (reportToConsole) {
        // we feed back into console.error, to make sure any methods that are
        // monkey patched on top of console.error are called when coming from
        // handleException
        console.error(data.message);
    }
    if (false) { var LogBox } else if (isFatal || e.type !== 'warn') {
        var NativeExceptionsManager = (__webpack_require__(83822)/* ["default"] */["default"]);
        if (NativeExceptionsManager) {
            if (isFatal) {
                var _global_RN$hasHandledFatalException, _global, _global_RN$notifyOfFatalException, _global1;
                if ((_global_RN$hasHandledFatalException = (_global = __webpack_require__.g).RN$hasHandledFatalException) === null || _global_RN$hasHandledFatalException === void 0 ? void 0 : _global_RN$hasHandledFatalException.call(_global)) {
                    return;
                }
                (_global_RN$notifyOfFatalException = (_global1 = __webpack_require__.g).RN$notifyOfFatalException) === null || _global_RN$notifyOfFatalException === void 0 ? void 0 : _global_RN$notifyOfFatalException.call(_global1);
            }
            NativeExceptionsManager.reportException(data);
        }
    }
}
// If we trigger console.error _from_ handleException,
// we do want to make sure that console.error doesn't trigger error reporting again
var inExceptionHandler = false;
/**
 * Logs exceptions to the (native) console and displays them
 */ function handleException(e, isFatal) {
    // TODO(T196834299): We should really use a c++ turbomodule for this
    var reportToConsole = true;
    if (!__webpack_require__.g.RN$handleException || !__webpack_require__.g.RN$handleException(e, isFatal, reportToConsole)) {
        var error;
        if (e instanceof Error) {
            error = e;
        } else {
            // Workaround for reporting errors caused by `throw 'some string'`
            // Unfortunately there is no way to figure out the stacktrace in this
            // case, so if you ended up here trying to trace an error, look for
            // `throw '<error message>'` somewhere in your codebase.
            error = new SyntheticError(e);
        }
        try {
            inExceptionHandler = true;
            /* $FlowFixMe[class-object-subtyping] added when improving typing for this
       * parameters */ // $FlowFixMe[incompatible-call]
            reportException(error, isFatal, reportToConsole);
        } finally{
            inExceptionHandler = false;
        }
    }
}
/* $FlowFixMe[missing-local-annot] The type annotation(s) required by Flow's
 * LTI update could not be added via codemod */ function reactConsoleErrorHandler(...args) {
    var // bubble up to any original handlers
    _console;
    var _global_RN$inExceptionHandler, _global;
    (_console = console)._errorOriginal.apply(_console, _to_consumable_array._(args));
    if (!console.reportErrorsAsExceptions) {
        return;
    }
    if (inExceptionHandler || ((_global_RN$inExceptionHandler = (_global = __webpack_require__.g).RN$inExceptionHandler) === null || _global_RN$inExceptionHandler === void 0 ? void 0 : _global_RN$inExceptionHandler.call(_global))) {
        // The fundamental trick here is that are multiple entry point to logging errors:
        // (see D19743075 for more background)
        //
        // 1. An uncaught exception being caught by the global handler
        // 2. An error being logged throw console.error
        //
        // However, console.error is monkey patched multiple times: by this module, and by the
        // DevTools setup that sends messages to Metro.
        // The patching order cannot be relied upon.
        //
        // So, some scenarios that are handled by this flag:
        //
        // Logging an error:
        // 1. console.error called from user code
        // 2. (possibly) arrives _first_ at DevTool handler, send to Metro
        // 3. Bubbles to here
        // 4. goes into report Exception.
        // 5. should not trigger console.error again, to avoid looping / logging twice
        // 6. should still bubble up to original console
        //    (which might either be console.log, or the DevTools handler in case it patched _earlier_ and (2) didn't happen)
        //
        // Throwing an uncaught exception:
        // 1. exception thrown
        // 2. picked up by handleException
        // 3. should be sent to console.error (not console._errorOriginal, as DevTools might have patched _later_ and it needs to send it to Metro)
        // 4. that _might_ bubble again to the `reactConsoleErrorHandle` defined here
        //    -> should not handle exception _again_, to avoid looping / showing twice (this code branch)
        // 5. should still bubble up to original console (which might either be console.log, or the DevTools handler in case that one patched _earlier_)
        return;
    }
    var error;
    var firstArg = args[0];
    if (firstArg === null || firstArg === void 0 ? void 0 : firstArg.stack) {
        // reportException will console.error this with high enough fidelity.
        error = firstArg;
    } else {
        var stringifySafe = (__webpack_require__(47264)/* ["default"] */["default"]);
        if (typeof firstArg === 'string' && firstArg.startsWith('Warning: ')) {
            // React warnings use console.error so that a stack trace is shown, but
            // we don't (currently) want these to show a redbox
            // (Note: Logic duplicated in polyfills/console.js.)
            return;
        }
        var message = args.map((arg)=>typeof arg === 'string' ? arg : stringifySafe(arg)).join(' ');
        error = new SyntheticError(message);
        error.name = 'console.error';
    }
    var isFatal = false;
    var reportToConsole = false;
    if (!__webpack_require__.g.RN$handleException || !__webpack_require__.g.RN$handleException(error, isFatal, reportToConsole)) {
        reportException(/* $FlowFixMe[class-object-subtyping] added when improving typing for this
       * parameters */ // $FlowFixMe[incompatible-call]
        error, isFatal, reportToConsole);
    }
}
/**
 * Shows a redbox with stacktrace for all console.error messages.  Disable by
 * setting `console.reportErrorsAsExceptions = false;` in your app.
 */ function installConsoleErrorReporter() {
    // Enable reportErrorsAsExceptions
    if (console._errorOriginal) {
        return; // already installed
    }
    // Flow doesn't like it when you set arbitrary values on a global object
    console._errorOriginal = console.error.bind(console);
    console.error = reactConsoleErrorHandler;
    if (console.reportErrorsAsExceptions === undefined) {
        // Individual apps can disable this
        // Flow doesn't like it when you set arbitrary values on a global object
        console.reportErrorsAsExceptions = true;
    }
}
module.exports = {
    decoratedExtraDataKey,
    handleException,
    installConsoleErrorReporter,
    SyntheticError,
    unstable_setExceptionDecorator
};


}),
61890: (function (__unused_webpack_module, __unused_webpack_exports, __webpack_require__) {
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * @format
 *       strict-local
 */ 'use client';
/**
 * Sets up global variables typical in most JavaScript environments.
 *
 *   1. Global timers (via `setTimeout` etc).
 *   2. Global console object.
 *   3. Hooks for printing stack traces with source maps.
 *
 * Leaves enough room in the environment for implementing your own:
 *
 *   1. Require system.
 *   2. Bridged modules.
 *
 */ 'use strict';
var start = Date.now();
__webpack_require__(29968);
(__webpack_require__(38213)/* ["default"] */["default"])();
__webpack_require__(38078);
__webpack_require__(46898);
__webpack_require__(26087);
__webpack_require__(20553);
__webpack_require__(44339);
__webpack_require__(5453);
__webpack_require__(13503);
__webpack_require__(9871);
__webpack_require__(48714);
__webpack_require__(75636);
if (false) {}
__webpack_require__(80037);
var GlobalPerformanceLogger = __webpack_require__(27160);
// We could just call GlobalPerformanceLogger.markPoint at the top of the file,
// but then we'd be excluding the time it took to require the logger.
// Instead, we just use Date.now and backdate the timestamp.
GlobalPerformanceLogger.markPoint('initializeCore_start', GlobalPerformanceLogger.currentTimestamp() - (Date.now() - start));
GlobalPerformanceLogger.markPoint('initializeCore_end');


}),
69136: (function (module, exports, __webpack_require__) {
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * @format
 *      
 */ Object.defineProperty(exports, "__esModule", ({
    value: true
}));
var _interop_require_default = __webpack_require__(66705);
var _NativeTiming = /*#__PURE__*/ _interop_require_default._(__webpack_require__(90399));
var BatchedBridge = __webpack_require__(63531);
var Systrace = __webpack_require__(725);
var invariant = __webpack_require__(56481);
/**
 * JS implementation of timer functions. Must be completely driven by an
 * external clock signal, all that's stored here is timerID, timer type, and
 * callback.
 */ // These timing constants should be kept in sync with the ones in native ios and
// android `RCTTiming` module.
var FRAME_DURATION = 1000 / 60;
var IDLE_CALLBACK_FRAME_DEADLINE = 1;
// Parallel arrays
var callbacks = [];
var types = [];
var timerIDs = [];
var reactNativeMicrotasks = [];
var requestIdleCallbacks = [];
var requestIdleCallbackTimeouts = {};
var GUID = 1;
var errors = [];
var hasEmittedTimeDriftWarning = false;
// Returns a free index if one is available, and the next consecutive index otherwise.
function _getFreeIndex() {
    var freeIndex = timerIDs.indexOf(null);
    if (freeIndex === -1) {
        freeIndex = timerIDs.length;
    }
    return freeIndex;
}
function _allocateCallback(func, type) {
    var id = GUID++;
    var freeIndex = _getFreeIndex();
    timerIDs[freeIndex] = id;
    callbacks[freeIndex] = func;
    types[freeIndex] = type;
    return id;
}
/**
 * Calls the callback associated with the ID. Also unregister that callback
 * if it was a one time timer (setTimeout), and not unregister it if it was
 * recurring (setInterval).
 */ function _callTimer(timerID, frameTime, didTimeout) {
    if (timerID > GUID) {
        console.warn('Tried to call timer with ID %s but no such timer exists.', timerID);
    }
    // timerIndex of -1 means that no timer with that ID exists. There are
    // two situations when this happens, when a garbage timer ID was given
    // and when a previously existing timer was deleted before this callback
    // fired. In both cases we want to ignore the timer id, but in the former
    // case we warn as well.
    var timerIndex = timerIDs.indexOf(timerID);
    if (timerIndex === -1) {
        return;
    }
    var type = types[timerIndex];
    var callback = callbacks[timerIndex];
    if (!callback || !type) {
        console.error('No callback found for timerID ' + timerID);
        return;
    }
    if (false) {}
    // Clear the metadata
    if (type !== 'setInterval') {
        _clearIndex(timerIndex);
    }
    try {
        if (type === 'setTimeout' || type === 'setInterval' || type === 'queueReactNativeMicrotask') {
            callback();
        } else if (type === 'requestAnimationFrame') {
            callback(__webpack_require__.g.performance.now());
        } else if (type === 'requestIdleCallback') {
            callback({
                timeRemaining: function() {
                    // TODO: Optimisation: allow running for longer than one frame if
                    // there are no pending JS calls on the bridge from native. This
                    // would require a way to check the bridge queue synchronously.
                    return Math.max(0, FRAME_DURATION - (__webpack_require__.g.performance.now() - frameTime));
                },
                didTimeout: !!didTimeout
            });
        } else {
            console.error('Tried to call a callback with invalid type: ' + type);
        }
    } catch (e) {
        // Don't rethrow so that we can run all timers.
        errors.push(e);
    }
    if (false) {}
}
/**
 * Performs a single pass over the enqueued reactNativeMicrotasks. Returns whether
 * more reactNativeMicrotasks are queued up (can be used as a condition a while loop).
 */ function _callReactNativeMicrotasksPass() {
    if (reactNativeMicrotasks.length === 0) {
        return false;
    }
    if (false) {}
    // The main reason to extract a single pass is so that we can track
    // in the system trace
    var passReactNativeMicrotasks = reactNativeMicrotasks;
    reactNativeMicrotasks = [];
    // Use for loop rather than forEach as per @vjeux's advice
    // https://github.com/facebook/react-native/commit/c8fd9f7588ad02d2293cac7224715f4af7b0f352#commitcomment-14570051
    for(var i = 0; i < passReactNativeMicrotasks.length; ++i){
        _callTimer(passReactNativeMicrotasks[i], 0);
    }
    if (false) {}
    return reactNativeMicrotasks.length > 0;
}
function _clearIndex(i) {
    timerIDs[i] = null;
    callbacks[i] = null;
    types[i] = null;
}
function _freeCallback(timerID) {
    // timerIDs contains nulls after timers have been removed;
    // ignore nulls upfront so indexOf doesn't find them
    if (timerID == null) {
        return;
    }
    var index = timerIDs.indexOf(timerID);
    // See corresponding comment in `callTimers` for reasoning behind this
    if (index !== -1) {
        var type = types[index];
        _clearIndex(index);
        if (type !== 'queueReactNativeMicrotask' && type !== 'requestIdleCallback') {
            deleteTimer(timerID);
        }
    }
}
/**
 * JS implementation of timer functions. Must be completely driven by an
 * external clock signal, all that's stored here is timerID, timer type, and
 * callback.
 */ var JSTimers = {
    /**
   * @param {function} func Callback to be invoked after `duration` ms.
   * @param {number} duration Number of milliseconds.
   */ setTimeout: function(func, duration, ...args) {
        var id = _allocateCallback(()=>func.apply(undefined, args), 'setTimeout');
        createTimer(id, duration || 0, Date.now(), /* recurring */ false);
        return id;
    },
    /**
   * @param {function} func Callback to be invoked every `duration` ms.
   * @param {number} duration Number of milliseconds.
   */ setInterval: function(func, duration, ...args) {
        var id = _allocateCallback(()=>func.apply(undefined, args), 'setInterval');
        createTimer(id, duration || 0, Date.now(), /* recurring */ true);
        return id;
    },
    /**
   * The React Native microtask mechanism is used to back public APIs e.g.
   * `queueMicrotask`, `clearImmediate`, and `setImmediate` (which is used by
   * the Promise polyfill) when the JSVM microtask mechanism is not used.
   *
   * @param {function} func Callback to be invoked before the end of the
   * current JavaScript execution loop.
   */ queueReactNativeMicrotask: function(func, ...args) {
        var id = _allocateCallback(()=>func.apply(undefined, args), 'queueReactNativeMicrotask');
        reactNativeMicrotasks.push(id);
        return id;
    },
    /**
   * @param {function} func Callback to be invoked every frame.
   */ requestAnimationFrame: function(func) {
        var id = _allocateCallback(func, 'requestAnimationFrame');
        createTimer(id, 1, Date.now(), /* recurring */ false);
        return id;
    },
    /**
   * @param {function} func Callback to be invoked every frame and provided
   * with time remaining in frame.
   * @param {?object} options
   */ requestIdleCallback: function(func, options) {
        if (requestIdleCallbacks.length === 0) {
            setSendIdleEvents(true);
        }
        var timeout = options && options.timeout;
        var id = _allocateCallback(timeout != null ? (deadline)=>{
            var timeoutId = requestIdleCallbackTimeouts[id];
            if (timeoutId) {
                JSTimers.clearTimeout(timeoutId);
                delete requestIdleCallbackTimeouts[id];
            }
            return func(deadline);
        } : func, 'requestIdleCallback');
        requestIdleCallbacks.push(id);
        if (timeout != null) {
            var timeoutId = JSTimers.setTimeout(()=>{
                var index = requestIdleCallbacks.indexOf(id);
                if (index > -1) {
                    requestIdleCallbacks.splice(index, 1);
                    _callTimer(id, __webpack_require__.g.performance.now(), true);
                }
                delete requestIdleCallbackTimeouts[id];
                if (requestIdleCallbacks.length === 0) {
                    setSendIdleEvents(false);
                }
            }, timeout);
            requestIdleCallbackTimeouts[id] = timeoutId;
        }
        return id;
    },
    cancelIdleCallback: function(timerID) {
        _freeCallback(timerID);
        var index = requestIdleCallbacks.indexOf(timerID);
        if (index !== -1) {
            requestIdleCallbacks.splice(index, 1);
        }
        var timeoutId = requestIdleCallbackTimeouts[timerID];
        if (timeoutId) {
            JSTimers.clearTimeout(timeoutId);
            delete requestIdleCallbackTimeouts[timerID];
        }
        if (requestIdleCallbacks.length === 0) {
            setSendIdleEvents(false);
        }
    },
    clearTimeout: function(timerID) {
        _freeCallback(timerID);
    },
    clearInterval: function(timerID) {
        _freeCallback(timerID);
    },
    clearReactNativeMicrotask: function(timerID) {
        _freeCallback(timerID);
        var index = reactNativeMicrotasks.indexOf(timerID);
        if (index !== -1) {
            reactNativeMicrotasks.splice(index, 1);
        }
    },
    cancelAnimationFrame: function(timerID) {
        _freeCallback(timerID);
    },
    /**
   * This is called from the native side. We are passed an array of timerIDs,
   * and
   */ callTimers: function(timersToCall) {
        invariant(timersToCall.length !== 0, 'Cannot call `callTimers` with an empty list of IDs.');
        errors.length = 0;
        for(var i = 0; i < timersToCall.length; i++){
            _callTimer(timersToCall[i], 0);
        }
        var errorCount = errors.length;
        if (errorCount > 0) {
            if (errorCount > 1) {
                // Throw all the other errors in a setTimeout, which will throw each
                // error one at a time
                for(var ii = 1; ii < errorCount; ii++){
                    JSTimers.setTimeout(((error)=>{
                        throw error;
                    }).bind(null, errors[ii]), 0);
                }
            }
            throw errors[0];
        }
    },
    callIdleCallbacks: function(frameTime) {
        if (FRAME_DURATION - (Date.now() - frameTime) < IDLE_CALLBACK_FRAME_DEADLINE) {
            return;
        }
        errors.length = 0;
        if (requestIdleCallbacks.length > 0) {
            var passIdleCallbacks = requestIdleCallbacks;
            requestIdleCallbacks = [];
            for(var i = 0; i < passIdleCallbacks.length; ++i){
                _callTimer(passIdleCallbacks[i], frameTime);
            }
        }
        if (requestIdleCallbacks.length === 0) {
            setSendIdleEvents(false);
        }
        errors.forEach((error)=>JSTimers.setTimeout(()=>{
                throw error;
            }, 0));
    },
    /**
   * This is called after we execute any command we receive from native but
   * before we hand control back to native.
   */ callReactNativeMicrotasks () {
        errors.length = 0;
        while(_callReactNativeMicrotasksPass()){}
        errors.forEach((error)=>JSTimers.setTimeout(()=>{
                throw error;
            }, 0));
    },
    /**
   * Called from native (in development) when environment times are out-of-sync.
   */ emitTimeDriftWarning (warningMessage) {
        if (hasEmittedTimeDriftWarning) {
            return;
        }
        hasEmittedTimeDriftWarning = true;
        console.warn(warningMessage);
    }
};
function createTimer(callbackID, duration, jsSchedulingTime, repeats) {
    invariant(_NativeTiming.default, 'NativeTiming is available');
    _NativeTiming.default.createTimer(callbackID, duration, jsSchedulingTime, repeats);
}
function deleteTimer(timerID) {
    invariant(_NativeTiming.default, 'NativeTiming is available');
    _NativeTiming.default.deleteTimer(timerID);
}
function setSendIdleEvents(sendIdleEvents) {
    invariant(_NativeTiming.default, 'NativeTiming is available');
    _NativeTiming.default.setSendIdleEvents(sendIdleEvents);
}
var ExportedJSTimers;
if (!_NativeTiming.default) {
    console.warn("Timing native module is not available, can't set timers.");
    // $FlowFixMe[prop-missing] : we can assume timers are generally available
    ExportedJSTimers = {
        callReactNativeMicrotasks: JSTimers.callReactNativeMicrotasks,
        queueReactNativeMicrotask: JSTimers.queueReactNativeMicrotask
    };
} else {
    ExportedJSTimers = JSTimers;
}
BatchedBridge.setReactNativeMicrotasksCallback(JSTimers.callReactNativeMicrotasks);
module.exports = ExportedJSTimers;


}),
76869: (function (module, __unused_webpack_exports, __webpack_require__) {
"use strict";
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * @format
 *      
 */ 
// Globally Unique Immediate ID.
var GUIID = 1;
// A global set of the currently cleared immediates.
var clearedImmediates = new Set();
/**
 * Shim the setImmediate API on top of queueMicrotask.
 * @param {function} func Callback to be invoked before the end of the
 * current JavaScript execution loop.
 */ function setImmediate(callback, ...args) {
    if (arguments.length < 1) {
        throw new TypeError('setImmediate must be called with at least one argument (a function to call)');
    }
    if (typeof callback !== 'function') {
        throw new TypeError('The first argument to setImmediate must be a function.');
    }
    var id = GUIID++;
    // This is an edgey case in which the sequentially assigned ID has been
    // "guessed" and "cleared" ahead of time, so we need to clear it up first.
    if (clearedImmediates.has(id)) {
        clearedImmediates.delete(id);
    }
    // $FlowFixMe[incompatible-call]
    __webpack_require__.g.queueMicrotask(()=>{
        if (!clearedImmediates.has(id)) {
            callback.apply(undefined, args);
        } else {
            // Free up the Set entry.
            clearedImmediates.delete(id);
        }
    });
    return id;
}
/**
 * @param {number} immediateID The ID of the immediate to be clearred.
 */ function clearImmediate(immediateID) {
    clearedImmediates.add(immediateID);
}
var immediateShim = {
    setImmediate: setImmediate,
    clearImmediate: clearImmediate
};
module.exports = immediateShim;


}),
73370: (function (__unused_webpack_module, exports) {
"use strict";
var __webpack_unused_export__;
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * @format
 *      
 */ 
__webpack_unused_export__ = ({
    value: true
});
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return queueMicrotask;
    }
}));
var resolvedPromise;
function queueMicrotask(callback) {
    if (arguments.length < 1) {
        throw new TypeError('queueMicrotask must be called with at least one argument (a function to call)');
    }
    if (typeof callback !== 'function') {
        throw new TypeError('The argument to queueMicrotask must be a function.');
    }
    // Try to reuse a lazily allocated resolved promise from closure.
    (resolvedPromise || (resolvedPromise = Promise.resolve())).then(callback).catch((error)=>// Report the exception until the next tick.
        setTimeout(()=>{
            throw error;
        }, 0));
}


}),
26087: (function (__unused_webpack_module, __unused_webpack_exports, __webpack_require__) {
"use strict";
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 *       strict
 * @format
 */ 
var _global_HermesInternal_hasPromise, _global_HermesInternal, _global;
var polyfillGlobal = (__webpack_require__(23223)/* .polyfillGlobal */.polyfillGlobal);
/**
 * Set up Promise. The native Promise implementation throws the following error:
 * ERROR: Event loop not supported.
 *
 * If you don't need these polyfills, don't use InitializeCore; just directly
 * require the modules you need from InitializeCore for setup.
 */ // If global.Promise is provided by Hermes, we are confident that it can provide
// all the methods needed by React Native, so we can directly use it.
if ((_global = __webpack_require__.g) === null || _global === void 0 ? void 0 : (_global_HermesInternal = _global.HermesInternal) === null || _global_HermesInternal === void 0 ? void 0 : (_global_HermesInternal_hasPromise = _global_HermesInternal.hasPromise) === null || _global_HermesInternal_hasPromise === void 0 ? void 0 : _global_HermesInternal_hasPromise.call(_global_HermesInternal)) {
    var HermesPromise = __webpack_require__.g.Promise;
    if (false) { var _global_HermesInternal_enablePromiseRejectionTracker, _global_HermesInternal1 }
} else {
    polyfillGlobal('Promise', ()=>__webpack_require__(68717));
}


}),
23882: (function (__unused_webpack_module, exports, __webpack_require__) {
"use strict";
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 *       strict-local
 * @format
 */ 
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return _default;
    }
}));
var registerCallableModule = function() {
    if (__webpack_require__.g.RN$Bridgeless === true) {
        return (name, moduleOrFactory)=>{
            if (typeof moduleOrFactory === 'function') {
                __webpack_require__.g.RN$registerCallableModule(name, moduleOrFactory);
                return;
            }
            __webpack_require__.g.RN$registerCallableModule(name, ()=>moduleOrFactory);
        };
    }
    var BatchedBridge = __webpack_require__(63531);
    return (name, moduleOrFactory)=>{
        if (typeof moduleOrFactory === 'function') {
            BatchedBridge.registerLazyCallableModule(name, moduleOrFactory);
            return;
        }
        BatchedBridge.registerCallableModule(name, moduleOrFactory);
    };
}();
var _default = registerCallableModule;


}),
13503: (function (__unused_webpack_module, __unused_webpack_exports, __webpack_require__) {
"use strict";
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 *       strict-local
 * @format
 */ 
/**
 * Set up alert().
 * You can use this module directly, or just require InitializeCore.
 */ if (!__webpack_require__.g.alert) {
    __webpack_require__.g.alert = function(text) {
        // Require Alert on demand. Requiring it too early can lead to issues
        // with things like Platform not being fully initialized.
        (__webpack_require__(8306)/* .alert */.alert)('Alert', '' + text);
    };
}


}),
48714: (function (__unused_webpack_module, exports, __webpack_require__) {
"use strict";
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 *       strict-local
 * @format
 */ 
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
var _interop_require_default = __webpack_require__(66705);
var _registerCallableModule = /*#__PURE__*/ _interop_require_default._(__webpack_require__(23882));
(0, _registerCallableModule.default)('Systrace', ()=>__webpack_require__(725));
if (!(__webpack_require__.g.RN$Bridgeless === true)) {
    (0, _registerCallableModule.default)('JSTimers', ()=>__webpack_require__(69136));
}
(0, _registerCallableModule.default)('RCTLog', ()=>__webpack_require__(86053));
(0, _registerCallableModule.default)('RCTDeviceEventEmitter', ()=>(__webpack_require__(75296)/* ["default"] */["default"]));
(0, _registerCallableModule.default)('RCTNativeAppEventEmitter', ()=>__webpack_require__(61971));
(0, _registerCallableModule.default)('GlobalPerformanceLogger', ()=>__webpack_require__(27160));
if (false) {} else {
    (0, _registerCallableModule.default)('HMRClient', ()=>__webpack_require__(49646));
}


}),
46898: (function (__unused_webpack_module, __unused_webpack_exports, __webpack_require__) {
"use strict";
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 *       strict-local
 * @format
 */ 
if (__webpack_require__.g.RN$useAlwaysAvailableJSErrorHandling !== true) {
    /**
   * Sets up the console and exception handling (redbox) for React Native.
   * You can use this module directly, or just require InitializeCore.
   */ var ExceptionsManager = __webpack_require__(48065);
    ExceptionsManager.installConsoleErrorReporter();
    // Set up error handler
    if (!__webpack_require__.g.__fbDisableExceptionsManager) {
        var handleError = (e, isFatal)=>{
            try {
                ExceptionsManager.handleException(e, isFatal);
            } catch (ee) {
                console.log('Failed to print error: ', ee.message);
                throw e;
            }
        };
        var ErrorUtils = __webpack_require__(78549);
        ErrorUtils.setGlobalHandler(handleError);
    }
}


}),
29968: (function (__unused_webpack_module, __unused_webpack_exports, __webpack_require__) {
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 *       strict
 * @format
 */ 'use client';
'use strict';
/**
 * Sets up global variables for React Native.
 * You can use this module directly, or just require InitializeCore.
 */ if (__webpack_require__.g.window === undefined) {
    // $FlowExpectedError[cannot-write] The global isn't writable anywhere but here, where we define it.
    __webpack_require__.g.window = __webpack_require__.g;
}
if (__webpack_require__.g.self === undefined) {
    // $FlowExpectedError[cannot-write] The global isn't writable anywhere but here, where we define it.
    __webpack_require__.g.self = __webpack_require__.g;
}
// Set up process
// $FlowExpectedError[cannot-write] The global isn't writable anywhere but here, where we define it.
__webpack_require__.g.process = __webpack_require__.g.process || {};
// $FlowExpectedError[cannot-write] The global isn't writable anywhere but here, where we define it.
__webpack_require__.g.process.env = __webpack_require__.g.process.env || {};
if (!__webpack_require__.g.process.env.NODE_ENV) {
    // $FlowExpectedError[cannot-write] The global isn't writable anywhere but here, where we define it.
    __webpack_require__.g.process.env.NODE_ENV =  false ? 0 : 'production';
}


}),
9871: (function (__unused_webpack_module, __unused_webpack_exports, __webpack_require__) {
"use strict";
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 *       strict
 * @format
 */ 
var polyfillObjectProperty = (__webpack_require__(23223)/* .polyfillObjectProperty */.polyfillObjectProperty);
var navigator = __webpack_require__.g.navigator;
if (navigator === undefined) {
    // $FlowExpectedError[cannot-write] The global isn't writable anywhere but here, where we define it.
    __webpack_require__.g.navigator = {
        product: 'ReactNative'
    };
} else {
    // see https://github.com/facebook/react-native/issues/10881
    polyfillObjectProperty(navigator, 'product', ()=>'ReactNative');
}


}),
38078: (function (__unused_webpack_module, exports, __webpack_require__) {
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 *       strict
 * @format
 */ Object.defineProperty(exports, "__esModule", ({
    value: true
}));
var _interop_require_default = __webpack_require__(66705);
var _Performance = /*#__PURE__*/ _interop_require_default._(__webpack_require__(2453));
var _NativePerformance = /*#__PURE__*/ _interop_require_default._(__webpack_require__(23806));
// In case if the native implementation of the Performance API is available, use it,
// otherwise fall back to the legacy/default one, which only defines 'Performance.now()'
if (_NativePerformance.default) {
    // $FlowExpectedError[cannot-write]
    __webpack_require__.g.performance = new _Performance.default();
} else {
    if (!__webpack_require__.g.performance) {
        // $FlowExpectedError[cannot-write]
        __webpack_require__.g.performance = {
            mark: ()=>{},
            measure: ()=>{},
            now: ()=>{
                var performanceNow = __webpack_require__.g.nativePerformanceNow || Date.now;
                return performanceNow();
            }
        };
    }
}


}),
20553: (function (__unused_webpack_module, __unused_webpack_exports, __webpack_require__) {
"use strict";
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 *       strict-local
 * @format
 */ 
var hasNativeConstructor = (__webpack_require__(65410)/* .hasNativeConstructor */.hasNativeConstructor);
var polyfillGlobal = (__webpack_require__(23223)/* .polyfillGlobal */.polyfillGlobal);
/**
 * Set up regenerator.
 * You can use this module directly, or just require InitializeCore.
 */ var hasNativeGenerator;
try {
    // If this function was lowered by regenerator-transform, it will try to
    // access `global.regeneratorRuntime` which doesn't exist yet and will throw.
    hasNativeGenerator = hasNativeConstructor(function*() {}, 'GeneratorFunction');
} catch  {
    // In this case, we know generators are not provided natively.
    hasNativeGenerator = false;
}
// If generators are provided natively, which suggests that there was no
// regenerator-transform, then there is no need to set up the runtime.
if (!hasNativeGenerator) {
    polyfillGlobal('regeneratorRuntime', ()=>{
        // The require just sets up the global, so make sure when we first
        // invoke it the global does not exist
        delete __webpack_require__.g.regeneratorRuntime;
        // regenerator-runtime/runtime exports the regeneratorRuntime object, so we
        // can return it safely.
        return __webpack_require__(74655); // flowlint-line untyped-import:off
    });
}


}),
75636: (function (__unused_webpack_module, __unused_webpack_exports, __webpack_require__) {
"use strict";
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 *       strict-local
 * @format
 */ 
/**
 * Set up SegmentFetcher.
 * You can use this module directly, or just require InitializeCore.
 */ function __fetchSegment(segmentId, options, callback) {
    var SegmentFetcher = (__webpack_require__(64978)/* ["default"] */["default"]);
    SegmentFetcher.fetchSegment(segmentId, options, (errorObject)=>{
        if (errorObject) {
            var error = new Error(errorObject.message);
            error.code = errorObject.code; // flowlint-line unclear-type: off
            callback(error);
            return;
        }
        callback(null);
    });
}
__webpack_require__.g.__fetchSegment = __fetchSegment;


}),
44339: (function (__unused_webpack_module, __unused_webpack_exports, __webpack_require__) {
"use strict";
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 *       strict-local
 * @format
 */ 
var ReactNativeFeatureFlags = __webpack_require__(31022);
var NativeReactNativeFeatureFlags = (__webpack_require__(51038)/* ["default"] */["default"]);
var polyfillGlobal = (__webpack_require__(23223)/* .polyfillGlobal */.polyfillGlobal);
if (false) {}
var isEventLoopEnabled = (()=>{
    if (NativeReactNativeFeatureFlags == null) {
        return false;
    }
    return ReactNativeFeatureFlags.enableBridgelessArchitecture() && !ReactNativeFeatureFlags.disableEventLoopOnBridgeless();
})();
// In bridgeless mode, timers are host functions installed from cpp.
if (__webpack_require__.g.RN$Bridgeless !== true) {
    /**
   * Set up timers.
   * You can use this module directly, or just require InitializeCore.
   */ var defineLazyTimer = (name)=>{
        polyfillGlobal(name, ()=>__webpack_require__(69136)[name]);
    };
    defineLazyTimer('setTimeout');
    defineLazyTimer('clearTimeout');
    defineLazyTimer('setInterval');
    defineLazyTimer('clearInterval');
    defineLazyTimer('requestAnimationFrame');
    defineLazyTimer('cancelAnimationFrame');
    defineLazyTimer('requestIdleCallback');
    defineLazyTimer('cancelIdleCallback');
} else if (isEventLoopEnabled) {
    polyfillGlobal('requestIdleCallback', ()=>(__webpack_require__(10792)/* ["default"].requestIdleCallback */["default"].requestIdleCallback));
    polyfillGlobal('cancelIdleCallback', ()=>(__webpack_require__(10792)/* ["default"].cancelIdleCallback */["default"].cancelIdleCallback));
}
// We need to check if the native module is available before accessing the
// feature flag, because otherwise the API would throw an error in the legacy
// architecture in OSS, where the native module isn't available.
if (isEventLoopEnabled) {
    // This is the flag that tells React to use `queueMicrotask` to batch state
    // updates, instead of using the scheduler to schedule a regular task.
    // We use a global variable because we don't currently have any other
    // mechanism to pass feature flags from RN to React in OSS.
    __webpack_require__.g.RN$enableMicrotasksInReact = true;
    polyfillGlobal('queueMicrotask', ()=>(__webpack_require__(24887)/* ["default"].queueMicrotask */["default"].queueMicrotask));
    // We shim the immediate APIs via `queueMicrotask` to maintain the backward
    // compatibility.
    polyfillGlobal('setImmediate', ()=>(__webpack_require__(76869)/* .setImmediate */.setImmediate));
    polyfillGlobal('clearImmediate', ()=>(__webpack_require__(76869)/* .clearImmediate */.clearImmediate));
} else {
    // Polyfill it with promise (regardless it's polyfilled or native) otherwise.
    polyfillGlobal('queueMicrotask', ()=>(__webpack_require__(73370)/* ["default"] */["default"]));
    // When promise was polyfilled hence is queued to the RN microtask queue,
    // we polyfill the immediate APIs as aliases to the ReactNativeMicrotask APIs.
    // Note that in bridgeless mode, immediate APIs are installed from cpp.
    if (__webpack_require__.g.RN$Bridgeless !== true) {
        polyfillGlobal('setImmediate', ()=>(__webpack_require__(69136)/* .queueReactNativeMicrotask */.queueReactNativeMicrotask));
        polyfillGlobal('clearImmediate', ()=>(__webpack_require__(69136)/* .clearReactNativeMicrotask */.clearReactNativeMicrotask));
    }
}


}),
5453: (function (__unused_webpack_module, __unused_webpack_exports, __webpack_require__) {
"use strict";
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 *       strict-local
 * @format
 */ 
var polyfillGlobal = (__webpack_require__(23223)/* .polyfillGlobal */.polyfillGlobal);
/**
 * Set up XMLHttpRequest. The native XMLHttpRequest in Chrome dev tools is CORS
 * aware and won't let you fetch anything from the internet.
 *
 * You can use this module directly, or just require InitializeCore.
 */ polyfillGlobal('XMLHttpRequest', ()=>__webpack_require__(47644));
polyfillGlobal('FormData', ()=>__webpack_require__(38834));
polyfillGlobal('fetch', ()=>(__webpack_require__(67006)/* .fetch */.fetch));
polyfillGlobal('Headers', ()=>(__webpack_require__(67006)/* .Headers */.Headers));
polyfillGlobal('Request', ()=>(__webpack_require__(67006)/* .Request */.Request));
polyfillGlobal('Response', ()=>(__webpack_require__(67006)/* .Response */.Response));
polyfillGlobal('WebSocket', ()=>__webpack_require__(9188));
polyfillGlobal('Blob', ()=>__webpack_require__(56540));
polyfillGlobal('File', ()=>__webpack_require__(85403));
polyfillGlobal('FileReader', ()=>__webpack_require__(98175));
polyfillGlobal('URL', ()=>(__webpack_require__(30787)/* .URL */.URL)); // flowlint-line untyped-import:off
polyfillGlobal('URLSearchParams', ()=>(__webpack_require__(30787)/* .URLSearchParams */.URLSearchParams)); // flowlint-line untyped-import:off
polyfillGlobal('AbortController', ()=>(__webpack_require__(33352)/* .AbortController */.AbortController));
polyfillGlobal('AbortSignal', ()=>(__webpack_require__(33352)/* .AbortSignal */.AbortSignal));


}),
75296: (function (__unused_webpack_module, exports, __webpack_require__) {
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 *       strict
 * @format
 */ Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return _default;
    }
}));
var _call_super = __webpack_require__(19436);
var _class_call_check = __webpack_require__(8864);
var _create_class = __webpack_require__(93072);
var _get = __webpack_require__(616);
var _get_prototype_of = __webpack_require__(86880);
var _inherits = __webpack_require__(82397);
var _interop_require_default = __webpack_require__(66705);
var _to_consumable_array = __webpack_require__(92716);
var _Systrace = __webpack_require__(725);
var _EventEmitter = /*#__PURE__*/ _interop_require_default._(__webpack_require__(47006));
// FIXME: use typed events
/**
 * Global EventEmitter used by the native platform to emit events to JavaScript.
 * Events are identified by globally unique event names.
 *
 * NativeModules that emit events should instead subclass `NativeEventEmitter`.
 */ var RCTDeviceEventEmitter = /*#__PURE__*/ function(EventEmitter) {
    "use strict";
    _inherits._(RCTDeviceEventEmitter, EventEmitter);
    function RCTDeviceEventEmitter() {
        _class_call_check._(this, RCTDeviceEventEmitter);
        return _call_super._(this, RCTDeviceEventEmitter, arguments);
    }
    _create_class._(RCTDeviceEventEmitter, [
        {
            // Add systrace to RCTDeviceEventEmitter.emit method for debugging
            key: "emit",
            value: function emit(eventType, ...args) {
                var _$_get;
                (0, _Systrace.beginEvent)(()=>`RCTDeviceEventEmitter.emit#${eventType}`);
                (_$_get = _get._(_get_prototype_of._(RCTDeviceEventEmitter.prototype), "emit", this)).call.apply(_$_get, [
                    this,
                    eventType
                ].concat(_to_consumable_array._(args)));
                (0, _Systrace.endEvent)();
            }
        }
    ]);
    return RCTDeviceEventEmitter;
}(_EventEmitter.default);
var instance = new RCTDeviceEventEmitter();
Object.defineProperty(__webpack_require__.g, '__rctDeviceEventEmitter', {
    configurable: true,
    value: instance
});
var _default = instance;


}),
61971: (function (module, exports, __webpack_require__) {
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * @format
 *       strict-local
 */ Object.defineProperty(exports, "__esModule", ({
    value: true
}));
var _interop_require_default = __webpack_require__(66705);
var _RCTDeviceEventEmitter = /*#__PURE__*/ _interop_require_default._(__webpack_require__(75296));
/**
 * Deprecated - subclass NativeEventEmitter to create granular event modules instead of
 * adding all event listeners directly to RCTNativeAppEventEmitter.
 */ var RCTNativeAppEventEmitter = _RCTDeviceEventEmitter.default;
module.exports = RCTNativeAppEventEmitter;


}),
77127: (function (module, exports, __webpack_require__) {
"use strict";
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 *       strict-local
 * @format
 */ 
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
var _class_call_check = __webpack_require__(8864);
var _create_class = __webpack_require__(93072);
var PixelRatio = (__webpack_require__(52712)/* ["default"] */["default"]);
var Platform = __webpack_require__(181);
var pickScale = (__webpack_require__(93421)/* .pickScale */.pickScale);
var _require = __webpack_require__(65264), getAndroidResourceFolderName = _require.getAndroidResourceFolderName, getAndroidResourceIdentifier = _require.getAndroidResourceIdentifier, getBasePath = _require.getBasePath;
var invariant = __webpack_require__(56481);
/**
 * Returns a path like 'assets/AwesomeModule/icon@2x.png'
 */ function getScaledAssetPath(asset) {
    var scale = pickScale(asset.scales, PixelRatio.get());
    var scaleSuffix = scale === 1 ? '' : '@' + scale + 'x';
    var assetDir = getBasePath(asset);
    return assetDir + '/' + asset.name + scaleSuffix + '.' + asset.type;
}
/**
 * Returns a path like 'drawable-mdpi/icon.png'
 */ function getAssetPathInDrawableFolder(asset) {
    var scale = pickScale(asset.scales, PixelRatio.get());
    var drawableFolder = getAndroidResourceFolderName(asset, scale);
    var fileName = getAndroidResourceIdentifier(asset);
    return drawableFolder + '/' + fileName + '.' + asset.type;
}
/**
 * Returns true if the asset can be loaded over the network.
 *
 * This prevents an issue loading XML assets on Android. XML asset types like
 * vector drawables can only be loaded from precompiled source. Android does
 * not support loading these over the network, and AAPT precompiles data by
 * breaking path data and resource information apart into multiple files,
 * stuffing it all into the resource table. As a result, we should only attempt
 * to load resources as we would in release builds: by the resource name.
 *
 * For more information, see:
 * https://issuetracker.google.com/issues/62435069
 * https://issuetracker.google.com/issues/68293189
 */ function assetSupportsNetworkLoads(asset) {
    return !(asset.type === 'xml' && Platform.OS === 'android');
}
var AssetSourceResolver = /*#__PURE__*/ function() {
    function AssetSourceResolver(serverUrl, jsbundleUrl, asset) {
        _class_call_check._(this, AssetSourceResolver);
        this.serverUrl = serverUrl;
        this.jsbundleUrl = jsbundleUrl;
        this.asset = asset;
    }
    _create_class._(AssetSourceResolver, [
        {
            key: "isLoadedFromServer",
            value: function isLoadedFromServer() {
                return this.serverUrl != null && this.serverUrl !== '' && assetSupportsNetworkLoads(this.asset);
            }
        },
        {
            key: "isLoadedFromFileSystem",
            value: function isLoadedFromFileSystem() {
                var _this_jsbundleUrl;
                return this.jsbundleUrl != null && ((_this_jsbundleUrl = this.jsbundleUrl) === null || _this_jsbundleUrl === void 0 ? void 0 : _this_jsbundleUrl.startsWith('file://'));
            }
        },
        {
            key: "defaultAsset",
            value: function defaultAsset() {
                if (this.isLoadedFromServer()) {
                    return this.assetServerURL();
                }
                if (this.asset.resolver != null) {
                    return this.getAssetUsingResolver(this.asset.resolver);
                }
                if (Platform.OS === 'android') {
                    return this.isLoadedFromFileSystem() ? this.drawableFolderInBundle() : this.resourceIdentifierWithoutScale();
                } else {
                    return this.scaledAssetURLNearBundle();
                }
            }
        },
        {
            key: "getAssetUsingResolver",
            value: function getAssetUsingResolver(resolver) {
                switch(resolver){
                    case 'android':
                        return this.isLoadedFromFileSystem() ? this.drawableFolderInBundle() : this.resourceIdentifierWithoutScale();
                    case 'generic':
                        return this.scaledAssetURLNearBundle();
                    default:
                        throw new Error("Don't know how to get asset via provided resolver: " + resolver + '\nAsset: ' + JSON.stringify(this.asset, null, '\t') + '\nPossible resolvers are:' + JSON.stringify([
                            'android',
                            'generic'
                        ], null, '\t'));
                }
            }
        },
        {
            /**
   * Returns an absolute URL which can be used to fetch the asset
   * from the devserver
   */ key: "assetServerURL",
            value: function assetServerURL() {
                invariant(this.serverUrl != null, 'need server to load from');
                return this.fromSource(this.serverUrl + getScaledAssetPath(this.asset) + '?platform=' + Platform.OS + '&hash=' + this.asset.hash);
            }
        },
        {
            /**
   * Resolves to just the scaled asset filename
   * E.g. 'assets/AwesomeModule/icon@2x.png'
   */ key: "scaledAssetPath",
            value: function scaledAssetPath() {
                return this.fromSource(getScaledAssetPath(this.asset));
            }
        },
        {
            /**
   * Resolves to where the bundle is running from, with a scaled asset filename
   * E.g. 'file:///sdcard/bundle/assets/AwesomeModule/icon@2x.png'
   */ key: "scaledAssetURLNearBundle",
            value: function scaledAssetURLNearBundle() {
                var path = this.jsbundleUrl ?? 'file://';
                return this.fromSource(// Assets can have relative paths outside of the project root.
                // When bundling them we replace `../` with `_` to make sure they
                // don't end up outside of the expected assets directory.
                path + getScaledAssetPath(this.asset).replace(/\.\.\//g, '_'));
            }
        },
        {
            /**
   * The default location of assets bundled with the app, located by
   * resource identifier
   * The Android resource system picks the correct scale.
   * E.g. 'assets_awesomemodule_icon'
   */ key: "resourceIdentifierWithoutScale",
            value: function resourceIdentifierWithoutScale() {
                invariant(Platform.OS === 'android', 'resource identifiers work on Android');
                return this.fromSource(getAndroidResourceIdentifier(this.asset));
            }
        },
        {
            /**
   * If the jsbundle is running from a sideload location, this resolves assets
   * relative to its location
   * E.g. 'file:///sdcard/AwesomeModule/drawable-mdpi/icon.png'
   */ key: "drawableFolderInBundle",
            value: function drawableFolderInBundle() {
                var path = this.jsbundleUrl ?? 'file://';
                return this.fromSource(path + getAssetPathInDrawableFolder(this.asset));
            }
        },
        {
            key: "fromSource",
            value: function fromSource(source) {
                return {
                    __packager_asset: true,
                    width: this.asset.width,
                    height: this.asset.height,
                    uri: source,
                    scale: pickScale(this.asset.scales, PixelRatio.get())
                };
            }
        }
    ]);
    return AssetSourceResolver;
}();
AssetSourceResolver.pickScale = pickScale;
module.exports = AssetSourceResolver;


}),
93421: (function (__unused_webpack_module, exports, __webpack_require__) {
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 *       strict-local
 * @format
 */ Object.defineProperty(exports, "__esModule", ({
    value: true
}));
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: Object.getOwnPropertyDescriptor(all, name).get
    });
}
_export(exports, {
    get getUrlCacheBreaker () {
        return getUrlCacheBreaker;
    },
    get pickScale () {
        return pickScale;
    },
    get setUrlCacheBreaker () {
        return setUrlCacheBreaker;
    }
});
var _interop_require_default = __webpack_require__(66705);
var _PixelRatio = /*#__PURE__*/ _interop_require_default._(__webpack_require__(52712));
var cacheBreaker;
var warnIfCacheBreakerUnset = true;
function pickScale(scales, deviceScale) {
    var requiredDeviceScale = deviceScale ?? _PixelRatio.default.get();
    // Packager guarantees that `scales` array is sorted
    for(var i = 0; i < scales.length; i++){
        if (scales[i] >= requiredDeviceScale) {
            return scales[i];
        }
    }
    // If nothing matches, device scale is larger than any available
    // scales, so we return the biggest one. Unless the array is empty,
    // in which case we default to 1
    return scales[scales.length - 1] || 1;
}
function setUrlCacheBreaker(appendage) {
    cacheBreaker = appendage;
}
function getUrlCacheBreaker() {
    if (cacheBreaker == null) {
        if (false) {}
        return '';
    }
    return cacheBreaker;
}


}),
63980: (function (module, exports, __webpack_require__) {
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * @format
 *       strict-local
 */ // Utilities for resolving an asset into a `source` for e.g. `Image`
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
var _interop_require_default = __webpack_require__(66705);
var _NativeSourceCode = /*#__PURE__*/ _interop_require_default._(__webpack_require__(84925));
var AssetSourceResolver = __webpack_require__(77127);
var pickScale = (__webpack_require__(93421)/* .pickScale */.pickScale);
var AssetRegistry = __webpack_require__(33396);
var _customSourceTransformers = [];
var _serverURL;
var _scriptURL;
var _sourceCodeScriptURL;
function getSourceCodeScriptURL() {
    if (_sourceCodeScriptURL != null) {
        return _sourceCodeScriptURL;
    }
    _sourceCodeScriptURL = _NativeSourceCode.default.getConstants().scriptURL;
    return _sourceCodeScriptURL;
}
function getDevServerURL() {
    if (_serverURL === undefined) {
        var sourceCodeScriptURL = getSourceCodeScriptURL();
        var match = sourceCodeScriptURL === null || sourceCodeScriptURL === void 0 ? void 0 : sourceCodeScriptURL.match(/^https?:\/\/.*?\//);
        if (match) {
            // jsBundle was loaded from network
            _serverURL = match[0];
        } else {
            // jsBundle was loaded from file
            _serverURL = null;
        }
    }
    return _serverURL;
}
function _coerceLocalScriptURL(scriptURL) {
    var normalizedScriptURL = scriptURL;
    if (normalizedScriptURL != null) {
        if (normalizedScriptURL.startsWith('assets://')) {
            // android: running from within assets, no offline path to use
            return null;
        }
        normalizedScriptURL = normalizedScriptURL.substring(0, normalizedScriptURL.lastIndexOf('/') + 1);
        if (!normalizedScriptURL.includes('://')) {
            // Add file protocol in case we have an absolute file path and not a URL.
            // This shouldn't really be necessary. scriptURL should be a URL.
            normalizedScriptURL = 'file://' + normalizedScriptURL;
        }
    }
    return normalizedScriptURL;
}
function getScriptURL() {
    if (_scriptURL === undefined) {
        _scriptURL = _coerceLocalScriptURL(getSourceCodeScriptURL());
    }
    return _scriptURL;
}
/**
 * `transformer` can optionally be used to apply a custom transformation when
 * resolving an asset source. This methods overrides all other custom transformers
 * that may have been previously registered.
 */ function setCustomSourceTransformer(transformer) {
    _customSourceTransformers = [
        transformer
    ];
}
/**
 * Adds a `transformer` into the chain of custom source transformers, which will
 * be applied in the order registered, until one returns a non-null value.
 */ function addCustomSourceTransformer(transformer) {
    _customSourceTransformers.push(transformer);
}
/**
 * `source` is either a number (opaque type returned by require('./foo.png'))
 * or an `ImageSource` like { uri: '<http location || file path>' }
 */ function resolveAssetSource(source) {
    if (source == null || typeof source === 'object') {
        // $FlowFixMe[incompatible-exact] `source` doesn't exactly match `ResolvedAssetSource`
        // $FlowFixMe[incompatible-return] `source` doesn't exactly match `ResolvedAssetSource`
        return source;
    }
    var asset = AssetRegistry.getAssetByID(source);
    if (!asset) {
        return null;
    }
    var resolver = new AssetSourceResolver(getDevServerURL(), getScriptURL(), asset);
    // Apply (chained) custom source transformers, if any
    if (_customSourceTransformers) {
        for (var customSourceTransformer of _customSourceTransformers){
            var transformedSource = customSourceTransformer(resolver);
            if (transformedSource != null) {
                return transformedSource;
            }
        }
    }
    return resolver.defaultAsset();
}
resolveAssetSource.pickScale = pickScale;
resolveAssetSource.setCustomSourceTransformer = setCustomSourceTransformer;
resolveAssetSource.addCustomSourceTransformer = addCustomSourceTransformer;
module.exports = resolveAssetSource;


}),
46560: (function (__unused_webpack_module, exports, __webpack_require__) {
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * @format
 *       strict-local
 */ Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return _default;
    }
}));
var _interop_require_default = __webpack_require__(66705);
var _object_spread = __webpack_require__(36192);
var _ReactNativeStyleAttributes = /*#__PURE__*/ _interop_require_default._(__webpack_require__(34650));
var _ViewConfigIgnore = __webpack_require__(72291);
var bubblingEventTypes = {
    // Generic Events
    topPress: {
        phasedRegistrationNames: {
            bubbled: 'onPress',
            captured: 'onPressCapture'
        }
    },
    topChange: {
        phasedRegistrationNames: {
            bubbled: 'onChange',
            captured: 'onChangeCapture'
        }
    },
    topFocus: {
        phasedRegistrationNames: {
            bubbled: 'onFocus',
            captured: 'onFocusCapture'
        }
    },
    topBlur: {
        phasedRegistrationNames: {
            bubbled: 'onBlur',
            captured: 'onBlurCapture'
        }
    },
    topSubmitEditing: {
        phasedRegistrationNames: {
            bubbled: 'onSubmitEditing',
            captured: 'onSubmitEditingCapture'
        }
    },
    topEndEditing: {
        phasedRegistrationNames: {
            bubbled: 'onEndEditing',
            captured: 'onEndEditingCapture'
        }
    },
    topKeyPress: {
        phasedRegistrationNames: {
            bubbled: 'onKeyPress',
            captured: 'onKeyPressCapture'
        }
    },
    // Touch Events
    topTouchStart: {
        phasedRegistrationNames: {
            bubbled: 'onTouchStart',
            captured: 'onTouchStartCapture'
        }
    },
    topTouchMove: {
        phasedRegistrationNames: {
            bubbled: 'onTouchMove',
            captured: 'onTouchMoveCapture'
        }
    },
    topTouchCancel: {
        phasedRegistrationNames: {
            bubbled: 'onTouchCancel',
            captured: 'onTouchCancelCapture'
        }
    },
    topTouchEnd: {
        phasedRegistrationNames: {
            bubbled: 'onTouchEnd',
            captured: 'onTouchEndCapture'
        }
    },
    // Experimental/Work in Progress Pointer Events (not yet ready for use)
    topClick: {
        phasedRegistrationNames: {
            captured: 'onClickCapture',
            bubbled: 'onClick'
        }
    },
    topPointerCancel: {
        phasedRegistrationNames: {
            captured: 'onPointerCancelCapture',
            bubbled: 'onPointerCancel'
        }
    },
    topPointerDown: {
        phasedRegistrationNames: {
            captured: 'onPointerDownCapture',
            bubbled: 'onPointerDown'
        }
    },
    topPointerMove: {
        phasedRegistrationNames: {
            captured: 'onPointerMoveCapture',
            bubbled: 'onPointerMove'
        }
    },
    topPointerUp: {
        phasedRegistrationNames: {
            captured: 'onPointerUpCapture',
            bubbled: 'onPointerUp'
        }
    },
    topPointerEnter: {
        phasedRegistrationNames: {
            captured: 'onPointerEnterCapture',
            bubbled: 'onPointerEnter',
            skipBubbling: true
        }
    },
    topPointerLeave: {
        phasedRegistrationNames: {
            captured: 'onPointerLeaveCapture',
            bubbled: 'onPointerLeave',
            skipBubbling: true
        }
    },
    topPointerOver: {
        phasedRegistrationNames: {
            captured: 'onPointerOverCapture',
            bubbled: 'onPointerOver'
        }
    },
    topPointerOut: {
        phasedRegistrationNames: {
            captured: 'onPointerOutCapture',
            bubbled: 'onPointerOut'
        }
    },
    topGotPointerCapture: {
        phasedRegistrationNames: {
            captured: 'onGotPointerCaptureCapture',
            bubbled: 'onGotPointerCapture'
        }
    },
    topLostPointerCapture: {
        phasedRegistrationNames: {
            captured: 'onLostPointerCaptureCapture',
            bubbled: 'onLostPointerCapture'
        }
    }
};
var directEventTypes = {
    topAccessibilityAction: {
        registrationName: 'onAccessibilityAction'
    },
    topAccessibilityTap: {
        registrationName: 'onAccessibilityTap'
    },
    topMagicTap: {
        registrationName: 'onMagicTap'
    },
    topAccessibilityEscape: {
        registrationName: 'onAccessibilityEscape'
    },
    topLayout: {
        registrationName: 'onLayout'
    },
    onGestureHandlerEvent: (0, _ViewConfigIgnore.DynamicallyInjectedByGestureHandler)({
        registrationName: 'onGestureHandlerEvent'
    }),
    onGestureHandlerStateChange: (0, _ViewConfigIgnore.DynamicallyInjectedByGestureHandler)({
        registrationName: 'onGestureHandlerStateChange'
    })
};
var validAttributesForNonEventProps = {
    // View Props
    accessible: true,
    accessibilityActions: true,
    accessibilityLabel: true,
    accessibilityHint: true,
    accessibilityLanguage: true,
    accessibilityValue: true,
    accessibilityViewIsModal: true,
    accessibilityElementsHidden: true,
    accessibilityIgnoresInvertColors: true,
    accessibilityShowsLargeContentViewer: true,
    accessibilityLargeContentTitle: true,
    testID: true,
    backgroundColor: {
        process: (__webpack_require__(23865)/* ["default"] */["default"])
    },
    backfaceVisibility: true,
    cursor: true,
    opacity: true,
    shadowColor: {
        process: (__webpack_require__(23865)/* ["default"] */["default"])
    },
    shadowOffset: {
        diff: __webpack_require__(24395)
    },
    shadowOpacity: true,
    shadowRadius: true,
    needsOffscreenAlphaCompositing: true,
    overflow: true,
    shouldRasterizeIOS: true,
    transform: {
        diff: __webpack_require__(96940)
    },
    transformOrigin: true,
    accessibilityRole: true,
    accessibilityState: true,
    nativeID: true,
    pointerEvents: true,
    removeClippedSubviews: true,
    role: true,
    borderRadius: true,
    borderColor: {
        process: (__webpack_require__(23865)/* ["default"] */["default"])
    },
    borderBlockColor: {
        process: (__webpack_require__(23865)/* ["default"] */["default"])
    },
    borderCurve: true,
    borderWidth: true,
    borderBlockWidth: true,
    borderStyle: true,
    hitSlop: {
        diff: __webpack_require__(14691)
    },
    collapsable: true,
    collapsableChildren: true,
    filter: {
        process: (__webpack_require__(62354)/* ["default"] */["default"])
    },
    boxShadow: {
        process: (__webpack_require__(47204)/* ["default"] */["default"])
    },
    mixBlendMode: true,
    isolation: true,
    borderTopWidth: true,
    borderTopColor: {
        process: (__webpack_require__(23865)/* ["default"] */["default"])
    },
    borderRightWidth: true,
    borderRightColor: {
        process: (__webpack_require__(23865)/* ["default"] */["default"])
    },
    borderBottomWidth: true,
    borderBottomColor: {
        process: (__webpack_require__(23865)/* ["default"] */["default"])
    },
    borderLeftWidth: true,
    borderLeftColor: {
        process: (__webpack_require__(23865)/* ["default"] */["default"])
    },
    borderStartWidth: true,
    borderBlockStartWidth: true,
    borderStartColor: {
        process: (__webpack_require__(23865)/* ["default"] */["default"])
    },
    borderBlockStartColor: {
        process: (__webpack_require__(23865)/* ["default"] */["default"])
    },
    borderEndWidth: true,
    borderBlockEndWidth: true,
    borderEndColor: {
        process: (__webpack_require__(23865)/* ["default"] */["default"])
    },
    borderBlockEndColor: {
        process: (__webpack_require__(23865)/* ["default"] */["default"])
    },
    borderTopLeftRadius: true,
    borderTopRightRadius: true,
    borderTopStartRadius: true,
    borderTopEndRadius: true,
    borderBottomLeftRadius: true,
    borderBottomRightRadius: true,
    borderBottomStartRadius: true,
    borderBottomEndRadius: true,
    borderEndEndRadius: true,
    borderEndStartRadius: true,
    borderStartEndRadius: true,
    borderStartStartRadius: true,
    display: true,
    zIndex: true,
    // ShadowView properties
    top: true,
    right: true,
    start: true,
    end: true,
    bottom: true,
    left: true,
    inset: true,
    insetBlock: true,
    insetBlockEnd: true,
    insetBlockStart: true,
    insetInline: true,
    insetInlineEnd: true,
    insetInlineStart: true,
    width: true,
    height: true,
    minWidth: true,
    maxWidth: true,
    minHeight: true,
    maxHeight: true,
    // Also declared as ViewProps
    // borderTopWidth: true,
    // borderRightWidth: true,
    // borderBottomWidth: true,
    // borderLeftWidth: true,
    // borderStartWidth: true,
    // borderEndWidth: true,
    // borderWidth: true,
    margin: true,
    marginBlock: true,
    marginBlockEnd: true,
    marginBlockStart: true,
    marginBottom: true,
    marginEnd: true,
    marginHorizontal: true,
    marginInline: true,
    marginInlineEnd: true,
    marginInlineStart: true,
    marginLeft: true,
    marginRight: true,
    marginStart: true,
    marginTop: true,
    marginVertical: true,
    padding: true,
    paddingBlock: true,
    paddingBlockEnd: true,
    paddingBlockStart: true,
    paddingBottom: true,
    paddingEnd: true,
    paddingHorizontal: true,
    paddingInline: true,
    paddingInlineEnd: true,
    paddingInlineStart: true,
    paddingLeft: true,
    paddingRight: true,
    paddingStart: true,
    paddingTop: true,
    paddingVertical: true,
    flex: true,
    flexGrow: true,
    rowGap: true,
    columnGap: true,
    gap: true,
    flexShrink: true,
    flexBasis: true,
    flexDirection: true,
    flexWrap: true,
    justifyContent: true,
    alignItems: true,
    alignSelf: true,
    alignContent: true,
    position: true,
    aspectRatio: true,
    boxSizing: true,
    // Also declared as ViewProps
    // overflow: true,
    // display: true,
    direction: true,
    style: _ReactNativeStyleAttributes.default
};
// Props for bubbling and direct events
var validAttributesForEventProps = (0, _ViewConfigIgnore.ConditionallyIgnoredEventHandlers)({
    onLayout: true,
    onMagicTap: true,
    // Accessibility
    onAccessibilityAction: true,
    onAccessibilityEscape: true,
    onAccessibilityTap: true,
    // PanResponder handlers
    onMoveShouldSetResponder: true,
    onMoveShouldSetResponderCapture: true,
    onStartShouldSetResponder: true,
    onStartShouldSetResponderCapture: true,
    onResponderGrant: true,
    onResponderReject: true,
    onResponderStart: true,
    onResponderEnd: true,
    onResponderRelease: true,
    onResponderMove: true,
    onResponderTerminate: true,
    onResponderTerminationRequest: true,
    onShouldBlockNativeResponder: true,
    // Touch events
    onTouchStart: true,
    onTouchMove: true,
    onTouchEnd: true,
    onTouchCancel: true,
    // Pointer events
    onClick: true,
    onClickCapture: true,
    onPointerUp: true,
    onPointerDown: true,
    onPointerCancel: true,
    onPointerEnter: true,
    onPointerMove: true,
    onPointerLeave: true,
    onPointerOver: true,
    onPointerOut: true,
    onGotPointerCapture: true,
    onLostPointerCapture: true
});
/**
 * On iOS, view managers define all of a component's props.
 * All view managers extend RCTViewManager, and RCTViewManager declares these props.
 */ var PlatformBaseViewConfigIos = {
    bubblingEventTypes,
    directEventTypes,
    validAttributes: _object_spread._({}, validAttributesForNonEventProps, validAttributesForEventProps)
};
var _default = PlatformBaseViewConfigIos;


}),
21622: (function (__unused_webpack_module, exports, __webpack_require__) {
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * @format
 *       strict-local
 */ Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return _default;
    }
}));
var _interop_require_default = __webpack_require__(66705);
var _BaseViewConfig = /*#__PURE__*/ _interop_require_default._(__webpack_require__(46560));
var PlatformBaseViewConfig = _BaseViewConfig.default;
var _default = PlatformBaseViewConfig;


}),
65181: (function (__unused_webpack_module, exports, __webpack_require__) {
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 *       strict
 * @format
 */ /**
 * During the migration from native view configs to static view configs, this is
 * used to validate that the two are equivalent.
 */ Object.defineProperty(exports, "__esModule", ({
    value: true
}));
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: Object.getOwnPropertyDescriptor(all, name).get
    });
}
_export(exports, {
    get stringifyValidationResult () {
        return stringifyValidationResult;
    },
    get validate () {
        return validate;
    }
});
var _to_consumable_array = __webpack_require__(92716);
function validate(name, nativeViewConfig, staticViewConfig) {
    var differences = [];
    accumulateDifferences(differences, [], {
        bubblingEventTypes: nativeViewConfig.bubblingEventTypes,
        directEventTypes: nativeViewConfig.directEventTypes,
        uiViewClassName: nativeViewConfig.uiViewClassName,
        validAttributes: nativeViewConfig.validAttributes
    }, {
        bubblingEventTypes: staticViewConfig.bubblingEventTypes,
        directEventTypes: staticViewConfig.directEventTypes,
        uiViewClassName: staticViewConfig.uiViewClassName,
        validAttributes: staticViewConfig.validAttributes
    });
    if (differences.length === 0) {
        return {
            type: 'valid'
        };
    }
    return {
        type: 'invalid',
        differences
    };
}
function stringifyValidationResult(name, validationResult) {
    var differences = validationResult.differences;
    return [
        `StaticViewConfigValidator: Invalid static view config for '${name}'.`,
        ''
    ].concat(_to_consumable_array._(differences.map((difference)=>{
        var type = difference.type, path = difference.path;
        switch(type){
            case 'missing':
                return `- '${path.join('.')}' is missing.`;
            case 'unequal':
                return `- '${path.join('.')}' is the wrong value.`;
        }
    })), [
        ''
    ]).join('\n');
}
function accumulateDifferences(differences, path, nativeObject, staticObject) {
    for(var nativeKey in nativeObject){
        // $FlowFixMe[invalid-computed-prop]
        var nativeValue = nativeObject[nativeKey];
        if (!staticObject.hasOwnProperty(nativeKey)) {
            differences.push({
                path: _to_consumable_array._(path).concat([
                    nativeKey
                ]),
                type: 'missing',
                nativeValue
            });
            continue;
        }
        // $FlowFixMe[invalid-computed-prop]
        var staticValue = staticObject[nativeKey];
        var nativeValueIfObject = ifObject(nativeValue);
        if (nativeValueIfObject != null) {
            var staticValueIfObject = ifObject(staticValue);
            if (staticValueIfObject != null) {
                path.push(nativeKey);
                accumulateDifferences(differences, path, nativeValueIfObject, staticValueIfObject);
                path.pop();
                continue;
            }
        }
        if (nativeValue !== staticValue) {
            differences.push({
                path: _to_consumable_array._(path).concat([
                    nativeKey
                ]),
                type: 'unequal',
                nativeValue,
                staticValue
            });
        }
    }
}
function ifObject(value) {
    return typeof value === 'object' && !Array.isArray(value) ? value : null;
}


}),
20764: (function (__unused_webpack_module, exports, __webpack_require__) {
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 *       strict-local
 * @format
 */ Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "createViewConfig", ({
    enumerable: true,
    get: function() {
        return createViewConfig;
    }
}));
var _interop_require_default = __webpack_require__(66705);
var _object_spread = __webpack_require__(36192);
var _PlatformBaseViewConfig = /*#__PURE__*/ _interop_require_default._(__webpack_require__(21622));
function createViewConfig(partialViewConfig) {
    return {
        uiViewClassName: partialViewConfig.uiViewClassName,
        Commands: {},
        bubblingEventTypes: composeIndexers(_PlatformBaseViewConfig.default.bubblingEventTypes, partialViewConfig.bubblingEventTypes),
        directEventTypes: composeIndexers(_PlatformBaseViewConfig.default.directEventTypes, partialViewConfig.directEventTypes),
        // $FlowFixMe[incompatible-return]
        validAttributes: composeIndexers(// $FlowFixMe[incompatible-call] `style` property confuses Flow.
        _PlatformBaseViewConfig.default.validAttributes, // $FlowFixMe[incompatible-call] `style` property confuses Flow.
        partialViewConfig.validAttributes)
    };
}
function composeIndexers(maybeA, maybeB) {
    return maybeA == null || maybeB == null ? maybeA ?? maybeB ?? {} : _object_spread._({}, maybeA, maybeB);
}


}),
72291: (function (__unused_webpack_module, exports, __webpack_require__) {
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 *       strict
 * @format
 */ Object.defineProperty(exports, "__esModule", ({
    value: true
}));
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: Object.getOwnPropertyDescriptor(all, name).get
    });
}
_export(exports, {
    get ConditionallyIgnoredEventHandlers () {
        return ConditionallyIgnoredEventHandlers;
    },
    get DynamicallyInjectedByGestureHandler () {
        return DynamicallyInjectedByGestureHandler;
    },
    get isIgnored () {
        return isIgnored;
    }
});
var _interop_require_default = __webpack_require__(66705);
var _Platform = /*#__PURE__*/ _interop_require_default._(__webpack_require__(181));
var ignoredViewConfigProps = new WeakSet();
function DynamicallyInjectedByGestureHandler(object) {
    ignoredViewConfigProps.add(object);
    return object;
}
function ConditionallyIgnoredEventHandlers(value) {
    if (_Platform.default.OS === 'ios') {
        return value;
    }
    return undefined;
}
function isIgnored(value) {
    if (typeof value === 'object' && value != null) {
        return ignoredViewConfigProps.has(value);
    }
    return false;
}


}),
38834: (function (module, exports, __webpack_require__) {
"use strict";
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * @format
 *       strict
 */ 
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
var _class_call_check = __webpack_require__(8864);
var _create_class = __webpack_require__(93072);
var _object_spread = __webpack_require__(36192);
var _object_spread_props = __webpack_require__(83590);
var _sliced_to_array = __webpack_require__(78474);
/**
 * Encode a FormData filename compliant with RFC 2183
 *
 * https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Content-Disposition#directives
 */ function encodeFilename(filename) {
    return encodeURIComponent(filename.replace(/\//g, '_'));
}
/**
 * Polyfill for XMLHttpRequest2 FormData API, allowing multipart POST requests
 * with mixed data (string, native files) to be submitted via XMLHttpRequest.
 *
 * Example:
 *
 *   var photo = {
 *     uri: uriFromCameraRoll,
 *     type: 'image/jpeg',
 *     name: 'photo.jpg',
 *   };
 *
 *   var body = new FormData();
 *   body.append('authToken', 'secret');
 *   body.append('photo', photo);
 *   body.append('title', 'A beautiful photo!');
 *
 *   xhr.open('POST', serverURL);
 *   xhr.send(body);
 */ var FormData = /*#__PURE__*/ function() {
    function FormData() {
        _class_call_check._(this, FormData);
        this._parts = [];
    }
    _create_class._(FormData, [
        {
            key: "append",
            value: function append(key, value) {
                // The XMLHttpRequest spec doesn't specify if duplicate keys are allowed.
                // MDN says that any new values should be appended to existing values.
                // In any case, major browsers allow duplicate keys, so that's what we'll do
                // too. They'll simply get appended as additional form data parts in the
                // request body, leaving the server to deal with them.
                this._parts.push([
                    key,
                    value
                ]);
            }
        },
        {
            key: "getAll",
            value: function getAll(key) {
                return this._parts.filter((ref)=>{
                    var _ref = _sliced_to_array._(ref, 1), name = _ref[0];
                    return name === key;
                }).map((ref)=>{
                    var _ref = _sliced_to_array._(ref, 2), value = _ref[1];
                    return value;
                });
            }
        },
        {
            key: "getParts",
            value: function getParts() {
                return this._parts.map((ref)=>{
                    var _ref = _sliced_to_array._(ref, 2), name = _ref[0], value = _ref[1];
                    var contentDisposition = 'form-data; name="' + name + '"';
                    var headers = {
                        'content-disposition': contentDisposition
                    };
                    // The body part is a "blob", which in React Native just means
                    // an object with a `uri` attribute. Optionally, it can also
                    // have a `name` and `type` attribute to specify filename and
                    // content type (cf. web Blob interface.)
                    if (typeof value === 'object' && !Array.isArray(value) && value) {
                        if (typeof value.name === 'string') {
                            headers['content-disposition'] += `; filename="${encodeFilename(value.name)}"`;
                        }
                        if (typeof value.type === 'string') {
                            headers['content-type'] = value.type;
                        }
                        return _object_spread_props._(_object_spread._({}, value), {
                            headers,
                            fieldName: name
                        });
                    }
                    // Convert non-object values to strings as per FormData.append() spec
                    return {
                        string: String(value),
                        headers,
                        fieldName: name
                    };
                });
            }
        }
    ]);
    return FormData;
}();
module.exports = FormData;


}),
92429: (function (__unused_webpack_module, exports, __webpack_require__) {
"use strict";
var __webpack_unused_export__;
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 *       strict-local
 * @format
 */ 
__webpack_unused_export__ = ({
    value: true
});
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return _default;
    }
}));
var _interop_require_default = __webpack_require__(66705);
var _object_spread = __webpack_require__(36192);
var _object_spread_props = __webpack_require__(83590);
var _RCTDeviceEventEmitter = /*#__PURE__*/ _interop_require_default._(__webpack_require__(75296));
var _convertRequestBody = /*#__PURE__*/ _interop_require_default._(__webpack_require__(99394));
var _NativeNetworkingIOS = /*#__PURE__*/ _interop_require_default._(__webpack_require__(4036));
var RCTNetworking = {
    addListener (eventType, listener, context) {
        // $FlowFixMe[incompatible-call]
        return _RCTDeviceEventEmitter.default.addListener(eventType, listener, context);
    },
    sendRequest (method, trackingName, url, headers, data, responseType, incrementalUpdates, timeout, callback, withCredentials) {
        var body = (0, _convertRequestBody.default)(data);
        _NativeNetworkingIOS.default.sendRequest({
            method,
            url,
            data: _object_spread_props._(_object_spread._({}, body), {
                trackingName
            }),
            headers,
            responseType,
            incrementalUpdates,
            timeout,
            withCredentials
        }, callback);
    },
    abortRequest (requestId) {
        _NativeNetworkingIOS.default.abortRequest(requestId);
    },
    clearCookies (callback) {
        _NativeNetworkingIOS.default.clearCookies(callback);
    }
};
var _default = RCTNetworking;


}),
47644: (function (module, exports, __webpack_require__) {
"use strict";
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * @format
 *      
 */ 
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
var _call_super = __webpack_require__(19436);
var _class_call_check = __webpack_require__(8864);
var _create_class = __webpack_require__(93072);
var _get = __webpack_require__(616);
var _get_prototype_of = __webpack_require__(86880);
var _inherits = __webpack_require__(82397);
var _interop_require_default = __webpack_require__(66705);
var _to_consumable_array = __webpack_require__(92716);
var _eventtargetshim = /*#__PURE__*/ _interop_require_default._(__webpack_require__(65803));
var BlobManager = __webpack_require__(28586);
var GlobalPerformanceLogger = __webpack_require__(27160);
var RCTNetworking = (__webpack_require__(92429)/* ["default"] */["default"]);
var base64 = __webpack_require__(25608);
var invariant = __webpack_require__(56481);
var DEBUG_NETWORK_SEND_DELAY = false; // Set to a number of milliseconds when debugging
var LABEL_FOR_MISSING_URL_FOR_PROFILING = 'Unknown URL';
// The native blob module is optional so inject it here if available.
if (BlobManager.isAvailable) {
    BlobManager.addNetworkingHandler();
}
var UNSENT = 0;
var OPENED = 1;
var HEADERS_RECEIVED = 2;
var LOADING = 3;
var DONE = 4;
var SUPPORTED_RESPONSE_TYPES = {
    arraybuffer: typeof __webpack_require__.g.ArrayBuffer === 'function',
    blob: typeof __webpack_require__.g.Blob === 'function',
    document: false,
    json: true,
    text: true,
    '': true
};
var REQUEST_EVENTS = [
    'abort',
    'error',
    'load',
    'loadstart',
    'progress',
    'timeout',
    'loadend'
];
var XHR_EVENTS = REQUEST_EVENTS.concat('readystatechange');
var XMLHttpRequestEventTarget = /*#__PURE__*/ function(_EventTarget) {
    _inherits._(XMLHttpRequestEventTarget, _EventTarget);
    function XMLHttpRequestEventTarget() {
        _class_call_check._(this, XMLHttpRequestEventTarget);
        return _call_super._(this, XMLHttpRequestEventTarget, arguments);
    }
    return XMLHttpRequestEventTarget;
}(_eventtargetshim.default.apply(void 0, _to_consumable_array._(REQUEST_EVENTS)));
/**
 * Shared base for platform-specific XMLHttpRequest implementations.
 */ var XMLHttpRequest = /*#__PURE__*/ function(_EventTarget) {
    _inherits._(XMLHttpRequest, _EventTarget);
    function XMLHttpRequest() {
        _class_call_check._(this, XMLHttpRequest);
        var _this;
        _this = _call_super._(this, XMLHttpRequest), _this.UNSENT = UNSENT, _this.OPENED = OPENED, _this.HEADERS_RECEIVED = HEADERS_RECEIVED, _this.LOADING = LOADING, _this.DONE = DONE, _this.readyState = UNSENT, _this.status = 0, _this.timeout = 0, _this.withCredentials = true, _this.upload = new XMLHttpRequestEventTarget(), _this._aborted = false, _this._hasError = false, _this._method = null, _this._perfKey = null, _this._response = '', _this._url = null, _this._timedOut = false, _this._trackingName = 'unknown', _this._incrementalEvents = false, _this._startTime = null, _this._performanceLogger = GlobalPerformanceLogger;
        _this._reset();
        return _this;
    }
    _create_class._(XMLHttpRequest, [
        {
            key: "_reset",
            value: function _reset() {
                this.readyState = this.UNSENT;
                this.responseHeaders = undefined;
                this.status = 0;
                delete this.responseURL;
                this._requestId = null;
                this._cachedResponse = undefined;
                this._hasError = false;
                this._headers = {};
                this._response = '';
                this._responseType = '';
                this._sent = false;
                this._lowerCaseResponseHeaders = {};
                this._clearSubscriptions();
                this._timedOut = false;
            }
        },
        {
            key: "responseType",
            get: function() {
                return this._responseType;
            },
            set: function(responseType) {
                if (this._sent) {
                    throw new Error("Failed to set the 'responseType' property on 'XMLHttpRequest': The " + 'response type cannot be set after the request has been sent.');
                }
                if (!SUPPORTED_RESPONSE_TYPES.hasOwnProperty(responseType)) {
                    console.warn(`The provided value '${responseType}' is not a valid 'responseType'.`);
                    return;
                }
                // redboxes early, e.g. for 'arraybuffer' on ios 7
                invariant(SUPPORTED_RESPONSE_TYPES[responseType] || responseType === 'document', `The provided value '${responseType}' is unsupported in this environment.`);
                if (responseType === 'blob') {
                    invariant(BlobManager.isAvailable, 'Native module BlobModule is required for blob support');
                }
                this._responseType = responseType;
            }
        },
        {
            key: "responseText",
            get: function() {
                if (this._responseType !== '' && this._responseType !== 'text') {
                    throw new Error("The 'responseText' property is only available if 'responseType' " + `is set to '' or 'text', but it is '${this._responseType}'.`);
                }
                if (this.readyState < LOADING) {
                    return '';
                }
                return this._response;
            }
        },
        {
            key: "response",
            get: function() {
                var responseType = this.responseType;
                if (responseType === '' || responseType === 'text') {
                    return this.readyState < LOADING || this._hasError ? '' : this._response;
                }
                if (this.readyState !== DONE) {
                    return null;
                }
                if (this._cachedResponse !== undefined) {
                    return this._cachedResponse;
                }
                switch(responseType){
                    case 'document':
                        this._cachedResponse = null;
                        break;
                    case 'arraybuffer':
                        this._cachedResponse = base64.toByteArray(this._response).buffer;
                        break;
                    case 'blob':
                        if (typeof this._response === 'object' && this._response) {
                            this._cachedResponse = BlobManager.createFromOptions(this._response);
                        } else if (this._response === '') {
                            this._cachedResponse = BlobManager.createFromParts([]);
                        } else {
                            throw new Error('Invalid response for blob - expecting object, was ' + `${typeof this._response}: ${this._response.trim()}`);
                        }
                        break;
                    case 'json':
                        try {
                            this._cachedResponse = JSON.parse(this._response);
                        } catch (_) {
                            this._cachedResponse = null;
                        }
                        break;
                    default:
                        this._cachedResponse = null;
                }
                return this._cachedResponse;
            }
        },
        {
            // exposed for testing
            key: "__didCreateRequest",
            value: function __didCreateRequest(requestId) {
                this._requestId = requestId;
                XMLHttpRequest._interceptor && XMLHttpRequest._interceptor.requestSent(requestId, this._url || '', this._method || 'GET', this._headers);
            }
        },
        {
            // exposed for testing
            key: "__didUploadProgress",
            value: function __didUploadProgress(requestId, progress, total) {
                if (requestId === this._requestId) {
                    this.upload.dispatchEvent({
                        type: 'progress',
                        lengthComputable: true,
                        loaded: progress,
                        total
                    });
                }
            }
        },
        {
            key: "__didReceiveResponse",
            value: function __didReceiveResponse(requestId, status, responseHeaders, responseURL) {
                if (requestId === this._requestId) {
                    this._perfKey != null && this._performanceLogger.stopTimespan(this._perfKey);
                    this.status = status;
                    this.setResponseHeaders(responseHeaders);
                    this.setReadyState(this.HEADERS_RECEIVED);
                    if (responseURL || responseURL === '') {
                        this.responseURL = responseURL;
                    } else {
                        delete this.responseURL;
                    }
                    XMLHttpRequest._interceptor && XMLHttpRequest._interceptor.responseReceived(requestId, responseURL || this._url || '', status, responseHeaders || {});
                }
            }
        },
        {
            key: "__didReceiveData",
            value: function __didReceiveData(requestId, response) {
                if (requestId !== this._requestId) {
                    return;
                }
                this._response = response;
                this._cachedResponse = undefined; // force lazy recomputation
                this.setReadyState(this.LOADING);
                XMLHttpRequest._interceptor && XMLHttpRequest._interceptor.dataReceived(requestId, response);
            }
        },
        {
            key: "__didReceiveIncrementalData",
            value: function __didReceiveIncrementalData(requestId, responseText, progress, total) {
                if (requestId !== this._requestId) {
                    return;
                }
                if (!this._response) {
                    this._response = responseText;
                } else {
                    this._response += responseText;
                }
                if (XMLHttpRequest._profiling) {
                    performance.mark('Track:XMLHttpRequest:Incremental Data: ' + this._getMeasureURL());
                }
                XMLHttpRequest._interceptor && XMLHttpRequest._interceptor.dataReceived(requestId, responseText);
                this.setReadyState(this.LOADING);
                this.__didReceiveDataProgress(requestId, progress, total);
            }
        },
        {
            key: "__didReceiveDataProgress",
            value: function __didReceiveDataProgress(requestId, loaded, total) {
                if (requestId !== this._requestId) {
                    return;
                }
                this.dispatchEvent({
                    type: 'progress',
                    lengthComputable: total >= 0,
                    loaded,
                    total
                });
            }
        },
        {
            // exposed for testing
            key: "__didCompleteResponse",
            value: function __didCompleteResponse(requestId, error, timeOutError) {
                if (requestId === this._requestId) {
                    if (error) {
                        if (this._responseType === '' || this._responseType === 'text') {
                            this._response = error;
                        }
                        this._hasError = true;
                        if (timeOutError) {
                            this._timedOut = true;
                        }
                    }
                    this._clearSubscriptions();
                    this._requestId = null;
                    this.setReadyState(this.DONE);
                    if (XMLHttpRequest._profiling && this._startTime != null) {
                        var start = this._startTime;
                        performance.measure('Track:XMLHttpRequest:' + this._getMeasureURL(), {
                            start,
                            end: performance.now()
                        });
                    }
                    if (error) {
                        XMLHttpRequest._interceptor && XMLHttpRequest._interceptor.loadingFailed(requestId, error);
                    } else {
                        XMLHttpRequest._interceptor && XMLHttpRequest._interceptor.loadingFinished(requestId, this._response.length);
                    }
                }
            }
        },
        {
            key: "_clearSubscriptions",
            value: function _clearSubscriptions() {
                (this._subscriptions || []).forEach((sub)=>{
                    if (sub) {
                        sub.remove();
                    }
                });
                this._subscriptions = [];
            }
        },
        {
            key: "getAllResponseHeaders",
            value: function getAllResponseHeaders() {
                if (!this.responseHeaders) {
                    // according to the spec, return null if no response has been received
                    return null;
                }
                // Assign to non-nullable local variable.
                var responseHeaders = this.responseHeaders;
                var unsortedHeaders = new Map();
                for (var rawHeaderName of Object.keys(responseHeaders)){
                    var headerValue = responseHeaders[rawHeaderName];
                    var lowerHeaderName = rawHeaderName.toLowerCase();
                    var header = unsortedHeaders.get(lowerHeaderName);
                    if (header) {
                        header.headerValue += ', ' + headerValue;
                        unsortedHeaders.set(lowerHeaderName, header);
                    } else {
                        unsortedHeaders.set(lowerHeaderName, {
                            lowerHeaderName,
                            upperHeaderName: rawHeaderName.toUpperCase(),
                            headerValue
                        });
                    }
                }
                // Sort in ascending order, with a being less than b if a's name is legacy-uppercased-byte less than b's name.
                var sortedHeaders = _to_consumable_array._(unsortedHeaders.values()).sort((a, b)=>{
                    if (a.upperHeaderName < b.upperHeaderName) {
                        return -1;
                    }
                    if (a.upperHeaderName > b.upperHeaderName) {
                        return 1;
                    }
                    return 0;
                });
                // Combine into single text response.
                return sortedHeaders.map((header)=>{
                    return header.lowerHeaderName + ': ' + header.headerValue;
                }).join('\r\n') + '\r\n';
            }
        },
        {
            key: "getResponseHeader",
            value: function getResponseHeader(header) {
                var value = this._lowerCaseResponseHeaders[header.toLowerCase()];
                return value !== undefined ? value : null;
            }
        },
        {
            key: "setRequestHeader",
            value: function setRequestHeader(header, value) {
                if (this.readyState !== this.OPENED) {
                    throw new Error('Request has not been opened');
                }
                this._headers[header.toLowerCase()] = String(value);
            }
        },
        {
            /**
   * Custom extension for tracking origins of request.
   */ key: "setTrackingName",
            value: function setTrackingName(trackingName) {
                this._trackingName = trackingName;
                return this;
            }
        },
        {
            /**
   * Custom extension for setting a custom performance logger
   */ key: "setPerformanceLogger",
            value: function setPerformanceLogger(performanceLogger) {
                this._performanceLogger = performanceLogger;
                return this;
            }
        },
        {
            key: "open",
            value: function open(method, url, async) {
                /* Other optional arguments are not supported yet */ if (this.readyState !== this.UNSENT) {
                    throw new Error('Cannot open, already sending');
                }
                if (async !== undefined && !async) {
                    // async is default
                    throw new Error('Synchronous http requests are not supported');
                }
                if (!url) {
                    throw new Error('Cannot load an empty url');
                }
                this._method = method.toUpperCase();
                this._url = url;
                this._aborted = false;
                this.setReadyState(this.OPENED);
            }
        },
        {
            key: "send",
            value: function send(data) {
                if (this.readyState !== this.OPENED) {
                    throw new Error('Request has not been opened');
                }
                if (this._sent) {
                    throw new Error('Request has already been sent');
                }
                this._sent = true;
                var incrementalEvents = this._incrementalEvents || !!this.onreadystatechange || !!this.onprogress;
                this._subscriptions.push(RCTNetworking.addListener('didSendNetworkData', (args)=>this.__didUploadProgress.apply(this, _to_consumable_array._(args))));
                this._subscriptions.push(RCTNetworking.addListener('didReceiveNetworkResponse', (args)=>this.__didReceiveResponse.apply(this, _to_consumable_array._(args))));
                this._subscriptions.push(RCTNetworking.addListener('didReceiveNetworkData', (args)=>this.__didReceiveData.apply(this, _to_consumable_array._(args))));
                this._subscriptions.push(RCTNetworking.addListener('didReceiveNetworkIncrementalData', (args)=>this.__didReceiveIncrementalData.apply(this, _to_consumable_array._(args))));
                this._subscriptions.push(RCTNetworking.addListener('didReceiveNetworkDataProgress', (args)=>this.__didReceiveDataProgress.apply(this, _to_consumable_array._(args))));
                this._subscriptions.push(RCTNetworking.addListener('didCompleteNetworkResponse', (args)=>this.__didCompleteResponse.apply(this, _to_consumable_array._(args))));
                var nativeResponseType = 'text';
                if (this._responseType === 'arraybuffer') {
                    nativeResponseType = 'base64';
                }
                if (this._responseType === 'blob') {
                    nativeResponseType = 'blob';
                }
                var doSend = ()=>{
                    var friendlyName = this._trackingName !== 'unknown' ? this._trackingName : this._url;
                    this._perfKey = 'network_XMLHttpRequest_' + String(friendlyName);
                    this._performanceLogger.startTimespan(this._perfKey);
                    this._startTime = performance.now();
                    invariant(this._method, 'XMLHttpRequest method needs to be defined (%s).', friendlyName);
                    invariant(this._url, 'XMLHttpRequest URL needs to be defined (%s).', friendlyName);
                    RCTNetworking.sendRequest(this._method, this._trackingName, this._url, this._headers, data, /* $FlowFixMe(>=0.78.0 site=react_native_android_fb) This issue was found
         * when making Flow check .android.js files. */ nativeResponseType, incrementalEvents, this.timeout, // $FlowFixMe[method-unbinding] added when improving typing for this parameters
                    this.__didCreateRequest.bind(this), this.withCredentials);
                };
                if (DEBUG_NETWORK_SEND_DELAY) {
                    setTimeout(doSend, DEBUG_NETWORK_SEND_DELAY);
                } else {
                    doSend();
                }
            }
        },
        {
            key: "abort",
            value: function abort() {
                this._aborted = true;
                if (this._requestId) {
                    RCTNetworking.abortRequest(this._requestId);
                }
                // only call onreadystatechange if there is something to abort,
                // below logic is per spec
                if (!(this.readyState === this.UNSENT || this.readyState === this.OPENED && !this._sent || this.readyState === this.DONE)) {
                    this._reset();
                    this.setReadyState(this.DONE);
                }
                // Reset again after, in case modified in handler
                this._reset();
            }
        },
        {
            key: "setResponseHeaders",
            value: function setResponseHeaders(responseHeaders) {
                this.responseHeaders = responseHeaders || null;
                var headers = responseHeaders || {};
                this._lowerCaseResponseHeaders = Object.keys(headers).reduce((lcaseHeaders, headerName)=>{
                    // $FlowFixMe[invalid-computed-prop]
                    lcaseHeaders[headerName.toLowerCase()] = headers[headerName];
                    return lcaseHeaders;
                }, {});
            }
        },
        {
            key: "setReadyState",
            value: function setReadyState(newState) {
                this.readyState = newState;
                this.dispatchEvent({
                    type: 'readystatechange'
                });
                if (newState === this.DONE) {
                    if (this._aborted) {
                        this.dispatchEvent({
                            type: 'abort'
                        });
                    } else if (this._hasError) {
                        if (this._timedOut) {
                            this.dispatchEvent({
                                type: 'timeout'
                            });
                        } else {
                            this.dispatchEvent({
                                type: 'error'
                            });
                        }
                    } else {
                        this.dispatchEvent({
                            type: 'load'
                        });
                    }
                    this.dispatchEvent({
                        type: 'loadend'
                    });
                }
            }
        },
        {
            /* global EventListener */ key: "addEventListener",
            value: function addEventListener(type, listener) {
                // If we dont' have a 'readystatechange' event handler, we don't
                // have to send repeated LOADING events with incremental updates
                // to responseText, which will avoid a bunch of native -> JS
                // bridge traffic.
                if (type === 'readystatechange' || type === 'progress') {
                    this._incrementalEvents = true;
                }
                _get._(_get_prototype_of._(XMLHttpRequest.prototype), "addEventListener", this).call(this, type, listener);
            }
        },
        {
            key: "_getMeasureURL",
            value: function _getMeasureURL() {
                return this._trackingName ?? this._url ?? LABEL_FOR_MISSING_URL_FOR_PROFILING;
            }
        }
    ], [
        {
            key: "setInterceptor",
            value: function setInterceptor(interceptor) {
                XMLHttpRequest._interceptor = interceptor;
            }
        },
        {
            key: "enableProfiling",
            value: function enableProfiling(enableProfiling) {
                XMLHttpRequest._profiling = enableProfiling;
            }
        }
    ]);
    return XMLHttpRequest;
}(_eventtargetshim.default.apply(void 0, _to_consumable_array._(XHR_EVENTS)));
XMLHttpRequest.UNSENT = UNSENT;
XMLHttpRequest.OPENED = OPENED;
XMLHttpRequest.HEADERS_RECEIVED = HEADERS_RECEIVED;
XMLHttpRequest.LOADING = LOADING;
XMLHttpRequest.DONE = DONE;
XMLHttpRequest._interceptor = null;
XMLHttpRequest._profiling = false;
module.exports = XMLHttpRequest;


}),
99394: (function (module, __unused_webpack_exports, __webpack_require__) {
"use strict";
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 *      
 * @format
 */ 
var Blob = __webpack_require__(56540);
var binaryToBase64 = __webpack_require__(74259);
var FormData = __webpack_require__(38834);
function convertRequestBody(body) {
    if (typeof body === 'string') {
        return {
            string: body
        };
    }
    if (body instanceof Blob) {
        return {
            blob: body.data
        };
    }
    if (body instanceof FormData) {
        return {
            formData: body.getParts()
        };
    }
    if (body instanceof ArrayBuffer || ArrayBuffer.isView(body)) {
        /* $FlowFixMe[incompatible-call] : no way to assert that 'body' is indeed
     * an ArrayBufferView */ return {
            base64: binaryToBase64(body)
        };
    }
    return body;
}
module.exports = convertRequestBody;


}),
67006: (function (module, __unused_webpack_exports, __webpack_require__) {
"use strict";
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 *       strict
 * @format
 */ /* globals Headers, Request, Response */ 
// side-effectful require() to put fetch,
// Headers, Request, Response in global scope
__webpack_require__(71840);
module.exports = {
    fetch,
    Headers,
    Request,
    Response
};


}),
725: (function (__unused_webpack_module, exports, __webpack_require__) {
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 *       strict
 * @format
 */ Object.defineProperty(exports, "__esModule", ({
    value: true
}));
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: Object.getOwnPropertyDescriptor(all, name).get
    });
}
_export(exports, {
    get beginAsyncEvent () {
        return beginAsyncEvent;
    },
    get beginEvent () {
        return beginEvent;
    },
    get counterEvent () {
        return counterEvent;
    },
    get endAsyncEvent () {
        return endAsyncEvent;
    },
    get endEvent () {
        return endEvent;
    },
    get isEnabled () {
        return isEnabled;
    },
    get setEnabled () {
        return setEnabled;
    }
});
var TRACE_TAG_REACT_APPS = 1 << 17; // eslint-disable-line no-bitwise
var _asyncCookie = 0;
function isEnabled() {
    return __webpack_require__.g.nativeTraceIsTracing ? __webpack_require__.g.nativeTraceIsTracing(TRACE_TAG_REACT_APPS) : Boolean(__webpack_require__.g.__RCTProfileIsProfiling);
}
function setEnabled(_doEnable) {}
function beginEvent(eventName, args) {
    if (isEnabled()) {
        var eventNameString = typeof eventName === 'function' ? eventName() : eventName;
        __webpack_require__.g.nativeTraceBeginSection(TRACE_TAG_REACT_APPS, eventNameString, args);
    }
}
function endEvent(args) {
    if (isEnabled()) {
        __webpack_require__.g.nativeTraceEndSection(TRACE_TAG_REACT_APPS, args);
    }
}
function beginAsyncEvent(eventName, args) {
    var cookie = _asyncCookie;
    if (isEnabled()) {
        _asyncCookie++;
        var eventNameString = typeof eventName === 'function' ? eventName() : eventName;
        __webpack_require__.g.nativeTraceBeginAsyncSection(TRACE_TAG_REACT_APPS, eventNameString, cookie, args);
    }
    return cookie;
}
function endAsyncEvent(eventName, cookie, args) {
    if (isEnabled()) {
        var eventNameString = typeof eventName === 'function' ? eventName() : eventName;
        __webpack_require__.g.nativeTraceEndAsyncSection(TRACE_TAG_REACT_APPS, eventNameString, cookie, args);
    }
}
function counterEvent(eventName, value) {
    if (isEnabled()) {
        var eventNameString = typeof eventName === 'function' ? eventName() : eventName;
        __webpack_require__.g.nativeTraceCounter && __webpack_require__.g.nativeTraceCounter(TRACE_TAG_REACT_APPS, eventNameString, value);
    }
}
if (false) { var Systrace }


}),
68717: (function (module, __unused_webpack_exports, __webpack_require__) {
"use strict";
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * @format
 *       strict
 */ 
var Promise = __webpack_require__(46361);
__webpack_require__(82639);
if (false) {}
module.exports = Promise;


}),
49178: (function (__unused_webpack_module, exports, __webpack_require__) {
var __webpack_unused_export__;
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 *       strict-local
 * @format
 * @oncall react_native
 */ __webpack_unused_export__ = ({
    value: true
});
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return _default;
    }
}));
var _interop_require_default = __webpack_require__(66705);
var _interop_require_wildcard = __webpack_require__(83610);
var _jsxruntime = __webpack_require__(70095);
var _View = /*#__PURE__*/ _interop_require_default._(__webpack_require__(87847));
var _StyleSheet = /*#__PURE__*/ _interop_require_default._(__webpack_require__(5938));
var _RootTag = __webpack_require__(90839);
var _react = /*#__PURE__*/ _interop_require_wildcard._(__webpack_require__(31399));
var AppContainer = (ref)=>{
    var children = ref.children, fabric = ref.fabric, initialProps = ref.initialProps, rootTag = ref.rootTag, WrapperComponent = ref.WrapperComponent, rootViewStyle = ref.rootViewStyle;
    var innerView = children;
    if (WrapperComponent != null) {
        innerView = /*#__PURE__*/ (0, _jsxruntime.jsx)(WrapperComponent, {
            initialProps: initialProps,
            fabric: fabric === true,
            children: innerView
        });
    }
    return /*#__PURE__*/ (0, _jsxruntime.jsx)(_RootTag.RootTagContext.Provider, {
        value: (0, _RootTag.createRootTag)(rootTag),
        children: /*#__PURE__*/ (0, _jsxruntime.jsx)(_View.default, {
            style: rootViewStyle || styles.root,
            pointerEvents: "box-none",
            children: innerView
        })
    });
};
var styles = _StyleSheet.default.create({
    root: {
        flex: 1
    }
});
var _default = AppContainer;


}),
68710: (function (module, exports, __webpack_require__) {
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * @format
 *      
 */ Object.defineProperty(exports, "__esModule", ({
    value: true
}));
var _interop_require_wildcard = __webpack_require__(83610);
var _react = /*#__PURE__*/ _interop_require_wildcard._(__webpack_require__(31399));
var AppContainer =  false ? 0 : (__webpack_require__(49178)/* ["default"] */["default"]);
module.exports = AppContainer;


}),
80037: (function (module, exports, __webpack_require__) {
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 *      
 * @format
 */ Object.defineProperty(exports, "__esModule", ({
    value: true
}));
var _interop_require_default = __webpack_require__(66705);
var _object_spread = __webpack_require__(36192);
var _BugReporting = /*#__PURE__*/ _interop_require_default._(__webpack_require__(47895));
var _registerCallableModule = /*#__PURE__*/ _interop_require_default._(__webpack_require__(23882));
var _createPerformanceLogger = /*#__PURE__*/ _interop_require_default._(__webpack_require__(41268));
var _infoLog = /*#__PURE__*/ _interop_require_default._(__webpack_require__(63649));
var _SceneTracker = /*#__PURE__*/ _interop_require_default._(__webpack_require__(17858));
var _DisplayMode = __webpack_require__(58155);
var _HeadlessJsTaskError = /*#__PURE__*/ _interop_require_default._(__webpack_require__(2515));
var _NativeHeadlessJsTaskSupport = /*#__PURE__*/ _interop_require_default._(__webpack_require__(24149));
var _renderApplication = /*#__PURE__*/ _interop_require_default._(__webpack_require__(74767));
var _RendererProxy = __webpack_require__(46513);
var _invariant = /*#__PURE__*/ _interop_require_default._(__webpack_require__(56481));
var runnables = {};
var runCount = 1;
var sections = {};
var taskProviders = new Map();
var taskCancelProviders = new Map();
var componentProviderInstrumentationHook = (component)=>component();
var wrapperComponentProvider;
var rootViewStyleProvider;
/**
 * `AppRegistry` is the JavaScript entry point to running all React Native apps.
 *
 * See https://reactnative.dev/docs/appregistry
 */ var AppRegistry = {
    setWrapperComponentProvider (provider) {
        wrapperComponentProvider = provider;
    },
    setRootViewStyleProvider (provider) {
        rootViewStyleProvider = provider;
    },
    registerConfig (config) {
        config.forEach((appConfig)=>{
            if (appConfig.run) {
                AppRegistry.registerRunnable(appConfig.appKey, appConfig.run);
            } else {
                (0, _invariant.default)(appConfig.component != null, 'AppRegistry.registerConfig(...): Every config is expected to set ' + 'either `run` or `component`, but `%s` has neither.', appConfig.appKey);
                AppRegistry.registerComponent(appConfig.appKey, appConfig.component, appConfig.section);
            }
        });
    },
    /**
   * Registers an app's root component.
   *
   * See https://reactnative.dev/docs/appregistry#registercomponent
   */ registerComponent (appKey, componentProvider, section) {
        var scopedPerformanceLogger = (0, _createPerformanceLogger.default)();
        runnables[appKey] = (appParameters, displayMode)=>{
            (0, _renderApplication.default)(componentProviderInstrumentationHook(componentProvider, scopedPerformanceLogger), appParameters.initialProps, appParameters.rootTag, wrapperComponentProvider && wrapperComponentProvider(appParameters), rootViewStyleProvider && rootViewStyleProvider(appParameters), appParameters.fabric, scopedPerformanceLogger, appKey === 'LogBox', appKey, displayMode);
        };
        if (section) {
            sections[appKey] = runnables[appKey];
        }
        return appKey;
    },
    registerRunnable (appKey, run) {
        runnables[appKey] = run;
        return appKey;
    },
    registerSection (appKey, component) {
        AppRegistry.registerComponent(appKey, component, true);
    },
    getAppKeys () {
        return Object.keys(runnables);
    },
    getSectionKeys () {
        return Object.keys(sections);
    },
    getSections () {
        return _object_spread._({}, sections);
    },
    getRunnable (appKey) {
        return runnables[appKey];
    },
    getRegistry () {
        return {
            sections: AppRegistry.getSectionKeys(),
            runnables: _object_spread._({}, runnables)
        };
    },
    setComponentProviderInstrumentationHook (hook) {
        componentProviderInstrumentationHook = hook;
    },
    /**
   * Loads the JavaScript bundle and runs the app.
   *
   * See https://reactnative.dev/docs/appregistry#runapplication
   */ runApplication (appKey, appParameters, displayMode) {
        if (appKey !== 'LogBox') {
            var logParams =  false ? 0 : '';
            var msg = `Running "${appKey}"${logParams}`;
            (0, _infoLog.default)(msg);
            _BugReporting.default.addSource('AppRegistry.runApplication' + runCount++, ()=>msg);
        }
        (0, _invariant.default)(runnables[appKey], `"${appKey}" has not been registered. This can happen if:\n` + '* Metro (the local dev server) is run from the wrong folder. ' + 'Check if Metro is running, stop it and restart it in the current project.\n' + "* A module failed to load due to an error and `AppRegistry.registerComponent` wasn't called.");
        _SceneTracker.default.setActiveScene({
            name: appKey
        });
        runnables[appKey](appParameters, (0, _DisplayMode.coerceDisplayMode)(displayMode));
    },
    /**
   * Update initial props for a surface that's already rendered
   */ setSurfaceProps (appKey, appParameters, displayMode) {
        if (appKey !== 'LogBox') {
            var msg = 'Updating props for Surface "' + appKey + '" with ' + JSON.stringify(appParameters);
            (0, _infoLog.default)(msg);
            _BugReporting.default.addSource('AppRegistry.setSurfaceProps' + runCount++, ()=>msg);
        }
        (0, _invariant.default)(runnables[appKey], `"${appKey}" has not been registered. This can happen if:\n` + '* Metro (the local dev server) is run from the wrong folder. ' + 'Check if Metro is running, stop it and restart it in the current project.\n' + "* A module failed to load due to an error and `AppRegistry.registerComponent` wasn't called.");
        runnables[appKey](appParameters, (0, _DisplayMode.coerceDisplayMode)(displayMode));
    },
    /**
   * Stops an application when a view should be destroyed.
   *
   * See https://reactnative.dev/docs/appregistry#unmountapplicationcomponentatroottag
   */ unmountApplicationComponentAtRootTag (rootTag) {
        (0, _RendererProxy.unmountComponentAtNodeAndRemoveContainer)(rootTag);
    },
    /**
   * Register a headless task. A headless task is a bit of code that runs without a UI.
   *
   * See https://reactnative.dev/docs/appregistry#registerheadlesstask
   */ registerHeadlessTask (taskKey, taskProvider) {
        // $FlowFixMe[object-this-reference]
        this.registerCancellableHeadlessTask(taskKey, taskProvider, ()=>()=>{
            /* Cancel is no-op */ });
    },
    /**
   * Register a cancellable headless task. A headless task is a bit of code that runs without a UI.
   *
   * See https://reactnative.dev/docs/appregistry#registercancellableheadlesstask
   */ registerCancellableHeadlessTask (taskKey, taskProvider, taskCancelProvider) {
        if (taskProviders.has(taskKey)) {
            console.warn(`registerHeadlessTask or registerCancellableHeadlessTask called multiple times for same key '${taskKey}'`);
        }
        taskProviders.set(taskKey, taskProvider);
        taskCancelProviders.set(taskKey, taskCancelProvider);
    },
    /**
   * Only called from native code. Starts a headless task.
   *
   * See https://reactnative.dev/docs/appregistry#startheadlesstask
   */ startHeadlessTask (taskId, taskKey, data) {
        var taskProvider = taskProviders.get(taskKey);
        if (!taskProvider) {
            console.warn(`No task registered for key ${taskKey}`);
            if (_NativeHeadlessJsTaskSupport.default) {
                _NativeHeadlessJsTaskSupport.default.notifyTaskFinished(taskId);
            }
            return;
        }
        taskProvider()(data).then(()=>{
            if (_NativeHeadlessJsTaskSupport.default) {
                _NativeHeadlessJsTaskSupport.default.notifyTaskFinished(taskId);
            }
        }).catch((reason)=>{
            console.error(reason);
            if (_NativeHeadlessJsTaskSupport.default && reason instanceof _HeadlessJsTaskError.default) {
                // $FlowFixMe[unused-promise]
                _NativeHeadlessJsTaskSupport.default.notifyTaskRetry(taskId).then((retryPosted)=>{
                    if (!retryPosted) {
                        _NativeHeadlessJsTaskSupport.default.notifyTaskFinished(taskId);
                    }
                });
            }
        });
    },
    /**
   * Only called from native code. Cancels a headless task.
   *
   * See https://reactnative.dev/docs/appregistry#cancelheadlesstask
   */ cancelHeadlessTask (taskId, taskKey) {
        var taskCancelProvider = taskCancelProviders.get(taskKey);
        if (!taskCancelProvider) {
            throw new Error(`No task canceller registered for key '${taskKey}'`);
        }
        taskCancelProvider()();
    }
};
// Register LogBox as a default surface
AppRegistry.registerComponent('LogBox', ()=>{
    if (false) {} else {
        return function NoOp() {
            return null;
        };
    }
});
__webpack_require__.g.RN$AppRegistry = AppRegistry;
// Backwards compat with SurfaceRegistry, remove me later
__webpack_require__.g.RN$SurfaceRegistry = {
    renderSurface: AppRegistry.runApplication,
    setSurfaceProps: AppRegistry.setSurfaceProps
};
(0, _registerCallableModule.default)('AppRegistry', AppRegistry);
module.exports = AppRegistry;


}),
65144: (function (module, exports, __webpack_require__) {
"use strict";
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 *      
 * @format
 */ 
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
var _interop_require_default = __webpack_require__(66705);
var _object_spread = __webpack_require__(36192);
var _object_spread_props = __webpack_require__(83590);
var _NativeComponentRegistryUnstable = __webpack_require__(53655);
var _defineLazyObjectProperty = /*#__PURE__*/ _interop_require_default._(__webpack_require__(53077));
var _Platform = /*#__PURE__*/ _interop_require_default._(__webpack_require__(181));
var _FabricUIManager = __webpack_require__(4697);
var _nullthrows = /*#__PURE__*/ _interop_require_default._(__webpack_require__(92956));
function raiseSoftError(methodName, details) {
    console.error(`[ReactNative Architecture][JS] '${methodName}' is not available in the new React Native architecture.` + (details ? ` ${details}` : ''));
}
var getUIManagerConstants = __webpack_require__.g.RN$LegacyInterop_UIManager_getConstants;
var getUIManagerConstantsCached = function() {
    var wasCalledOnce = false;
    var result = {};
    return ()=>{
        if (!wasCalledOnce) {
            result = (0, _nullthrows.default)(getUIManagerConstants)();
            wasCalledOnce = true;
        }
        return result;
    };
}();
var getConstantsForViewManager = __webpack_require__.g.RN$LegacyInterop_UIManager_getConstantsForViewManager;
var getDefaultEventTypes = __webpack_require__.g.RN$LegacyInterop_UIManager_getDefaultEventTypes;
var getDefaultEventTypesCached = function() {
    var wasCalledOnce = false;
    var result = null;
    return ()=>{
        if (!wasCalledOnce) {
            result = (0, _nullthrows.default)(getDefaultEventTypes)();
            wasCalledOnce = true;
        }
        return result;
    };
}();
/**
 * UIManager.js overrides these APIs.
 * Pull them out from the BridgelessUIManager implementation. So, we can ignore them.
 */ var UIManagerJSOverridenAPIs = {
    measure: (reactTag, callback)=>{
        raiseSoftError('measure');
    },
    measureInWindow: (reactTag, callback)=>{
        raiseSoftError('measureInWindow');
    },
    measureLayout: (reactTag, ancestorReactTag, errorCallback, callback)=>{
        raiseSoftError('measureLayout');
    },
    measureLayoutRelativeToParent: (reactTag, errorCallback, callback)=>{
        raiseSoftError('measureLayoutRelativeToParent');
    },
    dispatchViewManagerCommand: (reactTag, commandID, commandArgs)=>{
        raiseSoftError('dispatchViewManagerCommand');
    }
};
/**
 * Leave Unimplemented: The only thing that called these methods was the paper renderer.
 * In OSS, the New Architecture will just use the Fabric renderer, which uses
 * different APIs.
 */ var UIManagerJSUnusedInNewArchAPIs = {
    createView: (reactTag, viewName, rootTag, props)=>{
        raiseSoftError('createView');
    },
    updateView: (reactTag, viewName, props)=>{
        raiseSoftError('updateView');
    },
    setChildren: (containerTag, reactTags)=>{
        raiseSoftError('setChildren');
    },
    manageChildren: (containerTag, moveFromIndices, moveToIndices, addChildReactTags, addAtIndices, removeAtIndices)=>{
        raiseSoftError('manageChildren');
    },
    setJSResponder: (reactTag, blockNativeResponder)=>{
        raiseSoftError('setJSResponder');
    },
    clearJSResponder: ()=>{
        raiseSoftError('clearJSResponder');
    }
};
/**
 * Leave unimplemented: These APIs are deprecated in UIManager. We will eventually remove
 * them from React Native.
 */ var UIManagerJSDeprecatedPlatformAPIs = _Platform.default.select({
    android: {}
});
var UIManagerJSPlatformAPIs = _Platform.default.select({
    android: {
        getConstantsForViewManager: (viewManagerName)=>{
            if (getConstantsForViewManager) {
                return getConstantsForViewManager(viewManagerName);
            }
            raiseSoftError('getConstantsForViewManager');
            return {};
        },
        getDefaultEventTypes: ()=>{
            if (getDefaultEventTypes) {
                return getDefaultEventTypesCached();
            }
            raiseSoftError('getDefaultEventTypes');
            return [];
        },
        setLayoutAnimationEnabledExperimental: (enabled)=>{
            /**
       * Layout animations are always enabled in the New Architecture.
       * They cannot be turned off.
       */ if (!enabled) {
                raiseSoftError('setLayoutAnimationEnabledExperimental(false)', 'Layout animations are always enabled in the New Architecture.');
            }
        },
        sendAccessibilityEvent: (reactTag, eventType)=>{
            // Keep this in sync with java:FabricUIManager.sendAccessibilityEventFromJS
            // and legacySendAccessibilityEvent.android.js
            var AccessibilityEvent = {
                TYPE_VIEW_FOCUSED: 0x00000008,
                TYPE_WINDOW_STATE_CHANGED: 0x00000020,
                TYPE_VIEW_CLICKED: 0x00000001,
                TYPE_VIEW_HOVER_ENTER: 0x00000080
            };
            var eventName = null;
            if (eventType === AccessibilityEvent.TYPE_VIEW_FOCUSED) {
                eventName = 'focus';
            } else if (eventType === AccessibilityEvent.TYPE_WINDOW_STATE_CHANGED) {
                eventName = 'windowStateChange';
            } else if (eventType === AccessibilityEvent.TYPE_VIEW_CLICKED) {
                eventName = 'click';
            } else if (eventType === AccessibilityEvent.TYPE_VIEW_HOVER_ENTER) {
                eventName = 'viewHoverEnter';
            } else {
                console.error(`sendAccessibilityEvent() dropping event: Called with unsupported eventType: ${eventType}`);
                return;
            }
            var FabricUIManager = (0, _nullthrows.default)((0, _FabricUIManager.getFabricUIManager)());
            var shadowNode = FabricUIManager.findShadowNodeByTag_DEPRECATED(reactTag);
            if (!shadowNode) {
                console.error(`sendAccessibilityEvent() dropping event: Cannot find view with tag #${reactTag}`);
                return;
            }
            FabricUIManager.sendAccessibilityEvent(shadowNode, eventName);
        }
    },
    ios: {
        /**
     * TODO(T174674274): Implement lazy loading of legacy view managers in the new architecture.
     *
     * Leave this unimplemented until we implement lazy loading of legacy modules and view managers in the new architecture.
     */ lazilyLoadView: (name)=>{
            raiseSoftError('lazilyLoadView');
            return {};
        },
        focus: (reactTag)=>{
            var FabricUIManager = (0, _nullthrows.default)((0, _FabricUIManager.getFabricUIManager)());
            var shadowNode = FabricUIManager.findShadowNodeByTag_DEPRECATED(reactTag);
            if (!shadowNode) {
                console.error(`focus() noop: Cannot find view with tag #${reactTag}`);
                return;
            }
            FabricUIManager.dispatchCommand(shadowNode, 'focus', []);
        },
        blur: (reactTag)=>{
            var FabricUIManager = (0, _nullthrows.default)((0, _FabricUIManager.getFabricUIManager)());
            var shadowNode = FabricUIManager.findShadowNodeByTag_DEPRECATED(reactTag);
            if (!shadowNode) {
                console.error(`blur() noop: Cannot find view with tag #${reactTag}`);
                return;
            }
            FabricUIManager.dispatchCommand(shadowNode, 'blur', []);
        }
    }
});
var UIManagerJS = _object_spread_props._(_object_spread._({}, UIManagerJSOverridenAPIs, UIManagerJSDeprecatedPlatformAPIs, UIManagerJSPlatformAPIs, UIManagerJSUnusedInNewArchAPIs), {
    getViewManagerConfig: (viewManagerName)=>{
        if (getUIManagerConstants) {
            var constants = getUIManagerConstantsCached();
            if (!constants[viewManagerName] && UIManagerJS.getConstantsForViewManager) {
                constants[viewManagerName] = UIManagerJS.getConstantsForViewManager(viewManagerName);
            }
            return constants[viewManagerName];
        } else {
            raiseSoftError(`getViewManagerConfig('${viewManagerName}')`, `If '${viewManagerName}' has a ViewManager and you want to retrieve its native ViewConfig, please turn on the native ViewConfig interop layer. If you want to see if this component is registered with React Native, please call hasViewManagerConfig('${viewManagerName}') instead.`);
            return null;
        }
    },
    hasViewManagerConfig: (viewManagerName)=>{
        return (0, _NativeComponentRegistryUnstable.unstable_hasComponent)(viewManagerName);
    },
    getConstants: ()=>{
        if (getUIManagerConstants) {
            return getUIManagerConstantsCached();
        } else {
            raiseSoftError('getConstants');
            return null;
        }
    },
    findSubviewIn: (reactTag, point, callback)=>{
        var FabricUIManager = (0, _nullthrows.default)((0, _FabricUIManager.getFabricUIManager)());
        var shadowNode = FabricUIManager.findShadowNodeByTag_DEPRECATED(reactTag);
        if (!shadowNode) {
            console.error(`findSubviewIn() noop: Cannot find view with reactTag ${reactTag}`);
            return;
        }
        FabricUIManager.findNodeAtPoint(shadowNode, point[0], point[1], function(internalInstanceHandle) {
            if (internalInstanceHandle == null) {
                console.error('findSubviewIn(): Cannot find node at point');
                return;
            }
            var instanceHandle = internalInstanceHandle;
            var node = instanceHandle.stateNode.node;
            if (!node) {
                console.error('findSubviewIn(): Cannot find node at point');
                return;
            }
            var nativeViewTag = instanceHandle.stateNode.canonical.nativeTag;
            FabricUIManager.measure(node, function(x, y, width, height, pageX, pageY) {
                callback(nativeViewTag, pageX, pageY, width, height);
            });
        });
    },
    viewIsDescendantOf: (reactTag, ancestorReactTag, callback)=>{
        var FabricUIManager = (0, _nullthrows.default)((0, _FabricUIManager.getFabricUIManager)());
        var shadowNode = FabricUIManager.findShadowNodeByTag_DEPRECATED(reactTag);
        if (!shadowNode) {
            console.error(`viewIsDescendantOf() noop: Cannot find view with reactTag ${reactTag}`);
            return;
        }
        var ancestorShadowNode = FabricUIManager.findShadowNodeByTag_DEPRECATED(ancestorReactTag);
        if (!ancestorShadowNode) {
            console.error(`viewIsDescendantOf() noop: Cannot find view with ancestorReactTag ${ancestorReactTag}`);
            return;
        }
        // Keep this in sync with ReadOnlyNode.js
        var DOCUMENT_POSITION_CONTAINED_BY = 16;
        var result = FabricUIManager.compareDocumentPosition(ancestorShadowNode, shadowNode);
        // eslint-disable-next-line no-bitwise
        var isAncestor = (result & DOCUMENT_POSITION_CONTAINED_BY) !== 0;
        callback([
            isAncestor
        ]);
    },
    configureNextLayoutAnimation: (config, callback, errorCallback)=>{
        var FabricUIManager = (0, _nullthrows.default)((0, _FabricUIManager.getFabricUIManager)());
        FabricUIManager.configureNextLayoutAnimation(config, callback, errorCallback);
    }
});
if (getUIManagerConstants) {
    Object.keys(getUIManagerConstantsCached()).forEach((viewConfigName)=>{
        UIManagerJS[viewConfigName] = getUIManagerConstantsCached()[viewConfigName];
    });
    if (UIManagerJS.getConstants().ViewManagerNames) {
        UIManagerJS.getConstants().ViewManagerNames.forEach((viewManagerName)=>{
            (0, _defineLazyObjectProperty.default)(UIManagerJS, viewManagerName, {
                get: ()=>(0, _nullthrows.default)(UIManagerJS.getConstantsForViewManager)(viewManagerName)
            });
        });
    }
}
module.exports = UIManagerJS;


}),
58155: (function (__unused_webpack_module, exports) {
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 *       strict-local
 * @format
 */ /** DisplayMode should be in sync with the method displayModeToInt from
 * react/renderer/uimanager/primitives.h. */ Object.defineProperty(exports, "__esModule", ({
    value: true
}));
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: Object.getOwnPropertyDescriptor(all, name).get
    });
}
_export(exports, {
    get coerceDisplayMode () {
        return coerceDisplayMode;
    },
    get default () {
        return _default;
    }
});
var DisplayMode = Object.freeze({
    VISIBLE: 1,
    SUSPENDED: 2,
    HIDDEN: 3
});
function coerceDisplayMode(value) {
    switch(value){
        case DisplayMode.SUSPENDED:
            return DisplayMode.SUSPENDED;
        case DisplayMode.HIDDEN:
            return DisplayMode.HIDDEN;
        default:
            return DisplayMode.VISIBLE;
    }
}
var _default = DisplayMode;


}),
4697: (function (__unused_webpack_module, exports, __webpack_require__) {
"use strict";
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 *       strict
 * @format
 */ 
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "getFabricUIManager", ({
    enumerable: true,
    get: function() {
        return getFabricUIManager;
    }
}));
var _interop_require_default = __webpack_require__(66705);
var _defineLazyObjectProperty = /*#__PURE__*/ _interop_require_default._(__webpack_require__(53077));
var nativeFabricUIManagerProxy;
// This is a list of all the methods in global.nativeFabricUIManager that we'll
// cache in JavaScript, as the current implementation of the binding
// creates a new host function every time methods are accessed.
var CACHED_PROPERTIES = [
    'createNode',
    'cloneNode',
    'cloneNodeWithNewChildren',
    'cloneNodeWithNewProps',
    'cloneNodeWithNewChildrenAndProps',
    'createChildSet',
    'appendChild',
    'appendChildToSet',
    'completeRoot',
    'measure',
    'measureInWindow',
    'measureLayout',
    'configureNextLayoutAnimation',
    'sendAccessibilityEvent',
    'findShadowNodeByTag_DEPRECATED',
    'setNativeProps',
    'dispatchCommand',
    'compareDocumentPosition',
    'getBoundingClientRect'
];
function getFabricUIManager() {
    if (nativeFabricUIManagerProxy == null && __webpack_require__.g.nativeFabricUIManager != null) {
        nativeFabricUIManagerProxy = createProxyWithCachedProperties(__webpack_require__.g.nativeFabricUIManager, CACHED_PROPERTIES);
    }
    return nativeFabricUIManagerProxy;
}
/**
 *
 * Returns an object that caches the specified properties the first time they
 * are accessed, and falls back to the original object for other properties.
 */ function createProxyWithCachedProperties(implementation, propertiesToCache) {
    var _loop = function(propertyName) {
        (0, _defineLazyObjectProperty.default)(proxy, propertyName, {
            // $FlowExpectedError[prop-missing]
            get: ()=>implementation[propertyName]
        });
    };
    var proxy = Object.create(implementation);
    for (var propertyName of propertiesToCache)_loop(propertyName);
    return proxy;
}


}),
2515: (function (__unused_webpack_module, exports, __webpack_require__) {
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 *       strict-local
 * @format
 */ Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return HeadlessJsTaskError;
    }
}));
var _call_super = __webpack_require__(19436);
var _class_call_check = __webpack_require__(8864);
var _inherits = __webpack_require__(82397);
var _wrap_native_super = __webpack_require__(30753);
var HeadlessJsTaskError = /*#__PURE__*/ function(Error1) {
    "use strict";
    _inherits._(HeadlessJsTaskError, Error1);
    function HeadlessJsTaskError() {
        _class_call_check._(this, HeadlessJsTaskError);
        return _call_super._(this, HeadlessJsTaskError, arguments);
    }
    return HeadlessJsTaskError;
}(_wrap_native_super._(Error));


}),
1394: (function (module, exports, __webpack_require__) {
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 *      
 * @format
 */ Object.defineProperty(exports, "__esModule", ({
    value: true
}));
var _interop_require_default = __webpack_require__(66705);
var _object_spread = __webpack_require__(36192);
var _object_spread_props = __webpack_require__(83590);
var _NativeUIManager = /*#__PURE__*/ _interop_require_default._(__webpack_require__(40142));
var _nullthrows = /*#__PURE__*/ _interop_require_default._(__webpack_require__(92956));
var NativeModules = __webpack_require__(40225);
var defineLazyObjectProperty = __webpack_require__(53077);
var Platform = __webpack_require__(181);
var UIManagerProperties = __webpack_require__(85238);
var viewManagerConfigs = {};
var triedLoadingConfig = new Set();
var NativeUIManagerConstants = {};
var isNativeUIManagerConstantsSet = false;
function getConstants() {
    if (!isNativeUIManagerConstantsSet) {
        NativeUIManagerConstants = _NativeUIManager.default.getConstants();
        isNativeUIManagerConstantsSet = true;
    }
    return NativeUIManagerConstants;
}
function getViewManagerConfig(viewManagerName) {
    if (viewManagerConfigs[viewManagerName] === undefined && __webpack_require__.g.nativeCallSyncHook && // If we're in the Chrome Debugger, let's not even try calling the sync method
    _NativeUIManager.default.getConstantsForViewManager) {
        try {
            viewManagerConfigs[viewManagerName] = _NativeUIManager.default.getConstantsForViewManager(viewManagerName);
        } catch (e) {
            console.error("NativeUIManager.getConstantsForViewManager('" + viewManagerName + "') threw an exception.", e);
            viewManagerConfigs[viewManagerName] = null;
        }
    }
    var config = viewManagerConfigs[viewManagerName];
    if (config) {
        return config;
    }
    // If we're in the Chrome Debugger, let's not even try calling the sync
    // method.
    if (!__webpack_require__.g.nativeCallSyncHook) {
        return config;
    }
    if (_NativeUIManager.default.lazilyLoadView && !triedLoadingConfig.has(viewManagerName)) {
        var result = (0, _nullthrows.default)(_NativeUIManager.default.lazilyLoadView)(viewManagerName);
        triedLoadingConfig.add(viewManagerName);
        if (result != null && result.viewConfig != null) {
            getConstants()[viewManagerName] = result.viewConfig;
            lazifyViewManagerConfig(viewManagerName);
        }
    }
    return viewManagerConfigs[viewManagerName];
}
// $FlowFixMe[cannot-spread-interface]
var UIManagerJS = _object_spread_props._(_object_spread._({}, _NativeUIManager.default), {
    createView (reactTag, viewName, rootTag, props) {
        if (Platform.OS === 'ios' && viewManagerConfigs[viewName] === undefined) {
            // This is necessary to force the initialization of native viewManager
            // classes in iOS when using static ViewConfigs
            getViewManagerConfig(viewName);
        }
        _NativeUIManager.default.createView(reactTag, viewName, rootTag, props);
    },
    getConstants () {
        return getConstants();
    },
    getViewManagerConfig (viewManagerName) {
        return getViewManagerConfig(viewManagerName);
    },
    hasViewManagerConfig (viewManagerName) {
        return getViewManagerConfig(viewManagerName) != null;
    }
});
// TODO (T45220498): Remove this.
// 3rd party libs may be calling `NativeModules.UIManager.getViewManagerConfig()`
// instead of `UIManager.getViewManagerConfig()` off UIManager.js.
// This is a workaround for now.
// $FlowFixMe[prop-missing]
_NativeUIManager.default.getViewManagerConfig = UIManagerJS.getViewManagerConfig;
function lazifyViewManagerConfig(viewName) {
    var viewConfig = getConstants()[viewName];
    viewManagerConfigs[viewName] = viewConfig;
    if (viewConfig.Manager) {
        defineLazyObjectProperty(viewConfig, 'Constants', {
            get: ()=>{
                var viewManager = NativeModules[viewConfig.Manager];
                var constants = {};
                viewManager && Object.keys(viewManager).forEach((key)=>{
                    var value = viewManager[key];
                    if (typeof value !== 'function') {
                        constants[key] = value;
                    }
                });
                return constants;
            }
        });
        defineLazyObjectProperty(viewConfig, 'Commands', {
            get: ()=>{
                var viewManager = NativeModules[viewConfig.Manager];
                var commands = {};
                var index = 0;
                viewManager && Object.keys(viewManager).forEach((key)=>{
                    var value = viewManager[key];
                    if (typeof value === 'function') {
                        commands[key] = index++;
                    }
                });
                return commands;
            }
        });
    }
}
/**
 * Copies the ViewManager constants and commands into UIManager. This is
 * only needed for iOS, which puts the constants in the ViewManager
 * namespace instead of UIManager, unlike Android.
 */ if (Platform.OS === 'ios') {
    Object.keys(getConstants()).forEach((viewName)=>{
        lazifyViewManagerConfig(viewName);
    });
} else if (getConstants().ViewManagerNames) {
    _NativeUIManager.default.getConstants().ViewManagerNames.forEach((viewManagerName)=>{
        defineLazyObjectProperty(_NativeUIManager.default, viewManagerName, {
            get: ()=>(0, _nullthrows.default)(_NativeUIManager.default.getConstantsForViewManager)(viewManagerName)
        });
    });
}
if (!__webpack_require__.g.nativeCallSyncHook) {
    Object.keys(getConstants()).forEach((viewManagerName)=>{
        if (!UIManagerProperties.includes(viewManagerName)) {
            if (!viewManagerConfigs[viewManagerName]) {
                viewManagerConfigs[viewManagerName] = getConstants()[viewManagerName];
            }
            defineLazyObjectProperty(_NativeUIManager.default, viewManagerName, {
                get: ()=>{
                    console.warn(`Accessing view manager configs directly off UIManager via UIManager['${viewManagerName}'] ` + `is no longer supported. Use UIManager.getViewManagerConfig('${viewManagerName}') instead.`);
                    return UIManagerJS.getViewManagerConfig(viewManagerName);
                }
            });
        }
    });
}
module.exports = UIManagerJS;


}),
65610: (function (__unused_webpack_module, exports, __webpack_require__) {
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * @format
 *       strict-local
 */ Object.defineProperty(exports, "__esModule", ({
    value: true
}));
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: Object.getOwnPropertyDescriptor(all, name).get
    });
}
_export(exports, {
    get dispatchCommand () {
        return dispatchCommand;
    },
    get findHostInstance_DEPRECATED () {
        return findHostInstance_DEPRECATED;
    },
    get findNodeHandle () {
        return findNodeHandle;
    },
    get getNodeFromInternalInstanceHandle () {
        return getNodeFromInternalInstanceHandle;
    },
    get getPublicInstanceFromInternalInstanceHandle () {
        return getPublicInstanceFromInternalInstanceHandle;
    },
    get isChildPublicInstance () {
        return isChildPublicInstance;
    },
    get isProfilingRenderer () {
        return isProfilingRenderer;
    },
    get renderElement () {
        return renderElement;
    },
    get sendAccessibilityEvent () {
        return sendAccessibilityEvent;
    },
    get unmountComponentAtNodeAndRemoveContainer () {
        return unmountComponentAtNodeAndRemoveContainer;
    },
    get unstable_batchedUpdates () {
        return unstable_batchedUpdates;
    }
});
var _ErrorHandlers = __webpack_require__(21934);
function renderElement(ref) {
    var element = ref.element, rootTag = ref.rootTag, useFabric = ref.useFabric, useConcurrentRoot = ref.useConcurrentRoot;
    if (useFabric) {
        (__webpack_require__(12262)/* ["default"].render */["default"].render)(element, rootTag, null, useConcurrentRoot, {
            onCaughtError: _ErrorHandlers.onCaughtError,
            onUncaughtError: _ErrorHandlers.onUncaughtError,
            onRecoverableError: _ErrorHandlers.onRecoverableError
        });
    } else {
        (__webpack_require__(1105)/* ["default"].render */["default"].render)(element, rootTag, undefined, {
            onCaughtError: _ErrorHandlers.onCaughtError,
            onUncaughtError: _ErrorHandlers.onUncaughtError,
            onRecoverableError: _ErrorHandlers.onRecoverableError
        });
    }
}
function findHostInstance_DEPRECATED(componentOrHandle) {
    return (__webpack_require__(1105)/* ["default"].findHostInstance_DEPRECATED */["default"].findHostInstance_DEPRECATED)(componentOrHandle);
}
function findNodeHandle(componentOrHandle) {
    return (__webpack_require__(1105)/* ["default"].findNodeHandle */["default"].findNodeHandle)(componentOrHandle);
}
function dispatchCommand(handle, command, args) {
    if (__webpack_require__.g.RN$Bridgeless === true) {
        // Note: this function has the same implementation in the legacy and new renderer.
        // However, evaluating the old renderer comes with some side effects.
        return (__webpack_require__(12262)/* ["default"].dispatchCommand */["default"].dispatchCommand)(handle, command, args);
    } else {
        return (__webpack_require__(1105)/* ["default"].dispatchCommand */["default"].dispatchCommand)(handle, command, args);
    }
}
function sendAccessibilityEvent(handle, eventType) {
    return (__webpack_require__(1105)/* ["default"].sendAccessibilityEvent */["default"].sendAccessibilityEvent)(handle, eventType);
}
function unmountComponentAtNodeAndRemoveContainer(rootTag) {
    // $FlowExpectedError[incompatible-type] rootTag is an opaque type so we can't really cast it as is.
    var rootTagAsNumber = rootTag;
    (__webpack_require__(1105)/* ["default"].unmountComponentAtNodeAndRemoveContainer */["default"].unmountComponentAtNodeAndRemoveContainer)(rootTagAsNumber);
}
function unstable_batchedUpdates(fn, bookkeeping) {
    // This doesn't actually do anything when batching updates for a Fabric root.
    return (__webpack_require__(1105)/* ["default"].unstable_batchedUpdates */["default"].unstable_batchedUpdates)(fn, bookkeeping);
}
function isProfilingRenderer() {
    return Boolean(false);
}
function isChildPublicInstance(parentInstance, childInstance) {
    return (__webpack_require__(1105)/* ["default"].isChildPublicInstance */["default"].isChildPublicInstance)(parentInstance, childInstance);
}
function getNodeFromInternalInstanceHandle(internalInstanceHandle) {
    // This is only available in Fabric
    return (__webpack_require__(12262)/* ["default"].getNodeFromInternalInstanceHandle */["default"].getNodeFromInternalInstanceHandle)(internalInstanceHandle);
}
function getPublicInstanceFromInternalInstanceHandle(internalInstanceHandle) /*PublicInstance | PublicTextInstance | null*/ {
    // This is only available in Fabric
    return (__webpack_require__(12262)/* ["default"].getPublicInstanceFromInternalInstanceHandle */["default"].getPublicInstanceFromInternalInstanceHandle)(internalInstanceHandle);
}


}),
46513: (function (__unused_webpack_module, exports, __webpack_require__) {
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * @format
 *       strict-local
 */ /**
 * This module exists to allow apps to select their renderer implementation
 * (e.g.: Fabric-only, Paper-only) without having to pull all the renderer
 * implementations into their app bundle, which affects app size.
 *
 * By default, the setup will be:
 *   -> RendererProxy
 *     -> RendererImplementation (which uses Fabric or Paper depending on a flag at runtime)
 *
 * But this will allow a setup like this without duplicating logic:
 *   -> RendererProxy (fork)
 *     -> RendererImplementation (which uses Fabric or Paper depending on a flag at runtime)
 *     or -> OtherImplementation (which uses Fabric only)
 */ Object.defineProperty(exports, "__esModule", ({
    value: true
}));
var _export_star = __webpack_require__(4084);
_export_star._(__webpack_require__(65610), exports);


}),
90839: (function (__unused_webpack_module, exports, __webpack_require__) {
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 *       strict
 * @format
 */ Object.defineProperty(exports, "__esModule", ({
    value: true
}));
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: Object.getOwnPropertyDescriptor(all, name).get
    });
}
_export(exports, {
    get RootTagContext () {
        return RootTagContext;
    },
    get createRootTag () {
        return createRootTag;
    }
});
var _interop_require_wildcard = __webpack_require__(83610);
var _react = /*#__PURE__*/ _interop_require_wildcard._(__webpack_require__(31399));
var RootTagContext = /*#__PURE__*/ _react.createContext(0);
if (false) {}
function createRootTag(rootTag) {
    return rootTag;
}


}),
74853: (function (module, exports, __webpack_require__) {
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 *      
 * @format
 */ Object.defineProperty(exports, "__esModule", ({
    value: true
}));
var _interop_require_default = __webpack_require__(66705);
var _object_spread = __webpack_require__(36192);
var _object_spread_props = __webpack_require__(83590);
var _FabricUIManager = __webpack_require__(4697);
var _nullthrows = /*#__PURE__*/ _interop_require_default._(__webpack_require__(92956));
function isFabricReactTag(reactTag) {
    // React reserves even numbers for Fabric.
    return reactTag % 2 === 0;
}
var UIManagerImpl = __webpack_require__.g.RN$Bridgeless === true ? __webpack_require__(65144) : __webpack_require__(1394);
// $FlowFixMe[cannot-spread-interface]
var UIManager = _object_spread_props._(_object_spread._({}, UIManagerImpl), {
    measure (reactTag, callback) {
        if (isFabricReactTag(reactTag)) {
            var FabricUIManager = (0, _nullthrows.default)((0, _FabricUIManager.getFabricUIManager)());
            var shadowNode = FabricUIManager.findShadowNodeByTag_DEPRECATED(reactTag);
            if (shadowNode) {
                FabricUIManager.measure(shadowNode, callback);
            } else {
                console.warn(`measure cannot find view with tag #${reactTag}`);
                // $FlowFixMe[incompatible-call]
                callback();
            }
        } else {
            // Paper
            UIManagerImpl.measure(reactTag, callback);
        }
    },
    measureInWindow (reactTag, callback) {
        if (isFabricReactTag(reactTag)) {
            var FabricUIManager = (0, _nullthrows.default)((0, _FabricUIManager.getFabricUIManager)());
            var shadowNode = FabricUIManager.findShadowNodeByTag_DEPRECATED(reactTag);
            if (shadowNode) {
                FabricUIManager.measureInWindow(shadowNode, callback);
            } else {
                console.warn(`measure cannot find view with tag #${reactTag}`);
                // $FlowFixMe[incompatible-call]
                callback();
            }
        } else {
            // Paper
            UIManagerImpl.measureInWindow(reactTag, callback);
        }
    },
    measureLayout (reactTag, ancestorReactTag, errorCallback, callback) {
        if (isFabricReactTag(reactTag)) {
            var FabricUIManager = (0, _nullthrows.default)((0, _FabricUIManager.getFabricUIManager)());
            var shadowNode = FabricUIManager.findShadowNodeByTag_DEPRECATED(reactTag);
            var ancestorShadowNode = FabricUIManager.findShadowNodeByTag_DEPRECATED(ancestorReactTag);
            if (!shadowNode || !ancestorShadowNode) {
                return;
            }
            FabricUIManager.measureLayout(shadowNode, ancestorShadowNode, errorCallback, callback);
        } else {
            // Paper
            UIManagerImpl.measureLayout(reactTag, ancestorReactTag, errorCallback, callback);
        }
    },
    measureLayoutRelativeToParent (reactTag, errorCallback, callback) {
        if (isFabricReactTag(reactTag)) {
            console.warn('RCTUIManager.measureLayoutRelativeToParent method is deprecated and it will not be implemented in newer versions of RN (Fabric) - T47686450');
            var FabricUIManager = (0, _nullthrows.default)((0, _FabricUIManager.getFabricUIManager)());
            var shadowNode = FabricUIManager.findShadowNodeByTag_DEPRECATED(reactTag);
            if (shadowNode) {
                FabricUIManager.measure(shadowNode, (left, top, width, height, pageX, pageY)=>{
                    callback(left, top, width, height);
                });
            }
        } else {
            // Paper
            UIManagerImpl.measureLayoutRelativeToParent(reactTag, errorCallback, callback);
        }
    },
    dispatchViewManagerCommand (reactTag, commandName, commandArgs) {
        // Sometimes, libraries directly pass in the output of `findNodeHandle` to
        // this function without checking if it's null. This guards against that
        // case. We throw early here in Javascript so we can get a JS stacktrace
        // instead of a harder-to-debug native Java or Objective-C stacktrace.
        if (typeof reactTag !== 'number') {
            throw new Error('dispatchViewManagerCommand: found null reactTag');
        }
        if (isFabricReactTag(reactTag)) {
            var FabricUIManager = (0, _nullthrows.default)((0, _FabricUIManager.getFabricUIManager)());
            var shadowNode = FabricUIManager.findShadowNodeByTag_DEPRECATED(reactTag);
            if (shadowNode) {
                // Transform the accidental CommandID into a CommandName which is the stringified number.
                // The interop layer knows how to convert this number into the right method name.
                // Stringify a string is a no-op, so it's safe.
                commandName = `${commandName}`;
                FabricUIManager.dispatchCommand(shadowNode, commandName, commandArgs);
            }
        } else {
            UIManagerImpl.dispatchViewManagerCommand(reactTag, // We have some legacy components that are actually already using strings. ¯\_(ツ)_/¯
            // $FlowFixMe[incompatible-call]
            commandName, commandArgs);
        }
    }
});
module.exports = UIManager;


}),
85238: (function (module) {
"use strict";
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 *       strict
 * @format
 */ 
/**
 * The list of non-ViewManager related UIManager properties.
 *
 * In an effort to improve startup performance by lazily loading view managers,
 * the interface to access view managers will change from
 * UIManager['viewManagerName'] to UIManager.getViewManagerConfig('viewManagerName').
 * By using a function call instead of a property access, the UIManager will
 * be able to initialize and load the required view manager from native
 * synchronously. All of React Native's core components have been updated to
 * use getViewManagerConfig(). For the next few releases, any usage of
 * UIManager['viewManagerName'] will result in a warning. Because React Native
 * does not support Proxy objects, a view manager access is implied if any of
 * UIManager's properties that are not one of the properties below is being
 * accessed. Once UIManager property accesses for view managers has been fully
 * deprecated, this file will also be removed.
 */ var UIManagerProperties = [
    'clearJSResponder',
    'configureNextLayoutAnimation',
    'createView',
    'dispatchViewManagerCommand',
    'findSubviewIn',
    'getConstantsForViewManager',
    'getDefaultEventTypes',
    'manageChildren',
    'measure',
    'measureInWindow',
    'measureLayout',
    'measureLayoutRelativeToParent',
    'removeRootView',
    'sendAccessibilityEvent',
    'setChildren',
    'setJSResponder',
    'setLayoutAnimationEnabledExperimental',
    'updateView',
    'viewIsDescendantOf',
    'LazyViewManagersEnabled',
    'ViewManagerNames',
    'StyleConstants',
    'AccessibilityEventTypes',
    'UIView',
    'getViewManagerConfig',
    'hasViewManagerConfig',
    'blur',
    'focus',
    'genericBubblingEventTypes',
    'genericDirectEventTypes',
    'lazilyLoadView'
];
module.exports = UIManagerProperties;


}),
75741: (function (__unused_webpack_module, exports, __webpack_require__) {
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 *       strict
 * @format
 */ Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return getCachedComponentWithDisplayName;
    }
}));
var _interop_require_wildcard = __webpack_require__(83610);
var _react = /*#__PURE__*/ _interop_require_wildcard._(__webpack_require__(31399));
var cache = new Map();
function getCachedComponentWithDisplayName(displayName) {
    var ComponentWithDisplayName = cache.get(displayName);
    if (!ComponentWithDisplayName) {
        ComponentWithDisplayName = (ref)=>{
            var children = ref.children;
            return children;
        };
        // $FlowFixMe[prop-missing]
        ComponentWithDisplayName.displayName = displayName;
        cache.set(displayName, ComponentWithDisplayName);
    }
    return ComponentWithDisplayName;
}


}),
69093: (function (module, exports, __webpack_require__) {
"use strict";
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 *      
 * @format
 */ 
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
var _interop_require_default = __webpack_require__(66705);
var _object_spread = __webpack_require__(36192);
var _processBoxShadow = /*#__PURE__*/ _interop_require_default._(__webpack_require__(47204));
var ReactNativeStyleAttributes = __webpack_require__(34650);
var resolveAssetSource = __webpack_require__(63980);
var processBackgroundImage = (__webpack_require__(33518)/* ["default"] */["default"]);
var processColor = (__webpack_require__(23865)/* ["default"] */["default"]);
var processColorArray = __webpack_require__(57338);
var processFilter = (__webpack_require__(62354)/* ["default"] */["default"]);
var insetsDiffer = __webpack_require__(14691);
var matricesDiffer = __webpack_require__(96940);
var pointsDiffer = __webpack_require__(60882);
var sizesDiffer = __webpack_require__(24395);
var UIManager = __webpack_require__(74853);
var nullthrows = __webpack_require__(92956);
function getNativeComponentAttributes(uiViewClassName) {
    var viewConfig = UIManager.getViewManagerConfig(uiViewClassName);
    if (viewConfig == null) {
        return null;
    }
    // TODO: This seems like a whole lot of runtime initialization for every
    // native component that can be either avoided or simplified.
    var baseModuleName = viewConfig.baseModuleName, bubblingEventTypes = viewConfig.bubblingEventTypes, directEventTypes = viewConfig.directEventTypes;
    var nativeProps = viewConfig.NativeProps;
    bubblingEventTypes = bubblingEventTypes ?? {};
    directEventTypes = directEventTypes ?? {};
    while(baseModuleName){
        var baseModule = UIManager.getViewManagerConfig(baseModuleName);
        if (!baseModule) {
            baseModuleName = null;
        } else {
            bubblingEventTypes = _object_spread._({}, baseModule.bubblingEventTypes, bubblingEventTypes);
            directEventTypes = _object_spread._({}, baseModule.directEventTypes, directEventTypes);
            nativeProps = _object_spread._({}, baseModule.NativeProps, nativeProps);
            baseModuleName = baseModule.baseModuleName;
        }
    }
    var validAttributes = {};
    for(var key in nativeProps){
        var typeName = nativeProps[key];
        var diff = getDifferForType(typeName);
        var process = getProcessorForType(typeName);
        // If diff or process == null, omit the corresponding property from the Attribute
        // Why:
        //  1. Consistency with AttributeType flow type
        //  2. Consistency with Static View Configs, which omit the null properties
        validAttributes[key] = diff == null ? process == null ? true : {
            process
        } : process == null ? {
            diff
        } : {
            diff,
            process
        };
    }
    // Unfortunately, the current setup declares style properties as top-level
    // props. This makes it so we allow style properties in the `style` prop.
    // TODO: Move style properties into a `style` prop and disallow them as
    // top-level props on the native side.
    validAttributes.style = ReactNativeStyleAttributes;
    Object.assign(viewConfig, {
        uiViewClassName,
        validAttributes,
        bubblingEventTypes,
        directEventTypes
    });
    attachDefaultEventTypes(viewConfig);
    return viewConfig;
}
function attachDefaultEventTypes(viewConfig) {
    // This is supported on UIManager platforms (ex: Android),
    // as lazy view managers are not implemented for all platforms.
    // See [UIManager] for details on constants and implementations.
    var constants = UIManager.getConstants();
    if (constants.ViewManagerNames || constants.LazyViewManagersEnabled) {
        // Lazy view managers enabled.
        viewConfig = merge(viewConfig, nullthrows(UIManager.getDefaultEventTypes)());
    } else {
        viewConfig.bubblingEventTypes = merge(viewConfig.bubblingEventTypes, constants.genericBubblingEventTypes);
        viewConfig.directEventTypes = merge(viewConfig.directEventTypes, constants.genericDirectEventTypes);
    }
}
// TODO: Figure out how to avoid all this runtime initialization cost.
function merge(destination, source) {
    if (!source) {
        return destination;
    }
    if (!destination) {
        return source;
    }
    for(var key in source){
        if (!source.hasOwnProperty(key)) {
            continue;
        }
        var sourceValue = source[key];
        if (destination.hasOwnProperty(key)) {
            var destinationValue = destination[key];
            if (typeof sourceValue === 'object' && typeof destinationValue === 'object') {
                sourceValue = merge(destinationValue, sourceValue);
            }
        }
        destination[key] = sourceValue;
    }
    return destination;
}
function getDifferForType(typeName) {
    switch(typeName){
        // iOS Types
        case 'CATransform3D':
            return matricesDiffer;
        case 'CGPoint':
            return pointsDiffer;
        case 'CGSize':
            return sizesDiffer;
        case 'UIEdgeInsets':
            return insetsDiffer;
        // Android Types
        case 'Point':
            return pointsDiffer;
        case 'EdgeInsets':
            return insetsDiffer;
    }
    return null;
}
function getProcessorForType(typeName) {
    switch(typeName){
        // iOS Types
        case 'CGColor':
        case 'UIColor':
            return processColor;
        case 'CGColorArray':
        case 'UIColorArray':
            return processColorArray;
        case 'CGImage':
        case 'UIImage':
        case 'RCTImageSource':
            return resolveAssetSource;
        case 'BoxShadowArray':
            return _processBoxShadow.default;
        case 'FilterArray':
            return processFilter;
        // Android Types
        case 'Color':
            return processColor;
        case 'ColorArray':
            return processColorArray;
        case 'Filter':
            return processFilter;
        case 'BackgroundImage':
            return processBackgroundImage;
        case 'ImageSource':
            return resolveAssetSource;
        case 'BoxShadow':
            return _processBoxShadow.default;
    }
    return null;
}
module.exports = getNativeComponentAttributes;


}),
74767: (function (__unused_webpack_module, exports, __webpack_require__) {
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * @format
 *      
 */ Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return renderApplication;
    }
}));
var _interop_require_default = __webpack_require__(66705);
var _interop_require_wildcard = __webpack_require__(83610);
var _object_spread = __webpack_require__(36192);
var _object_spread_props = __webpack_require__(83590);
var _jsxruntime = __webpack_require__(70095);
var _GlobalPerformanceLogger = /*#__PURE__*/ _interop_require_default._(__webpack_require__(27160));
var _PerformanceLoggerContext = /*#__PURE__*/ _interop_require_default._(__webpack_require__(44630));
var _AppContainer = /*#__PURE__*/ _interop_require_default._(__webpack_require__(68710));
var _DisplayMode = /*#__PURE__*/ _interop_require_default._(__webpack_require__(58155));
var _getCachedComponentWithDebugName = /*#__PURE__*/ _interop_require_default._(__webpack_require__(75741));
var _RendererProxy = /*#__PURE__*/ _interop_require_wildcard._(__webpack_require__(46513));
var _invariant = /*#__PURE__*/ _interop_require_default._(__webpack_require__(56481));
var _react = /*#__PURE__*/ _interop_require_wildcard._(__webpack_require__(31399));
__webpack_require__(52340);
function renderApplication(RootComponent, initialProps, rootTag, WrapperComponent, rootViewStyle, fabric, scopedPerformanceLogger, isLogBox, debugName, displayMode, useOffscreen) {
    (0, _invariant.default)(rootTag, 'Expect to have a valid rootTag, instead got ', rootTag);
    var performanceLogger = scopedPerformanceLogger ?? _GlobalPerformanceLogger.default;
    var renderable = /*#__PURE__*/ (0, _jsxruntime.jsx)(_PerformanceLoggerContext.default.Provider, {
        value: performanceLogger,
        children: /*#__PURE__*/ (0, _jsxruntime.jsx)(_AppContainer.default, {
            rootTag: rootTag,
            fabric: fabric,
            WrapperComponent: WrapperComponent,
            rootViewStyle: rootViewStyle,
            initialProps: initialProps ?? Object.freeze({}),
            internal_excludeLogBox: isLogBox,
            children: /*#__PURE__*/ (0, _jsxruntime.jsx)(RootComponent, _object_spread_props._(_object_spread._({}, initialProps), {
                rootTag: rootTag
            }))
        })
    });
    if (false) { var RootComponentWithMeaningfulName }
    if (useOffscreen && displayMode != null) {
        // $FlowFixMe[incompatible-type]
        // $FlowFixMe[prop-missing]
        var Activity = _react.unstable_Activity;
        renderable = /*#__PURE__*/ (0, _jsxruntime.jsx)(Activity, {
            mode: displayMode === _DisplayMode.default.VISIBLE ? 'visible' : 'hidden',
            children: renderable
        });
    }
    // We want to have concurrentRoot always enabled when you're on Fabric.
    var useConcurrentRoot = Boolean(fabric);
    performanceLogger.startTimespan('renderApplication_React_render');
    performanceLogger.setExtra('usedReactConcurrentRoot', useConcurrentRoot ? '1' : '0');
    performanceLogger.setExtra('usedReactFabric', fabric ? '1' : '0');
    performanceLogger.setExtra('usedReactProfiler', _RendererProxy.isProfilingRenderer());
    _RendererProxy.renderElement({
        element: renderable,
        rootTag,
        useFabric: Boolean(fabric),
        useConcurrentRoot
    });
    performanceLogger.stopTimespan('renderApplication_React_render');
}


}),
97257: (function (__unused_webpack_module, exports, __webpack_require__) {
"use strict";
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 *        
 * @nolint
 * @preventMunge
 * @generated SignedSource<<558b9dfa7f6550519be8c208c6bc0eef>>
 *
 * This file was sync'd from the facebook/react repository.
 */ 
__webpack_require__(35749);
var ReactNativePrivateInterface = __webpack_require__(89603), React = __webpack_require__(31399), Scheduler = __webpack_require__(43827), isArrayImpl = Array.isArray, ReactSharedInternals = React.__CLIENT_INTERNALS_DO_NOT_USE_OR_WARN_USERS_THEY_CANNOT_UPGRADE, REACT_LEGACY_ELEMENT_TYPE = Symbol.for("react.element"), REACT_ELEMENT_TYPE = Symbol.for("react.transitional.element"), REACT_PORTAL_TYPE = Symbol.for("react.portal"), REACT_FRAGMENT_TYPE = Symbol.for("react.fragment"), REACT_STRICT_MODE_TYPE = Symbol.for("react.strict_mode"), REACT_PROFILER_TYPE = Symbol.for("react.profiler"), REACT_PROVIDER_TYPE = Symbol.for("react.provider"), REACT_CONSUMER_TYPE = Symbol.for("react.consumer"), REACT_CONTEXT_TYPE = Symbol.for("react.context"), REACT_FORWARD_REF_TYPE = Symbol.for("react.forward_ref"), REACT_SUSPENSE_TYPE = Symbol.for("react.suspense"), REACT_SUSPENSE_LIST_TYPE = Symbol.for("react.suspense_list"), REACT_MEMO_TYPE = Symbol.for("react.memo"), REACT_LAZY_TYPE = Symbol.for("react.lazy");
Symbol.for("react.scope");
Symbol.for("react.debug_trace_mode");
var REACT_OFFSCREEN_TYPE = Symbol.for("react.offscreen");
Symbol.for("react.legacy_hidden");
Symbol.for("react.tracing_marker");
var REACT_MEMO_CACHE_SENTINEL = Symbol.for("react.memo_cache_sentinel"), MAYBE_ITERATOR_SYMBOL = Symbol.iterator;
function getIteratorFn(maybeIterable) {
    if (null === maybeIterable || "object" !== typeof maybeIterable) return null;
    maybeIterable = MAYBE_ITERATOR_SYMBOL && maybeIterable[MAYBE_ITERATOR_SYMBOL] || maybeIterable["@@iterator"];
    return "function" === typeof maybeIterable ? maybeIterable : null;
}
var assign = Object.assign, prefix, suffix;
function describeBuiltInComponentFrame(name) {
    if (void 0 === prefix) try {
        throw Error();
    } catch (x) {
        var match = x.stack.trim().match(/\n( *(at )?)/);
        prefix = match && match[1] || "";
        suffix = -1 < x.stack.indexOf("\n    at") ? " (<anonymous>)" : -1 < x.stack.indexOf("@") ? "@unknown:0:0" : "";
    }
    return "\n" + prefix + name + suffix;
}
var reentry = !1;
function describeNativeComponentFrame(fn, construct) {
    if (!fn || reentry) return "";
    reentry = !0;
    var previousPrepareStackTrace = Error.prepareStackTrace;
    Error.prepareStackTrace = void 0;
    try {
        var RunInRootFrame = {
            DetermineComponentFrameRoot: function() {
                try {
                    if (construct) {
                        var Fake = function() {
                            throw Error();
                        };
                        Object.defineProperty(Fake.prototype, "props", {
                            set: function() {
                                throw Error();
                            }
                        });
                        if ("object" === typeof Reflect && Reflect.construct) {
                            try {
                                Reflect.construct(Fake, []);
                            } catch (x) {
                                var control = x;
                            }
                            Reflect.construct(fn, [], Fake);
                        } else {
                            try {
                                Fake.call();
                            } catch (x$0) {
                                control = x$0;
                            }
                            fn.call(Fake.prototype);
                        }
                    } else {
                        try {
                            throw Error();
                        } catch (x$1) {
                            control = x$1;
                        }
                        (Fake = fn()) && "function" === typeof Fake.catch && Fake.catch(function() {});
                    }
                } catch (sample) {
                    if (sample && control && "string" === typeof sample.stack) return [
                        sample.stack,
                        control.stack
                    ];
                }
                return [
                    null,
                    null
                ];
            }
        };
        RunInRootFrame.DetermineComponentFrameRoot.displayName = "DetermineComponentFrameRoot";
        var namePropDescriptor = Object.getOwnPropertyDescriptor(RunInRootFrame.DetermineComponentFrameRoot, "name");
        namePropDescriptor && namePropDescriptor.configurable && Object.defineProperty(RunInRootFrame.DetermineComponentFrameRoot, "name", {
            value: "DetermineComponentFrameRoot"
        });
        var _RunInRootFrame$Deter = RunInRootFrame.DetermineComponentFrameRoot(), sampleStack = _RunInRootFrame$Deter[0], controlStack = _RunInRootFrame$Deter[1];
        if (sampleStack && controlStack) {
            var sampleLines = sampleStack.split("\n"), controlLines = controlStack.split("\n");
            for(namePropDescriptor = RunInRootFrame = 0; RunInRootFrame < sampleLines.length && !sampleLines[RunInRootFrame].includes("DetermineComponentFrameRoot");)RunInRootFrame++;
            for(; namePropDescriptor < controlLines.length && !controlLines[namePropDescriptor].includes("DetermineComponentFrameRoot");)namePropDescriptor++;
            if (RunInRootFrame === sampleLines.length || namePropDescriptor === controlLines.length) for(RunInRootFrame = sampleLines.length - 1, namePropDescriptor = controlLines.length - 1; 1 <= RunInRootFrame && 0 <= namePropDescriptor && sampleLines[RunInRootFrame] !== controlLines[namePropDescriptor];)namePropDescriptor--;
            for(; 1 <= RunInRootFrame && 0 <= namePropDescriptor; RunInRootFrame--, namePropDescriptor--)if (sampleLines[RunInRootFrame] !== controlLines[namePropDescriptor]) {
                if (1 !== RunInRootFrame || 1 !== namePropDescriptor) {
                    do if (RunInRootFrame--, namePropDescriptor--, 0 > namePropDescriptor || sampleLines[RunInRootFrame] !== controlLines[namePropDescriptor]) {
                        var frame = "\n" + sampleLines[RunInRootFrame].replace(" at new ", " at ");
                        fn.displayName && frame.includes("<anonymous>") && (frame = frame.replace("<anonymous>", fn.displayName));
                        return frame;
                    }
                    while (1 <= RunInRootFrame && 0 <= namePropDescriptor);
                }
                break;
            }
        }
    } finally{
        reentry = !1, Error.prepareStackTrace = previousPrepareStackTrace;
    }
    return (previousPrepareStackTrace = fn ? fn.displayName || fn.name : "") ? describeBuiltInComponentFrame(previousPrepareStackTrace) : "";
}
function describeFiber(fiber) {
    switch(fiber.tag){
        case 26:
        case 27:
        case 5:
            return describeBuiltInComponentFrame(fiber.type);
        case 16:
            return describeBuiltInComponentFrame("Lazy");
        case 13:
            return describeBuiltInComponentFrame("Suspense");
        case 19:
            return describeBuiltInComponentFrame("SuspenseList");
        case 0:
        case 15:
            return fiber = describeNativeComponentFrame(fiber.type, !1), fiber;
        case 11:
            return fiber = describeNativeComponentFrame(fiber.type.render, !1), fiber;
        case 1:
            return fiber = describeNativeComponentFrame(fiber.type, !0), fiber;
        default:
            return "";
    }
}
function getStackByFiberInDevAndProd(workInProgress) {
    try {
        var info = "";
        do info += describeFiber(workInProgress), workInProgress = workInProgress.return;
        while (workInProgress);
        return info;
    } catch (x) {
        return "\nError generating stack: " + x.message + "\n" + x.stack;
    }
}
var REACT_CLIENT_REFERENCE = Symbol.for("react.client.reference");
function getComponentNameFromType(type) {
    if (null == type) return null;
    if ("function" === typeof type) return type.$$typeof === REACT_CLIENT_REFERENCE ? null : type.displayName || type.name || null;
    if ("string" === typeof type) return type;
    switch(type){
        case REACT_FRAGMENT_TYPE:
            return "Fragment";
        case REACT_PORTAL_TYPE:
            return "Portal";
        case REACT_PROFILER_TYPE:
            return "Profiler";
        case REACT_STRICT_MODE_TYPE:
            return "StrictMode";
        case REACT_SUSPENSE_TYPE:
            return "Suspense";
        case REACT_SUSPENSE_LIST_TYPE:
            return "SuspenseList";
    }
    if ("object" === typeof type) switch(type.$$typeof){
        case REACT_CONTEXT_TYPE:
            return (type.displayName || "Context") + ".Provider";
        case REACT_CONSUMER_TYPE:
            return (type._context.displayName || "Context") + ".Consumer";
        case REACT_FORWARD_REF_TYPE:
            var innerType = type.render;
            type = type.displayName;
            type || (type = innerType.displayName || innerType.name || "", type = "" !== type ? "ForwardRef(" + type + ")" : "ForwardRef");
            return type;
        case REACT_MEMO_TYPE:
            return innerType = type.displayName || null, null !== innerType ? innerType : getComponentNameFromType(type.type) || "Memo";
        case REACT_LAZY_TYPE:
            innerType = type._payload;
            type = type._init;
            try {
                return getComponentNameFromType(type(innerType));
            } catch (x) {}
    }
    return null;
}
var hasError = !1, caughtError = null, getFiberCurrentPropsFromNode$1 = null, getInstanceFromNode$1 = null, getNodeFromInstance$1 = null;
function executeDispatch(event, listener, inst) {
    event.currentTarget = getNodeFromInstance$1(inst);
    try {
        listener(event);
    } catch (error) {
        hasError || (hasError = !0, caughtError = error);
    }
    event.currentTarget = null;
}
function executeDirectDispatch(event) {
    var dispatchListener = event._dispatchListeners, dispatchInstance = event._dispatchInstances;
    if (isArrayImpl(dispatchListener)) throw Error("Invalid `event`.");
    event.currentTarget = dispatchListener ? getNodeFromInstance$1(dispatchInstance) : null;
    dispatchListener = dispatchListener ? dispatchListener(event) : null;
    event.currentTarget = null;
    event._dispatchListeners = null;
    event._dispatchInstances = null;
    return dispatchListener;
}
function functionThatReturnsTrue() {
    return !0;
}
function functionThatReturnsFalse() {
    return !1;
}
function SyntheticEvent(dispatchConfig, targetInst, nativeEvent, nativeEventTarget) {
    this.dispatchConfig = dispatchConfig;
    this._targetInst = targetInst;
    this.nativeEvent = nativeEvent;
    this._dispatchInstances = this._dispatchListeners = null;
    dispatchConfig = this.constructor.Interface;
    for(var propName in dispatchConfig)dispatchConfig.hasOwnProperty(propName) && ((targetInst = dispatchConfig[propName]) ? this[propName] = targetInst(nativeEvent) : "target" === propName ? this.target = nativeEventTarget : this[propName] = nativeEvent[propName]);
    this.isDefaultPrevented = (null != nativeEvent.defaultPrevented ? nativeEvent.defaultPrevented : !1 === nativeEvent.returnValue) ? functionThatReturnsTrue : functionThatReturnsFalse;
    this.isPropagationStopped = functionThatReturnsFalse;
    return this;
}
assign(SyntheticEvent.prototype, {
    preventDefault: function() {
        this.defaultPrevented = !0;
        var event = this.nativeEvent;
        event && (event.preventDefault ? event.preventDefault() : "unknown" !== typeof event.returnValue && (event.returnValue = !1), this.isDefaultPrevented = functionThatReturnsTrue);
    },
    stopPropagation: function() {
        var event = this.nativeEvent;
        event && (event.stopPropagation ? event.stopPropagation() : "unknown" !== typeof event.cancelBubble && (event.cancelBubble = !0), this.isPropagationStopped = functionThatReturnsTrue);
    },
    persist: function() {
        this.isPersistent = functionThatReturnsTrue;
    },
    isPersistent: functionThatReturnsFalse,
    destructor: function() {
        var Interface = this.constructor.Interface, propName;
        for(propName in Interface)this[propName] = null;
        this.nativeEvent = this._targetInst = this.dispatchConfig = null;
        this.isPropagationStopped = this.isDefaultPrevented = functionThatReturnsFalse;
        this._dispatchInstances = this._dispatchListeners = null;
    }
});
SyntheticEvent.Interface = {
    type: null,
    target: null,
    currentTarget: function() {
        return null;
    },
    eventPhase: null,
    bubbles: null,
    cancelable: null,
    timeStamp: function(event) {
        return event.timeStamp || Date.now();
    },
    defaultPrevented: null,
    isTrusted: null
};
SyntheticEvent.extend = function(Interface) {
    function E() {}
    function Class() {
        return Super.apply(this, arguments);
    }
    var Super = this;
    E.prototype = Super.prototype;
    var prototype = new E();
    assign(prototype, Class.prototype);
    Class.prototype = prototype;
    Class.prototype.constructor = Class;
    Class.Interface = assign({}, Super.Interface, Interface);
    Class.extend = Super.extend;
    addEventPoolingTo(Class);
    return Class;
};
addEventPoolingTo(SyntheticEvent);
function createOrGetPooledEvent(dispatchConfig, targetInst, nativeEvent, nativeInst) {
    if (this.eventPool.length) {
        var instance = this.eventPool.pop();
        this.call(instance, dispatchConfig, targetInst, nativeEvent, nativeInst);
        return instance;
    }
    return new this(dispatchConfig, targetInst, nativeEvent, nativeInst);
}
function releasePooledEvent(event) {
    if (!(event instanceof this)) throw Error("Trying to release an event instance into a pool of a different type.");
    event.destructor();
    10 > this.eventPool.length && this.eventPool.push(event);
}
function addEventPoolingTo(EventConstructor) {
    EventConstructor.getPooled = createOrGetPooledEvent;
    EventConstructor.eventPool = [];
    EventConstructor.release = releasePooledEvent;
}
var ResponderSyntheticEvent = SyntheticEvent.extend({
    touchHistory: function() {
        return null;
    }
});
function isStartish(topLevelType) {
    return "topTouchStart" === topLevelType;
}
function isMoveish(topLevelType) {
    return "topTouchMove" === topLevelType;
}
var startDependencies = [
    "topTouchStart"
], moveDependencies = [
    "topTouchMove"
], endDependencies = [
    "topTouchCancel",
    "topTouchEnd"
], touchBank = [], touchHistory = {
    touchBank: touchBank,
    numberActiveTouches: 0,
    indexOfSingleActiveTouch: -1,
    mostRecentTimeStamp: 0
};
function timestampForTouch(touch) {
    return touch.timeStamp || touch.timestamp;
}
function getTouchIdentifier(_ref) {
    _ref = _ref.identifier;
    if (null == _ref) throw Error("Touch object is missing identifier.");
    return _ref;
}
function recordTouchStart(touch) {
    var identifier = getTouchIdentifier(touch), touchRecord = touchBank[identifier];
    touchRecord ? (touchRecord.touchActive = !0, touchRecord.startPageX = touch.pageX, touchRecord.startPageY = touch.pageY, touchRecord.startTimeStamp = timestampForTouch(touch), touchRecord.currentPageX = touch.pageX, touchRecord.currentPageY = touch.pageY, touchRecord.currentTimeStamp = timestampForTouch(touch), touchRecord.previousPageX = touch.pageX, touchRecord.previousPageY = touch.pageY, touchRecord.previousTimeStamp = timestampForTouch(touch)) : (touchRecord = {
        touchActive: !0,
        startPageX: touch.pageX,
        startPageY: touch.pageY,
        startTimeStamp: timestampForTouch(touch),
        currentPageX: touch.pageX,
        currentPageY: touch.pageY,
        currentTimeStamp: timestampForTouch(touch),
        previousPageX: touch.pageX,
        previousPageY: touch.pageY,
        previousTimeStamp: timestampForTouch(touch)
    }, touchBank[identifier] = touchRecord);
    touchHistory.mostRecentTimeStamp = timestampForTouch(touch);
}
function recordTouchMove(touch) {
    var touchRecord = touchBank[getTouchIdentifier(touch)];
    touchRecord && (touchRecord.touchActive = !0, touchRecord.previousPageX = touchRecord.currentPageX, touchRecord.previousPageY = touchRecord.currentPageY, touchRecord.previousTimeStamp = touchRecord.currentTimeStamp, touchRecord.currentPageX = touch.pageX, touchRecord.currentPageY = touch.pageY, touchRecord.currentTimeStamp = timestampForTouch(touch), touchHistory.mostRecentTimeStamp = timestampForTouch(touch));
}
function recordTouchEnd(touch) {
    var touchRecord = touchBank[getTouchIdentifier(touch)];
    touchRecord && (touchRecord.touchActive = !1, touchRecord.previousPageX = touchRecord.currentPageX, touchRecord.previousPageY = touchRecord.currentPageY, touchRecord.previousTimeStamp = touchRecord.currentTimeStamp, touchRecord.currentPageX = touch.pageX, touchRecord.currentPageY = touch.pageY, touchRecord.currentTimeStamp = timestampForTouch(touch), touchHistory.mostRecentTimeStamp = timestampForTouch(touch));
}
var instrumentationCallback, ResponderTouchHistoryStore = {
    instrument: function(callback) {
        instrumentationCallback = callback;
    },
    recordTouchTrack: function(topLevelType, nativeEvent) {
        null != instrumentationCallback && instrumentationCallback(topLevelType, nativeEvent);
        if (isMoveish(topLevelType)) nativeEvent.changedTouches.forEach(recordTouchMove);
        else if (isStartish(topLevelType)) nativeEvent.changedTouches.forEach(recordTouchStart), touchHistory.numberActiveTouches = nativeEvent.touches.length, 1 === touchHistory.numberActiveTouches && (touchHistory.indexOfSingleActiveTouch = nativeEvent.touches[0].identifier);
        else if ("topTouchEnd" === topLevelType || "topTouchCancel" === topLevelType) {
            if (nativeEvent.changedTouches.forEach(recordTouchEnd), touchHistory.numberActiveTouches = nativeEvent.touches.length, 1 === touchHistory.numberActiveTouches) {
                for(topLevelType = 0; topLevelType < touchBank.length; topLevelType++)if (nativeEvent = touchBank[topLevelType], null != nativeEvent && nativeEvent.touchActive) {
                    touchHistory.indexOfSingleActiveTouch = topLevelType;
                    break;
                }
            }
        }
    },
    touchHistory: touchHistory
};
function accumulate(current, next) {
    if (null == next) throw Error("Accumulated items must not be null or undefined.");
    return null == current ? next : isArrayImpl(current) ? current.concat(next) : isArrayImpl(next) ? [
        current
    ].concat(next) : [
        current,
        next
    ];
}
function accumulateInto(current, next) {
    if (null == next) throw Error("Accumulated items must not be null or undefined.");
    if (null == current) return next;
    if (isArrayImpl(current)) {
        if (isArrayImpl(next)) return current.push.apply(current, next), current;
        current.push(next);
        return current;
    }
    return isArrayImpl(next) ? [
        current
    ].concat(next) : [
        current,
        next
    ];
}
function forEachAccumulated(arr, cb, scope) {
    Array.isArray(arr) ? arr.forEach(cb, scope) : arr && cb.call(scope, arr);
}
var responderInst = null, trackedTouchCount = 0;
function changeResponder(nextResponderInst, blockHostResponder) {
    var oldResponderInst = responderInst;
    responderInst = nextResponderInst;
    if (null !== ResponderEventPlugin.GlobalResponderHandler) ResponderEventPlugin.GlobalResponderHandler.onChange(oldResponderInst, nextResponderInst, blockHostResponder);
}
var eventTypes = {
    startShouldSetResponder: {
        phasedRegistrationNames: {
            bubbled: "onStartShouldSetResponder",
            captured: "onStartShouldSetResponderCapture"
        },
        dependencies: startDependencies
    },
    scrollShouldSetResponder: {
        phasedRegistrationNames: {
            bubbled: "onScrollShouldSetResponder",
            captured: "onScrollShouldSetResponderCapture"
        },
        dependencies: [
            "topScroll"
        ]
    },
    selectionChangeShouldSetResponder: {
        phasedRegistrationNames: {
            bubbled: "onSelectionChangeShouldSetResponder",
            captured: "onSelectionChangeShouldSetResponderCapture"
        },
        dependencies: [
            "topSelectionChange"
        ]
    },
    moveShouldSetResponder: {
        phasedRegistrationNames: {
            bubbled: "onMoveShouldSetResponder",
            captured: "onMoveShouldSetResponderCapture"
        },
        dependencies: moveDependencies
    },
    responderStart: {
        registrationName: "onResponderStart",
        dependencies: startDependencies
    },
    responderMove: {
        registrationName: "onResponderMove",
        dependencies: moveDependencies
    },
    responderEnd: {
        registrationName: "onResponderEnd",
        dependencies: endDependencies
    },
    responderRelease: {
        registrationName: "onResponderRelease",
        dependencies: endDependencies
    },
    responderTerminationRequest: {
        registrationName: "onResponderTerminationRequest",
        dependencies: []
    },
    responderGrant: {
        registrationName: "onResponderGrant",
        dependencies: []
    },
    responderReject: {
        registrationName: "onResponderReject",
        dependencies: []
    },
    responderTerminate: {
        registrationName: "onResponderTerminate",
        dependencies: []
    }
};
function getParent$1(inst) {
    do inst = inst.return;
    while (inst && 5 !== inst.tag);
    return inst ? inst : null;
}
function traverseTwoPhase$1(inst, fn, arg) {
    for(var path = []; inst;)path.push(inst), inst = getParent$1(inst);
    for(inst = path.length; 0 < inst--;)fn(path[inst], "captured", arg);
    for(inst = 0; inst < path.length; inst++)fn(path[inst], "bubbled", arg);
}
function getListener$1(inst, registrationName) {
    inst = inst.stateNode;
    if (null === inst) return null;
    inst = getFiberCurrentPropsFromNode$1(inst);
    if (null === inst) return null;
    if ((inst = inst[registrationName]) && "function" !== typeof inst) throw Error("Expected `" + registrationName + "` listener to be a function, instead got a value of `" + typeof inst + "` type.");
    return inst;
}
function accumulateDirectionalDispatches$1(inst, phase, event) {
    if (phase = getListener$1(inst, event.dispatchConfig.phasedRegistrationNames[phase])) event._dispatchListeners = accumulateInto(event._dispatchListeners, phase), event._dispatchInstances = accumulateInto(event._dispatchInstances, inst);
}
function accumulateDirectDispatchesSingle$1(event) {
    if (event && event.dispatchConfig.registrationName) {
        var inst = event._targetInst;
        if (inst && event && event.dispatchConfig.registrationName) {
            var listener = getListener$1(inst, event.dispatchConfig.registrationName);
            listener && (event._dispatchListeners = accumulateInto(event._dispatchListeners, listener), event._dispatchInstances = accumulateInto(event._dispatchInstances, inst));
        }
    }
}
function accumulateTwoPhaseDispatchesSingleSkipTarget(event) {
    if (event && event.dispatchConfig.phasedRegistrationNames) {
        var targetInst = event._targetInst;
        targetInst = targetInst ? getParent$1(targetInst) : null;
        traverseTwoPhase$1(targetInst, accumulateDirectionalDispatches$1, event);
    }
}
function accumulateTwoPhaseDispatchesSingle$1(event) {
    event && event.dispatchConfig.phasedRegistrationNames && traverseTwoPhase$1(event._targetInst, accumulateDirectionalDispatches$1, event);
}
var ResponderEventPlugin = {
    _getResponder: function() {
        return responderInst;
    },
    eventTypes: eventTypes,
    extractEvents: function(topLevelType, targetInst, nativeEvent, nativeEventTarget) {
        if (isStartish(topLevelType)) trackedTouchCount += 1;
        else if ("topTouchEnd" === topLevelType || "topTouchCancel" === topLevelType) if (0 <= trackedTouchCount) --trackedTouchCount;
        else return null;
        ResponderTouchHistoryStore.recordTouchTrack(topLevelType, nativeEvent);
        if (targetInst && ("topScroll" === topLevelType && !nativeEvent.responderIgnoreScroll || 0 < trackedTouchCount && "topSelectionChange" === topLevelType || isStartish(topLevelType) || isMoveish(topLevelType))) {
            var shouldSetEventType = isStartish(topLevelType) ? eventTypes.startShouldSetResponder : isMoveish(topLevelType) ? eventTypes.moveShouldSetResponder : "topSelectionChange" === topLevelType ? eventTypes.selectionChangeShouldSetResponder : eventTypes.scrollShouldSetResponder;
            if (responderInst) b: {
                var JSCompiler_temp = responderInst;
                for(var depthA = 0, tempA = JSCompiler_temp; tempA; tempA = getParent$1(tempA))depthA++;
                tempA = 0;
                for(var tempB = targetInst; tempB; tempB = getParent$1(tempB))tempA++;
                for(; 0 < depthA - tempA;)JSCompiler_temp = getParent$1(JSCompiler_temp), depthA--;
                for(; 0 < tempA - depthA;)targetInst = getParent$1(targetInst), tempA--;
                for(; depthA--;){
                    if (JSCompiler_temp === targetInst || JSCompiler_temp === targetInst.alternate) break b;
                    JSCompiler_temp = getParent$1(JSCompiler_temp);
                    targetInst = getParent$1(targetInst);
                }
                JSCompiler_temp = null;
            }
            else JSCompiler_temp = targetInst;
            targetInst = JSCompiler_temp;
            JSCompiler_temp = targetInst === responderInst;
            shouldSetEventType = ResponderSyntheticEvent.getPooled(shouldSetEventType, targetInst, nativeEvent, nativeEventTarget);
            shouldSetEventType.touchHistory = ResponderTouchHistoryStore.touchHistory;
            JSCompiler_temp ? forEachAccumulated(shouldSetEventType, accumulateTwoPhaseDispatchesSingleSkipTarget) : forEachAccumulated(shouldSetEventType, accumulateTwoPhaseDispatchesSingle$1);
            b: {
                JSCompiler_temp = shouldSetEventType._dispatchListeners;
                targetInst = shouldSetEventType._dispatchInstances;
                if (isArrayImpl(JSCompiler_temp)) for(depthA = 0; depthA < JSCompiler_temp.length && !shouldSetEventType.isPropagationStopped(); depthA++){
                    if (JSCompiler_temp[depthA](shouldSetEventType, targetInst[depthA])) {
                        JSCompiler_temp = targetInst[depthA];
                        break b;
                    }
                }
                else if (JSCompiler_temp && JSCompiler_temp(shouldSetEventType, targetInst)) {
                    JSCompiler_temp = targetInst;
                    break b;
                }
                JSCompiler_temp = null;
            }
            shouldSetEventType._dispatchInstances = null;
            shouldSetEventType._dispatchListeners = null;
            shouldSetEventType.isPersistent() || shouldSetEventType.constructor.release(shouldSetEventType);
            if (JSCompiler_temp && JSCompiler_temp !== responderInst) if (shouldSetEventType = ResponderSyntheticEvent.getPooled(eventTypes.responderGrant, JSCompiler_temp, nativeEvent, nativeEventTarget), shouldSetEventType.touchHistory = ResponderTouchHistoryStore.touchHistory, forEachAccumulated(shouldSetEventType, accumulateDirectDispatchesSingle$1), targetInst = !0 === executeDirectDispatch(shouldSetEventType), responderInst) if (depthA = ResponderSyntheticEvent.getPooled(eventTypes.responderTerminationRequest, responderInst, nativeEvent, nativeEventTarget), depthA.touchHistory = ResponderTouchHistoryStore.touchHistory, forEachAccumulated(depthA, accumulateDirectDispatchesSingle$1), tempA = !depthA._dispatchListeners || executeDirectDispatch(depthA), depthA.isPersistent() || depthA.constructor.release(depthA), tempA) {
                depthA = ResponderSyntheticEvent.getPooled(eventTypes.responderTerminate, responderInst, nativeEvent, nativeEventTarget);
                depthA.touchHistory = ResponderTouchHistoryStore.touchHistory;
                forEachAccumulated(depthA, accumulateDirectDispatchesSingle$1);
                var JSCompiler_temp$jscomp$0 = accumulate(JSCompiler_temp$jscomp$0, [
                    shouldSetEventType,
                    depthA
                ]);
                changeResponder(JSCompiler_temp, targetInst);
            } else shouldSetEventType = ResponderSyntheticEvent.getPooled(eventTypes.responderReject, JSCompiler_temp, nativeEvent, nativeEventTarget), shouldSetEventType.touchHistory = ResponderTouchHistoryStore.touchHistory, forEachAccumulated(shouldSetEventType, accumulateDirectDispatchesSingle$1), JSCompiler_temp$jscomp$0 = accumulate(JSCompiler_temp$jscomp$0, shouldSetEventType);
            else JSCompiler_temp$jscomp$0 = accumulate(JSCompiler_temp$jscomp$0, shouldSetEventType), changeResponder(JSCompiler_temp, targetInst);
            else JSCompiler_temp$jscomp$0 = null;
        } else JSCompiler_temp$jscomp$0 = null;
        shouldSetEventType = responderInst && isStartish(topLevelType);
        JSCompiler_temp = responderInst && isMoveish(topLevelType);
        targetInst = responderInst && ("topTouchEnd" === topLevelType || "topTouchCancel" === topLevelType);
        if (shouldSetEventType = shouldSetEventType ? eventTypes.responderStart : JSCompiler_temp ? eventTypes.responderMove : targetInst ? eventTypes.responderEnd : null) shouldSetEventType = ResponderSyntheticEvent.getPooled(shouldSetEventType, responderInst, nativeEvent, nativeEventTarget), shouldSetEventType.touchHistory = ResponderTouchHistoryStore.touchHistory, forEachAccumulated(shouldSetEventType, accumulateDirectDispatchesSingle$1), JSCompiler_temp$jscomp$0 = accumulate(JSCompiler_temp$jscomp$0, shouldSetEventType);
        shouldSetEventType = responderInst && "topTouchCancel" === topLevelType;
        if (topLevelType = responderInst && !shouldSetEventType && ("topTouchEnd" === topLevelType || "topTouchCancel" === topLevelType)) a: {
            if ((topLevelType = nativeEvent.touches) && 0 !== topLevelType.length) {
                for(JSCompiler_temp = 0; JSCompiler_temp < topLevelType.length; JSCompiler_temp++)if (targetInst = topLevelType[JSCompiler_temp].target, null !== targetInst && void 0 !== targetInst && 0 !== targetInst) {
                    depthA = getInstanceFromNode$1(targetInst);
                    b: {
                        for(targetInst = responderInst; depthA;){
                            if (targetInst === depthA || targetInst === depthA.alternate) {
                                targetInst = !0;
                                break b;
                            }
                            depthA = getParent$1(depthA);
                        }
                        targetInst = !1;
                    }
                    if (targetInst) {
                        topLevelType = !1;
                        break a;
                    }
                }
            }
            topLevelType = !0;
        }
        if (topLevelType = shouldSetEventType ? eventTypes.responderTerminate : topLevelType ? eventTypes.responderRelease : null) nativeEvent = ResponderSyntheticEvent.getPooled(topLevelType, responderInst, nativeEvent, nativeEventTarget), nativeEvent.touchHistory = ResponderTouchHistoryStore.touchHistory, forEachAccumulated(nativeEvent, accumulateDirectDispatchesSingle$1), JSCompiler_temp$jscomp$0 = accumulate(JSCompiler_temp$jscomp$0, nativeEvent), changeResponder(null);
        return JSCompiler_temp$jscomp$0;
    },
    GlobalResponderHandler: null,
    injection: {
        injectGlobalResponderHandler: function(GlobalResponderHandler) {
            ResponderEventPlugin.GlobalResponderHandler = GlobalResponderHandler;
        }
    }
}, eventPluginOrder = null, namesToPlugins = {};
function recomputePluginOrdering() {
    if (eventPluginOrder) for(var pluginName in namesToPlugins){
        var pluginModule = namesToPlugins[pluginName], pluginIndex = eventPluginOrder.indexOf(pluginName);
        if (-1 >= pluginIndex) throw Error("EventPluginRegistry: Cannot inject event plugins that do not exist in the plugin ordering, `" + (pluginName + "`."));
        if (!plugins[pluginIndex]) {
            if (!pluginModule.extractEvents) throw Error("EventPluginRegistry: Event plugins must implement an `extractEvents` method, but `" + (pluginName + "` does not."));
            plugins[pluginIndex] = pluginModule;
            pluginIndex = pluginModule.eventTypes;
            for(var eventName in pluginIndex){
                var JSCompiler_inline_result = void 0;
                var dispatchConfig = pluginIndex[eventName];
                if (eventNameDispatchConfigs.hasOwnProperty(eventName)) throw Error("EventPluginRegistry: More than one plugin attempted to publish the same event name, `" + (eventName + "`."));
                eventNameDispatchConfigs[eventName] = dispatchConfig;
                var phasedRegistrationNames = dispatchConfig.phasedRegistrationNames;
                if (phasedRegistrationNames) {
                    for(JSCompiler_inline_result in phasedRegistrationNames)phasedRegistrationNames.hasOwnProperty(JSCompiler_inline_result) && publishRegistrationName(phasedRegistrationNames[JSCompiler_inline_result], pluginModule);
                    JSCompiler_inline_result = !0;
                } else dispatchConfig.registrationName ? (publishRegistrationName(dispatchConfig.registrationName, pluginModule), JSCompiler_inline_result = !0) : JSCompiler_inline_result = !1;
                if (!JSCompiler_inline_result) throw Error("EventPluginRegistry: Failed to publish event `" + eventName + "` for plugin `" + pluginName + "`.");
            }
        }
    }
}
function publishRegistrationName(registrationName, pluginModule) {
    if (registrationNameModules[registrationName]) throw Error("EventPluginRegistry: More than one plugin attempted to publish the same registration name, `" + (registrationName + "`."));
    registrationNameModules[registrationName] = pluginModule;
}
var plugins = [], eventNameDispatchConfigs = {}, registrationNameModules = {};
function getListener(inst, registrationName) {
    inst = inst.stateNode;
    if (null === inst) return null;
    inst = getFiberCurrentPropsFromNode$1(inst);
    if (null === inst) return null;
    if ((inst = inst[registrationName]) && "function" !== typeof inst) throw Error("Expected `" + registrationName + "` listener to be a function, instead got a value of `" + typeof inst + "` type.");
    return inst;
}
var customBubblingEventTypes = ReactNativePrivateInterface.ReactNativeViewConfigRegistry.customBubblingEventTypes, customDirectEventTypes = ReactNativePrivateInterface.ReactNativeViewConfigRegistry.customDirectEventTypes;
function accumulateDirectionalDispatches(inst, phase, event) {
    if (phase = getListener(inst, event.dispatchConfig.phasedRegistrationNames[phase])) event._dispatchListeners = accumulateInto(event._dispatchListeners, phase), event._dispatchInstances = accumulateInto(event._dispatchInstances, inst);
}
function traverseTwoPhase(inst, fn, arg, skipBubbling) {
    for(var path = []; inst;){
        path.push(inst);
        do inst = inst.return;
        while (inst && 5 !== inst.tag);
        inst = inst ? inst : null;
    }
    for(inst = path.length; 0 < inst--;)fn(path[inst], "captured", arg);
    if (skipBubbling) fn(path[0], "bubbled", arg);
    else for(inst = 0; inst < path.length; inst++)fn(path[inst], "bubbled", arg);
}
function accumulateTwoPhaseDispatchesSingle(event) {
    event && event.dispatchConfig.phasedRegistrationNames && traverseTwoPhase(event._targetInst, accumulateDirectionalDispatches, event, !1);
}
function accumulateDirectDispatchesSingle(event) {
    if (event && event.dispatchConfig.registrationName) {
        var inst = event._targetInst;
        if (inst && event && event.dispatchConfig.registrationName) {
            var listener = getListener(inst, event.dispatchConfig.registrationName);
            listener && (event._dispatchListeners = accumulateInto(event._dispatchListeners, listener), event._dispatchInstances = accumulateInto(event._dispatchInstances, inst));
        }
    }
}
if (eventPluginOrder) throw Error("EventPluginRegistry: Cannot inject event plugin ordering more than once. You are likely trying to load more than one copy of React.");
eventPluginOrder = Array.prototype.slice.call([
    "ResponderEventPlugin",
    "ReactNativeBridgeEventPlugin"
]);
recomputePluginOrdering();
var injectedNamesToPlugins$jscomp$inline_281 = {
    ResponderEventPlugin: ResponderEventPlugin,
    ReactNativeBridgeEventPlugin: {
        eventTypes: {},
        extractEvents: function(topLevelType, targetInst, nativeEvent, nativeEventTarget) {
            if (null == targetInst) return null;
            var bubbleDispatchConfig = customBubblingEventTypes[topLevelType], directDispatchConfig = customDirectEventTypes[topLevelType];
            if (!bubbleDispatchConfig && !directDispatchConfig) throw Error('Unsupported top level event type "' + topLevelType + '" dispatched');
            topLevelType = SyntheticEvent.getPooled(bubbleDispatchConfig || directDispatchConfig, targetInst, nativeEvent, nativeEventTarget);
            if (bubbleDispatchConfig) null != topLevelType && null != topLevelType.dispatchConfig.phasedRegistrationNames && topLevelType.dispatchConfig.phasedRegistrationNames.skipBubbling ? topLevelType && topLevelType.dispatchConfig.phasedRegistrationNames && traverseTwoPhase(topLevelType._targetInst, accumulateDirectionalDispatches, topLevelType, !0) : forEachAccumulated(topLevelType, accumulateTwoPhaseDispatchesSingle);
            else if (directDispatchConfig) forEachAccumulated(topLevelType, accumulateDirectDispatchesSingle);
            else return null;
            return topLevelType;
        }
    }
}, isOrderingDirty$jscomp$inline_282 = !1, pluginName$jscomp$inline_283;
for(pluginName$jscomp$inline_283 in injectedNamesToPlugins$jscomp$inline_281)if (injectedNamesToPlugins$jscomp$inline_281.hasOwnProperty(pluginName$jscomp$inline_283)) {
    var pluginModule$jscomp$inline_284 = injectedNamesToPlugins$jscomp$inline_281[pluginName$jscomp$inline_283];
    if (!namesToPlugins.hasOwnProperty(pluginName$jscomp$inline_283) || namesToPlugins[pluginName$jscomp$inline_283] !== pluginModule$jscomp$inline_284) {
        if (namesToPlugins[pluginName$jscomp$inline_283]) throw Error("EventPluginRegistry: Cannot inject two different event plugins using the same name, `" + (pluginName$jscomp$inline_283 + "`."));
        namesToPlugins[pluginName$jscomp$inline_283] = pluginModule$jscomp$inline_284;
        isOrderingDirty$jscomp$inline_282 = !0;
    }
}
isOrderingDirty$jscomp$inline_282 && recomputePluginOrdering();
var emptyObject = {}, removedKeys = null, removedKeyCount = 0, deepDifferOptions = {
    unsafelyIgnoreFunctions: !0
};
function defaultDiffer(prevProp, nextProp) {
    return "object" !== typeof nextProp || null === nextProp ? !0 : ReactNativePrivateInterface.deepDiffer(prevProp, nextProp, deepDifferOptions);
}
function restoreDeletedValuesInNestedArray(updatePayload, node, validAttributes) {
    if (isArrayImpl(node)) for(var i = node.length; i-- && 0 < removedKeyCount;)restoreDeletedValuesInNestedArray(updatePayload, node[i], validAttributes);
    else if (node && 0 < removedKeyCount) {
        for(i in removedKeys)if (removedKeys[i]) {
            var nextProp = node[i];
            if (void 0 !== nextProp) {
                var attributeConfig = validAttributes[i];
                if (attributeConfig) {
                    "function" === typeof nextProp && (nextProp = !0);
                    "undefined" === typeof nextProp && (nextProp = null);
                    if ("object" !== typeof attributeConfig) updatePayload[i] = nextProp;
                    else if ("function" === typeof attributeConfig.diff || "function" === typeof attributeConfig.process) nextProp = "function" === typeof attributeConfig.process ? attributeConfig.process(nextProp) : nextProp, updatePayload[i] = nextProp;
                    removedKeys[i] = !1;
                    removedKeyCount--;
                }
            }
        }
    }
}
function diffNestedProperty(updatePayload, prevProp, nextProp, validAttributes) {
    if (!updatePayload && prevProp === nextProp) return updatePayload;
    if (!prevProp || !nextProp) return nextProp ? addNestedProperty(updatePayload, nextProp, validAttributes) : prevProp ? clearNestedProperty(updatePayload, prevProp, validAttributes) : updatePayload;
    if (!isArrayImpl(prevProp) && !isArrayImpl(nextProp)) return diffProperties(updatePayload, prevProp, nextProp, validAttributes);
    if (isArrayImpl(prevProp) && isArrayImpl(nextProp)) {
        var minLength = prevProp.length < nextProp.length ? prevProp.length : nextProp.length, i;
        for(i = 0; i < minLength; i++)updatePayload = diffNestedProperty(updatePayload, prevProp[i], nextProp[i], validAttributes);
        for(; i < prevProp.length; i++)updatePayload = clearNestedProperty(updatePayload, prevProp[i], validAttributes);
        for(; i < nextProp.length; i++)updatePayload = addNestedProperty(updatePayload, nextProp[i], validAttributes);
        return updatePayload;
    }
    return isArrayImpl(prevProp) ? diffProperties(updatePayload, ReactNativePrivateInterface.flattenStyle(prevProp), nextProp, validAttributes) : diffProperties(updatePayload, prevProp, ReactNativePrivateInterface.flattenStyle(nextProp), validAttributes);
}
function addNestedProperty(updatePayload, nextProp, validAttributes) {
    if (!nextProp) return updatePayload;
    if (!isArrayImpl(nextProp)) return diffProperties(updatePayload, emptyObject, nextProp, validAttributes);
    for(var i = 0; i < nextProp.length; i++)updatePayload = addNestedProperty(updatePayload, nextProp[i], validAttributes);
    return updatePayload;
}
function clearNestedProperty(updatePayload, prevProp, validAttributes) {
    if (!prevProp) return updatePayload;
    if (!isArrayImpl(prevProp)) return diffProperties(updatePayload, prevProp, emptyObject, validAttributes);
    for(var i = 0; i < prevProp.length; i++)updatePayload = clearNestedProperty(updatePayload, prevProp[i], validAttributes);
    return updatePayload;
}
function diffProperties(updatePayload, prevProps, nextProps, validAttributes) {
    var attributeConfig, propKey;
    for(propKey in nextProps)if (attributeConfig = validAttributes[propKey]) {
        var prevProp = prevProps[propKey];
        var nextProp = nextProps[propKey];
        "function" === typeof nextProp && (nextProp = !0, "function" === typeof prevProp && (prevProp = !0));
        "undefined" === typeof nextProp && (nextProp = null, "undefined" === typeof prevProp && (prevProp = null));
        removedKeys && (removedKeys[propKey] = !1);
        if (updatePayload && void 0 !== updatePayload[propKey]) if ("object" !== typeof attributeConfig) updatePayload[propKey] = nextProp;
        else {
            if ("function" === typeof attributeConfig.diff || "function" === typeof attributeConfig.process) attributeConfig = "function" === typeof attributeConfig.process ? attributeConfig.process(nextProp) : nextProp, updatePayload[propKey] = attributeConfig;
        }
        else if (prevProp !== nextProp) if ("object" !== typeof attributeConfig) defaultDiffer(prevProp, nextProp) && ((updatePayload || (updatePayload = {}))[propKey] = nextProp);
        else if ("function" === typeof attributeConfig.diff || "function" === typeof attributeConfig.process) {
            if (void 0 === prevProp || ("function" === typeof attributeConfig.diff ? attributeConfig.diff(prevProp, nextProp) : defaultDiffer(prevProp, nextProp))) attributeConfig = "function" === typeof attributeConfig.process ? attributeConfig.process(nextProp) : nextProp, (updatePayload || (updatePayload = {}))[propKey] = attributeConfig;
        } else removedKeys = null, removedKeyCount = 0, updatePayload = diffNestedProperty(updatePayload, prevProp, nextProp, attributeConfig), 0 < removedKeyCount && updatePayload && (restoreDeletedValuesInNestedArray(updatePayload, nextProp, attributeConfig), removedKeys = null);
    }
    for(var propKey$5 in prevProps)void 0 === nextProps[propKey$5] && (!(attributeConfig = validAttributes[propKey$5]) || updatePayload && void 0 !== updatePayload[propKey$5] || (prevProp = prevProps[propKey$5], void 0 !== prevProp && ("object" !== typeof attributeConfig || "function" === typeof attributeConfig.diff || "function" === typeof attributeConfig.process ? ((updatePayload || (updatePayload = {}))[propKey$5] = null, removedKeys || (removedKeys = {}), removedKeys[propKey$5] || (removedKeys[propKey$5] = !0, removedKeyCount++)) : updatePayload = clearNestedProperty(updatePayload, prevProp, attributeConfig))));
    return updatePayload;
}
function fastAddProperties(payload, props, validAttributes) {
    if (isArrayImpl(props)) {
        for(var i = 0; i < props.length; i++)payload = fastAddProperties(payload, props[i], validAttributes);
        return payload;
    }
    for(i in props){
        var prop = props[i], attributeConfig = validAttributes[i];
        if (null != attributeConfig) {
            var newValue = void 0;
            if (void 0 === prop) if (payload && void 0 !== payload[i]) newValue = null;
            else continue;
            else "function" === typeof prop ? newValue = !0 : "object" !== typeof attributeConfig ? newValue = prop : "function" === typeof attributeConfig.process ? newValue = attributeConfig.process(prop) : "function" === typeof attributeConfig.diff && (newValue = prop);
            void 0 !== newValue ? (payload || (payload = {}), payload[i] = newValue) : payload = fastAddProperties(payload, prop, attributeConfig);
        }
    }
    return payload;
}
function batchedUpdatesImpl(fn, bookkeeping) {
    return fn(bookkeeping);
}
var isInsideEventHandler = !1;
function batchedUpdates$1(fn, bookkeeping) {
    if (isInsideEventHandler) return fn(bookkeeping);
    isInsideEventHandler = !0;
    try {
        return batchedUpdatesImpl(fn, bookkeeping);
    } finally{
        isInsideEventHandler = !1;
    }
}
var eventQueue = null;
function executeDispatchesAndReleaseTopLevel(e) {
    if (e) {
        var dispatchListeners = e._dispatchListeners, dispatchInstances = e._dispatchInstances;
        if (isArrayImpl(dispatchListeners)) for(var i = 0; i < dispatchListeners.length && !e.isPropagationStopped(); i++)executeDispatch(e, dispatchListeners[i], dispatchInstances[i]);
        else dispatchListeners && executeDispatch(e, dispatchListeners, dispatchInstances);
        e._dispatchListeners = null;
        e._dispatchInstances = null;
        e.isPersistent() || e.constructor.release(e);
    }
}
function dispatchEvent(target, topLevelType, nativeEvent) {
    var eventTarget = null;
    if (null != target) {
        var stateNode = target.stateNode;
        null != stateNode && (eventTarget = getPublicInstance(stateNode));
    }
    batchedUpdates$1(function() {
        var event = {
            eventName: topLevelType,
            nativeEvent: nativeEvent
        };
        ReactNativePrivateInterface.RawEventEmitter.emit(topLevelType, event);
        ReactNativePrivateInterface.RawEventEmitter.emit("*", event);
        event = eventTarget;
        for(var events = null, legacyPlugins = plugins, i = 0; i < legacyPlugins.length; i++){
            var possiblePlugin = legacyPlugins[i];
            possiblePlugin && (possiblePlugin = possiblePlugin.extractEvents(topLevelType, target, nativeEvent, event)) && (events = accumulateInto(events, possiblePlugin));
        }
        event = events;
        null !== event && (eventQueue = accumulateInto(eventQueue, event));
        event = eventQueue;
        eventQueue = null;
        if (event) {
            forEachAccumulated(event, executeDispatchesAndReleaseTopLevel);
            if (eventQueue) throw Error("processEventQueue(): Additional events were enqueued while processing an event queue. Support for this has not yet been implemented.");
            if (hasError) throw event = caughtError, hasError = !1, caughtError = null, event;
        }
    });
}
var scheduleCallback$3 = Scheduler.unstable_scheduleCallback, cancelCallback$1 = Scheduler.unstable_cancelCallback, shouldYield = Scheduler.unstable_shouldYield, requestPaint = Scheduler.unstable_requestPaint, now = Scheduler.unstable_now, ImmediatePriority = Scheduler.unstable_ImmediatePriority, UserBlockingPriority = Scheduler.unstable_UserBlockingPriority, NormalPriority$1 = Scheduler.unstable_NormalPriority, IdlePriority = Scheduler.unstable_IdlePriority, log$1 = Scheduler.log, unstable_setDisableYieldValue = Scheduler.unstable_setDisableYieldValue, rendererID = null, injectedHook = null;
function onCommitRoot(root) {
    if (injectedHook && "function" === typeof injectedHook.onCommitFiberRoot) try {
        injectedHook.onCommitFiberRoot(rendererID, root, void 0, 128 === (root.current.flags & 128));
    } catch (err) {}
}
function setIsStrictModeForDevtools(newIsStrictMode) {
    "function" === typeof log$1 && unstable_setDisableYieldValue(newIsStrictMode);
    if (injectedHook && "function" === typeof injectedHook.setStrictMode) try {
        injectedHook.setStrictMode(rendererID, newIsStrictMode);
    } catch (err) {}
}
var clz32 = Math.clz32 ? Math.clz32 : clz32Fallback, log = Math.log, LN2 = Math.LN2;
function clz32Fallback(x) {
    x >>>= 0;
    return 0 === x ? 32 : 31 - (log(x) / LN2 | 0) | 0;
}
var nextTransitionLane = 128, nextRetryLane = 4194304;
function getHighestPriorityLanes(lanes) {
    var pendingSyncLanes = lanes & 42;
    if (0 !== pendingSyncLanes) return pendingSyncLanes;
    switch(lanes & -lanes){
        case 1:
            return 1;
        case 2:
            return 2;
        case 4:
            return 4;
        case 8:
            return 8;
        case 16:
            return 16;
        case 32:
            return 32;
        case 64:
            return 64;
        case 128:
        case 256:
        case 512:
        case 1024:
        case 2048:
        case 4096:
        case 8192:
        case 16384:
        case 32768:
        case 65536:
        case 131072:
        case 262144:
        case 524288:
        case 1048576:
        case 2097152:
            return lanes & 4194176;
        case 4194304:
        case 8388608:
        case 16777216:
        case 33554432:
            return lanes & 62914560;
        case 67108864:
            return 67108864;
        case 134217728:
            return 134217728;
        case 268435456:
            return 268435456;
        case 536870912:
            return 536870912;
        case 1073741824:
            return 0;
        default:
            return lanes;
    }
}
function getNextLanes(root, wipLanes) {
    var pendingLanes = root.pendingLanes;
    if (0 === pendingLanes) return 0;
    var nextLanes = 0, suspendedLanes = root.suspendedLanes, pingedLanes = root.pingedLanes, warmLanes = root.warmLanes;
    root = 0 !== root.finishedLanes;
    var nonIdlePendingLanes = pendingLanes & 134217727;
    0 !== nonIdlePendingLanes ? (pendingLanes = nonIdlePendingLanes & ~suspendedLanes, 0 !== pendingLanes ? nextLanes = getHighestPriorityLanes(pendingLanes) : (pingedLanes &= nonIdlePendingLanes, 0 !== pingedLanes ? nextLanes = getHighestPriorityLanes(pingedLanes) : root || (warmLanes = nonIdlePendingLanes & ~warmLanes, 0 !== warmLanes && (nextLanes = getHighestPriorityLanes(warmLanes))))) : (nonIdlePendingLanes = pendingLanes & ~suspendedLanes, 0 !== nonIdlePendingLanes ? nextLanes = getHighestPriorityLanes(nonIdlePendingLanes) : 0 !== pingedLanes ? nextLanes = getHighestPriorityLanes(pingedLanes) : root || (warmLanes = pendingLanes & ~warmLanes, 0 !== warmLanes && (nextLanes = getHighestPriorityLanes(warmLanes))));
    return 0 === nextLanes ? 0 : 0 !== wipLanes && wipLanes !== nextLanes && 0 === (wipLanes & suspendedLanes) && (suspendedLanes = nextLanes & -nextLanes, warmLanes = wipLanes & -wipLanes, suspendedLanes >= warmLanes || 32 === suspendedLanes && 0 !== (warmLanes & 4194176)) ? wipLanes : nextLanes;
}
function checkIfRootIsPrerendering(root, renderLanes) {
    return 0 === (root.pendingLanes & ~(root.suspendedLanes & ~root.pingedLanes) & renderLanes);
}
function computeExpirationTime(lane, currentTime) {
    switch(lane){
        case 1:
        case 2:
        case 4:
        case 8:
            return currentTime + 250;
        case 16:
        case 32:
        case 64:
        case 128:
        case 256:
        case 512:
        case 1024:
        case 2048:
        case 4096:
        case 8192:
        case 16384:
        case 32768:
        case 65536:
        case 131072:
        case 262144:
        case 524288:
        case 1048576:
        case 2097152:
            return currentTime + 5e3;
        case 4194304:
        case 8388608:
        case 16777216:
        case 33554432:
            return -1;
        case 67108864:
        case 134217728:
        case 268435456:
        case 536870912:
        case 1073741824:
            return -1;
        default:
            return -1;
    }
}
function claimNextTransitionLane() {
    var lane = nextTransitionLane;
    nextTransitionLane <<= 1;
    0 === (nextTransitionLane & 4194176) && (nextTransitionLane = 128);
    return lane;
}
function claimNextRetryLane() {
    var lane = nextRetryLane;
    nextRetryLane <<= 1;
    0 === (nextRetryLane & 62914560) && (nextRetryLane = 4194304);
    return lane;
}
function createLaneMap(initial) {
    for(var laneMap = [], i = 0; 31 > i; i++)laneMap.push(initial);
    return laneMap;
}
function markRootUpdated$1(root, updateLane) {
    root.pendingLanes |= updateLane;
    268435456 !== updateLane && (root.suspendedLanes = 0, root.pingedLanes = 0, root.warmLanes = 0);
}
function markRootFinished(root, finishedLanes, remainingLanes, spawnedLane, updatedLanes, suspendedRetryLanes) {
    var previouslyPendingLanes = root.pendingLanes;
    root.pendingLanes = remainingLanes;
    root.suspendedLanes = 0;
    root.pingedLanes = 0;
    root.warmLanes = 0;
    root.expiredLanes &= remainingLanes;
    root.entangledLanes &= remainingLanes;
    root.errorRecoveryDisabledLanes &= remainingLanes;
    root.shellSuspendCounter = 0;
    var entanglements = root.entanglements, expirationTimes = root.expirationTimes, hiddenUpdates = root.hiddenUpdates;
    for(remainingLanes = previouslyPendingLanes & ~remainingLanes; 0 < remainingLanes;){
        var index$10 = 31 - clz32(remainingLanes), lane = 1 << index$10;
        entanglements[index$10] = 0;
        expirationTimes[index$10] = -1;
        var hiddenUpdatesForLane = hiddenUpdates[index$10];
        if (null !== hiddenUpdatesForLane) for(hiddenUpdates[index$10] = null, index$10 = 0; index$10 < hiddenUpdatesForLane.length; index$10++){
            var update = hiddenUpdatesForLane[index$10];
            null !== update && (update.lane &= -536870913);
        }
        remainingLanes &= ~lane;
    }
    0 !== spawnedLane && markSpawnedDeferredLane(root, spawnedLane, 0);
    0 !== suspendedRetryLanes && 0 === updatedLanes && (root.suspendedLanes |= suspendedRetryLanes & ~(previouslyPendingLanes & ~finishedLanes));
}
function markSpawnedDeferredLane(root, spawnedLane, entangledLanes) {
    root.pendingLanes |= spawnedLane;
    root.suspendedLanes &= ~spawnedLane;
    var spawnedLaneIndex = 31 - clz32(spawnedLane);
    root.entangledLanes |= spawnedLane;
    root.entanglements[spawnedLaneIndex] = root.entanglements[spawnedLaneIndex] | 1073741824 | entangledLanes & 4194218;
}
function markRootEntangled(root, entangledLanes) {
    var rootEntangledLanes = root.entangledLanes |= entangledLanes;
    for(root = root.entanglements; rootEntangledLanes;){
        var index$11 = 31 - clz32(rootEntangledLanes), lane = 1 << index$11;
        lane & entangledLanes | root[index$11] & entangledLanes && (root[index$11] |= entangledLanes);
        rootEntangledLanes &= ~lane;
    }
}
function lanesToEventPriority(lanes) {
    lanes &= -lanes;
    return 2 < lanes ? 8 < lanes ? 0 !== (lanes & 134217727) ? 32 : 268435456 : 8 : 2;
}
function getNearestMountedFiber(fiber) {
    var node = fiber, nearestMounted = fiber;
    if (fiber.alternate) for(; node.return;)node = node.return;
    else {
        fiber = node;
        do node = fiber, 0 !== (node.flags & 4098) && (nearestMounted = node.return), fiber = node.return;
        while (fiber);
    }
    return 3 === node.tag ? nearestMounted : null;
}
function assertIsMounted(fiber) {
    if (getNearestMountedFiber(fiber) !== fiber) throw Error("Unable to find node on an unmounted component.");
}
function findCurrentFiberUsingSlowPath(fiber) {
    var alternate = fiber.alternate;
    if (!alternate) {
        alternate = getNearestMountedFiber(fiber);
        if (null === alternate) throw Error("Unable to find node on an unmounted component.");
        return alternate !== fiber ? null : fiber;
    }
    for(var a = fiber, b = alternate;;){
        var parentA = a.return;
        if (null === parentA) break;
        var parentB = parentA.alternate;
        if (null === parentB) {
            b = parentA.return;
            if (null !== b) {
                a = b;
                continue;
            }
            break;
        }
        if (parentA.child === parentB.child) {
            for(parentB = parentA.child; parentB;){
                if (parentB === a) return assertIsMounted(parentA), fiber;
                if (parentB === b) return assertIsMounted(parentA), alternate;
                parentB = parentB.sibling;
            }
            throw Error("Unable to find node on an unmounted component.");
        }
        if (a.return !== b.return) a = parentA, b = parentB;
        else {
            for(var didFindChild = !1, child$12 = parentA.child; child$12;){
                if (child$12 === a) {
                    didFindChild = !0;
                    a = parentA;
                    b = parentB;
                    break;
                }
                if (child$12 === b) {
                    didFindChild = !0;
                    b = parentA;
                    a = parentB;
                    break;
                }
                child$12 = child$12.sibling;
            }
            if (!didFindChild) {
                for(child$12 = parentB.child; child$12;){
                    if (child$12 === a) {
                        didFindChild = !0;
                        a = parentB;
                        b = parentA;
                        break;
                    }
                    if (child$12 === b) {
                        didFindChild = !0;
                        b = parentB;
                        a = parentA;
                        break;
                    }
                    child$12 = child$12.sibling;
                }
                if (!didFindChild) throw Error("Child was not found in either parent set. This indicates a bug in React related to the return pointer. Please file an issue.");
            }
        }
        if (a.alternate !== b) throw Error("Return fibers should always be each others' alternates. This error is likely caused by a bug in React. Please file an issue.");
    }
    if (3 !== a.tag) throw Error("Unable to find node on an unmounted component.");
    return a.stateNode.current === a ? fiber : alternate;
}
function findCurrentHostFiberImpl(node) {
    var tag = node.tag;
    if (5 === tag || 26 === tag || 27 === tag || 6 === tag) return node;
    for(node = node.child; null !== node;){
        tag = findCurrentHostFiberImpl(node);
        if (null !== tag) return tag;
        node = node.sibling;
    }
    return null;
}
var valueStack = [], index = -1;
function createCursor(defaultValue) {
    return {
        current: defaultValue
    };
}
function pop(cursor) {
    0 > index || (cursor.current = valueStack[index], valueStack[index] = null, index--);
}
function push(cursor, value) {
    index++;
    valueStack[index] = cursor.current;
    cursor.current = value;
}
var emptyContextObject = {};
function is(x, y) {
    return x === y && (0 !== x || 1 / x === 1 / y) || x !== x && y !== y;
}
var objectIs = "function" === typeof Object.is ? Object.is : is, CapturedStacks = new WeakMap();
function createCapturedValueAtFiber(value, source) {
    if ("object" === typeof value && null !== value) {
        var existing = CapturedStacks.get(value);
        if (void 0 !== existing) return existing;
        source = {
            value: value,
            source: source,
            stack: getStackByFiberInDevAndProd(source)
        };
        CapturedStacks.set(value, source);
        return source;
    }
    return {
        value: value,
        source: source,
        stack: getStackByFiberInDevAndProd(source)
    };
}
var contextStackCursor = createCursor(null), contextFiberStackCursor = createCursor(null), rootInstanceStackCursor = createCursor(null), hostTransitionProviderCursor = createCursor(null);
function pushHostContainer(fiber, nextRootInstance) {
    push(rootInstanceStackCursor, nextRootInstance);
    push(contextFiberStackCursor, fiber);
    push(contextStackCursor, null);
    fiber = PROD_HOST_CONTEXT;
    pop(contextStackCursor);
    push(contextStackCursor, fiber);
}
function popHostContainer() {
    pop(contextStackCursor);
    pop(contextFiberStackCursor);
    pop(rootInstanceStackCursor);
}
function pushHostContext(fiber) {
    null !== fiber.memoizedState && push(hostTransitionProviderCursor, fiber);
    var context = contextStackCursor.current;
    context !== context && (push(contextFiberStackCursor, fiber), push(contextStackCursor, context));
}
function popHostContext(fiber) {
    contextFiberStackCursor.current === fiber && (pop(contextStackCursor), pop(contextFiberStackCursor));
    hostTransitionProviderCursor.current === fiber && (pop(hostTransitionProviderCursor), HostTransitionContext._currentValue2 = null);
}
var hydrationErrors = null, concurrentQueues = [], concurrentQueuesIndex = 0, concurrentlyUpdatedLanes = 0;
function finishQueueingConcurrentUpdates() {
    for(var endIndex = concurrentQueuesIndex, i = concurrentlyUpdatedLanes = concurrentQueuesIndex = 0; i < endIndex;){
        var fiber = concurrentQueues[i];
        concurrentQueues[i++] = null;
        var queue = concurrentQueues[i];
        concurrentQueues[i++] = null;
        var update = concurrentQueues[i];
        concurrentQueues[i++] = null;
        var lane = concurrentQueues[i];
        concurrentQueues[i++] = null;
        if (null !== queue && null !== update) {
            var pending = queue.pending;
            null === pending ? update.next = update : (update.next = pending.next, pending.next = update);
            queue.pending = update;
        }
        0 !== lane && markUpdateLaneFromFiberToRoot(fiber, update, lane);
    }
}
function enqueueUpdate$1(fiber, queue, update, lane) {
    concurrentQueues[concurrentQueuesIndex++] = fiber;
    concurrentQueues[concurrentQueuesIndex++] = queue;
    concurrentQueues[concurrentQueuesIndex++] = update;
    concurrentQueues[concurrentQueuesIndex++] = lane;
    concurrentlyUpdatedLanes |= lane;
    fiber.lanes |= lane;
    fiber = fiber.alternate;
    null !== fiber && (fiber.lanes |= lane);
}
function enqueueConcurrentHookUpdate(fiber, queue, update, lane) {
    enqueueUpdate$1(fiber, queue, update, lane);
    return getRootForUpdatedFiber(fiber);
}
function enqueueConcurrentRenderForLane(fiber, lane) {
    enqueueUpdate$1(fiber, null, null, lane);
    return getRootForUpdatedFiber(fiber);
}
function markUpdateLaneFromFiberToRoot(sourceFiber, update, lane) {
    sourceFiber.lanes |= lane;
    var alternate = sourceFiber.alternate;
    null !== alternate && (alternate.lanes |= lane);
    for(var isHidden = !1, parent = sourceFiber.return; null !== parent;)parent.childLanes |= lane, alternate = parent.alternate, null !== alternate && (alternate.childLanes |= lane), 22 === parent.tag && (sourceFiber = parent.stateNode, null === sourceFiber || sourceFiber._visibility & 1 || (isHidden = !0)), sourceFiber = parent, parent = parent.return;
    isHidden && null !== update && 3 === sourceFiber.tag && (parent = sourceFiber.stateNode, isHidden = 31 - clz32(lane), parent = parent.hiddenUpdates, sourceFiber = parent[isHidden], null === sourceFiber ? parent[isHidden] = [
        update
    ] : sourceFiber.push(update), update.lane = lane | 536870912);
}
function getRootForUpdatedFiber(sourceFiber) {
    if (50 < nestedUpdateCount) throw nestedUpdateCount = 0, rootWithNestedUpdates = null, Error("Maximum update depth exceeded. This can happen when a component repeatedly calls setState inside componentWillUpdate or componentDidUpdate. React limits the number of nested updates to prevent infinite loops.");
    for(var parent = sourceFiber.return; null !== parent;)sourceFiber = parent, parent = sourceFiber.return;
    return 3 === sourceFiber.tag ? sourceFiber.stateNode : null;
}
var firstScheduledRoot = null, lastScheduledRoot = null, didScheduleMicrotask = !1, mightHavePendingSyncWork = !1, isFlushingWork = !1, currentEventTransitionLane = 0;
function ensureRootIsScheduled(root) {
    root !== lastScheduledRoot && null === root.next && (null === lastScheduledRoot ? firstScheduledRoot = lastScheduledRoot = root : lastScheduledRoot = lastScheduledRoot.next = root);
    mightHavePendingSyncWork = !0;
    didScheduleMicrotask || (didScheduleMicrotask = !0, scheduleImmediateTask(processRootScheduleInMicrotask));
}
function flushSyncWorkAcrossRoots_impl(syncTransitionLanes, onlyLegacy) {
    if (!isFlushingWork && mightHavePendingSyncWork) {
        isFlushingWork = !0;
        do {
            var didPerformSomeWork = !1;
            for(var root = firstScheduledRoot; null !== root;){
                if (!onlyLegacy || 0 === root.tag) if (0 !== syncTransitionLanes) {
                    var pendingLanes = root.pendingLanes;
                    if (0 === pendingLanes) var JSCompiler_inline_result = 0;
                    else {
                        var suspendedLanes = root.suspendedLanes, pingedLanes = root.pingedLanes;
                        JSCompiler_inline_result = (1 << 31 - clz32(42 | syncTransitionLanes) + 1) - 1;
                        JSCompiler_inline_result &= pendingLanes & ~(suspendedLanes & ~pingedLanes);
                        JSCompiler_inline_result = JSCompiler_inline_result & 201326677 ? JSCompiler_inline_result & 201326677 | 1 : JSCompiler_inline_result ? JSCompiler_inline_result | 2 : 0;
                    }
                    0 !== JSCompiler_inline_result && (didPerformSomeWork = !0, performSyncWorkOnRoot(root, JSCompiler_inline_result));
                } else JSCompiler_inline_result = workInProgressRootRenderLanes, JSCompiler_inline_result = getNextLanes(root, root === workInProgressRoot ? JSCompiler_inline_result : 0), 0 === (JSCompiler_inline_result & 3) || checkIfRootIsPrerendering(root, JSCompiler_inline_result) || (didPerformSomeWork = !0, performSyncWorkOnRoot(root, JSCompiler_inline_result));
                root = root.next;
            }
        }while (didPerformSomeWork);
        isFlushingWork = !1;
    }
}
function processRootScheduleInMicrotask() {
    mightHavePendingSyncWork = didScheduleMicrotask = !1;
    0 !== currentEventTransitionLane && (currentEventTransitionLane = 0);
    for(var currentTime = now(), prev = null, root = firstScheduledRoot; null !== root;){
        var next = root.next, nextLanes = scheduleTaskForRootDuringMicrotask(root, currentTime);
        0 === nextLanes ? (root.next = null, null === prev ? firstScheduledRoot = next : prev.next = next, null === next && (lastScheduledRoot = prev)) : (prev = root, 0 !== (nextLanes & 3) && (mightHavePendingSyncWork = !0));
        root = next;
    }
    flushSyncWorkAcrossRoots_impl(0, !1);
}
function scheduleTaskForRootDuringMicrotask(root, currentTime) {
    for(var suspendedLanes = root.suspendedLanes, pingedLanes = root.pingedLanes, expirationTimes = root.expirationTimes, lanes = root.pendingLanes & -62914561; 0 < lanes;){
        var index$8 = 31 - clz32(lanes), lane = 1 << index$8, expirationTime = expirationTimes[index$8];
        if (-1 === expirationTime) {
            if (0 === (lane & suspendedLanes) || 0 !== (lane & pingedLanes)) expirationTimes[index$8] = computeExpirationTime(lane, currentTime);
        } else expirationTime <= currentTime && (root.expiredLanes |= lane);
        lanes &= ~lane;
    }
    currentTime = workInProgressRoot;
    suspendedLanes = workInProgressRootRenderLanes;
    suspendedLanes = getNextLanes(root, root === currentTime ? suspendedLanes : 0);
    pingedLanes = root.callbackNode;
    if (0 === suspendedLanes || root === currentTime && 2 === workInProgressSuspendedReason || null !== root.cancelPendingCommit) return null !== pingedLanes && null !== pingedLanes && cancelCallback$1(pingedLanes), root.callbackNode = null, root.callbackPriority = 0;
    if (0 === (suspendedLanes & 3) || checkIfRootIsPrerendering(root, suspendedLanes)) {
        currentTime = suspendedLanes & -suspendedLanes;
        if (currentTime === root.callbackPriority) return currentTime;
        null !== pingedLanes && cancelCallback$1(pingedLanes);
        switch(lanesToEventPriority(suspendedLanes)){
            case 2:
            case 8:
                suspendedLanes = UserBlockingPriority;
                break;
            case 32:
                suspendedLanes = NormalPriority$1;
                break;
            case 268435456:
                suspendedLanes = IdlePriority;
                break;
            default:
                suspendedLanes = NormalPriority$1;
        }
        pingedLanes = performWorkOnRootViaSchedulerTask.bind(null, root);
        suspendedLanes = scheduleCallback$3(suspendedLanes, pingedLanes);
        root.callbackPriority = currentTime;
        root.callbackNode = suspendedLanes;
        return currentTime;
    }
    null !== pingedLanes && null !== pingedLanes && cancelCallback$1(pingedLanes);
    root.callbackPriority = 2;
    root.callbackNode = null;
    return 2;
}
function performWorkOnRootViaSchedulerTask(root, didTimeout) {
    var originalCallbackNode = root.callbackNode;
    if (flushPassiveEffects() && root.callbackNode !== originalCallbackNode) return null;
    var workInProgressRootRenderLanes$jscomp$0 = workInProgressRootRenderLanes;
    workInProgressRootRenderLanes$jscomp$0 = getNextLanes(root, root === workInProgressRoot ? workInProgressRootRenderLanes$jscomp$0 : 0);
    if (0 === workInProgressRootRenderLanes$jscomp$0) return null;
    performWorkOnRoot(root, workInProgressRootRenderLanes$jscomp$0, didTimeout);
    scheduleTaskForRootDuringMicrotask(root, now());
    return null != root.callbackNode && root.callbackNode === originalCallbackNode ? performWorkOnRootViaSchedulerTask.bind(null, root) : null;
}
function performSyncWorkOnRoot(root, lanes) {
    if (flushPassiveEffects()) return null;
    performWorkOnRoot(root, lanes, !0);
}
function scheduleImmediateTask(cb) {
    supportsMicrotasks ? scheduleMicrotask(function() {
        0 !== (executionContext & 6) ? scheduleCallback$3(ImmediatePriority, cb) : cb();
    }) : scheduleCallback$3(ImmediatePriority, cb);
}
function requestTransitionLane() {
    0 === currentEventTransitionLane && (currentEventTransitionLane = claimNextTransitionLane());
    return currentEventTransitionLane;
}
var currentEntangledListeners = null, currentEntangledPendingCount = 0, currentEntangledLane = 0, currentEntangledActionThenable = null;
function entangleAsyncAction(transition, thenable) {
    if (null === currentEntangledListeners) {
        var entangledListeners = currentEntangledListeners = [];
        currentEntangledPendingCount = 0;
        currentEntangledLane = requestTransitionLane();
        currentEntangledActionThenable = {
            status: "pending",
            value: void 0,
            then: function(resolve) {
                entangledListeners.push(resolve);
            }
        };
    }
    currentEntangledPendingCount++;
    thenable.then(pingEngtangledActionScope, pingEngtangledActionScope);
    return thenable;
}
function pingEngtangledActionScope() {
    if (0 === --currentEntangledPendingCount && null !== currentEntangledListeners) {
        null !== currentEntangledActionThenable && (currentEntangledActionThenable.status = "fulfilled");
        var listeners = currentEntangledListeners;
        currentEntangledListeners = null;
        currentEntangledLane = 0;
        currentEntangledActionThenable = null;
        for(var i = 0; i < listeners.length; i++)(0, listeners[i])();
    }
}
function chainThenableValue(thenable, result) {
    var listeners = [], thenableWithOverride = {
        status: "pending",
        value: null,
        reason: null,
        then: function(resolve) {
            listeners.push(resolve);
        }
    };
    thenable.then(function() {
        thenableWithOverride.status = "fulfilled";
        thenableWithOverride.value = result;
        for(var i = 0; i < listeners.length; i++)(0, listeners[i])(result);
    }, function(error) {
        thenableWithOverride.status = "rejected";
        thenableWithOverride.reason = error;
        for(error = 0; error < listeners.length; error++)(0, listeners[error])(void 0);
    });
    return thenableWithOverride;
}
var hasForceUpdate = !1;
function initializeUpdateQueue(fiber) {
    fiber.updateQueue = {
        baseState: fiber.memoizedState,
        firstBaseUpdate: null,
        lastBaseUpdate: null,
        shared: {
            pending: null,
            lanes: 0,
            hiddenCallbacks: null
        },
        callbacks: null
    };
}
function cloneUpdateQueue(current, workInProgress) {
    current = current.updateQueue;
    workInProgress.updateQueue === current && (workInProgress.updateQueue = {
        baseState: current.baseState,
        firstBaseUpdate: current.firstBaseUpdate,
        lastBaseUpdate: current.lastBaseUpdate,
        shared: current.shared,
        callbacks: null
    });
}
function createUpdate(lane) {
    return {
        lane: lane,
        tag: 0,
        payload: null,
        callback: null,
        next: null
    };
}
function enqueueUpdate(fiber, update, lane) {
    var updateQueue = fiber.updateQueue;
    if (null === updateQueue) return null;
    updateQueue = updateQueue.shared;
    if (0 !== (executionContext & 2)) {
        var pending = updateQueue.pending;
        null === pending ? update.next = update : (update.next = pending.next, pending.next = update);
        updateQueue.pending = update;
        update = getRootForUpdatedFiber(fiber);
        markUpdateLaneFromFiberToRoot(fiber, null, lane);
        return update;
    }
    enqueueUpdate$1(fiber, updateQueue, update, lane);
    return getRootForUpdatedFiber(fiber);
}
function entangleTransitions(root, fiber, lane) {
    fiber = fiber.updateQueue;
    if (null !== fiber && (fiber = fiber.shared, 0 !== (lane & 4194176))) {
        var queueLanes = fiber.lanes;
        queueLanes &= root.pendingLanes;
        lane |= queueLanes;
        fiber.lanes = lane;
        markRootEntangled(root, lane);
    }
}
function enqueueCapturedUpdate(workInProgress, capturedUpdate) {
    var queue = workInProgress.updateQueue, current = workInProgress.alternate;
    if (null !== current && (current = current.updateQueue, queue === current)) {
        var newFirst = null, newLast = null;
        queue = queue.firstBaseUpdate;
        if (null !== queue) {
            do {
                var clone = {
                    lane: queue.lane,
                    tag: queue.tag,
                    payload: queue.payload,
                    callback: null,
                    next: null
                };
                null === newLast ? newFirst = newLast = clone : newLast = newLast.next = clone;
                queue = queue.next;
            }while (null !== queue);
            null === newLast ? newFirst = newLast = capturedUpdate : newLast = newLast.next = capturedUpdate;
        } else newFirst = newLast = capturedUpdate;
        queue = {
            baseState: current.baseState,
            firstBaseUpdate: newFirst,
            lastBaseUpdate: newLast,
            shared: current.shared,
            callbacks: current.callbacks
        };
        workInProgress.updateQueue = queue;
        return;
    }
    workInProgress = queue.lastBaseUpdate;
    null === workInProgress ? queue.firstBaseUpdate = capturedUpdate : workInProgress.next = capturedUpdate;
    queue.lastBaseUpdate = capturedUpdate;
}
var didReadFromEntangledAsyncAction = !1;
function suspendIfUpdateReadFromEntangledAsyncAction() {
    if (didReadFromEntangledAsyncAction) {
        var entangledActionThenable = currentEntangledActionThenable;
        if (null !== entangledActionThenable) throw entangledActionThenable;
    }
}
function processUpdateQueue(workInProgress$jscomp$0, props, instance$jscomp$0, renderLanes) {
    didReadFromEntangledAsyncAction = !1;
    var queue = workInProgress$jscomp$0.updateQueue;
    hasForceUpdate = !1;
    var firstBaseUpdate = queue.firstBaseUpdate, lastBaseUpdate = queue.lastBaseUpdate, pendingQueue = queue.shared.pending;
    if (null !== pendingQueue) {
        queue.shared.pending = null;
        var lastPendingUpdate = pendingQueue, firstPendingUpdate = lastPendingUpdate.next;
        lastPendingUpdate.next = null;
        null === lastBaseUpdate ? firstBaseUpdate = firstPendingUpdate : lastBaseUpdate.next = firstPendingUpdate;
        lastBaseUpdate = lastPendingUpdate;
        var current = workInProgress$jscomp$0.alternate;
        null !== current && (current = current.updateQueue, pendingQueue = current.lastBaseUpdate, pendingQueue !== lastBaseUpdate && (null === pendingQueue ? current.firstBaseUpdate = firstPendingUpdate : pendingQueue.next = firstPendingUpdate, current.lastBaseUpdate = lastPendingUpdate));
    }
    if (null !== firstBaseUpdate) {
        var newState = queue.baseState;
        lastBaseUpdate = 0;
        current = firstPendingUpdate = lastPendingUpdate = null;
        pendingQueue = firstBaseUpdate;
        do {
            var updateLane = pendingQueue.lane & -536870913, isHiddenUpdate = updateLane !== pendingQueue.lane;
            if (isHiddenUpdate ? (workInProgressRootRenderLanes & updateLane) === updateLane : (renderLanes & updateLane) === updateLane) {
                0 !== updateLane && updateLane === currentEntangledLane && (didReadFromEntangledAsyncAction = !0);
                null !== current && (current = current.next = {
                    lane: 0,
                    tag: pendingQueue.tag,
                    payload: pendingQueue.payload,
                    callback: null,
                    next: null
                });
                a: {
                    var workInProgress = workInProgress$jscomp$0, update = pendingQueue;
                    updateLane = props;
                    var instance = instance$jscomp$0;
                    switch(update.tag){
                        case 1:
                            workInProgress = update.payload;
                            if ("function" === typeof workInProgress) {
                                newState = workInProgress.call(instance, newState, updateLane);
                                break a;
                            }
                            newState = workInProgress;
                            break a;
                        case 3:
                            workInProgress.flags = workInProgress.flags & -65537 | 128;
                        case 0:
                            workInProgress = update.payload;
                            updateLane = "function" === typeof workInProgress ? workInProgress.call(instance, newState, updateLane) : workInProgress;
                            if (null === updateLane || void 0 === updateLane) break a;
                            newState = assign({}, newState, updateLane);
                            break a;
                        case 2:
                            hasForceUpdate = !0;
                    }
                }
                updateLane = pendingQueue.callback;
                null !== updateLane && (workInProgress$jscomp$0.flags |= 64, isHiddenUpdate && (workInProgress$jscomp$0.flags |= 8192), isHiddenUpdate = queue.callbacks, null === isHiddenUpdate ? queue.callbacks = [
                    updateLane
                ] : isHiddenUpdate.push(updateLane));
            } else isHiddenUpdate = {
                lane: updateLane,
                tag: pendingQueue.tag,
                payload: pendingQueue.payload,
                callback: pendingQueue.callback,
                next: null
            }, null === current ? (firstPendingUpdate = current = isHiddenUpdate, lastPendingUpdate = newState) : current = current.next = isHiddenUpdate, lastBaseUpdate |= updateLane;
            pendingQueue = pendingQueue.next;
            if (null === pendingQueue) if (pendingQueue = queue.shared.pending, null === pendingQueue) break;
            else isHiddenUpdate = pendingQueue, pendingQueue = isHiddenUpdate.next, isHiddenUpdate.next = null, queue.lastBaseUpdate = isHiddenUpdate, queue.shared.pending = null;
        }while (1);
        null === current && (lastPendingUpdate = newState);
        queue.baseState = lastPendingUpdate;
        queue.firstBaseUpdate = firstPendingUpdate;
        queue.lastBaseUpdate = current;
        null === firstBaseUpdate && (queue.shared.lanes = 0);
        workInProgressRootSkippedLanes |= lastBaseUpdate;
        workInProgress$jscomp$0.lanes = lastBaseUpdate;
        workInProgress$jscomp$0.memoizedState = newState;
    }
}
function callCallback(callback, context) {
    if ("function" !== typeof callback) throw Error("Invalid argument passed as callback. Expected a function. Instead received: " + callback);
    callback.call(context);
}
function commitCallbacks(updateQueue, context) {
    var callbacks = updateQueue.callbacks;
    if (null !== callbacks) for(updateQueue.callbacks = null, updateQueue = 0; updateQueue < callbacks.length; updateQueue++)callCallback(callbacks[updateQueue], context);
}
var hasOwnProperty = Object.prototype.hasOwnProperty;
function shallowEqual(objA, objB) {
    if (objectIs(objA, objB)) return !0;
    if ("object" !== typeof objA || null === objA || "object" !== typeof objB || null === objB) return !1;
    var keysA = Object.keys(objA), keysB = Object.keys(objB);
    if (keysA.length !== keysB.length) return !1;
    for(keysB = 0; keysB < keysA.length; keysB++){
        var currentKey = keysA[keysB];
        if (!hasOwnProperty.call(objB, currentKey) || !objectIs(objA[currentKey], objB[currentKey])) return !1;
    }
    return !0;
}
var SuspenseException = Error("Suspense Exception: This is not a real error! It's an implementation detail of `use` to interrupt the current render. You must either rethrow it immediately, or move the `use` call outside of the `try/catch` block. Capturing without rethrowing will lead to unexpected behavior.\n\nTo handle async errors, wrap your component in an error boundary, or call the promise's `.catch` method and pass the result to `use`"), SuspenseyCommitException = Error("Suspense Exception: This is not a real error, and should not leak into userspace. If you're seeing this, it's likely a bug in React."), noopSuspenseyCommitThenable = {
    then: function() {}
};
function isThenableResolved(thenable) {
    thenable = thenable.status;
    return "fulfilled" === thenable || "rejected" === thenable;
}
function noop() {}
function trackUsedThenable(thenableState, thenable, index) {
    index = thenableState[index];
    void 0 === index ? thenableState.push(thenable) : index !== thenable && (thenable.then(noop, noop), thenable = index);
    switch(thenable.status){
        case "fulfilled":
            return thenable.value;
        case "rejected":
            throw thenableState = thenable.reason, checkIfUseWrappedInAsyncCatch(thenableState), thenableState;
        default:
            if ("string" === typeof thenable.status) thenable.then(noop, noop);
            else {
                thenableState = workInProgressRoot;
                if (null !== thenableState && 100 < thenableState.shellSuspendCounter) throw Error("async/await is not yet supported in Client Components, only Server Components. This error is often caused by accidentally adding `'use client'` to a module that was originally written for the server.");
                thenableState = thenable;
                thenableState.status = "pending";
                thenableState.then(function(fulfilledValue) {
                    if ("pending" === thenable.status) {
                        var fulfilledThenable = thenable;
                        fulfilledThenable.status = "fulfilled";
                        fulfilledThenable.value = fulfilledValue;
                    }
                }, function(error) {
                    if ("pending" === thenable.status) {
                        var rejectedThenable = thenable;
                        rejectedThenable.status = "rejected";
                        rejectedThenable.reason = error;
                    }
                });
            }
            switch(thenable.status){
                case "fulfilled":
                    return thenable.value;
                case "rejected":
                    throw thenableState = thenable.reason, checkIfUseWrappedInAsyncCatch(thenableState), thenableState;
            }
            suspendedThenable = thenable;
            throw SuspenseException;
    }
}
var suspendedThenable = null;
function getSuspendedThenable() {
    if (null === suspendedThenable) throw Error("Expected a suspended thenable. This is a bug in React. Please file an issue.");
    var thenable = suspendedThenable;
    suspendedThenable = null;
    return thenable;
}
function checkIfUseWrappedInAsyncCatch(rejectedReason) {
    if (rejectedReason === SuspenseException) throw Error("Hooks are not supported inside an async component. This error is often caused by accidentally adding `'use client'` to a module that was originally written for the server.");
}
var thenableState$1 = null, thenableIndexCounter$1 = 0;
function unwrapThenable(thenable) {
    var index = thenableIndexCounter$1;
    thenableIndexCounter$1 += 1;
    null === thenableState$1 && (thenableState$1 = []);
    return trackUsedThenable(thenableState$1, thenable, index);
}
function coerceRef(workInProgress, element) {
    element = element.props.ref;
    workInProgress.ref = void 0 !== element ? element : null;
}
function throwOnInvalidObjectType(returnFiber, newChild) {
    if (newChild.$$typeof === REACT_LEGACY_ELEMENT_TYPE) throw Error('A React Element from an older version of React was rendered. This is not supported. It can happen if:\n- Multiple copies of the "react" package is used.\n- A library pre-bundled an old copy of "react" or "react/jsx-runtime".\n- A compiler tries to "inline" JSX instead of using the runtime.');
    returnFiber = Object.prototype.toString.call(newChild);
    throw Error("Objects are not valid as a React child (found: " + ("[object Object]" === returnFiber ? "object with keys {" + Object.keys(newChild).join(", ") + "}" : returnFiber) + "). If you meant to render a collection of children, use an array instead.");
}
function resolveLazy(lazyType) {
    var init = lazyType._init;
    return init(lazyType._payload);
}
function createChildReconciler(shouldTrackSideEffects) {
    function deleteChild(returnFiber, childToDelete) {
        if (shouldTrackSideEffects) {
            var deletions = returnFiber.deletions;
            null === deletions ? (returnFiber.deletions = [
                childToDelete
            ], returnFiber.flags |= 16) : deletions.push(childToDelete);
        }
    }
    function deleteRemainingChildren(returnFiber, currentFirstChild) {
        if (!shouldTrackSideEffects) return null;
        for(; null !== currentFirstChild;)deleteChild(returnFiber, currentFirstChild), currentFirstChild = currentFirstChild.sibling;
        return null;
    }
    function mapRemainingChildren(currentFirstChild) {
        for(var existingChildren = new Map(); null !== currentFirstChild;)null !== currentFirstChild.key ? existingChildren.set(currentFirstChild.key, currentFirstChild) : existingChildren.set(currentFirstChild.index, currentFirstChild), currentFirstChild = currentFirstChild.sibling;
        return existingChildren;
    }
    function useFiber(fiber, pendingProps) {
        fiber = createWorkInProgress(fiber, pendingProps);
        fiber.index = 0;
        fiber.sibling = null;
        return fiber;
    }
    function placeChild(newFiber, lastPlacedIndex, newIndex) {
        newFiber.index = newIndex;
        if (!shouldTrackSideEffects) return newFiber.flags |= 1048576, lastPlacedIndex;
        newIndex = newFiber.alternate;
        if (null !== newIndex) return newIndex = newIndex.index, newIndex < lastPlacedIndex ? (newFiber.flags |= 33554434, lastPlacedIndex) : newIndex;
        newFiber.flags |= 33554434;
        return lastPlacedIndex;
    }
    function placeSingleChild(newFiber) {
        shouldTrackSideEffects && null === newFiber.alternate && (newFiber.flags |= 33554434);
        return newFiber;
    }
    function updateTextNode(returnFiber, current, textContent, lanes) {
        if (null === current || 6 !== current.tag) return current = createFiberFromText(textContent, returnFiber.mode, lanes), current.return = returnFiber, current;
        current = useFiber(current, textContent);
        current.return = returnFiber;
        return current;
    }
    function updateElement(returnFiber, current, element, lanes) {
        var elementType = element.type;
        if (elementType === REACT_FRAGMENT_TYPE) return updateFragment(returnFiber, current, element.props.children, lanes, element.key);
        if (null !== current && (current.elementType === elementType || "object" === typeof elementType && null !== elementType && elementType.$$typeof === REACT_LAZY_TYPE && resolveLazy(elementType) === current.type)) return current = useFiber(current, element.props), coerceRef(current, element), current.return = returnFiber, current;
        current = createFiberFromTypeAndProps(element.type, element.key, element.props, null, returnFiber.mode, lanes);
        coerceRef(current, element);
        current.return = returnFiber;
        return current;
    }
    function updatePortal(returnFiber, current, portal, lanes) {
        if (null === current || 4 !== current.tag || current.stateNode.containerInfo !== portal.containerInfo || current.stateNode.implementation !== portal.implementation) return current = createFiberFromPortal(portal, returnFiber.mode, lanes), current.return = returnFiber, current;
        current = useFiber(current, portal.children || []);
        current.return = returnFiber;
        return current;
    }
    function updateFragment(returnFiber, current, fragment, lanes, key) {
        if (null === current || 7 !== current.tag) return current = createFiberFromFragment(fragment, returnFiber.mode, lanes, key), current.return = returnFiber, current;
        current = useFiber(current, fragment);
        current.return = returnFiber;
        return current;
    }
    function createChild(returnFiber, newChild, lanes) {
        if ("string" === typeof newChild && "" !== newChild || "number" === typeof newChild || "bigint" === typeof newChild) return newChild = createFiberFromText("" + newChild, returnFiber.mode, lanes), newChild.return = returnFiber, newChild;
        if ("object" === typeof newChild && null !== newChild) {
            switch(newChild.$$typeof){
                case REACT_ELEMENT_TYPE:
                    return lanes = createFiberFromTypeAndProps(newChild.type, newChild.key, newChild.props, null, returnFiber.mode, lanes), coerceRef(lanes, newChild), lanes.return = returnFiber, lanes;
                case REACT_PORTAL_TYPE:
                    return newChild = createFiberFromPortal(newChild, returnFiber.mode, lanes), newChild.return = returnFiber, newChild;
                case REACT_LAZY_TYPE:
                    var init = newChild._init;
                    newChild = init(newChild._payload);
                    return createChild(returnFiber, newChild, lanes);
            }
            if (isArrayImpl(newChild) || getIteratorFn(newChild)) return newChild = createFiberFromFragment(newChild, returnFiber.mode, lanes, null), newChild.return = returnFiber, newChild;
            if ("function" === typeof newChild.then) return createChild(returnFiber, unwrapThenable(newChild), lanes);
            if (newChild.$$typeof === REACT_CONTEXT_TYPE) return createChild(returnFiber, readContextDuringReconciliation(returnFiber, newChild), lanes);
            throwOnInvalidObjectType(returnFiber, newChild);
        }
        return null;
    }
    function updateSlot(returnFiber, oldFiber, newChild, lanes) {
        var key = null !== oldFiber ? oldFiber.key : null;
        if ("string" === typeof newChild && "" !== newChild || "number" === typeof newChild || "bigint" === typeof newChild) return null !== key ? null : updateTextNode(returnFiber, oldFiber, "" + newChild, lanes);
        if ("object" === typeof newChild && null !== newChild) {
            switch(newChild.$$typeof){
                case REACT_ELEMENT_TYPE:
                    return newChild.key === key ? updateElement(returnFiber, oldFiber, newChild, lanes) : null;
                case REACT_PORTAL_TYPE:
                    return newChild.key === key ? updatePortal(returnFiber, oldFiber, newChild, lanes) : null;
                case REACT_LAZY_TYPE:
                    return key = newChild._init, newChild = key(newChild._payload), updateSlot(returnFiber, oldFiber, newChild, lanes);
            }
            if (isArrayImpl(newChild) || getIteratorFn(newChild)) return null !== key ? null : updateFragment(returnFiber, oldFiber, newChild, lanes, null);
            if ("function" === typeof newChild.then) return updateSlot(returnFiber, oldFiber, unwrapThenable(newChild), lanes);
            if (newChild.$$typeof === REACT_CONTEXT_TYPE) return updateSlot(returnFiber, oldFiber, readContextDuringReconciliation(returnFiber, newChild), lanes);
            throwOnInvalidObjectType(returnFiber, newChild);
        }
        return null;
    }
    function updateFromMap(existingChildren, returnFiber, newIdx, newChild, lanes) {
        if ("string" === typeof newChild && "" !== newChild || "number" === typeof newChild || "bigint" === typeof newChild) return existingChildren = existingChildren.get(newIdx) || null, updateTextNode(returnFiber, existingChildren, "" + newChild, lanes);
        if ("object" === typeof newChild && null !== newChild) {
            switch(newChild.$$typeof){
                case REACT_ELEMENT_TYPE:
                    return existingChildren = existingChildren.get(null === newChild.key ? newIdx : newChild.key) || null, updateElement(returnFiber, existingChildren, newChild, lanes);
                case REACT_PORTAL_TYPE:
                    return existingChildren = existingChildren.get(null === newChild.key ? newIdx : newChild.key) || null, updatePortal(returnFiber, existingChildren, newChild, lanes);
                case REACT_LAZY_TYPE:
                    var init = newChild._init;
                    newChild = init(newChild._payload);
                    return updateFromMap(existingChildren, returnFiber, newIdx, newChild, lanes);
            }
            if (isArrayImpl(newChild) || getIteratorFn(newChild)) return existingChildren = existingChildren.get(newIdx) || null, updateFragment(returnFiber, existingChildren, newChild, lanes, null);
            if ("function" === typeof newChild.then) return updateFromMap(existingChildren, returnFiber, newIdx, unwrapThenable(newChild), lanes);
            if (newChild.$$typeof === REACT_CONTEXT_TYPE) return updateFromMap(existingChildren, returnFiber, newIdx, readContextDuringReconciliation(returnFiber, newChild), lanes);
            throwOnInvalidObjectType(returnFiber, newChild);
        }
        return null;
    }
    function reconcileChildrenArray(returnFiber, currentFirstChild, newChildren, lanes) {
        for(var resultingFirstChild = null, previousNewFiber = null, oldFiber = currentFirstChild, newIdx = currentFirstChild = 0, nextOldFiber = null; null !== oldFiber && newIdx < newChildren.length; newIdx++){
            oldFiber.index > newIdx ? (nextOldFiber = oldFiber, oldFiber = null) : nextOldFiber = oldFiber.sibling;
            var newFiber = updateSlot(returnFiber, oldFiber, newChildren[newIdx], lanes);
            if (null === newFiber) {
                null === oldFiber && (oldFiber = nextOldFiber);
                break;
            }
            shouldTrackSideEffects && oldFiber && null === newFiber.alternate && deleteChild(returnFiber, oldFiber);
            currentFirstChild = placeChild(newFiber, currentFirstChild, newIdx);
            null === previousNewFiber ? resultingFirstChild = newFiber : previousNewFiber.sibling = newFiber;
            previousNewFiber = newFiber;
            oldFiber = nextOldFiber;
        }
        if (newIdx === newChildren.length) return deleteRemainingChildren(returnFiber, oldFiber), resultingFirstChild;
        if (null === oldFiber) {
            for(; newIdx < newChildren.length; newIdx++)oldFiber = createChild(returnFiber, newChildren[newIdx], lanes), null !== oldFiber && (currentFirstChild = placeChild(oldFiber, currentFirstChild, newIdx), null === previousNewFiber ? resultingFirstChild = oldFiber : previousNewFiber.sibling = oldFiber, previousNewFiber = oldFiber);
            return resultingFirstChild;
        }
        for(oldFiber = mapRemainingChildren(oldFiber); newIdx < newChildren.length; newIdx++)nextOldFiber = updateFromMap(oldFiber, returnFiber, newIdx, newChildren[newIdx], lanes), null !== nextOldFiber && (shouldTrackSideEffects && null !== nextOldFiber.alternate && oldFiber.delete(null === nextOldFiber.key ? newIdx : nextOldFiber.key), currentFirstChild = placeChild(nextOldFiber, currentFirstChild, newIdx), null === previousNewFiber ? resultingFirstChild = nextOldFiber : previousNewFiber.sibling = nextOldFiber, previousNewFiber = nextOldFiber);
        shouldTrackSideEffects && oldFiber.forEach(function(child) {
            return deleteChild(returnFiber, child);
        });
        return resultingFirstChild;
    }
    function reconcileChildrenIterator(returnFiber, currentFirstChild, newChildren, lanes) {
        if (null == newChildren) throw Error("An iterable object provided no iterator.");
        for(var resultingFirstChild = null, previousNewFiber = null, oldFiber = currentFirstChild, newIdx = currentFirstChild = 0, nextOldFiber = null, step = newChildren.next(); null !== oldFiber && !step.done; newIdx++, step = newChildren.next()){
            oldFiber.index > newIdx ? (nextOldFiber = oldFiber, oldFiber = null) : nextOldFiber = oldFiber.sibling;
            var newFiber = updateSlot(returnFiber, oldFiber, step.value, lanes);
            if (null === newFiber) {
                null === oldFiber && (oldFiber = nextOldFiber);
                break;
            }
            shouldTrackSideEffects && oldFiber && null === newFiber.alternate && deleteChild(returnFiber, oldFiber);
            currentFirstChild = placeChild(newFiber, currentFirstChild, newIdx);
            null === previousNewFiber ? resultingFirstChild = newFiber : previousNewFiber.sibling = newFiber;
            previousNewFiber = newFiber;
            oldFiber = nextOldFiber;
        }
        if (step.done) return deleteRemainingChildren(returnFiber, oldFiber), resultingFirstChild;
        if (null === oldFiber) {
            for(; !step.done; newIdx++, step = newChildren.next())step = createChild(returnFiber, step.value, lanes), null !== step && (currentFirstChild = placeChild(step, currentFirstChild, newIdx), null === previousNewFiber ? resultingFirstChild = step : previousNewFiber.sibling = step, previousNewFiber = step);
            return resultingFirstChild;
        }
        for(oldFiber = mapRemainingChildren(oldFiber); !step.done; newIdx++, step = newChildren.next())step = updateFromMap(oldFiber, returnFiber, newIdx, step.value, lanes), null !== step && (shouldTrackSideEffects && null !== step.alternate && oldFiber.delete(null === step.key ? newIdx : step.key), currentFirstChild = placeChild(step, currentFirstChild, newIdx), null === previousNewFiber ? resultingFirstChild = step : previousNewFiber.sibling = step, previousNewFiber = step);
        shouldTrackSideEffects && oldFiber.forEach(function(child) {
            return deleteChild(returnFiber, child);
        });
        return resultingFirstChild;
    }
    function reconcileChildFibersImpl(returnFiber, currentFirstChild, newChild, lanes) {
        "object" === typeof newChild && null !== newChild && newChild.type === REACT_FRAGMENT_TYPE && null === newChild.key && (newChild = newChild.props.children);
        if ("object" === typeof newChild && null !== newChild) {
            switch(newChild.$$typeof){
                case REACT_ELEMENT_TYPE:
                    a: {
                        for(var key = newChild.key; null !== currentFirstChild;){
                            if (currentFirstChild.key === key) {
                                key = newChild.type;
                                if (key === REACT_FRAGMENT_TYPE) {
                                    if (7 === currentFirstChild.tag) {
                                        deleteRemainingChildren(returnFiber, currentFirstChild.sibling);
                                        lanes = useFiber(currentFirstChild, newChild.props.children);
                                        lanes.return = returnFiber;
                                        returnFiber = lanes;
                                        break a;
                                    }
                                } else if (currentFirstChild.elementType === key || "object" === typeof key && null !== key && key.$$typeof === REACT_LAZY_TYPE && resolveLazy(key) === currentFirstChild.type) {
                                    deleteRemainingChildren(returnFiber, currentFirstChild.sibling);
                                    lanes = useFiber(currentFirstChild, newChild.props);
                                    coerceRef(lanes, newChild);
                                    lanes.return = returnFiber;
                                    returnFiber = lanes;
                                    break a;
                                }
                                deleteRemainingChildren(returnFiber, currentFirstChild);
                                break;
                            } else deleteChild(returnFiber, currentFirstChild);
                            currentFirstChild = currentFirstChild.sibling;
                        }
                        newChild.type === REACT_FRAGMENT_TYPE ? (lanes = createFiberFromFragment(newChild.props.children, returnFiber.mode, lanes, newChild.key), lanes.return = returnFiber, returnFiber = lanes) : (lanes = createFiberFromTypeAndProps(newChild.type, newChild.key, newChild.props, null, returnFiber.mode, lanes), coerceRef(lanes, newChild), lanes.return = returnFiber, returnFiber = lanes);
                    }
                    return placeSingleChild(returnFiber);
                case REACT_PORTAL_TYPE:
                    a: {
                        for(key = newChild.key; null !== currentFirstChild;){
                            if (currentFirstChild.key === key) if (4 === currentFirstChild.tag && currentFirstChild.stateNode.containerInfo === newChild.containerInfo && currentFirstChild.stateNode.implementation === newChild.implementation) {
                                deleteRemainingChildren(returnFiber, currentFirstChild.sibling);
                                lanes = useFiber(currentFirstChild, newChild.children || []);
                                lanes.return = returnFiber;
                                returnFiber = lanes;
                                break a;
                            } else {
                                deleteRemainingChildren(returnFiber, currentFirstChild);
                                break;
                            }
                            else deleteChild(returnFiber, currentFirstChild);
                            currentFirstChild = currentFirstChild.sibling;
                        }
                        lanes = createFiberFromPortal(newChild, returnFiber.mode, lanes);
                        lanes.return = returnFiber;
                        returnFiber = lanes;
                    }
                    return placeSingleChild(returnFiber);
                case REACT_LAZY_TYPE:
                    return key = newChild._init, newChild = key(newChild._payload), reconcileChildFibersImpl(returnFiber, currentFirstChild, newChild, lanes);
            }
            if (isArrayImpl(newChild)) return reconcileChildrenArray(returnFiber, currentFirstChild, newChild, lanes);
            if (getIteratorFn(newChild)) {
                key = getIteratorFn(newChild);
                if ("function" !== typeof key) throw Error("An object is not an iterable. This error is likely caused by a bug in React. Please file an issue.");
                newChild = key.call(newChild);
                return reconcileChildrenIterator(returnFiber, currentFirstChild, newChild, lanes);
            }
            if ("function" === typeof newChild.then) return reconcileChildFibersImpl(returnFiber, currentFirstChild, unwrapThenable(newChild), lanes);
            if (newChild.$$typeof === REACT_CONTEXT_TYPE) return reconcileChildFibersImpl(returnFiber, currentFirstChild, readContextDuringReconciliation(returnFiber, newChild), lanes);
            throwOnInvalidObjectType(returnFiber, newChild);
        }
        return "string" === typeof newChild && "" !== newChild || "number" === typeof newChild || "bigint" === typeof newChild ? (newChild = "" + newChild, null !== currentFirstChild && 6 === currentFirstChild.tag ? (deleteRemainingChildren(returnFiber, currentFirstChild.sibling), lanes = useFiber(currentFirstChild, newChild), lanes.return = returnFiber, returnFiber = lanes) : (deleteRemainingChildren(returnFiber, currentFirstChild), lanes = createFiberFromText(newChild, returnFiber.mode, lanes), lanes.return = returnFiber, returnFiber = lanes), placeSingleChild(returnFiber)) : deleteRemainingChildren(returnFiber, currentFirstChild);
    }
    return function(returnFiber, currentFirstChild, newChild, lanes) {
        try {
            thenableIndexCounter$1 = 0;
            var firstChildFiber = reconcileChildFibersImpl(returnFiber, currentFirstChild, newChild, lanes);
            thenableState$1 = null;
            return firstChildFiber;
        } catch (x) {
            if (x === SuspenseException || 0 === (returnFiber.mode & 1) && "object" === typeof x && null !== x && "function" === typeof x.then) throw x;
            var fiber = createFiberImplClass(29, x, null, returnFiber.mode);
            fiber.lanes = lanes;
            fiber.return = returnFiber;
            return fiber;
        } finally{}
    };
}
var reconcileChildFibers = createChildReconciler(!0), mountChildFibers = createChildReconciler(!1), currentTreeHiddenStackCursor = createCursor(null), prevEntangledRenderLanesCursor = createCursor(0);
function pushHiddenContext(fiber, context) {
    fiber = entangledRenderLanes;
    push(prevEntangledRenderLanesCursor, fiber);
    push(currentTreeHiddenStackCursor, context);
    entangledRenderLanes = fiber | context.baseLanes;
}
function reuseHiddenContextOnStack() {
    push(prevEntangledRenderLanesCursor, entangledRenderLanes);
    push(currentTreeHiddenStackCursor, currentTreeHiddenStackCursor.current);
}
function popHiddenContext() {
    entangledRenderLanes = prevEntangledRenderLanesCursor.current;
    pop(currentTreeHiddenStackCursor);
    pop(prevEntangledRenderLanesCursor);
}
var suspenseHandlerStackCursor = createCursor(null), shellBoundary = null;
function pushPrimaryTreeSuspenseHandler(handler) {
    var current = handler.alternate;
    push(suspenseStackCursor, suspenseStackCursor.current & 1);
    push(suspenseHandlerStackCursor, handler);
    null === shellBoundary && (null === current || null !== currentTreeHiddenStackCursor.current ? shellBoundary = handler : null !== current.memoizedState && (shellBoundary = handler));
}
function pushOffscreenSuspenseHandler(fiber) {
    if (22 === fiber.tag) {
        if (push(suspenseStackCursor, suspenseStackCursor.current), push(suspenseHandlerStackCursor, fiber), null === shellBoundary) {
            var current = fiber.alternate;
            null !== current && null !== current.memoizedState && (shellBoundary = fiber);
        }
    } else reuseSuspenseHandlerOnStack(fiber);
}
function reuseSuspenseHandlerOnStack() {
    push(suspenseStackCursor, suspenseStackCursor.current);
    push(suspenseHandlerStackCursor, suspenseHandlerStackCursor.current);
}
function popSuspenseHandler(fiber) {
    pop(suspenseHandlerStackCursor);
    shellBoundary === fiber && (shellBoundary = null);
    pop(suspenseStackCursor);
}
var suspenseStackCursor = createCursor(0);
function findFirstSuspended(row) {
    for(var node = row; null !== node;){
        if (13 === node.tag) {
            var state = node.memoizedState;
            if (null !== state && (null === state.dehydrated || shim$1() || shim$1())) return node;
        } else if (19 === node.tag && void 0 !== node.memoizedProps.revealOrder) {
            if (0 !== (node.flags & 128)) return node;
        } else if (null !== node.child) {
            node.child.return = node;
            node = node.child;
            continue;
        }
        if (node === row) break;
        for(; null === node.sibling;){
            if (null === node.return || node.return === row) return null;
            node = node.return;
        }
        node.sibling.return = node.return;
        node = node.sibling;
    }
    return null;
}
var renderLanes = 0, currentlyRenderingFiber$1 = null, currentHook = null, workInProgressHook = null, didScheduleRenderPhaseUpdate = !1, didScheduleRenderPhaseUpdateDuringThisPass = !1, shouldDoubleInvokeUserFnsInHooksDEV = !1, thenableIndexCounter = 0, thenableState = null, globalClientIdCounter = 0;
function throwInvalidHookError() {
    throw Error("Invalid hook call. Hooks can only be called inside of the body of a function component. This could happen for one of the following reasons:\n1. You might have mismatching versions of React and the renderer (such as React DOM)\n2. You might be breaking the Rules of Hooks\n3. You might have more than one copy of React in the same app\nSee https://react.dev/link/invalid-hook-call for tips about how to debug and fix this problem.");
}
function areHookInputsEqual(nextDeps, prevDeps) {
    if (null === prevDeps) return !1;
    for(var i = 0; i < prevDeps.length && i < nextDeps.length; i++)if (!objectIs(nextDeps[i], prevDeps[i])) return !1;
    return !0;
}
function renderWithHooks(current, workInProgress, Component, props, secondArg, nextRenderLanes) {
    renderLanes = nextRenderLanes;
    currentlyRenderingFiber$1 = workInProgress;
    workInProgress.memoizedState = null;
    workInProgress.updateQueue = null;
    workInProgress.lanes = 0;
    ReactSharedInternals.H = null === current || null === current.memoizedState ? HooksDispatcherOnMount : HooksDispatcherOnUpdate;
    shouldDoubleInvokeUserFnsInHooksDEV = !1;
    nextRenderLanes = Component(props, secondArg);
    shouldDoubleInvokeUserFnsInHooksDEV = !1;
    didScheduleRenderPhaseUpdateDuringThisPass && (nextRenderLanes = renderWithHooksAgain(workInProgress, Component, props, secondArg));
    finishRenderingHooks(current);
    return nextRenderLanes;
}
function finishRenderingHooks(current) {
    ReactSharedInternals.H = ContextOnlyDispatcher;
    var didRenderTooFewHooks = null !== currentHook && null !== currentHook.next;
    renderLanes = 0;
    workInProgressHook = currentHook = currentlyRenderingFiber$1 = null;
    didScheduleRenderPhaseUpdate = !1;
    thenableIndexCounter = 0;
    thenableState = null;
    if (didRenderTooFewHooks) throw Error("Rendered fewer hooks than expected. This may be caused by an accidental early return statement.");
    null === current || didReceiveUpdate || (current = current.dependencies, null !== current && checkIfContextChanged(current) && (didReceiveUpdate = !0));
}
function renderWithHooksAgain(workInProgress, Component, props, secondArg) {
    currentlyRenderingFiber$1 = workInProgress;
    var numberOfReRenders = 0;
    do {
        didScheduleRenderPhaseUpdateDuringThisPass && (thenableState = null);
        thenableIndexCounter = 0;
        didScheduleRenderPhaseUpdateDuringThisPass = !1;
        if (25 <= numberOfReRenders) throw Error("Too many re-renders. React limits the number of renders to prevent an infinite loop.");
        numberOfReRenders += 1;
        workInProgressHook = currentHook = null;
        if (null != workInProgress.updateQueue) {
            var children = workInProgress.updateQueue;
            children.lastEffect = null;
            children.events = null;
            children.stores = null;
            null != children.memoCache && (children.memoCache.index = 0);
        }
        ReactSharedInternals.H = HooksDispatcherOnRerender;
        children = Component(props, secondArg);
    }while (didScheduleRenderPhaseUpdateDuringThisPass);
    return children;
}
function TransitionAwareHostComponent() {
    var dispatcher = ReactSharedInternals.H, maybeThenable = dispatcher.useState()[0];
    maybeThenable = "function" === typeof maybeThenable.then ? useThenable(maybeThenable) : maybeThenable;
    dispatcher = dispatcher.useState()[0];
    (null !== currentHook ? currentHook.memoizedState : null) !== dispatcher && (currentlyRenderingFiber$1.flags |= 1024);
    return maybeThenable;
}
function bailoutHooks(current, workInProgress, lanes) {
    workInProgress.updateQueue = current.updateQueue;
    workInProgress.flags &= -2053;
    current.lanes &= ~lanes;
}
function resetHooksOnUnwind(workInProgress) {
    if (didScheduleRenderPhaseUpdate) {
        for(workInProgress = workInProgress.memoizedState; null !== workInProgress;){
            var queue = workInProgress.queue;
            null !== queue && (queue.pending = null);
            workInProgress = workInProgress.next;
        }
        didScheduleRenderPhaseUpdate = !1;
    }
    renderLanes = 0;
    workInProgressHook = currentHook = currentlyRenderingFiber$1 = null;
    didScheduleRenderPhaseUpdateDuringThisPass = !1;
    thenableIndexCounter = 0;
    thenableState = null;
}
function mountWorkInProgressHook() {
    var hook = {
        memoizedState: null,
        baseState: null,
        baseQueue: null,
        queue: null,
        next: null
    };
    null === workInProgressHook ? currentlyRenderingFiber$1.memoizedState = workInProgressHook = hook : workInProgressHook = workInProgressHook.next = hook;
    return workInProgressHook;
}
function updateWorkInProgressHook() {
    if (null === currentHook) {
        var nextCurrentHook = currentlyRenderingFiber$1.alternate;
        nextCurrentHook = null !== nextCurrentHook ? nextCurrentHook.memoizedState : null;
    } else nextCurrentHook = currentHook.next;
    var nextWorkInProgressHook = null === workInProgressHook ? currentlyRenderingFiber$1.memoizedState : workInProgressHook.next;
    if (null !== nextWorkInProgressHook) workInProgressHook = nextWorkInProgressHook, currentHook = nextCurrentHook;
    else {
        if (null === nextCurrentHook) {
            if (null === currentlyRenderingFiber$1.alternate) throw Error("Update hook called on initial render. This is likely a bug in React. Please file an issue.");
            throw Error("Rendered more hooks than during the previous render.");
        }
        currentHook = nextCurrentHook;
        nextCurrentHook = {
            memoizedState: currentHook.memoizedState,
            baseState: currentHook.baseState,
            baseQueue: currentHook.baseQueue,
            queue: currentHook.queue,
            next: null
        };
        null === workInProgressHook ? currentlyRenderingFiber$1.memoizedState = workInProgressHook = nextCurrentHook : workInProgressHook = workInProgressHook.next = nextCurrentHook;
    }
    return workInProgressHook;
}
var createFunctionComponentUpdateQueue;
createFunctionComponentUpdateQueue = function() {
    return {
        lastEffect: null,
        events: null,
        stores: null,
        memoCache: null
    };
};
function useThenable(thenable) {
    var index = thenableIndexCounter;
    thenableIndexCounter += 1;
    null === thenableState && (thenableState = []);
    thenable = trackUsedThenable(thenableState, thenable, index);
    index = currentlyRenderingFiber$1;
    null === (null === workInProgressHook ? index.memoizedState : workInProgressHook.next) && (index = index.alternate, ReactSharedInternals.H = null === index || null === index.memoizedState ? HooksDispatcherOnMount : HooksDispatcherOnUpdate);
    return thenable;
}
function use(usable) {
    if (null !== usable && "object" === typeof usable) {
        if ("function" === typeof usable.then) return useThenable(usable);
        if (usable.$$typeof === REACT_CONTEXT_TYPE) return readContext(usable);
    }
    throw Error("An unsupported type was passed to use(): " + String(usable));
}
function useMemoCache(size) {
    var memoCache = null, updateQueue = currentlyRenderingFiber$1.updateQueue;
    null !== updateQueue && (memoCache = updateQueue.memoCache);
    if (null == memoCache) {
        var current = currentlyRenderingFiber$1.alternate;
        null !== current && (current = current.updateQueue, null !== current && (current = current.memoCache, null != current && (memoCache = {
            data: current.data.map(function(array) {
                return array.slice();
            }),
            index: 0
        })));
    }
    null == memoCache && (memoCache = {
        data: [],
        index: 0
    });
    null === updateQueue && (updateQueue = createFunctionComponentUpdateQueue(), currentlyRenderingFiber$1.updateQueue = updateQueue);
    updateQueue.memoCache = memoCache;
    updateQueue = memoCache.data[memoCache.index];
    if (void 0 === updateQueue) for(updateQueue = memoCache.data[memoCache.index] = Array(size), current = 0; current < size; current++)updateQueue[current] = REACT_MEMO_CACHE_SENTINEL;
    memoCache.index++;
    return updateQueue;
}
function basicStateReducer(state, action) {
    return "function" === typeof action ? action(state) : action;
}
function updateReducer(reducer) {
    var hook = updateWorkInProgressHook();
    return updateReducerImpl(hook, currentHook, reducer);
}
function updateReducerImpl(hook, current, reducer) {
    var queue = hook.queue;
    if (null === queue) throw Error("Should have a queue. You are likely calling Hooks conditionally, which is not allowed. (https://react.dev/link/invalid-hook-call)");
    queue.lastRenderedReducer = reducer;
    var baseQueue = hook.baseQueue, pendingQueue = queue.pending;
    if (null !== pendingQueue) {
        if (null !== baseQueue) {
            var baseFirst = baseQueue.next;
            baseQueue.next = pendingQueue.next;
            pendingQueue.next = baseFirst;
        }
        current.baseQueue = baseQueue = pendingQueue;
        queue.pending = null;
    }
    pendingQueue = hook.baseState;
    if (null === baseQueue) hook.memoizedState = pendingQueue;
    else {
        current = baseQueue.next;
        var newBaseQueueFirst = baseFirst = null, newBaseQueueLast = null, update = current, didReadFromEntangledAsyncAction$45 = !1;
        do {
            var updateLane = update.lane & -536870913;
            if (updateLane !== update.lane ? (workInProgressRootRenderLanes & updateLane) === updateLane : (renderLanes & updateLane) === updateLane) {
                var revertLane = update.revertLane;
                if (0 === revertLane) null !== newBaseQueueLast && (newBaseQueueLast = newBaseQueueLast.next = {
                    lane: 0,
                    revertLane: 0,
                    action: update.action,
                    hasEagerState: update.hasEagerState,
                    eagerState: update.eagerState,
                    next: null
                }), updateLane === currentEntangledLane && (didReadFromEntangledAsyncAction$45 = !0);
                else if ((renderLanes & revertLane) === revertLane) {
                    update = update.next;
                    revertLane === currentEntangledLane && (didReadFromEntangledAsyncAction$45 = !0);
                    continue;
                } else updateLane = {
                    lane: 0,
                    revertLane: update.revertLane,
                    action: update.action,
                    hasEagerState: update.hasEagerState,
                    eagerState: update.eagerState,
                    next: null
                }, null === newBaseQueueLast ? (newBaseQueueFirst = newBaseQueueLast = updateLane, baseFirst = pendingQueue) : newBaseQueueLast = newBaseQueueLast.next = updateLane, currentlyRenderingFiber$1.lanes |= revertLane, workInProgressRootSkippedLanes |= revertLane;
                updateLane = update.action;
                shouldDoubleInvokeUserFnsInHooksDEV && reducer(pendingQueue, updateLane);
                pendingQueue = update.hasEagerState ? update.eagerState : reducer(pendingQueue, updateLane);
            } else revertLane = {
                lane: updateLane,
                revertLane: update.revertLane,
                action: update.action,
                hasEagerState: update.hasEagerState,
                eagerState: update.eagerState,
                next: null
            }, null === newBaseQueueLast ? (newBaseQueueFirst = newBaseQueueLast = revertLane, baseFirst = pendingQueue) : newBaseQueueLast = newBaseQueueLast.next = revertLane, currentlyRenderingFiber$1.lanes |= updateLane, workInProgressRootSkippedLanes |= updateLane;
            update = update.next;
        }while (null !== update && update !== current);
        null === newBaseQueueLast ? baseFirst = pendingQueue : newBaseQueueLast.next = newBaseQueueFirst;
        if (!objectIs(pendingQueue, hook.memoizedState) && (didReceiveUpdate = !0, didReadFromEntangledAsyncAction$45 && (reducer = currentEntangledActionThenable, null !== reducer))) throw reducer;
        hook.memoizedState = pendingQueue;
        hook.baseState = baseFirst;
        hook.baseQueue = newBaseQueueLast;
        queue.lastRenderedState = pendingQueue;
    }
    null === baseQueue && (queue.lanes = 0);
    return [
        hook.memoizedState,
        queue.dispatch
    ];
}
function rerenderReducer(reducer) {
    var hook = updateWorkInProgressHook(), queue = hook.queue;
    if (null === queue) throw Error("Should have a queue. You are likely calling Hooks conditionally, which is not allowed. (https://react.dev/link/invalid-hook-call)");
    queue.lastRenderedReducer = reducer;
    var dispatch = queue.dispatch, lastRenderPhaseUpdate = queue.pending, newState = hook.memoizedState;
    if (null !== lastRenderPhaseUpdate) {
        queue.pending = null;
        var update = lastRenderPhaseUpdate = lastRenderPhaseUpdate.next;
        do newState = reducer(newState, update.action), update = update.next;
        while (update !== lastRenderPhaseUpdate);
        objectIs(newState, hook.memoizedState) || (didReceiveUpdate = !0);
        hook.memoizedState = newState;
        null === hook.baseQueue && (hook.baseState = newState);
        queue.lastRenderedState = newState;
    }
    return [
        newState,
        dispatch
    ];
}
function updateSyncExternalStore(subscribe, getSnapshot) {
    var fiber = currentlyRenderingFiber$1, hook = updateWorkInProgressHook();
    var nextSnapshot = getSnapshot();
    var snapshotChanged = !objectIs((currentHook || hook).memoizedState, nextSnapshot);
    snapshotChanged && (hook.memoizedState = nextSnapshot, didReceiveUpdate = !0);
    hook = hook.queue;
    updateEffect(subscribeToStore.bind(null, fiber, hook, subscribe), [
        subscribe
    ]);
    if (hook.getSnapshot !== getSnapshot || snapshotChanged || null !== workInProgressHook && workInProgressHook.memoizedState.tag & 1) {
        fiber.flags |= 2048;
        pushEffect(9, updateStoreInstance.bind(null, fiber, hook, nextSnapshot, getSnapshot), {
            destroy: void 0
        }, null);
        if (null === workInProgressRoot) throw Error("Expected a work-in-progress root. This is a bug in React. Please file an issue.");
        0 !== (renderLanes & 60) || pushStoreConsistencyCheck(fiber, getSnapshot, nextSnapshot);
    }
    return nextSnapshot;
}
function pushStoreConsistencyCheck(fiber, getSnapshot, renderedSnapshot) {
    fiber.flags |= 16384;
    fiber = {
        getSnapshot: getSnapshot,
        value: renderedSnapshot
    };
    getSnapshot = currentlyRenderingFiber$1.updateQueue;
    null === getSnapshot ? (getSnapshot = createFunctionComponentUpdateQueue(), currentlyRenderingFiber$1.updateQueue = getSnapshot, getSnapshot.stores = [
        fiber
    ]) : (renderedSnapshot = getSnapshot.stores, null === renderedSnapshot ? getSnapshot.stores = [
        fiber
    ] : renderedSnapshot.push(fiber));
}
function updateStoreInstance(fiber, inst, nextSnapshot, getSnapshot) {
    inst.value = nextSnapshot;
    inst.getSnapshot = getSnapshot;
    checkIfSnapshotChanged(inst) && forceStoreRerender(fiber);
}
function subscribeToStore(fiber, inst, subscribe) {
    return subscribe(function() {
        checkIfSnapshotChanged(inst) && forceStoreRerender(fiber);
    });
}
function checkIfSnapshotChanged(inst) {
    var latestGetSnapshot = inst.getSnapshot;
    inst = inst.value;
    try {
        var nextValue = latestGetSnapshot();
        return !objectIs(inst, nextValue);
    } catch (error) {
        return !0;
    }
}
function forceStoreRerender(fiber) {
    var root = enqueueConcurrentRenderForLane(fiber, 2);
    null !== root && scheduleUpdateOnFiber(root, fiber, 2);
}
function mountStateImpl(initialState) {
    var hook = mountWorkInProgressHook();
    if ("function" === typeof initialState) {
        var initialStateInitializer = initialState;
        initialState = initialStateInitializer();
        if (shouldDoubleInvokeUserFnsInHooksDEV) {
            setIsStrictModeForDevtools(!0);
            try {
                initialStateInitializer();
            } finally{
                setIsStrictModeForDevtools(!1);
            }
        }
    }
    hook.memoizedState = hook.baseState = initialState;
    hook.queue = {
        pending: null,
        lanes: 0,
        dispatch: null,
        lastRenderedReducer: basicStateReducer,
        lastRenderedState: initialState
    };
    return hook;
}
function updateOptimisticImpl(hook, current, passthrough, reducer) {
    hook.baseState = passthrough;
    return updateReducerImpl(hook, currentHook, "function" === typeof reducer ? reducer : basicStateReducer);
}
function dispatchActionState(fiber, actionQueue, setPendingState, setState, payload) {
    if (isRenderPhaseUpdate(fiber)) throw Error("Cannot update form state while rendering.");
    fiber = actionQueue.action;
    if (null !== fiber) {
        var actionNode = {
            payload: payload,
            action: fiber,
            next: null,
            isTransition: !0,
            status: "pending",
            value: null,
            reason: null,
            listeners: [],
            then: function(listener) {
                actionNode.listeners.push(listener);
            }
        };
        null !== ReactSharedInternals.T ? setPendingState(!0) : actionNode.isTransition = !1;
        setState(actionNode);
        setPendingState = actionQueue.pending;
        null === setPendingState ? (actionNode.next = actionQueue.pending = actionNode, runActionStateAction(actionQueue, actionNode)) : (actionNode.next = setPendingState.next, actionQueue.pending = setPendingState.next = actionNode);
    }
}
function runActionStateAction(actionQueue, node) {
    var action = node.action, payload = node.payload, prevState = actionQueue.state;
    if (node.isTransition) {
        var prevTransition = ReactSharedInternals.T, currentTransition = {};
        ReactSharedInternals.T = currentTransition;
        try {
            var returnValue = action(prevState, payload), onStartTransitionFinish = ReactSharedInternals.S;
            null !== onStartTransitionFinish && onStartTransitionFinish(currentTransition, returnValue);
            handleActionReturnValue(actionQueue, node, returnValue);
        } catch (error) {
            onActionError(actionQueue, node, error);
        } finally{
            ReactSharedInternals.T = prevTransition;
        }
    } else try {
        prevTransition = action(prevState, payload), handleActionReturnValue(actionQueue, node, prevTransition);
    } catch (error$49) {
        onActionError(actionQueue, node, error$49);
    }
}
function handleActionReturnValue(actionQueue, node, returnValue) {
    null !== returnValue && "object" === typeof returnValue && "function" === typeof returnValue.then ? returnValue.then(function(nextState) {
        onActionSuccess(actionQueue, node, nextState);
    }, function(error) {
        return onActionError(actionQueue, node, error);
    }) : onActionSuccess(actionQueue, node, returnValue);
}
function onActionSuccess(actionQueue, actionNode, nextState) {
    actionNode.status = "fulfilled";
    actionNode.value = nextState;
    notifyActionListeners(actionNode);
    actionQueue.state = nextState;
    actionNode = actionQueue.pending;
    null !== actionNode && (nextState = actionNode.next, nextState === actionNode ? actionQueue.pending = null : (nextState = nextState.next, actionNode.next = nextState, runActionStateAction(actionQueue, nextState)));
}
function onActionError(actionQueue, actionNode, error) {
    var last = actionQueue.pending;
    actionQueue.pending = null;
    if (null !== last) {
        last = last.next;
        do actionNode.status = "rejected", actionNode.reason = error, notifyActionListeners(actionNode), actionNode = actionNode.next;
        while (actionNode !== last);
    }
    actionQueue.action = null;
}
function notifyActionListeners(actionNode) {
    actionNode = actionNode.listeners;
    for(var i = 0; i < actionNode.length; i++)(0, actionNode[i])();
}
function actionStateReducer(oldState, newState) {
    return newState;
}
function mountActionState(action, initialStateProp) {
    var stateHook = mountWorkInProgressHook();
    stateHook.memoizedState = stateHook.baseState = initialStateProp;
    var stateQueue = {
        pending: null,
        lanes: 0,
        dispatch: null,
        lastRenderedReducer: actionStateReducer,
        lastRenderedState: initialStateProp
    };
    stateHook.queue = stateQueue;
    stateHook = dispatchSetState.bind(null, currentlyRenderingFiber$1, stateQueue);
    stateQueue.dispatch = stateHook;
    stateQueue = mountStateImpl(!1);
    var setPendingState = dispatchOptimisticSetState.bind(null, currentlyRenderingFiber$1, !1, stateQueue.queue);
    stateQueue = mountWorkInProgressHook();
    var actionQueue = {
        state: initialStateProp,
        dispatch: null,
        action: action,
        pending: null
    };
    stateQueue.queue = actionQueue;
    stateHook = dispatchActionState.bind(null, currentlyRenderingFiber$1, actionQueue, setPendingState, stateHook);
    actionQueue.dispatch = stateHook;
    stateQueue.memoizedState = action;
    return [
        initialStateProp,
        stateHook,
        !1
    ];
}
function updateActionState(action) {
    var stateHook = updateWorkInProgressHook();
    return updateActionStateImpl(stateHook, currentHook, action);
}
function updateActionStateImpl(stateHook, currentStateHook, action) {
    currentStateHook = updateReducerImpl(stateHook, currentStateHook, actionStateReducer)[0];
    stateHook = updateReducer(basicStateReducer)[0];
    currentStateHook = "object" === typeof currentStateHook && null !== currentStateHook && "function" === typeof currentStateHook.then ? useThenable(currentStateHook) : currentStateHook;
    var actionQueueHook = updateWorkInProgressHook(), actionQueue = actionQueueHook.queue, dispatch = actionQueue.dispatch;
    action !== actionQueueHook.memoizedState && (currentlyRenderingFiber$1.flags |= 2048, pushEffect(9, actionStateActionEffect.bind(null, actionQueue, action), {
        destroy: void 0
    }, null));
    return [
        currentStateHook,
        dispatch,
        stateHook
    ];
}
function actionStateActionEffect(actionQueue, action) {
    actionQueue.action = action;
}
function rerenderActionState(action) {
    var stateHook = updateWorkInProgressHook(), currentStateHook = currentHook;
    if (null !== currentStateHook) return updateActionStateImpl(stateHook, currentStateHook, action);
    updateWorkInProgressHook();
    stateHook = stateHook.memoizedState;
    currentStateHook = updateWorkInProgressHook();
    var dispatch = currentStateHook.queue.dispatch;
    currentStateHook.memoizedState = action;
    return [
        stateHook,
        dispatch,
        !1
    ];
}
function pushEffect(tag, create, inst, deps) {
    tag = {
        tag: tag,
        create: create,
        inst: inst,
        deps: deps,
        next: null
    };
    create = currentlyRenderingFiber$1.updateQueue;
    null === create && (create = createFunctionComponentUpdateQueue(), currentlyRenderingFiber$1.updateQueue = create);
    inst = create.lastEffect;
    null === inst ? create.lastEffect = tag.next = tag : (deps = inst.next, inst.next = tag, tag.next = deps, create.lastEffect = tag);
    return tag;
}
function updateRef() {
    return updateWorkInProgressHook().memoizedState;
}
function mountEffectImpl(fiberFlags, hookFlags, create, deps) {
    var hook = mountWorkInProgressHook();
    currentlyRenderingFiber$1.flags |= fiberFlags;
    hook.memoizedState = pushEffect(1 | hookFlags, create, {
        destroy: void 0
    }, void 0 === deps ? null : deps);
}
function updateEffectImpl(fiberFlags, hookFlags, create, deps) {
    var hook = updateWorkInProgressHook();
    deps = void 0 === deps ? null : deps;
    var inst = hook.memoizedState.inst;
    null !== currentHook && null !== deps && areHookInputsEqual(deps, currentHook.memoizedState.deps) ? hook.memoizedState = pushEffect(hookFlags, create, inst, deps) : (currentlyRenderingFiber$1.flags |= fiberFlags, hook.memoizedState = pushEffect(1 | hookFlags, create, inst, deps));
}
function mountEffect(create, deps) {
    mountEffectImpl(8390656, 8, create, deps);
}
function updateEffect(create, deps) {
    updateEffectImpl(2048, 8, create, deps);
}
function updateInsertionEffect(create, deps) {
    return updateEffectImpl(4, 2, create, deps);
}
function updateLayoutEffect(create, deps) {
    return updateEffectImpl(4, 4, create, deps);
}
function imperativeHandleEffect(create, ref) {
    if ("function" === typeof ref) {
        create = create();
        var refCleanup = ref(create);
        return function() {
            "function" === typeof refCleanup ? refCleanup() : ref(null);
        };
    }
    if (null !== ref && void 0 !== ref) return create = create(), ref.current = create, function() {
        ref.current = null;
    };
}
function updateImperativeHandle(ref, create, deps) {
    deps = null !== deps && void 0 !== deps ? deps.concat([
        ref
    ]) : null;
    updateEffectImpl(4, 4, imperativeHandleEffect.bind(null, create, ref), deps);
}
function mountDebugValue() {}
function updateCallback(callback, deps) {
    var hook = updateWorkInProgressHook();
    deps = void 0 === deps ? null : deps;
    var prevState = hook.memoizedState;
    if (null !== deps && areHookInputsEqual(deps, prevState[1])) return prevState[0];
    hook.memoizedState = [
        callback,
        deps
    ];
    return callback;
}
function updateMemo(nextCreate, deps) {
    var hook = updateWorkInProgressHook();
    deps = void 0 === deps ? null : deps;
    var prevState = hook.memoizedState;
    if (null !== deps && areHookInputsEqual(deps, prevState[1])) return prevState[0];
    prevState = nextCreate();
    if (shouldDoubleInvokeUserFnsInHooksDEV) {
        setIsStrictModeForDevtools(!0);
        try {
            nextCreate();
        } finally{
            setIsStrictModeForDevtools(!1);
        }
    }
    hook.memoizedState = [
        prevState,
        deps
    ];
    return prevState;
}
function mountDeferredValueImpl(hook, value, initialValue) {
    if (void 0 === initialValue || 0 !== (renderLanes & 1073741824)) return hook.memoizedState = value;
    hook.memoizedState = initialValue;
    hook = requestDeferredLane();
    currentlyRenderingFiber$1.lanes |= hook;
    workInProgressRootSkippedLanes |= hook;
    return initialValue;
}
function updateDeferredValueImpl(hook, prevValue, value, initialValue) {
    if (objectIs(value, prevValue)) return value;
    if (null !== currentTreeHiddenStackCursor.current) return hook = mountDeferredValueImpl(hook, value, initialValue), objectIs(hook, prevValue) || (didReceiveUpdate = !0), hook;
    if (0 === (renderLanes & 42)) return didReceiveUpdate = !0, hook.memoizedState = value;
    hook = requestDeferredLane();
    currentlyRenderingFiber$1.lanes |= hook;
    workInProgressRootSkippedLanes |= hook;
    return prevValue;
}
function startTransition(fiber, queue, pendingState, finishedState, callback) {
    var previousPriority = currentUpdatePriority;
    currentUpdatePriority = 0 !== previousPriority && 8 > previousPriority ? previousPriority : 8;
    var prevTransition = ReactSharedInternals.T, currentTransition = {};
    ReactSharedInternals.T = currentTransition;
    dispatchOptimisticSetState(fiber, !1, queue, pendingState);
    try {
        var returnValue = callback(), onStartTransitionFinish = ReactSharedInternals.S;
        null !== onStartTransitionFinish && onStartTransitionFinish(currentTransition, returnValue);
        if (null !== returnValue && "object" === typeof returnValue && "function" === typeof returnValue.then) {
            var thenableForFinishedState = chainThenableValue(returnValue, finishedState);
            dispatchSetStateInternal(fiber, queue, thenableForFinishedState, requestUpdateLane(fiber));
        } else dispatchSetStateInternal(fiber, queue, finishedState, requestUpdateLane(fiber));
    } catch (error) {
        dispatchSetStateInternal(fiber, queue, {
            then: function() {},
            status: "rejected",
            reason: error
        }, requestUpdateLane(fiber));
    } finally{
        currentUpdatePriority = previousPriority, ReactSharedInternals.T = prevTransition;
    }
}
function useHostTransitionStatus() {
    return readContext(HostTransitionContext);
}
function updateId() {
    return updateWorkInProgressHook().memoizedState;
}
function updateRefresh() {
    return updateWorkInProgressHook().memoizedState;
}
function refreshCache(fiber) {
    for(var provider = fiber.return; null !== provider;){
        switch(provider.tag){
            case 24:
            case 3:
                var lane = requestUpdateLane(provider);
                fiber = createUpdate(lane);
                var root = enqueueUpdate(provider, fiber, lane);
                null !== root && (scheduleUpdateOnFiber(root, provider, lane), entangleTransitions(root, provider, lane));
                provider = {
                    cache: createCache()
                };
                fiber.payload = provider;
                return;
        }
        provider = provider.return;
    }
}
function dispatchReducerAction(fiber, queue, action) {
    var lane = requestUpdateLane(fiber);
    action = {
        lane: lane,
        revertLane: 0,
        action: action,
        hasEagerState: !1,
        eagerState: null,
        next: null
    };
    isRenderPhaseUpdate(fiber) ? enqueueRenderPhaseUpdate(queue, action) : (action = enqueueConcurrentHookUpdate(fiber, queue, action, lane), null !== action && (scheduleUpdateOnFiber(action, fiber, lane), entangleTransitionUpdate(action, queue, lane)));
}
function dispatchSetState(fiber, queue, action) {
    var lane = requestUpdateLane(fiber);
    dispatchSetStateInternal(fiber, queue, action, lane);
}
function dispatchSetStateInternal(fiber, queue, action, lane) {
    var update = {
        lane: lane,
        revertLane: 0,
        action: action,
        hasEagerState: !1,
        eagerState: null,
        next: null
    };
    if (isRenderPhaseUpdate(fiber)) enqueueRenderPhaseUpdate(queue, update);
    else {
        var alternate = fiber.alternate;
        if (0 === fiber.lanes && (null === alternate || 0 === alternate.lanes) && (alternate = queue.lastRenderedReducer, null !== alternate)) try {
            var currentState = queue.lastRenderedState, eagerState = alternate(currentState, action);
            update.hasEagerState = !0;
            update.eagerState = eagerState;
            if (objectIs(eagerState, currentState)) return enqueueUpdate$1(fiber, queue, update, 0), null === workInProgressRoot && finishQueueingConcurrentUpdates(), !1;
        } catch (error) {} finally{}
        action = enqueueConcurrentHookUpdate(fiber, queue, update, lane);
        if (null !== action) return scheduleUpdateOnFiber(action, fiber, lane), entangleTransitionUpdate(action, queue, lane), !0;
    }
    return !1;
}
function dispatchOptimisticSetState(fiber, throwIfDuringRender, queue, action) {
    action = {
        lane: 2,
        revertLane: requestTransitionLane(),
        action: action,
        hasEagerState: !1,
        eagerState: null,
        next: null
    };
    if (isRenderPhaseUpdate(fiber)) {
        if (throwIfDuringRender) throw Error("Cannot update optimistic state while rendering.");
    } else throwIfDuringRender = enqueueConcurrentHookUpdate(fiber, queue, action, 2), null !== throwIfDuringRender && scheduleUpdateOnFiber(throwIfDuringRender, fiber, 2);
}
function isRenderPhaseUpdate(fiber) {
    var alternate = fiber.alternate;
    return fiber === currentlyRenderingFiber$1 || null !== alternate && alternate === currentlyRenderingFiber$1;
}
function enqueueRenderPhaseUpdate(queue, update) {
    didScheduleRenderPhaseUpdateDuringThisPass = didScheduleRenderPhaseUpdate = !0;
    var pending = queue.pending;
    null === pending ? update.next = update : (update.next = pending.next, pending.next = update);
    queue.pending = update;
}
function entangleTransitionUpdate(root, queue, lane) {
    if (0 !== (lane & 4194176)) {
        var queueLanes = queue.lanes;
        queueLanes &= root.pendingLanes;
        lane |= queueLanes;
        queue.lanes = lane;
        markRootEntangled(root, lane);
    }
}
var ContextOnlyDispatcher = {
    readContext: readContext,
    use: use,
    useCallback: throwInvalidHookError,
    useContext: throwInvalidHookError,
    useEffect: throwInvalidHookError,
    useImperativeHandle: throwInvalidHookError,
    useLayoutEffect: throwInvalidHookError,
    useInsertionEffect: throwInvalidHookError,
    useMemo: throwInvalidHookError,
    useReducer: throwInvalidHookError,
    useRef: throwInvalidHookError,
    useState: throwInvalidHookError,
    useDebugValue: throwInvalidHookError,
    useDeferredValue: throwInvalidHookError,
    useTransition: throwInvalidHookError,
    useSyncExternalStore: throwInvalidHookError,
    useId: throwInvalidHookError
};
ContextOnlyDispatcher.useCacheRefresh = throwInvalidHookError;
ContextOnlyDispatcher.useMemoCache = throwInvalidHookError;
ContextOnlyDispatcher.useHostTransitionStatus = throwInvalidHookError;
ContextOnlyDispatcher.useFormState = throwInvalidHookError;
ContextOnlyDispatcher.useActionState = throwInvalidHookError;
ContextOnlyDispatcher.useOptimistic = throwInvalidHookError;
var HooksDispatcherOnMount = {
    readContext: readContext,
    use: use,
    useCallback: function(callback, deps) {
        mountWorkInProgressHook().memoizedState = [
            callback,
            void 0 === deps ? null : deps
        ];
        return callback;
    },
    useContext: readContext,
    useEffect: mountEffect,
    useImperativeHandle: function(ref, create, deps) {
        deps = null !== deps && void 0 !== deps ? deps.concat([
            ref
        ]) : null;
        mountEffectImpl(4194308, 4, imperativeHandleEffect.bind(null, create, ref), deps);
    },
    useLayoutEffect: function(create, deps) {
        return mountEffectImpl(4194308, 4, create, deps);
    },
    useInsertionEffect: function(create, deps) {
        mountEffectImpl(4, 2, create, deps);
    },
    useMemo: function(nextCreate, deps) {
        var hook = mountWorkInProgressHook();
        deps = void 0 === deps ? null : deps;
        var nextValue = nextCreate();
        if (shouldDoubleInvokeUserFnsInHooksDEV) {
            setIsStrictModeForDevtools(!0);
            try {
                nextCreate();
            } finally{
                setIsStrictModeForDevtools(!1);
            }
        }
        hook.memoizedState = [
            nextValue,
            deps
        ];
        return nextValue;
    },
    useReducer: function(reducer, initialArg, init) {
        var hook = mountWorkInProgressHook();
        if (void 0 !== init) {
            var initialState = init(initialArg);
            if (shouldDoubleInvokeUserFnsInHooksDEV) {
                setIsStrictModeForDevtools(!0);
                try {
                    init(initialArg);
                } finally{
                    setIsStrictModeForDevtools(!1);
                }
            }
        } else initialState = initialArg;
        hook.memoizedState = hook.baseState = initialState;
        reducer = {
            pending: null,
            lanes: 0,
            dispatch: null,
            lastRenderedReducer: reducer,
            lastRenderedState: initialState
        };
        hook.queue = reducer;
        reducer = reducer.dispatch = dispatchReducerAction.bind(null, currentlyRenderingFiber$1, reducer);
        return [
            hook.memoizedState,
            reducer
        ];
    },
    useRef: function(initialValue) {
        var hook = mountWorkInProgressHook();
        initialValue = {
            current: initialValue
        };
        return hook.memoizedState = initialValue;
    },
    useState: function(initialState) {
        initialState = mountStateImpl(initialState);
        var queue = initialState.queue, dispatch = dispatchSetState.bind(null, currentlyRenderingFiber$1, queue);
        queue.dispatch = dispatch;
        return [
            initialState.memoizedState,
            dispatch
        ];
    },
    useDebugValue: mountDebugValue,
    useDeferredValue: function(value, initialValue) {
        var hook = mountWorkInProgressHook();
        return mountDeferredValueImpl(hook, value, initialValue);
    },
    useTransition: function() {
        var stateHook = mountStateImpl(!1);
        stateHook = startTransition.bind(null, currentlyRenderingFiber$1, stateHook.queue, !0, !1);
        mountWorkInProgressHook().memoizedState = stateHook;
        return [
            !1,
            stateHook
        ];
    },
    useSyncExternalStore: function(subscribe, getSnapshot) {
        var fiber = currentlyRenderingFiber$1, hook = mountWorkInProgressHook();
        var nextSnapshot = getSnapshot();
        if (null === workInProgressRoot) throw Error("Expected a work-in-progress root. This is a bug in React. Please file an issue.");
        0 !== (workInProgressRootRenderLanes & 60) || pushStoreConsistencyCheck(fiber, getSnapshot, nextSnapshot);
        hook.memoizedState = nextSnapshot;
        var inst = {
            value: nextSnapshot,
            getSnapshot: getSnapshot
        };
        hook.queue = inst;
        mountEffect(subscribeToStore.bind(null, fiber, inst, subscribe), [
            subscribe
        ]);
        fiber.flags |= 2048;
        pushEffect(9, updateStoreInstance.bind(null, fiber, inst, nextSnapshot, getSnapshot), {
            destroy: void 0
        }, null);
        return nextSnapshot;
    },
    useId: function() {
        var hook = mountWorkInProgressHook(), identifierPrefix = workInProgressRoot.identifierPrefix, globalClientId = globalClientIdCounter++;
        identifierPrefix = ":" + identifierPrefix + "r" + globalClientId.toString(32) + ":";
        return hook.memoizedState = identifierPrefix;
    },
    useCacheRefresh: function() {
        return mountWorkInProgressHook().memoizedState = refreshCache.bind(null, currentlyRenderingFiber$1);
    }
};
HooksDispatcherOnMount.useMemoCache = useMemoCache;
HooksDispatcherOnMount.useHostTransitionStatus = useHostTransitionStatus;
HooksDispatcherOnMount.useFormState = mountActionState;
HooksDispatcherOnMount.useActionState = mountActionState;
HooksDispatcherOnMount.useOptimistic = function(passthrough) {
    var hook = mountWorkInProgressHook();
    hook.memoizedState = hook.baseState = passthrough;
    var queue = {
        pending: null,
        lanes: 0,
        dispatch: null,
        lastRenderedReducer: null,
        lastRenderedState: null
    };
    hook.queue = queue;
    hook = dispatchOptimisticSetState.bind(null, currentlyRenderingFiber$1, !0, queue);
    queue.dispatch = hook;
    return [
        passthrough,
        hook
    ];
};
var HooksDispatcherOnUpdate = {
    readContext: readContext,
    use: use,
    useCallback: updateCallback,
    useContext: readContext,
    useEffect: updateEffect,
    useImperativeHandle: updateImperativeHandle,
    useInsertionEffect: updateInsertionEffect,
    useLayoutEffect: updateLayoutEffect,
    useMemo: updateMemo,
    useReducer: updateReducer,
    useRef: updateRef,
    useState: function() {
        return updateReducer(basicStateReducer);
    },
    useDebugValue: mountDebugValue,
    useDeferredValue: function(value, initialValue) {
        var hook = updateWorkInProgressHook();
        return updateDeferredValueImpl(hook, currentHook.memoizedState, value, initialValue);
    },
    useTransition: function() {
        var booleanOrThenable = updateReducer(basicStateReducer)[0], start = updateWorkInProgressHook().memoizedState;
        return [
            "boolean" === typeof booleanOrThenable ? booleanOrThenable : useThenable(booleanOrThenable),
            start
        ];
    },
    useSyncExternalStore: updateSyncExternalStore,
    useId: updateId
};
HooksDispatcherOnUpdate.useCacheRefresh = updateRefresh;
HooksDispatcherOnUpdate.useMemoCache = useMemoCache;
HooksDispatcherOnUpdate.useHostTransitionStatus = useHostTransitionStatus;
HooksDispatcherOnUpdate.useFormState = updateActionState;
HooksDispatcherOnUpdate.useActionState = updateActionState;
HooksDispatcherOnUpdate.useOptimistic = function(passthrough, reducer) {
    var hook = updateWorkInProgressHook();
    return updateOptimisticImpl(hook, currentHook, passthrough, reducer);
};
var HooksDispatcherOnRerender = {
    readContext: readContext,
    use: use,
    useCallback: updateCallback,
    useContext: readContext,
    useEffect: updateEffect,
    useImperativeHandle: updateImperativeHandle,
    useInsertionEffect: updateInsertionEffect,
    useLayoutEffect: updateLayoutEffect,
    useMemo: updateMemo,
    useReducer: rerenderReducer,
    useRef: updateRef,
    useState: function() {
        return rerenderReducer(basicStateReducer);
    },
    useDebugValue: mountDebugValue,
    useDeferredValue: function(value, initialValue) {
        var hook = updateWorkInProgressHook();
        return null === currentHook ? mountDeferredValueImpl(hook, value, initialValue) : updateDeferredValueImpl(hook, currentHook.memoizedState, value, initialValue);
    },
    useTransition: function() {
        var booleanOrThenable = rerenderReducer(basicStateReducer)[0], start = updateWorkInProgressHook().memoizedState;
        return [
            "boolean" === typeof booleanOrThenable ? booleanOrThenable : useThenable(booleanOrThenable),
            start
        ];
    },
    useSyncExternalStore: updateSyncExternalStore,
    useId: updateId
};
HooksDispatcherOnRerender.useCacheRefresh = updateRefresh;
HooksDispatcherOnRerender.useMemoCache = useMemoCache;
HooksDispatcherOnRerender.useHostTransitionStatus = useHostTransitionStatus;
HooksDispatcherOnRerender.useFormState = rerenderActionState;
HooksDispatcherOnRerender.useActionState = rerenderActionState;
HooksDispatcherOnRerender.useOptimistic = function(passthrough, reducer) {
    var hook = updateWorkInProgressHook();
    if (null !== currentHook) return updateOptimisticImpl(hook, currentHook, passthrough, reducer);
    hook.baseState = passthrough;
    return [
        passthrough,
        hook.queue.dispatch
    ];
};
function applyDerivedStateFromProps(workInProgress, ctor, getDerivedStateFromProps, nextProps) {
    ctor = workInProgress.memoizedState;
    getDerivedStateFromProps = getDerivedStateFromProps(nextProps, ctor);
    getDerivedStateFromProps = null === getDerivedStateFromProps || void 0 === getDerivedStateFromProps ? ctor : assign({}, ctor, getDerivedStateFromProps);
    workInProgress.memoizedState = getDerivedStateFromProps;
    0 === workInProgress.lanes && (workInProgress.updateQueue.baseState = getDerivedStateFromProps);
}
var classComponentUpdater = {
    isMounted: function(component) {
        return (component = component._reactInternals) ? getNearestMountedFiber(component) === component : !1;
    },
    enqueueSetState: function(inst, payload, callback) {
        inst = inst._reactInternals;
        var lane = requestUpdateLane(inst), update = createUpdate(lane);
        update.payload = payload;
        void 0 !== callback && null !== callback && (update.callback = callback);
        payload = enqueueUpdate(inst, update, lane);
        null !== payload && (scheduleUpdateOnFiber(payload, inst, lane), entangleTransitions(payload, inst, lane));
    },
    enqueueReplaceState: function(inst, payload, callback) {
        inst = inst._reactInternals;
        var lane = requestUpdateLane(inst), update = createUpdate(lane);
        update.tag = 1;
        update.payload = payload;
        void 0 !== callback && null !== callback && (update.callback = callback);
        payload = enqueueUpdate(inst, update, lane);
        null !== payload && (scheduleUpdateOnFiber(payload, inst, lane), entangleTransitions(payload, inst, lane));
    },
    enqueueForceUpdate: function(inst, callback) {
        inst = inst._reactInternals;
        var lane = requestUpdateLane(inst), update = createUpdate(lane);
        update.tag = 2;
        void 0 !== callback && null !== callback && (update.callback = callback);
        callback = enqueueUpdate(inst, update, lane);
        null !== callback && (scheduleUpdateOnFiber(callback, inst, lane), entangleTransitions(callback, inst, lane));
    }
};
function checkShouldComponentUpdate(workInProgress, ctor, oldProps, newProps, oldState, newState, nextContext) {
    workInProgress = workInProgress.stateNode;
    return "function" === typeof workInProgress.shouldComponentUpdate ? workInProgress.shouldComponentUpdate(newProps, newState, nextContext) : ctor.prototype && ctor.prototype.isPureReactComponent ? !shallowEqual(oldProps, newProps) || !shallowEqual(oldState, newState) : !0;
}
function constructClassInstance(workInProgress, ctor, props) {
    var context = emptyContextObject, contextType = ctor.contextType;
    "object" === typeof contextType && null !== contextType && (context = readContext(contextType));
    ctor = new ctor(props, context);
    workInProgress.memoizedState = null !== ctor.state && void 0 !== ctor.state ? ctor.state : null;
    ctor.updater = classComponentUpdater;
    workInProgress.stateNode = ctor;
    ctor._reactInternals = workInProgress;
    return ctor;
}
function callComponentWillReceiveProps(workInProgress, instance, newProps, nextContext) {
    workInProgress = instance.state;
    "function" === typeof instance.componentWillReceiveProps && instance.componentWillReceiveProps(newProps, nextContext);
    "function" === typeof instance.UNSAFE_componentWillReceiveProps && instance.UNSAFE_componentWillReceiveProps(newProps, nextContext);
    instance.state !== workInProgress && classComponentUpdater.enqueueReplaceState(instance, instance.state, null);
}
function mountClassInstance(workInProgress, ctor, newProps, renderLanes) {
    var instance = workInProgress.stateNode;
    instance.props = newProps;
    instance.state = workInProgress.memoizedState;
    instance.refs = {};
    initializeUpdateQueue(workInProgress);
    var contextType = ctor.contextType;
    instance.context = "object" === typeof contextType && null !== contextType ? readContext(contextType) : emptyContextObject;
    instance.state = workInProgress.memoizedState;
    contextType = ctor.getDerivedStateFromProps;
    "function" === typeof contextType && (applyDerivedStateFromProps(workInProgress, ctor, contextType, newProps), instance.state = workInProgress.memoizedState);
    "function" === typeof ctor.getDerivedStateFromProps || "function" === typeof instance.getSnapshotBeforeUpdate || "function" !== typeof instance.UNSAFE_componentWillMount && "function" !== typeof instance.componentWillMount || (ctor = instance.state, "function" === typeof instance.componentWillMount && instance.componentWillMount(), "function" === typeof instance.UNSAFE_componentWillMount && instance.UNSAFE_componentWillMount(), ctor !== instance.state && classComponentUpdater.enqueueReplaceState(instance, instance.state, null), processUpdateQueue(workInProgress, newProps, instance, renderLanes), suspendIfUpdateReadFromEntangledAsyncAction(), instance.state = workInProgress.memoizedState);
    "function" === typeof instance.componentDidMount && (workInProgress.flags |= 4194308);
}
function resolveClassComponentProps(Component, baseProps) {
    var newProps = baseProps;
    if ("ref" in baseProps) {
        newProps = {};
        for(var propName in baseProps)"ref" !== propName && (newProps[propName] = baseProps[propName]);
    }
    if (Component = Component.defaultProps) {
        newProps === baseProps && (newProps = assign({}, newProps));
        for(var propName$51 in Component)void 0 === newProps[propName$51] && (newProps[propName$51] = Component[propName$51]);
    }
    return newProps;
}
var reportGlobalError = "function" === typeof reportError ? reportError : function(error) {
    if ("object" === typeof window && "function" === typeof window.ErrorEvent) {
        var event = new window.ErrorEvent("error", {
            bubbles: !0,
            cancelable: !0,
            message: "object" === typeof error && null !== error && "string" === typeof error.message ? String(error.message) : String(error),
            error: error
        });
        if (!window.dispatchEvent(event)) return;
    } else if ("object" === typeof process && "function" === typeof process.emit) {
        process.emit("uncaughtException", error);
        return;
    }
    console.error(error);
};
function defaultOnRecoverableError(error) {
    reportGlobalError(error);
}
function logUncaughtError(root, errorInfo) {
    try {
        var onUncaughtError = root.onUncaughtError;
        onUncaughtError(errorInfo.value, {
            componentStack: errorInfo.stack
        });
    } catch (e) {
        setTimeout(function() {
            throw e;
        });
    }
}
function logCaughtError(root, boundary, errorInfo) {
    try {
        var onCaughtError = root.onCaughtError;
        onCaughtError(errorInfo.value, {
            componentStack: errorInfo.stack,
            errorBoundary: 1 === boundary.tag ? boundary.stateNode : null
        });
    } catch (e) {
        setTimeout(function() {
            throw e;
        });
    }
}
function createRootErrorUpdate(root, errorInfo, lane) {
    lane = createUpdate(lane);
    lane.tag = 3;
    lane.payload = {
        element: null
    };
    lane.callback = function() {
        logUncaughtError(root, errorInfo);
    };
    return lane;
}
function createClassErrorUpdate(lane) {
    lane = createUpdate(lane);
    lane.tag = 3;
    return lane;
}
function initializeClassErrorUpdate(update, root, fiber, errorInfo) {
    var getDerivedStateFromError = fiber.type.getDerivedStateFromError;
    if ("function" === typeof getDerivedStateFromError) {
        var error = errorInfo.value;
        update.payload = function() {
            return getDerivedStateFromError(error);
        };
        update.callback = function() {
            logCaughtError(root, fiber, errorInfo);
        };
    }
    var inst = fiber.stateNode;
    null !== inst && "function" === typeof inst.componentDidCatch && (update.callback = function() {
        logCaughtError(root, fiber, errorInfo);
        "function" !== typeof getDerivedStateFromError && (null === legacyErrorBoundariesThatAlreadyFailed ? legacyErrorBoundariesThatAlreadyFailed = new Set([
            this
        ]) : legacyErrorBoundariesThatAlreadyFailed.add(this));
        var stack = errorInfo.stack;
        this.componentDidCatch(errorInfo.value, {
            componentStack: null !== stack ? stack : ""
        });
    });
}
function throwException(root, returnFiber, sourceFiber, value, rootRenderLanes) {
    sourceFiber.flags |= 32768;
    if (null !== value && "object" === typeof value && "function" === typeof value.then) {
        var currentSourceFiber = sourceFiber.alternate;
        null !== currentSourceFiber && propagateParentContextChanges(currentSourceFiber, sourceFiber, rootRenderLanes, !0);
        currentSourceFiber = sourceFiber.tag;
        0 !== (sourceFiber.mode & 1) || 0 !== currentSourceFiber && 11 !== currentSourceFiber && 15 !== currentSourceFiber || ((currentSourceFiber = sourceFiber.alternate) ? (sourceFiber.updateQueue = currentSourceFiber.updateQueue, sourceFiber.memoizedState = currentSourceFiber.memoizedState, sourceFiber.lanes = currentSourceFiber.lanes) : (sourceFiber.updateQueue = null, sourceFiber.memoizedState = null));
        currentSourceFiber = suspenseHandlerStackCursor.current;
        if (null !== currentSourceFiber) {
            switch(currentSourceFiber.tag){
                case 13:
                    return sourceFiber.mode & 1 && (null === shellBoundary ? renderDidSuspendDelayIfPossible() : null === currentSourceFiber.alternate && 0 === workInProgressRootExitStatus && (workInProgressRootExitStatus = 3)), currentSourceFiber.flags &= -257, 0 === (currentSourceFiber.mode & 1) ? currentSourceFiber === returnFiber ? currentSourceFiber.flags |= 65536 : (currentSourceFiber.flags |= 128, sourceFiber.flags |= 131072, sourceFiber.flags &= -52805, 1 === sourceFiber.tag ? null === sourceFiber.alternate ? sourceFiber.tag = 17 : (returnFiber = createUpdate(2), returnFiber.tag = 2, enqueueUpdate(sourceFiber, returnFiber, 2)) : 0 === sourceFiber.tag && null === sourceFiber.alternate && (sourceFiber.tag = 28), sourceFiber.lanes |= 2) : (currentSourceFiber.flags |= 65536, currentSourceFiber.lanes = rootRenderLanes), value === noopSuspenseyCommitThenable ? currentSourceFiber.flags |= 16384 : (returnFiber = currentSourceFiber.updateQueue, null === returnFiber ? currentSourceFiber.updateQueue = new Set([
                        value
                    ]) : returnFiber.add(value), currentSourceFiber.mode & 1 && attachPingListener(root, value, rootRenderLanes)), !1;
                case 22:
                    if (currentSourceFiber.mode & 1) return currentSourceFiber.flags |= 65536, value === noopSuspenseyCommitThenable ? currentSourceFiber.flags |= 16384 : (returnFiber = currentSourceFiber.updateQueue, null === returnFiber ? (returnFiber = {
                        transitions: null,
                        markerInstances: null,
                        retryQueue: new Set([
                            value
                        ])
                    }, currentSourceFiber.updateQueue = returnFiber) : (sourceFiber = returnFiber.retryQueue, null === sourceFiber ? returnFiber.retryQueue = new Set([
                        value
                    ]) : sourceFiber.add(value)), attachPingListener(root, value, rootRenderLanes)), !1;
            }
            throw Error("Unexpected Suspense handler tag (" + currentSourceFiber.tag + "). This is a bug in React.");
        }
        if (1 === root.tag) return attachPingListener(root, value, rootRenderLanes), renderDidSuspendDelayIfPossible(), !1;
        value = Error("A component suspended while responding to synchronous input. This will cause the UI to be replaced with a loading indicator. To fix, updates that suspend should be wrapped with startTransition.");
    }
    currentSourceFiber = createCapturedValueAtFiber(Error("There was an error during concurrent rendering but React was able to recover by instead synchronously rendering the entire root.", {
        cause: value
    }), sourceFiber);
    null === workInProgressRootConcurrentErrors ? workInProgressRootConcurrentErrors = [
        currentSourceFiber
    ] : workInProgressRootConcurrentErrors.push(currentSourceFiber);
    4 !== workInProgressRootExitStatus && (workInProgressRootExitStatus = 2);
    if (null === returnFiber) return !0;
    value = createCapturedValueAtFiber(value, sourceFiber);
    do {
        switch(returnFiber.tag){
            case 3:
                return returnFiber.flags |= 65536, root = rootRenderLanes & -rootRenderLanes, returnFiber.lanes |= root, root = createRootErrorUpdate(returnFiber.stateNode, value, root), enqueueCapturedUpdate(returnFiber, root), !1;
            case 1:
                if (sourceFiber = returnFiber.type, currentSourceFiber = returnFiber.stateNode, 0 === (returnFiber.flags & 128) && ("function" === typeof sourceFiber.getDerivedStateFromError || null !== currentSourceFiber && "function" === typeof currentSourceFiber.componentDidCatch && (null === legacyErrorBoundariesThatAlreadyFailed || !legacyErrorBoundariesThatAlreadyFailed.has(currentSourceFiber)))) return returnFiber.flags |= 65536, rootRenderLanes &= -rootRenderLanes, returnFiber.lanes |= rootRenderLanes, rootRenderLanes = createClassErrorUpdate(rootRenderLanes), initializeClassErrorUpdate(rootRenderLanes, root, returnFiber, value), enqueueCapturedUpdate(returnFiber, rootRenderLanes), !1;
        }
        returnFiber = returnFiber.return;
    }while (null !== returnFiber);
    return !1;
}
var SelectiveHydrationException = Error("This is not a real error. It's an implementation detail of React's selective hydration feature. If this leaks into userspace, it's a bug in React. Please file an issue."), didReceiveUpdate = !1;
function reconcileChildren(current, workInProgress, nextChildren, renderLanes) {
    workInProgress.child = null === current ? mountChildFibers(workInProgress, null, nextChildren, renderLanes) : reconcileChildFibers(workInProgress, current.child, nextChildren, renderLanes);
}
function updateForwardRef(current, workInProgress, Component, nextProps, renderLanes) {
    Component = Component.render;
    var ref = workInProgress.ref;
    if ("ref" in nextProps) {
        var propsWithoutRef = {};
        for(var key in nextProps)"ref" !== key && (propsWithoutRef[key] = nextProps[key]);
    } else propsWithoutRef = nextProps;
    prepareToReadContext(workInProgress);
    nextProps = renderWithHooks(current, workInProgress, Component, propsWithoutRef, ref, renderLanes);
    if (null !== current && !didReceiveUpdate) return bailoutHooks(current, workInProgress, renderLanes), bailoutOnAlreadyFinishedWork(current, workInProgress, renderLanes);
    workInProgress.flags |= 1;
    reconcileChildren(current, workInProgress, nextProps, renderLanes);
    return workInProgress.child;
}
function updateMemoComponent(current, workInProgress, Component, nextProps, renderLanes) {
    if (null === current) {
        var type = Component.type;
        if ("function" === typeof type && !shouldConstruct(type) && void 0 === type.defaultProps && null === Component.compare) return workInProgress.tag = 15, workInProgress.type = type, updateSimpleMemoComponent(current, workInProgress, type, nextProps, renderLanes);
        current = createFiberFromTypeAndProps(Component.type, null, nextProps, workInProgress, workInProgress.mode, renderLanes);
        current.ref = workInProgress.ref;
        current.return = workInProgress;
        return workInProgress.child = current;
    }
    type = current.child;
    if (!checkScheduledUpdateOrContext(current, renderLanes)) {
        var prevProps = type.memoizedProps;
        Component = Component.compare;
        Component = null !== Component ? Component : shallowEqual;
        if (Component(prevProps, nextProps) && current.ref === workInProgress.ref) return bailoutOnAlreadyFinishedWork(current, workInProgress, renderLanes);
    }
    workInProgress.flags |= 1;
    current = createWorkInProgress(type, nextProps);
    current.ref = workInProgress.ref;
    current.return = workInProgress;
    return workInProgress.child = current;
}
function updateSimpleMemoComponent(current, workInProgress, Component, nextProps, renderLanes) {
    if (null !== current) {
        var prevProps = current.memoizedProps;
        if (shallowEqual(prevProps, nextProps) && current.ref === workInProgress.ref) if (didReceiveUpdate = !1, workInProgress.pendingProps = nextProps = prevProps, checkScheduledUpdateOrContext(current, renderLanes)) 0 !== (current.flags & 131072) && (didReceiveUpdate = !0);
        else return workInProgress.lanes = current.lanes, bailoutOnAlreadyFinishedWork(current, workInProgress, renderLanes);
    }
    return updateFunctionComponent(current, workInProgress, Component, nextProps, renderLanes);
}
function updateOffscreenComponent(current, workInProgress, renderLanes) {
    var nextProps = workInProgress.pendingProps, nextChildren = nextProps.children, nextIsDetached = 0 !== (workInProgress.stateNode._pendingVisibility & 2), prevState = null !== current ? current.memoizedState : null;
    markRef(current, workInProgress);
    if ("hidden" === nextProps.mode || nextIsDetached) {
        if (0 !== (workInProgress.flags & 128)) {
            nextProps = null !== prevState ? prevState.baseLanes | renderLanes : renderLanes;
            if (null !== current) {
                nextChildren = workInProgress.child = current.child;
                for(nextIsDetached = 0; null !== nextChildren;)nextIsDetached = nextIsDetached | nextChildren.lanes | nextChildren.childLanes, nextChildren = nextChildren.sibling;
                workInProgress.childLanes = nextIsDetached & ~nextProps;
            } else workInProgress.childLanes = 0, workInProgress.child = null;
            return deferHiddenOffscreenComponent(current, workInProgress, nextProps, renderLanes);
        }
        if (0 === (workInProgress.mode & 1)) workInProgress.memoizedState = {
            baseLanes: 0,
            cachePool: null
        }, null !== current && pushTransition(workInProgress, null), reuseHiddenContextOnStack(), pushOffscreenSuspenseHandler(workInProgress);
        else if (0 !== (renderLanes & 536870912)) workInProgress.memoizedState = {
            baseLanes: 0,
            cachePool: null
        }, null !== current && pushTransition(workInProgress, null !== prevState ? prevState.cachePool : null), null !== prevState ? pushHiddenContext(workInProgress, prevState) : reuseHiddenContextOnStack(), pushOffscreenSuspenseHandler(workInProgress);
        else return workInProgress.lanes = workInProgress.childLanes = 536870912, deferHiddenOffscreenComponent(current, workInProgress, null !== prevState ? prevState.baseLanes | renderLanes : renderLanes, renderLanes);
    } else null !== prevState ? (pushTransition(workInProgress, prevState.cachePool), pushHiddenContext(workInProgress, prevState), reuseSuspenseHandlerOnStack(workInProgress), workInProgress.memoizedState = null) : (null !== current && pushTransition(workInProgress, null), reuseHiddenContextOnStack(), reuseSuspenseHandlerOnStack(workInProgress));
    reconcileChildren(current, workInProgress, nextChildren, renderLanes);
    return workInProgress.child;
}
function deferHiddenOffscreenComponent(current, workInProgress, nextBaseLanes, renderLanes) {
    var JSCompiler_inline_result = peekCacheFromPool();
    JSCompiler_inline_result = null === JSCompiler_inline_result ? null : {
        parent: CacheContext._currentValue2,
        pool: JSCompiler_inline_result
    };
    workInProgress.memoizedState = {
        baseLanes: nextBaseLanes,
        cachePool: JSCompiler_inline_result
    };
    null !== current && pushTransition(workInProgress, null);
    reuseHiddenContextOnStack();
    pushOffscreenSuspenseHandler(workInProgress);
    null !== current && propagateParentContextChanges(current, workInProgress, renderLanes, !0);
    return null;
}
function markRef(current, workInProgress) {
    var ref = workInProgress.ref;
    if (null === ref) null !== current && null !== current.ref && (workInProgress.flags |= 2097664);
    else {
        if ("function" !== typeof ref && "object" !== typeof ref) throw Error("Expected ref to be a function, an object returned by React.createRef(), or undefined/null.");
        if (null === current || current.ref !== ref) workInProgress.flags |= 2097664;
    }
}
function updateFunctionComponent(current, workInProgress, Component, nextProps, renderLanes) {
    prepareToReadContext(workInProgress);
    Component = renderWithHooks(current, workInProgress, Component, nextProps, void 0, renderLanes);
    if (null !== current && !didReceiveUpdate) return bailoutHooks(current, workInProgress, renderLanes), bailoutOnAlreadyFinishedWork(current, workInProgress, renderLanes);
    workInProgress.flags |= 1;
    reconcileChildren(current, workInProgress, Component, renderLanes);
    return workInProgress.child;
}
function replayFunctionComponent(current, workInProgress, nextProps, Component, secondArg, renderLanes) {
    prepareToReadContext(workInProgress);
    workInProgress.updateQueue = null;
    nextProps = renderWithHooksAgain(workInProgress, Component, nextProps, secondArg);
    finishRenderingHooks(current);
    if (null !== current && !didReceiveUpdate) return bailoutHooks(current, workInProgress, renderLanes), bailoutOnAlreadyFinishedWork(current, workInProgress, renderLanes);
    workInProgress.flags |= 1;
    reconcileChildren(current, workInProgress, nextProps, renderLanes);
    return workInProgress.child;
}
function updateClassComponent(current, workInProgress, Component, nextProps, renderLanes) {
    prepareToReadContext(workInProgress);
    if (null === workInProgress.stateNode) resetSuspendedCurrentOnMountInLegacyMode(current, workInProgress), constructClassInstance(workInProgress, Component, nextProps), mountClassInstance(workInProgress, Component, nextProps, renderLanes), nextProps = !0;
    else if (null === current) {
        var instance = workInProgress.stateNode, unresolvedOldProps = workInProgress.memoizedProps, oldProps = resolveClassComponentProps(Component, unresolvedOldProps);
        instance.props = oldProps;
        var oldContext = instance.context, contextType = Component.contextType, nextContext = emptyContextObject;
        "object" === typeof contextType && null !== contextType && (nextContext = readContext(contextType));
        var getDerivedStateFromProps = Component.getDerivedStateFromProps;
        contextType = "function" === typeof getDerivedStateFromProps || "function" === typeof instance.getSnapshotBeforeUpdate;
        unresolvedOldProps = workInProgress.pendingProps !== unresolvedOldProps;
        contextType || "function" !== typeof instance.UNSAFE_componentWillReceiveProps && "function" !== typeof instance.componentWillReceiveProps || (unresolvedOldProps || oldContext !== nextContext) && callComponentWillReceiveProps(workInProgress, instance, nextProps, nextContext);
        hasForceUpdate = !1;
        var oldState = workInProgress.memoizedState;
        instance.state = oldState;
        processUpdateQueue(workInProgress, nextProps, instance, renderLanes);
        suspendIfUpdateReadFromEntangledAsyncAction();
        oldContext = workInProgress.memoizedState;
        unresolvedOldProps || oldState !== oldContext || hasForceUpdate ? ("function" === typeof getDerivedStateFromProps && (applyDerivedStateFromProps(workInProgress, Component, getDerivedStateFromProps, nextProps), oldContext = workInProgress.memoizedState), (oldProps = hasForceUpdate || checkShouldComponentUpdate(workInProgress, Component, oldProps, nextProps, oldState, oldContext, nextContext)) ? (contextType || "function" !== typeof instance.UNSAFE_componentWillMount && "function" !== typeof instance.componentWillMount || ("function" === typeof instance.componentWillMount && instance.componentWillMount(), "function" === typeof instance.UNSAFE_componentWillMount && instance.UNSAFE_componentWillMount()), "function" === typeof instance.componentDidMount && (workInProgress.flags |= 4194308)) : ("function" === typeof instance.componentDidMount && (workInProgress.flags |= 4194308), workInProgress.memoizedProps = nextProps, workInProgress.memoizedState = oldContext), instance.props = nextProps, instance.state = oldContext, instance.context = nextContext, nextProps = oldProps) : ("function" === typeof instance.componentDidMount && (workInProgress.flags |= 4194308), nextProps = !1);
    } else {
        instance = workInProgress.stateNode;
        cloneUpdateQueue(current, workInProgress);
        nextContext = workInProgress.memoizedProps;
        contextType = resolveClassComponentProps(Component, nextContext);
        instance.props = contextType;
        getDerivedStateFromProps = workInProgress.pendingProps;
        oldState = instance.context;
        oldContext = Component.contextType;
        oldProps = emptyContextObject;
        "object" === typeof oldContext && null !== oldContext && (oldProps = readContext(oldContext));
        unresolvedOldProps = Component.getDerivedStateFromProps;
        (oldContext = "function" === typeof unresolvedOldProps || "function" === typeof instance.getSnapshotBeforeUpdate) || "function" !== typeof instance.UNSAFE_componentWillReceiveProps && "function" !== typeof instance.componentWillReceiveProps || (nextContext !== getDerivedStateFromProps || oldState !== oldProps) && callComponentWillReceiveProps(workInProgress, instance, nextProps, oldProps);
        hasForceUpdate = !1;
        oldState = workInProgress.memoizedState;
        instance.state = oldState;
        processUpdateQueue(workInProgress, nextProps, instance, renderLanes);
        suspendIfUpdateReadFromEntangledAsyncAction();
        var newState = workInProgress.memoizedState;
        nextContext !== getDerivedStateFromProps || oldState !== newState || hasForceUpdate || null !== current && null !== current.dependencies && checkIfContextChanged(current.dependencies) ? ("function" === typeof unresolvedOldProps && (applyDerivedStateFromProps(workInProgress, Component, unresolvedOldProps, nextProps), newState = workInProgress.memoizedState), (contextType = hasForceUpdate || checkShouldComponentUpdate(workInProgress, Component, contextType, nextProps, oldState, newState, oldProps) || null !== current && null !== current.dependencies && checkIfContextChanged(current.dependencies)) ? (oldContext || "function" !== typeof instance.UNSAFE_componentWillUpdate && "function" !== typeof instance.componentWillUpdate || ("function" === typeof instance.componentWillUpdate && instance.componentWillUpdate(nextProps, newState, oldProps), "function" === typeof instance.UNSAFE_componentWillUpdate && instance.UNSAFE_componentWillUpdate(nextProps, newState, oldProps)), "function" === typeof instance.componentDidUpdate && (workInProgress.flags |= 4), "function" === typeof instance.getSnapshotBeforeUpdate && (workInProgress.flags |= 1024)) : ("function" !== typeof instance.componentDidUpdate || nextContext === current.memoizedProps && oldState === current.memoizedState || (workInProgress.flags |= 4), "function" !== typeof instance.getSnapshotBeforeUpdate || nextContext === current.memoizedProps && oldState === current.memoizedState || (workInProgress.flags |= 1024), workInProgress.memoizedProps = nextProps, workInProgress.memoizedState = newState), instance.props = nextProps, instance.state = newState, instance.context = oldProps, nextProps = contextType) : ("function" !== typeof instance.componentDidUpdate || nextContext === current.memoizedProps && oldState === current.memoizedState || (workInProgress.flags |= 4), "function" !== typeof instance.getSnapshotBeforeUpdate || nextContext === current.memoizedProps && oldState === current.memoizedState || (workInProgress.flags |= 1024), nextProps = !1);
    }
    return finishClassComponent(current, workInProgress, Component, nextProps, !1, renderLanes);
}
function finishClassComponent(current, workInProgress, Component, shouldUpdate, hasContext, renderLanes) {
    markRef(current, workInProgress);
    hasContext = 0 !== (workInProgress.flags & 128);
    if (!shouldUpdate && !hasContext) return bailoutOnAlreadyFinishedWork(current, workInProgress, renderLanes);
    shouldUpdate = workInProgress.stateNode;
    Component = hasContext && "function" !== typeof Component.getDerivedStateFromError ? null : shouldUpdate.render();
    workInProgress.flags |= 1;
    null !== current && hasContext ? (workInProgress.child = reconcileChildFibers(workInProgress, current.child, null, renderLanes), workInProgress.child = reconcileChildFibers(workInProgress, null, Component, renderLanes)) : reconcileChildren(current, workInProgress, Component, renderLanes);
    workInProgress.memoizedState = shouldUpdate.state;
    return workInProgress.child;
}
var SUSPENDED_MARKER = {
    dehydrated: null,
    treeContext: null,
    retryLane: 0
};
function mountSuspenseOffscreenState(renderLanes) {
    return {
        baseLanes: renderLanes,
        cachePool: getSuspendedCache()
    };
}
function getRemainingWorkInPrimaryTree(current, primaryTreeDidDefer, renderLanes) {
    current = null !== current ? current.childLanes & ~renderLanes : 0;
    primaryTreeDidDefer && (current |= workInProgressDeferredLane);
    return current;
}
function updateSuspenseComponent(current, workInProgress, renderLanes) {
    var nextProps = workInProgress.pendingProps, showFallback = !1, didSuspend = 0 !== (workInProgress.flags & 128), JSCompiler_temp;
    (JSCompiler_temp = didSuspend) || (JSCompiler_temp = null !== current && null === current.memoizedState ? !1 : 0 !== (suspenseStackCursor.current & 2));
    JSCompiler_temp && (showFallback = !0, workInProgress.flags &= -129);
    JSCompiler_temp = 0 !== (workInProgress.flags & 32);
    workInProgress.flags &= -33;
    if (null === current) {
        var nextPrimaryChildren = nextProps.children;
        nextProps = nextProps.fallback;
        if (showFallback) return reuseSuspenseHandlerOnStack(workInProgress), showFallback = workInProgress.mode, didSuspend = workInProgress.child, nextPrimaryChildren = {
            mode: "hidden",
            children: nextPrimaryChildren
        }, 0 === (showFallback & 1) && null !== didSuspend ? (didSuspend.childLanes = 0, didSuspend.pendingProps = nextPrimaryChildren) : didSuspend = createFiberFromOffscreen(nextPrimaryChildren, showFallback, 0, null), nextProps = createFiberFromFragment(nextProps, showFallback, renderLanes, null), didSuspend.return = workInProgress, nextProps.return = workInProgress, didSuspend.sibling = nextProps, workInProgress.child = didSuspend, nextPrimaryChildren = workInProgress.child, nextPrimaryChildren.memoizedState = mountSuspenseOffscreenState(renderLanes), nextPrimaryChildren.childLanes = getRemainingWorkInPrimaryTree(current, JSCompiler_temp, renderLanes), workInProgress.memoizedState = SUSPENDED_MARKER, nextProps;
        pushPrimaryTreeSuspenseHandler(workInProgress);
        return mountSuspensePrimaryChildren(workInProgress, nextPrimaryChildren);
    }
    nextPrimaryChildren = current.memoizedState;
    if (null !== nextPrimaryChildren && null !== nextPrimaryChildren.dehydrated) {
        if (didSuspend) workInProgress.flags & 256 ? (pushPrimaryTreeSuspenseHandler(workInProgress), workInProgress.flags &= -257, workInProgress = retrySuspenseComponentWithoutHydrating(current, workInProgress, renderLanes)) : null !== workInProgress.memoizedState ? (reuseSuspenseHandlerOnStack(workInProgress), workInProgress.child = current.child, workInProgress.flags |= 128, workInProgress = null) : (reuseSuspenseHandlerOnStack(workInProgress), nextPrimaryChildren = nextProps.fallback, showFallback = workInProgress.mode, nextProps = createFiberFromOffscreen({
            mode: "visible",
            children: nextProps.children
        }, showFallback, 0, null), nextPrimaryChildren = createFiberFromFragment(nextPrimaryChildren, showFallback, renderLanes, null), nextPrimaryChildren.flags |= 2, nextProps.return = workInProgress, nextPrimaryChildren.return = workInProgress, nextProps.sibling = nextPrimaryChildren, workInProgress.child = nextProps, 0 !== (workInProgress.mode & 1) && reconcileChildFibers(workInProgress, current.child, null, renderLanes), nextProps = workInProgress.child, nextProps.memoizedState = mountSuspenseOffscreenState(renderLanes), nextProps.childLanes = getRemainingWorkInPrimaryTree(current, JSCompiler_temp, renderLanes), workInProgress.memoizedState = SUSPENDED_MARKER, workInProgress = nextPrimaryChildren);
        else if (pushPrimaryTreeSuspenseHandler(workInProgress), shim$1()) JSCompiler_temp = shim$1().digest, nextProps = Error("The server could not finish this Suspense boundary, likely due to an error during server rendering. Switched to client rendering."), nextProps.stack = "", nextProps.digest = JSCompiler_temp, JSCompiler_temp = {
            value: nextProps,
            source: null,
            stack: null
        }, null === hydrationErrors ? hydrationErrors = [
            JSCompiler_temp
        ] : hydrationErrors.push(JSCompiler_temp), workInProgress = retrySuspenseComponentWithoutHydrating(current, workInProgress, renderLanes);
        else if (didReceiveUpdate || propagateParentContextChanges(current, workInProgress, renderLanes, !1), JSCompiler_temp = 0 !== (renderLanes & current.childLanes), didReceiveUpdate || JSCompiler_temp) {
            JSCompiler_temp = workInProgressRoot;
            if (null !== JSCompiler_temp) {
                nextProps = renderLanes & -renderLanes;
                if (0 !== (nextProps & 42)) nextProps = 1;
                else switch(nextProps){
                    case 2:
                        nextProps = 1;
                        break;
                    case 8:
                        nextProps = 4;
                        break;
                    case 32:
                        nextProps = 16;
                        break;
                    case 128:
                    case 256:
                    case 512:
                    case 1024:
                    case 2048:
                    case 4096:
                    case 8192:
                    case 16384:
                    case 32768:
                    case 65536:
                    case 131072:
                    case 262144:
                    case 524288:
                    case 1048576:
                    case 2097152:
                    case 4194304:
                    case 8388608:
                    case 16777216:
                    case 33554432:
                        nextProps = 64;
                        break;
                    case 268435456:
                        nextProps = 134217728;
                        break;
                    default:
                        nextProps = 0;
                }
                nextProps = 0 !== (nextProps & (JSCompiler_temp.suspendedLanes | renderLanes)) ? 0 : nextProps;
                if (0 !== nextProps && nextProps !== nextPrimaryChildren.retryLane) throw nextPrimaryChildren.retryLane = nextProps, enqueueConcurrentRenderForLane(current, nextProps), scheduleUpdateOnFiber(JSCompiler_temp, current, nextProps), SelectiveHydrationException;
            }
            shim$1() || renderDidSuspendDelayIfPossible();
            workInProgress = retrySuspenseComponentWithoutHydrating(current, workInProgress, renderLanes);
        } else shim$1() ? (workInProgress.flags |= 128, workInProgress.child = current.child, retryDehydratedSuspenseBoundary.bind(null, current), shim$1(), workInProgress = null) : (workInProgress = mountSuspensePrimaryChildren(workInProgress, nextProps.children), workInProgress.flags |= 4096);
        return workInProgress;
    }
    if (showFallback) {
        reuseSuspenseHandlerOnStack(workInProgress);
        nextPrimaryChildren = nextProps.fallback;
        showFallback = workInProgress.mode;
        didSuspend = current.child;
        var currentFallbackChildFragment = didSuspend.sibling, primaryChildProps = {
            mode: "hidden",
            children: nextProps.children
        };
        0 === (showFallback & 1) && workInProgress.child !== didSuspend ? (nextProps = workInProgress.child, nextProps.childLanes = 0, nextProps.pendingProps = primaryChildProps, workInProgress.deletions = null) : (nextProps = createWorkInProgress(didSuspend, primaryChildProps), nextProps.subtreeFlags = didSuspend.subtreeFlags & 31457280);
        null !== currentFallbackChildFragment ? nextPrimaryChildren = createWorkInProgress(currentFallbackChildFragment, nextPrimaryChildren) : (nextPrimaryChildren = createFiberFromFragment(nextPrimaryChildren, showFallback, renderLanes, null), nextPrimaryChildren.flags |= 2);
        nextPrimaryChildren.return = workInProgress;
        nextProps.return = workInProgress;
        nextProps.sibling = nextPrimaryChildren;
        workInProgress.child = nextProps;
        nextProps = nextPrimaryChildren;
        nextPrimaryChildren = workInProgress.child;
        showFallback = current.child.memoizedState;
        null === showFallback ? showFallback = mountSuspenseOffscreenState(renderLanes) : (didSuspend = showFallback.cachePool, null !== didSuspend ? (currentFallbackChildFragment = CacheContext._currentValue2, didSuspend = didSuspend.parent !== currentFallbackChildFragment ? {
            parent: currentFallbackChildFragment,
            pool: currentFallbackChildFragment
        } : didSuspend) : didSuspend = getSuspendedCache(), showFallback = {
            baseLanes: showFallback.baseLanes | renderLanes,
            cachePool: didSuspend
        });
        nextPrimaryChildren.memoizedState = showFallback;
        nextPrimaryChildren.childLanes = getRemainingWorkInPrimaryTree(current, JSCompiler_temp, renderLanes);
        workInProgress.memoizedState = SUSPENDED_MARKER;
        return nextProps;
    }
    pushPrimaryTreeSuspenseHandler(workInProgress);
    JSCompiler_temp = current.child;
    current = JSCompiler_temp.sibling;
    JSCompiler_temp = createWorkInProgress(JSCompiler_temp, {
        mode: "visible",
        children: nextProps.children
    });
    0 === (workInProgress.mode & 1) && (JSCompiler_temp.lanes = renderLanes);
    JSCompiler_temp.return = workInProgress;
    JSCompiler_temp.sibling = null;
    null !== current && (renderLanes = workInProgress.deletions, null === renderLanes ? (workInProgress.deletions = [
        current
    ], workInProgress.flags |= 16) : renderLanes.push(current));
    workInProgress.child = JSCompiler_temp;
    workInProgress.memoizedState = null;
    return JSCompiler_temp;
}
function mountSuspensePrimaryChildren(workInProgress, primaryChildren) {
    primaryChildren = createFiberFromOffscreen({
        mode: "visible",
        children: primaryChildren
    }, workInProgress.mode, 0, null);
    primaryChildren.return = workInProgress;
    return workInProgress.child = primaryChildren;
}
function retrySuspenseComponentWithoutHydrating(current, workInProgress, renderLanes) {
    reconcileChildFibers(workInProgress, current.child, null, renderLanes);
    current = mountSuspensePrimaryChildren(workInProgress, workInProgress.pendingProps.children);
    current.flags |= 2;
    workInProgress.memoizedState = null;
    return current;
}
function scheduleSuspenseWorkOnFiber(fiber, renderLanes, propagationRoot) {
    fiber.lanes |= renderLanes;
    var alternate = fiber.alternate;
    null !== alternate && (alternate.lanes |= renderLanes);
    scheduleContextWorkOnParentPath(fiber.return, renderLanes, propagationRoot);
}
function initSuspenseListRenderState(workInProgress, isBackwards, tail, lastContentRow, tailMode) {
    var renderState = workInProgress.memoizedState;
    null === renderState ? workInProgress.memoizedState = {
        isBackwards: isBackwards,
        rendering: null,
        renderingStartTime: 0,
        last: lastContentRow,
        tail: tail,
        tailMode: tailMode
    } : (renderState.isBackwards = isBackwards, renderState.rendering = null, renderState.renderingStartTime = 0, renderState.last = lastContentRow, renderState.tail = tail, renderState.tailMode = tailMode);
}
function updateSuspenseListComponent(current, workInProgress, renderLanes) {
    var nextProps = workInProgress.pendingProps, revealOrder = nextProps.revealOrder, tailMode = nextProps.tail;
    reconcileChildren(current, workInProgress, nextProps.children, renderLanes);
    nextProps = suspenseStackCursor.current;
    if (0 !== (nextProps & 2)) nextProps = nextProps & 1 | 2, workInProgress.flags |= 128;
    else {
        if (null !== current && 0 !== (current.flags & 128)) a: for(current = workInProgress.child; null !== current;){
            if (13 === current.tag) null !== current.memoizedState && scheduleSuspenseWorkOnFiber(current, renderLanes, workInProgress);
            else if (19 === current.tag) scheduleSuspenseWorkOnFiber(current, renderLanes, workInProgress);
            else if (null !== current.child) {
                current.child.return = current;
                current = current.child;
                continue;
            }
            if (current === workInProgress) break a;
            for(; null === current.sibling;){
                if (null === current.return || current.return === workInProgress) break a;
                current = current.return;
            }
            current.sibling.return = current.return;
            current = current.sibling;
        }
        nextProps &= 1;
    }
    push(suspenseStackCursor, nextProps);
    if (0 === (workInProgress.mode & 1)) workInProgress.memoizedState = null;
    else switch(revealOrder){
        case "forwards":
            renderLanes = workInProgress.child;
            for(revealOrder = null; null !== renderLanes;)current = renderLanes.alternate, null !== current && null === findFirstSuspended(current) && (revealOrder = renderLanes), renderLanes = renderLanes.sibling;
            renderLanes = revealOrder;
            null === renderLanes ? (revealOrder = workInProgress.child, workInProgress.child = null) : (revealOrder = renderLanes.sibling, renderLanes.sibling = null);
            initSuspenseListRenderState(workInProgress, !1, revealOrder, renderLanes, tailMode);
            break;
        case "backwards":
            renderLanes = null;
            revealOrder = workInProgress.child;
            for(workInProgress.child = null; null !== revealOrder;){
                current = revealOrder.alternate;
                if (null !== current && null === findFirstSuspended(current)) {
                    workInProgress.child = revealOrder;
                    break;
                }
                current = revealOrder.sibling;
                revealOrder.sibling = renderLanes;
                renderLanes = revealOrder;
                revealOrder = current;
            }
            initSuspenseListRenderState(workInProgress, !0, renderLanes, null, tailMode);
            break;
        case "together":
            initSuspenseListRenderState(workInProgress, !1, null, null, void 0);
            break;
        default:
            workInProgress.memoizedState = null;
    }
    return workInProgress.child;
}
function resetSuspendedCurrentOnMountInLegacyMode(current, workInProgress) {
    0 === (workInProgress.mode & 1) && null !== current && (current.alternate = null, workInProgress.alternate = null, workInProgress.flags |= 2);
}
function bailoutOnAlreadyFinishedWork(current, workInProgress, renderLanes) {
    null !== current && (workInProgress.dependencies = current.dependencies);
    workInProgressRootSkippedLanes |= workInProgress.lanes;
    if (0 === (renderLanes & workInProgress.childLanes)) if (null !== current) {
        if (propagateParentContextChanges(current, workInProgress, renderLanes, !1), 0 === (renderLanes & workInProgress.childLanes)) return null;
    } else return null;
    if (null !== current && workInProgress.child !== current.child) throw Error("Resuming work not yet implemented.");
    if (null !== workInProgress.child) {
        current = workInProgress.child;
        renderLanes = createWorkInProgress(current, current.pendingProps);
        workInProgress.child = renderLanes;
        for(renderLanes.return = workInProgress; null !== current.sibling;)current = current.sibling, renderLanes = renderLanes.sibling = createWorkInProgress(current, current.pendingProps), renderLanes.return = workInProgress;
        renderLanes.sibling = null;
    }
    return workInProgress.child;
}
function checkScheduledUpdateOrContext(current, renderLanes) {
    if (0 !== (current.lanes & renderLanes)) return !0;
    current = current.dependencies;
    return null !== current && checkIfContextChanged(current) ? !0 : !1;
}
function attemptEarlyBailoutIfNoScheduledUpdate(current, workInProgress, renderLanes) {
    switch(workInProgress.tag){
        case 3:
            pushHostContainer(workInProgress, workInProgress.stateNode.containerInfo);
            pushProvider(workInProgress, CacheContext, current.memoizedState.cache);
            break;
        case 27:
        case 5:
            pushHostContext(workInProgress);
            break;
        case 4:
            pushHostContainer(workInProgress, workInProgress.stateNode.containerInfo);
            break;
        case 10:
            pushProvider(workInProgress, workInProgress.type, workInProgress.memoizedProps.value);
            break;
        case 13:
            var state = workInProgress.memoizedState;
            if (null !== state) {
                if (null !== state.dehydrated) return pushPrimaryTreeSuspenseHandler(workInProgress), workInProgress.flags |= 128, null;
                if (0 !== (renderLanes & workInProgress.child.childLanes)) return updateSuspenseComponent(current, workInProgress, renderLanes);
                pushPrimaryTreeSuspenseHandler(workInProgress);
                current = bailoutOnAlreadyFinishedWork(current, workInProgress, renderLanes);
                return null !== current ? current.sibling : null;
            }
            pushPrimaryTreeSuspenseHandler(workInProgress);
            break;
        case 19:
            var didSuspendBefore = 0 !== (current.flags & 128);
            state = 0 !== (renderLanes & workInProgress.childLanes);
            state || (propagateParentContextChanges(current, workInProgress, renderLanes, !1), state = 0 !== (renderLanes & workInProgress.childLanes));
            if (didSuspendBefore) {
                if (state) return updateSuspenseListComponent(current, workInProgress, renderLanes);
                workInProgress.flags |= 128;
            }
            didSuspendBefore = workInProgress.memoizedState;
            null !== didSuspendBefore && (didSuspendBefore.rendering = null, didSuspendBefore.tail = null, didSuspendBefore.lastEffect = null);
            push(suspenseStackCursor, suspenseStackCursor.current);
            if (state) break;
            else return null;
        case 22:
        case 23:
            return workInProgress.lanes = 0, updateOffscreenComponent(current, workInProgress, renderLanes);
        case 24:
            pushProvider(workInProgress, CacheContext, current.memoizedState.cache);
    }
    return bailoutOnAlreadyFinishedWork(current, workInProgress, renderLanes);
}
function beginWork(current, workInProgress, renderLanes) {
    if (null !== current) if (current.memoizedProps !== workInProgress.pendingProps) didReceiveUpdate = !0;
    else {
        if (!checkScheduledUpdateOrContext(current, renderLanes) && 0 === (workInProgress.flags & 128)) return didReceiveUpdate = !1, attemptEarlyBailoutIfNoScheduledUpdate(current, workInProgress, renderLanes);
        didReceiveUpdate = 0 !== (current.flags & 131072) ? !0 : !1;
    }
    else didReceiveUpdate = !1;
    workInProgress.lanes = 0;
    switch(workInProgress.tag){
        case 16:
            var elementType = workInProgress.elementType;
            a: {
                resetSuspendedCurrentOnMountInLegacyMode(current, workInProgress);
                current = workInProgress.pendingProps;
                var init = elementType._init;
                elementType = init(elementType._payload);
                workInProgress.type = elementType;
                if ("function" === typeof elementType) shouldConstruct(elementType) ? (current = resolveClassComponentProps(elementType, current), workInProgress.tag = 1, workInProgress = updateClassComponent(null, workInProgress, elementType, current, renderLanes)) : (workInProgress.tag = 0, workInProgress = updateFunctionComponent(null, workInProgress, elementType, current, renderLanes));
                else {
                    if (void 0 !== elementType && null !== elementType) {
                        if (init = elementType.$$typeof, init === REACT_FORWARD_REF_TYPE) {
                            workInProgress.tag = 11;
                            workInProgress = updateForwardRef(null, workInProgress, elementType, current, renderLanes);
                            break a;
                        } else if (init === REACT_MEMO_TYPE) {
                            workInProgress.tag = 14;
                            workInProgress = updateMemoComponent(null, workInProgress, elementType, current, renderLanes);
                            break a;
                        }
                    }
                    workInProgress = getComponentNameFromType(elementType) || elementType;
                    throw Error("Element type is invalid. Received a promise that resolves to: " + workInProgress + ". Lazy element type must resolve to a class or function.");
                }
            }
            return workInProgress;
        case 0:
            return updateFunctionComponent(current, workInProgress, workInProgress.type, workInProgress.pendingProps, renderLanes);
        case 1:
            return elementType = workInProgress.type, init = resolveClassComponentProps(elementType, workInProgress.pendingProps), updateClassComponent(current, workInProgress, elementType, init, renderLanes);
        case 3:
            pushHostContainer(workInProgress, workInProgress.stateNode.containerInfo);
            if (null === current) throw Error("Should have a current fiber. This is a bug in React.");
            var nextProps = workInProgress.pendingProps;
            init = workInProgress.memoizedState;
            elementType = init.element;
            cloneUpdateQueue(current, workInProgress);
            processUpdateQueue(workInProgress, nextProps, null, renderLanes);
            nextProps = workInProgress.memoizedState;
            var nextCache = nextProps.cache;
            pushProvider(workInProgress, CacheContext, nextCache);
            nextCache !== init.cache && propagateContextChanges(workInProgress, [
                CacheContext
            ], renderLanes, !0);
            suspendIfUpdateReadFromEntangledAsyncAction();
            init = nextProps.element;
            init === elementType ? workInProgress = bailoutOnAlreadyFinishedWork(current, workInProgress, renderLanes) : (reconcileChildren(current, workInProgress, init, renderLanes), workInProgress = workInProgress.child);
            return workInProgress;
        case 26:
        case 27:
        case 5:
            return pushHostContext(workInProgress), elementType = workInProgress.pendingProps.children, null !== workInProgress.memoizedState && (init = renderWithHooks(current, workInProgress, TransitionAwareHostComponent, null, null, renderLanes), HostTransitionContext._currentValue2 = init), markRef(current, workInProgress), reconcileChildren(current, workInProgress, elementType, renderLanes), workInProgress.child;
        case 6:
            return null;
        case 13:
            return updateSuspenseComponent(current, workInProgress, renderLanes);
        case 4:
            return pushHostContainer(workInProgress, workInProgress.stateNode.containerInfo), elementType = workInProgress.pendingProps, null === current ? workInProgress.child = reconcileChildFibers(workInProgress, null, elementType, renderLanes) : reconcileChildren(current, workInProgress, elementType, renderLanes), workInProgress.child;
        case 11:
            return updateForwardRef(current, workInProgress, workInProgress.type, workInProgress.pendingProps, renderLanes);
        case 7:
            return reconcileChildren(current, workInProgress, workInProgress.pendingProps, renderLanes), workInProgress.child;
        case 8:
            return reconcileChildren(current, workInProgress, workInProgress.pendingProps.children, renderLanes), workInProgress.child;
        case 12:
            return reconcileChildren(current, workInProgress, workInProgress.pendingProps.children, renderLanes), workInProgress.child;
        case 10:
            return elementType = workInProgress.pendingProps, pushProvider(workInProgress, workInProgress.type, elementType.value), reconcileChildren(current, workInProgress, elementType.children, renderLanes), workInProgress.child;
        case 9:
            return init = workInProgress.type._context, elementType = workInProgress.pendingProps.children, prepareToReadContext(workInProgress), init = readContext(init), elementType = elementType(init), workInProgress.flags |= 1, reconcileChildren(current, workInProgress, elementType, renderLanes), workInProgress.child;
        case 14:
            return updateMemoComponent(current, workInProgress, workInProgress.type, workInProgress.pendingProps, renderLanes);
        case 15:
            return updateSimpleMemoComponent(current, workInProgress, workInProgress.type, workInProgress.pendingProps, renderLanes);
        case 17:
            return elementType = workInProgress.type, init = resolveClassComponentProps(elementType, workInProgress.pendingProps), resetSuspendedCurrentOnMountInLegacyMode(current, workInProgress), workInProgress.tag = 1, prepareToReadContext(workInProgress), constructClassInstance(workInProgress, elementType, init), mountClassInstance(workInProgress, elementType, init, renderLanes), finishClassComponent(null, workInProgress, elementType, !0, !1, renderLanes);
        case 28:
            return elementType = workInProgress.type, init = resolveClassComponentProps(elementType, workInProgress.pendingProps), resetSuspendedCurrentOnMountInLegacyMode(current, workInProgress), workInProgress.tag = 0, updateFunctionComponent(null, workInProgress, elementType, init, renderLanes);
        case 19:
            return updateSuspenseListComponent(current, workInProgress, renderLanes);
        case 22:
            return updateOffscreenComponent(current, workInProgress, renderLanes);
        case 24:
            return prepareToReadContext(workInProgress), elementType = readContext(CacheContext), null === current ? (init = peekCacheFromPool(), null === init && (init = workInProgressRoot, nextProps = createCache(), init.pooledCache = nextProps, nextProps.refCount++, null !== nextProps && (init.pooledCacheLanes |= renderLanes), init = nextProps), workInProgress.memoizedState = {
                parent: elementType,
                cache: init
            }, initializeUpdateQueue(workInProgress), pushProvider(workInProgress, CacheContext, init)) : (0 !== (current.lanes & renderLanes) && (cloneUpdateQueue(current, workInProgress), processUpdateQueue(workInProgress, null, null, renderLanes), suspendIfUpdateReadFromEntangledAsyncAction()), init = current.memoizedState, nextProps = workInProgress.memoizedState, init.parent !== elementType ? (init = {
                parent: elementType,
                cache: elementType
            }, workInProgress.memoizedState = init, 0 === workInProgress.lanes && (workInProgress.memoizedState = workInProgress.updateQueue.baseState = init), pushProvider(workInProgress, CacheContext, elementType)) : (elementType = nextProps.cache, pushProvider(workInProgress, CacheContext, elementType), elementType !== init.cache && propagateContextChanges(workInProgress, [
                CacheContext
            ], renderLanes, !0))), reconcileChildren(current, workInProgress, workInProgress.pendingProps.children, renderLanes), workInProgress.child;
        case 29:
            throw workInProgress.pendingProps;
    }
    throw Error("Unknown unit of work tag (" + workInProgress.tag + "). This error is likely caused by a bug in React. Please file an issue.");
}
var valueCursor = createCursor(null), currentlyRenderingFiber = null, lastContextDependency = null;
function pushProvider(providerFiber, context, nextValue) {
    push(valueCursor, context._currentValue2);
    context._currentValue2 = nextValue;
}
function popProvider(context) {
    context._currentValue2 = valueCursor.current;
    pop(valueCursor);
}
function scheduleContextWorkOnParentPath(parent, renderLanes, propagationRoot) {
    for(; null !== parent;){
        var alternate = parent.alternate;
        (parent.childLanes & renderLanes) !== renderLanes ? (parent.childLanes |= renderLanes, null !== alternate && (alternate.childLanes |= renderLanes)) : null !== alternate && (alternate.childLanes & renderLanes) !== renderLanes && (alternate.childLanes |= renderLanes);
        if (parent === propagationRoot) break;
        parent = parent.return;
    }
}
function propagateContextChanges(workInProgress, contexts, renderLanes, forcePropagateEntireTree) {
    var fiber = workInProgress.child;
    null !== fiber && (fiber.return = workInProgress);
    for(; null !== fiber;){
        var list = fiber.dependencies;
        if (null !== list) {
            var nextFiber = fiber.child;
            list = list.firstContext;
            a: for(; null !== list;){
                var dependency = list;
                list = fiber;
                for(var i = 0; i < contexts.length; i++)if (dependency.context === contexts[i]) {
                    list.lanes |= renderLanes;
                    dependency = list.alternate;
                    null !== dependency && (dependency.lanes |= renderLanes);
                    scheduleContextWorkOnParentPath(list.return, renderLanes, workInProgress);
                    forcePropagateEntireTree || (nextFiber = null);
                    break a;
                }
                list = dependency.next;
            }
        } else if (18 === fiber.tag) {
            nextFiber = fiber.return;
            if (null === nextFiber) throw Error("We just came from a parent so we must have had a parent. This is a bug in React.");
            nextFiber.lanes |= renderLanes;
            list = nextFiber.alternate;
            null !== list && (list.lanes |= renderLanes);
            scheduleContextWorkOnParentPath(nextFiber, renderLanes, workInProgress);
            nextFiber = null;
        } else nextFiber = fiber.child;
        if (null !== nextFiber) nextFiber.return = fiber;
        else for(nextFiber = fiber; null !== nextFiber;){
            if (nextFiber === workInProgress) {
                nextFiber = null;
                break;
            }
            fiber = nextFiber.sibling;
            if (null !== fiber) {
                fiber.return = nextFiber.return;
                nextFiber = fiber;
                break;
            }
            nextFiber = nextFiber.return;
        }
        fiber = nextFiber;
    }
}
function propagateParentContextChanges(current, workInProgress, renderLanes, forcePropagateEntireTree) {
    current = null;
    for(var parent = workInProgress, isInsidePropagationBailout = !1; null !== parent;){
        if (!isInsidePropagationBailout) {
            if (0 !== (parent.flags & 524288)) isInsidePropagationBailout = !0;
            else if (0 !== (parent.flags & 262144)) break;
        }
        if (10 === parent.tag) {
            var currentParent = parent.alternate;
            if (null === currentParent) throw Error("Should have a current fiber. This is a bug in React.");
            currentParent = currentParent.memoizedProps;
            if (null !== currentParent) {
                var context = parent.type;
                objectIs(parent.pendingProps.value, currentParent.value) || (null !== current ? current.push(context) : current = [
                    context
                ]);
            }
        } else if (parent === hostTransitionProviderCursor.current) {
            currentParent = parent.alternate;
            if (null === currentParent) throw Error("Should have a current fiber. This is a bug in React.");
            currentParent.memoizedState.memoizedState !== parent.memoizedState.memoizedState && (null !== current ? current.push(HostTransitionContext) : current = [
                HostTransitionContext
            ]);
        }
        parent = parent.return;
    }
    null !== current && propagateContextChanges(workInProgress, current, renderLanes, forcePropagateEntireTree);
    workInProgress.flags |= 262144;
}
function checkIfContextChanged(currentDependencies) {
    for(currentDependencies = currentDependencies.firstContext; null !== currentDependencies;){
        if (!objectIs(currentDependencies.context._currentValue2, currentDependencies.memoizedValue)) return !0;
        currentDependencies = currentDependencies.next;
    }
    return !1;
}
function prepareToReadContext(workInProgress) {
    currentlyRenderingFiber = workInProgress;
    lastContextDependency = null;
    workInProgress = workInProgress.dependencies;
    null !== workInProgress && (workInProgress.firstContext = null);
}
function readContext(context) {
    return readContextForConsumer(currentlyRenderingFiber, context);
}
function readContextDuringReconciliation(consumer, context) {
    null === currentlyRenderingFiber && prepareToReadContext(consumer);
    return readContextForConsumer(consumer, context);
}
function readContextForConsumer(consumer, context) {
    var value = context._currentValue2;
    context = {
        context: context,
        memoizedValue: value,
        next: null
    };
    if (null === lastContextDependency) {
        if (null === consumer) throw Error("Context can only be read while React is rendering. In classes, you can read it in the render method or getDerivedStateFromProps. In function components, you can read it directly in the function body, but not inside Hooks like useReducer() or useMemo().");
        lastContextDependency = context;
        consumer.dependencies = {
            lanes: 0,
            firstContext: context
        };
        consumer.flags |= 524288;
    } else lastContextDependency = lastContextDependency.next = context;
    return value;
}
var AbortControllerLocal = "undefined" !== typeof AbortController ? AbortController : function() {
    var listeners = [], signal = this.signal = {
        aborted: !1,
        addEventListener: function(type, listener) {
            listeners.push(listener);
        }
    };
    this.abort = function() {
        signal.aborted = !0;
        listeners.forEach(function(listener) {
            return listener();
        });
    };
}, scheduleCallback$1 = Scheduler.unstable_scheduleCallback, NormalPriority = Scheduler.unstable_NormalPriority, CacheContext = {
    $$typeof: REACT_CONTEXT_TYPE,
    Consumer: null,
    Provider: null,
    _currentValue: null,
    _currentValue2: null,
    _threadCount: 0
};
function createCache() {
    return {
        controller: new AbortControllerLocal(),
        data: new Map(),
        refCount: 0
    };
}
function releaseCache(cache) {
    cache.refCount--;
    0 === cache.refCount && scheduleCallback$1(NormalPriority, function() {
        cache.controller.abort();
    });
}
var prevOnStartTransitionFinish = ReactSharedInternals.S;
ReactSharedInternals.S = function(transition, returnValue) {
    "object" === typeof returnValue && null !== returnValue && "function" === typeof returnValue.then && entangleAsyncAction(transition, returnValue);
    null !== prevOnStartTransitionFinish && prevOnStartTransitionFinish(transition, returnValue);
};
var resumedCache = createCursor(null);
function peekCacheFromPool() {
    var cacheResumedFromPreviousRender = resumedCache.current;
    return null !== cacheResumedFromPreviousRender ? cacheResumedFromPreviousRender : workInProgressRoot.pooledCache;
}
function pushTransition(offscreenWorkInProgress, prevCachePool) {
    null === prevCachePool ? push(resumedCache, resumedCache.current) : push(resumedCache, prevCachePool.pool);
}
function getSuspendedCache() {
    var cacheFromPool = peekCacheFromPool();
    return null === cacheFromPool ? null : {
        parent: CacheContext._currentValue2,
        pool: cacheFromPool
    };
}
function doesRequireClone(current, completedWork) {
    if (null !== current && current.child === completedWork.child) return !1;
    if (0 !== (completedWork.flags & 16)) return !0;
    for(current = completedWork.child; null !== current;){
        if (0 !== (current.flags & 13878) || 0 !== (current.subtreeFlags & 13878)) return !0;
        current = current.sibling;
    }
    return !1;
}
function appendAllChildren(parent, workInProgress, needsVisibilityToggle, isHidden) {
    for(var node = workInProgress.child; null !== node;){
        if (5 === node.tag) {
            var instance = node.stateNode;
            needsVisibilityToggle && isHidden && (instance = cloneHiddenInstance(instance));
            appendChildNode(parent.node, instance.node);
        } else if (6 === node.tag) {
            instance = node.stateNode;
            if (needsVisibilityToggle && isHidden) throw Error("Not yet implemented.");
            appendChildNode(parent.node, instance.node);
        } else if (4 !== node.tag) {
            if (22 === node.tag && null !== node.memoizedState) instance = node.child, null !== instance && (instance.return = node), appendAllChildren(parent, node, !0, !0);
            else if (null !== node.child) {
                node.child.return = node;
                node = node.child;
                continue;
            }
        }
        if (node === workInProgress) break;
        for(; null === node.sibling;){
            if (null === node.return || node.return === workInProgress) return;
            node = node.return;
        }
        node.sibling.return = node.return;
        node = node.sibling;
    }
}
function appendAllChildrenToContainer(containerChildSet, workInProgress, needsVisibilityToggle, isHidden) {
    for(var node = workInProgress.child; null !== node;){
        if (5 === node.tag) {
            var instance = node.stateNode;
            needsVisibilityToggle && isHidden && (instance = cloneHiddenInstance(instance));
            appendChildNodeToSet(containerChildSet, instance.node);
        } else if (6 === node.tag) {
            instance = node.stateNode;
            if (needsVisibilityToggle && isHidden) throw Error("Not yet implemented.");
            appendChildNodeToSet(containerChildSet, instance.node);
        } else if (4 !== node.tag) {
            if (22 === node.tag && null !== node.memoizedState) instance = node.child, null !== instance && (instance.return = node), appendAllChildrenToContainer(containerChildSet, node, !(null !== node.memoizedProps && "manual" === node.memoizedProps.mode), !0);
            else if (null !== node.child) {
                node.child.return = node;
                node = node.child;
                continue;
            }
        }
        if (node === workInProgress) break;
        for(; null === node.sibling;){
            if (null === node.return || node.return === workInProgress) return;
            node = node.return;
        }
        node.sibling.return = node.return;
        node = node.sibling;
    }
}
function updateHostContainer(current, workInProgress) {
    if (doesRequireClone(current, workInProgress)) {
        current = workInProgress.stateNode;
        var container = current.containerInfo, newChildSet = createChildNodeSet();
        appendAllChildrenToContainer(newChildSet, workInProgress, !1, !1);
        current.pendingChildren = newChildSet;
        workInProgress.flags |= 4;
        completeRoot(container, newChildSet);
    }
}
function scheduleRetryEffect(workInProgress, retryQueue) {
    null !== retryQueue && (workInProgress.flags |= 4);
    workInProgress.flags & 16384 && (retryQueue = 22 !== workInProgress.tag ? claimNextRetryLane() : 536870912, workInProgress.lanes |= retryQueue, workInProgressSuspendedRetryLanes |= retryQueue);
}
function cutOffTailIfNeeded(renderState, hasRenderedATailFallback) {
    switch(renderState.tailMode){
        case "hidden":
            hasRenderedATailFallback = renderState.tail;
            for(var lastTailNode = null; null !== hasRenderedATailFallback;)null !== hasRenderedATailFallback.alternate && (lastTailNode = hasRenderedATailFallback), hasRenderedATailFallback = hasRenderedATailFallback.sibling;
            null === lastTailNode ? renderState.tail = null : lastTailNode.sibling = null;
            break;
        case "collapsed":
            lastTailNode = renderState.tail;
            for(var lastTailNode$92 = null; null !== lastTailNode;)null !== lastTailNode.alternate && (lastTailNode$92 = lastTailNode), lastTailNode = lastTailNode.sibling;
            null === lastTailNode$92 ? hasRenderedATailFallback || null === renderState.tail ? renderState.tail = null : renderState.tail.sibling = null : lastTailNode$92.sibling = null;
    }
}
function bubbleProperties(completedWork) {
    var didBailout = null !== completedWork.alternate && completedWork.alternate.child === completedWork.child, newChildLanes = 0, subtreeFlags = 0;
    if (didBailout) for(var child$93 = completedWork.child; null !== child$93;)newChildLanes |= child$93.lanes | child$93.childLanes, subtreeFlags |= child$93.subtreeFlags & 31457280, subtreeFlags |= child$93.flags & 31457280, child$93.return = completedWork, child$93 = child$93.sibling;
    else for(child$93 = completedWork.child; null !== child$93;)newChildLanes |= child$93.lanes | child$93.childLanes, subtreeFlags |= child$93.subtreeFlags, subtreeFlags |= child$93.flags, child$93.return = completedWork, child$93 = child$93.sibling;
    completedWork.subtreeFlags |= subtreeFlags;
    completedWork.childLanes = newChildLanes;
    return didBailout;
}
function completeWork(current, workInProgress, renderLanes) {
    var newProps = workInProgress.pendingProps;
    switch(workInProgress.tag){
        case 28:
        case 16:
        case 15:
        case 0:
        case 11:
        case 7:
        case 8:
        case 12:
        case 9:
        case 14:
            return bubbleProperties(workInProgress), null;
        case 1:
            return bubbleProperties(workInProgress), null;
        case 3:
            return newProps = workInProgress.stateNode, renderLanes = null, null !== current && (renderLanes = current.memoizedState.cache), workInProgress.memoizedState.cache !== renderLanes && (workInProgress.flags |= 2048), popProvider(CacheContext), popHostContainer(), newProps.pendingContext && (newProps.context = newProps.pendingContext, newProps.pendingContext = null), null !== current && null !== current.child || null === current || current.memoizedState.isDehydrated && 0 === (workInProgress.flags & 256) || (workInProgress.flags |= 1024, null !== hydrationErrors && (queueRecoverableErrors(hydrationErrors), hydrationErrors = null)), updateHostContainer(current, workInProgress), bubbleProperties(workInProgress), null;
        case 26:
        case 27:
        case 5:
            popHostContext(workInProgress);
            renderLanes = workInProgress.type;
            if (null !== current && null != workInProgress.stateNode) {
                renderLanes = current.stateNode;
                var oldProps = current.memoizedProps;
                if ((current = doesRequireClone(current, workInProgress)) || oldProps !== newProps) {
                    b: {
                        oldProps = diffProperties(null, oldProps, newProps, renderLanes.canonical.viewConfig.validAttributes);
                        renderLanes.canonical.currentProps = newProps;
                        newProps = renderLanes.node;
                        if (current) newProps = null !== oldProps ? cloneNodeWithNewChildrenAndProps(newProps, oldProps) : cloneNodeWithNewChildren(newProps);
                        else if (null !== oldProps) newProps = cloneNodeWithNewProps(newProps, oldProps);
                        else {
                            newProps = renderLanes;
                            break b;
                        }
                        newProps = {
                            node: newProps,
                            canonical: renderLanes.canonical
                        };
                    }
                    newProps === renderLanes ? workInProgress.stateNode = renderLanes : (workInProgress.stateNode = newProps, current ? appendAllChildren(newProps, workInProgress, !1, !1) : workInProgress.flags |= 4);
                } else workInProgress.stateNode = renderLanes;
            } else {
                if (!newProps) {
                    if (null === workInProgress.stateNode) throw Error("We must have new props for new mounts. This error is likely caused by a bug in React. Please file an issue.");
                    bubbleProperties(workInProgress);
                    return null;
                }
                oldProps = rootInstanceStackCursor.current;
                current = nextReactTag;
                nextReactTag += 2;
                renderLanes = getViewConfigForType(renderLanes);
                var updatePayload = fastAddProperties(null, newProps, renderLanes.validAttributes);
                oldProps = createNode(current, renderLanes.uiViewClassName, oldProps, updatePayload, workInProgress);
                updatePayload = ReactNativePrivateInterface.createPublicInstance(current, renderLanes, workInProgress);
                current = {
                    node: oldProps,
                    canonical: {
                        nativeTag: current,
                        viewConfig: renderLanes,
                        currentProps: newProps,
                        internalInstanceHandle: workInProgress,
                        publicInstance: updatePayload
                    }
                };
                appendAllChildren(current, workInProgress, !1, !1);
                workInProgress.stateNode = current;
            }
            bubbleProperties(workInProgress);
            workInProgress.flags &= -16777217;
            return null;
        case 6:
            if (current && null != workInProgress.stateNode) current.memoizedProps !== newProps ? (workInProgress.stateNode = createTextInstance(newProps, rootInstanceStackCursor.current, contextStackCursor.current, workInProgress), workInProgress.flags |= 4) : workInProgress.stateNode = current.stateNode;
            else {
                if ("string" !== typeof newProps && null === workInProgress.stateNode) throw Error("We must have new props for new mounts. This error is likely caused by a bug in React. Please file an issue.");
                workInProgress.stateNode = createTextInstance(newProps, rootInstanceStackCursor.current, contextStackCursor.current, workInProgress);
            }
            bubbleProperties(workInProgress);
            return null;
        case 13:
            newProps = workInProgress.memoizedState;
            if (null === current || null !== current.memoizedState && null !== current.memoizedState.dehydrated) {
                if (null !== newProps && null !== newProps.dehydrated) {
                    if (null === current) {
                        throw Error("A dehydrated suspense component was completed without a hydrated node. This is probably a bug in React.");
                        throw Error("Expected prepareToHydrateHostSuspenseInstance() to never be called. This error is likely caused by a bug in React. Please file an issue.");
                    }
                    0 === (workInProgress.flags & 128) && (workInProgress.memoizedState = null);
                    workInProgress.flags |= 4;
                    bubbleProperties(workInProgress);
                    oldProps = !1;
                } else null !== hydrationErrors && (queueRecoverableErrors(hydrationErrors), hydrationErrors = null), oldProps = !0;
                if (!oldProps) {
                    if (workInProgress.flags & 256) return popSuspenseHandler(workInProgress), workInProgress;
                    popSuspenseHandler(workInProgress);
                    return null;
                }
            }
            popSuspenseHandler(workInProgress);
            if (0 !== (workInProgress.flags & 128)) return workInProgress.lanes = renderLanes, workInProgress;
            newProps = null !== newProps;
            current = null !== current && null !== current.memoizedState;
            newProps && (renderLanes = workInProgress.child, oldProps = null, null !== renderLanes.alternate && null !== renderLanes.alternate.memoizedState && null !== renderLanes.alternate.memoizedState.cachePool && (oldProps = renderLanes.alternate.memoizedState.cachePool.pool), updatePayload = null, null !== renderLanes.memoizedState && null !== renderLanes.memoizedState.cachePool && (updatePayload = renderLanes.memoizedState.cachePool.pool), updatePayload !== oldProps && (renderLanes.flags |= 2048));
            newProps !== current && newProps && (workInProgress.child.flags |= 8192);
            scheduleRetryEffect(workInProgress, workInProgress.updateQueue);
            bubbleProperties(workInProgress);
            return null;
        case 4:
            return popHostContainer(), updateHostContainer(current, workInProgress), bubbleProperties(workInProgress), null;
        case 10:
            return popProvider(workInProgress.type), bubbleProperties(workInProgress), null;
        case 17:
            return bubbleProperties(workInProgress), null;
        case 19:
            pop(suspenseStackCursor);
            oldProps = workInProgress.memoizedState;
            if (null === oldProps) return bubbleProperties(workInProgress), null;
            newProps = 0 !== (workInProgress.flags & 128);
            updatePayload = oldProps.rendering;
            if (null === updatePayload) if (newProps) cutOffTailIfNeeded(oldProps, !1);
            else {
                if (0 !== workInProgressRootExitStatus || null !== current && 0 !== (current.flags & 128)) for(current = workInProgress.child; null !== current;){
                    updatePayload = findFirstSuspended(current);
                    if (null !== updatePayload) {
                        workInProgress.flags |= 128;
                        cutOffTailIfNeeded(oldProps, !1);
                        current = updatePayload.updateQueue;
                        workInProgress.updateQueue = current;
                        scheduleRetryEffect(workInProgress, current);
                        workInProgress.subtreeFlags = 0;
                        current = renderLanes;
                        for(newProps = workInProgress.child; null !== newProps;)resetWorkInProgress(newProps, current), newProps = newProps.sibling;
                        push(suspenseStackCursor, suspenseStackCursor.current & 1 | 2);
                        return workInProgress.child;
                    }
                    current = current.sibling;
                }
                null !== oldProps.tail && now() > workInProgressRootRenderTargetTime && (workInProgress.flags |= 128, newProps = !0, cutOffTailIfNeeded(oldProps, !1), workInProgress.lanes = 4194304);
            }
            else {
                if (!newProps) if (current = findFirstSuspended(updatePayload), null !== current) {
                    if (workInProgress.flags |= 128, newProps = !0, current = current.updateQueue, workInProgress.updateQueue = current, scheduleRetryEffect(workInProgress, current), cutOffTailIfNeeded(oldProps, !0), null === oldProps.tail && "hidden" === oldProps.tailMode && !updatePayload.alternate) return bubbleProperties(workInProgress), null;
                } else 2 * now() - oldProps.renderingStartTime > workInProgressRootRenderTargetTime && 536870912 !== renderLanes && (workInProgress.flags |= 128, newProps = !0, cutOffTailIfNeeded(oldProps, !1), workInProgress.lanes = 4194304);
                oldProps.isBackwards ? (updatePayload.sibling = workInProgress.child, workInProgress.child = updatePayload) : (current = oldProps.last, null !== current ? current.sibling = updatePayload : workInProgress.child = updatePayload, oldProps.last = updatePayload);
            }
            if (null !== oldProps.tail) return workInProgress = oldProps.tail, oldProps.rendering = workInProgress, oldProps.tail = workInProgress.sibling, oldProps.renderingStartTime = now(), workInProgress.sibling = null, current = suspenseStackCursor.current, push(suspenseStackCursor, newProps ? current & 1 | 2 : current & 1), workInProgress;
            bubbleProperties(workInProgress);
            return null;
        case 22:
        case 23:
            return popSuspenseHandler(workInProgress), popHiddenContext(), newProps = null !== workInProgress.memoizedState, null !== current ? null !== current.memoizedState !== newProps && (workInProgress.flags |= 8192) : newProps && (workInProgress.flags |= 8192), newProps && 0 !== (workInProgress.mode & 1) ? 0 !== (renderLanes & 536870912) && 0 === (workInProgress.flags & 128) && (bubbleProperties(workInProgress), workInProgress.subtreeFlags & 6 && (workInProgress.flags |= 8192)) : bubbleProperties(workInProgress), newProps = workInProgress.updateQueue, null !== newProps && scheduleRetryEffect(workInProgress, newProps.retryQueue), newProps = null, null !== current && null !== current.memoizedState && null !== current.memoizedState.cachePool && (newProps = current.memoizedState.cachePool.pool), renderLanes = null, null !== workInProgress.memoizedState && null !== workInProgress.memoizedState.cachePool && (renderLanes = workInProgress.memoizedState.cachePool.pool), renderLanes !== newProps && (workInProgress.flags |= 2048), null !== current && pop(resumedCache), null;
        case 24:
            return newProps = null, null !== current && (newProps = current.memoizedState.cache), workInProgress.memoizedState.cache !== newProps && (workInProgress.flags |= 2048), popProvider(CacheContext), bubbleProperties(workInProgress), null;
        case 25:
            return null;
        case 29:
            return null;
    }
    throw Error("Unknown unit of work tag (" + workInProgress.tag + "). This error is likely caused by a bug in React. Please file an issue.");
}
function unwindWork(current, workInProgress) {
    switch(workInProgress.tag){
        case 1:
            return current = workInProgress.flags, current & 65536 ? (workInProgress.flags = current & -65537 | 128, workInProgress) : null;
        case 3:
            return popProvider(CacheContext), popHostContainer(), current = workInProgress.flags, 0 !== (current & 65536) && 0 === (current & 128) ? (workInProgress.flags = current & -65537 | 128, workInProgress) : null;
        case 26:
        case 27:
        case 5:
            return popHostContext(workInProgress), null;
        case 13:
            popSuspenseHandler(workInProgress);
            current = workInProgress.memoizedState;
            if (null !== current && null !== current.dehydrated && null === workInProgress.alternate) throw Error("Threw in newly mounted dehydrated component. This is likely a bug in React. Please file an issue.");
            current = workInProgress.flags;
            return current & 65536 ? (workInProgress.flags = current & -65537 | 128, workInProgress) : null;
        case 19:
            return pop(suspenseStackCursor), null;
        case 4:
            return popHostContainer(), null;
        case 10:
            return popProvider(workInProgress.type), null;
        case 22:
        case 23:
            return popSuspenseHandler(workInProgress), popHiddenContext(), null !== current && pop(resumedCache), current = workInProgress.flags, current & 65536 ? (workInProgress.flags = current & -65537 | 128, workInProgress) : null;
        case 24:
            return popProvider(CacheContext), null;
        case 25:
            return null;
        default:
            return null;
    }
}
function unwindInterruptedWork(current, interruptedWork) {
    switch(interruptedWork.tag){
        case 3:
            popProvider(CacheContext);
            popHostContainer();
            break;
        case 26:
        case 27:
        case 5:
            popHostContext(interruptedWork);
            break;
        case 4:
            popHostContainer();
            break;
        case 13:
            popSuspenseHandler(interruptedWork);
            break;
        case 19:
            pop(suspenseStackCursor);
            break;
        case 10:
            popProvider(interruptedWork.type);
            break;
        case 22:
        case 23:
            popSuspenseHandler(interruptedWork);
            popHiddenContext();
            null !== current && pop(resumedCache);
            break;
        case 24:
            popProvider(CacheContext);
    }
}
function commitHookEffectListMount(flags, finishedWork) {
    try {
        var updateQueue = finishedWork.updateQueue, lastEffect = null !== updateQueue ? updateQueue.lastEffect : null;
        if (null !== lastEffect) {
            var firstEffect = lastEffect.next;
            updateQueue = firstEffect;
            do {
                if ((updateQueue.tag & flags) === flags) {
                    lastEffect = void 0;
                    var create$114 = updateQueue.create, inst = updateQueue.inst;
                    lastEffect = create$114();
                    inst.destroy = lastEffect;
                }
                updateQueue = updateQueue.next;
            }while (updateQueue !== firstEffect);
        }
    } catch (error) {
        captureCommitPhaseError(finishedWork, finishedWork.return, error);
    }
}
function commitHookEffectListUnmount(flags, finishedWork, nearestMountedAncestor$jscomp$0) {
    try {
        var updateQueue = finishedWork.updateQueue, lastEffect = null !== updateQueue ? updateQueue.lastEffect : null;
        if (null !== lastEffect) {
            var firstEffect = lastEffect.next;
            updateQueue = firstEffect;
            do {
                if ((updateQueue.tag & flags) === flags) {
                    var inst = updateQueue.inst, destroy = inst.destroy;
                    if (void 0 !== destroy) {
                        inst.destroy = void 0;
                        lastEffect = finishedWork;
                        var nearestMountedAncestor = nearestMountedAncestor$jscomp$0;
                        try {
                            destroy();
                        } catch (error) {
                            captureCommitPhaseError(lastEffect, nearestMountedAncestor, error);
                        }
                    }
                }
                updateQueue = updateQueue.next;
            }while (updateQueue !== firstEffect);
        }
    } catch (error) {
        captureCommitPhaseError(finishedWork, finishedWork.return, error);
    }
}
function commitClassCallbacks(finishedWork) {
    var updateQueue = finishedWork.updateQueue;
    if (null !== updateQueue) {
        var instance = finishedWork.stateNode;
        try {
            commitCallbacks(updateQueue, instance);
        } catch (error) {
            captureCommitPhaseError(finishedWork, finishedWork.return, error);
        }
    }
}
function safelyCallComponentWillUnmount(current, nearestMountedAncestor, instance) {
    instance.props = resolveClassComponentProps(current.type, current.memoizedProps);
    instance.state = current.memoizedState;
    try {
        instance.componentWillUnmount();
    } catch (error) {
        captureCommitPhaseError(current, nearestMountedAncestor, error);
    }
}
function safelyAttachRef(current, nearestMountedAncestor) {
    try {
        var ref = current.ref;
        if (null !== ref) {
            var instance = current.stateNode;
            switch(current.tag){
                case 26:
                case 27:
                case 5:
                    var instanceToUse = getPublicInstance(instance);
                    break;
                default:
                    instanceToUse = instance;
            }
            "function" === typeof ref ? current.refCleanup = ref(instanceToUse) : ref.current = instanceToUse;
        }
    } catch (error) {
        captureCommitPhaseError(current, nearestMountedAncestor, error);
    }
}
function safelyDetachRef(current, nearestMountedAncestor) {
    var ref = current.ref, refCleanup = current.refCleanup;
    if (null !== ref) if ("function" === typeof refCleanup) try {
        refCleanup();
    } catch (error) {
        captureCommitPhaseError(current, nearestMountedAncestor, error);
    } finally{
        current.refCleanup = null, current = current.alternate, null != current && (current.refCleanup = null);
    }
    else if ("function" === typeof ref) try {
        ref(null);
    } catch (error$116) {
        captureCommitPhaseError(current, nearestMountedAncestor, error$116);
    }
    else ref.current = null;
}
function commitHostMount(finishedWork) {
    try {
        throw Error("The current renderer does not support mutation. This error is likely caused by a bug in React. Please file an issue.");
    } catch (error) {
        captureCommitPhaseError(finishedWork, finishedWork.return, error);
    }
}
var offscreenSubtreeIsHidden = !1, offscreenSubtreeWasHidden = !1, PossiblyWeakSet = "function" === typeof WeakSet ? WeakSet : Set, nextEffect = null, shouldFireAfterActiveInstanceBlur = !1;
function commitBeforeMutationEffects(root, firstChild) {
    for(nextEffect = firstChild; null !== nextEffect;)if (root = nextEffect, firstChild = root.child, 0 !== (root.subtreeFlags & 1028) && null !== firstChild) firstChild.return = root, nextEffect = firstChild;
    else for(; null !== nextEffect;){
        root = nextEffect;
        var current = root.alternate;
        firstChild = root.flags;
        switch(root.tag){
            case 0:
                break;
            case 11:
            case 15:
                break;
            case 1:
                if (0 !== (firstChild & 1024) && null !== current) {
                    firstChild = void 0;
                    var finishedWork = root, prevProps = current.memoizedProps;
                    current = current.memoizedState;
                    var instance = finishedWork.stateNode;
                    try {
                        var resolvedPrevProps = resolveClassComponentProps(finishedWork.type, prevProps, finishedWork.elementType === finishedWork.type);
                        firstChild = instance.getSnapshotBeforeUpdate(resolvedPrevProps, current);
                        instance.__reactInternalSnapshotBeforeUpdate = firstChild;
                    } catch (error) {
                        captureCommitPhaseError(finishedWork, finishedWork.return, error);
                    }
                }
                break;
            case 3:
                break;
            case 5:
            case 26:
            case 27:
            case 6:
            case 4:
            case 17:
                break;
            default:
                if (0 !== (firstChild & 1024)) throw Error("This unit of work tag should not have side-effects. This error is likely caused by a bug in React. Please file an issue.");
        }
        firstChild = root.sibling;
        if (null !== firstChild) {
            firstChild.return = root.return;
            nextEffect = firstChild;
            break;
        }
        nextEffect = root.return;
    }
    resolvedPrevProps = shouldFireAfterActiveInstanceBlur;
    shouldFireAfterActiveInstanceBlur = !1;
    return resolvedPrevProps;
}
function commitLayoutEffectOnFiber(finishedRoot, current, finishedWork) {
    var flags = finishedWork.flags;
    switch(finishedWork.tag){
        case 0:
        case 11:
        case 15:
            recursivelyTraverseLayoutEffects(finishedRoot, finishedWork);
            flags & 4 && commitHookEffectListMount(5, finishedWork);
            break;
        case 1:
            recursivelyTraverseLayoutEffects(finishedRoot, finishedWork);
            if (flags & 4) if (finishedRoot = finishedWork.stateNode, null === current) try {
                finishedRoot.componentDidMount();
            } catch (error) {
                captureCommitPhaseError(finishedWork, finishedWork.return, error);
            }
            else {
                var prevProps = resolveClassComponentProps(finishedWork.type, current.memoizedProps);
                current = current.memoizedState;
                try {
                    finishedRoot.componentDidUpdate(prevProps, current, finishedRoot.__reactInternalSnapshotBeforeUpdate);
                } catch (error$115) {
                    captureCommitPhaseError(finishedWork, finishedWork.return, error$115);
                }
            }
            flags & 64 && commitClassCallbacks(finishedWork);
            flags & 512 && safelyAttachRef(finishedWork, finishedWork.return);
            break;
        case 3:
            recursivelyTraverseLayoutEffects(finishedRoot, finishedWork);
            if (flags & 64 && (flags = finishedWork.updateQueue, null !== flags)) {
                finishedRoot = null;
                if (null !== finishedWork.child) switch(finishedWork.child.tag){
                    case 27:
                    case 5:
                        finishedRoot = getPublicInstance(finishedWork.child.stateNode);
                        break;
                    case 1:
                        finishedRoot = finishedWork.child.stateNode;
                }
                try {
                    commitCallbacks(flags, finishedRoot);
                } catch (error) {
                    captureCommitPhaseError(finishedWork, finishedWork.return, error);
                }
            }
            break;
        case 26:
        case 27:
        case 5:
            recursivelyTraverseLayoutEffects(finishedRoot, finishedWork);
            null === current && flags & 4 && commitHostMount(finishedWork);
            flags & 512 && safelyAttachRef(finishedWork, finishedWork.return);
            break;
        case 12:
            recursivelyTraverseLayoutEffects(finishedRoot, finishedWork);
            break;
        case 13:
            recursivelyTraverseLayoutEffects(finishedRoot, finishedWork);
            break;
        case 22:
            if (0 !== (finishedWork.mode & 1)) {
                if (prevProps = null !== finishedWork.memoizedState || offscreenSubtreeIsHidden, !prevProps) {
                    current = null !== current && null !== current.memoizedState || offscreenSubtreeWasHidden;
                    var prevOffscreenSubtreeIsHidden = offscreenSubtreeIsHidden, prevOffscreenSubtreeWasHidden = offscreenSubtreeWasHidden;
                    offscreenSubtreeIsHidden = prevProps;
                    (offscreenSubtreeWasHidden = current) && !prevOffscreenSubtreeWasHidden ? recursivelyTraverseReappearLayoutEffects(finishedRoot, finishedWork, 0 !== (finishedWork.subtreeFlags & 8772)) : recursivelyTraverseLayoutEffects(finishedRoot, finishedWork);
                    offscreenSubtreeIsHidden = prevOffscreenSubtreeIsHidden;
                    offscreenSubtreeWasHidden = prevOffscreenSubtreeWasHidden;
                }
            } else recursivelyTraverseLayoutEffects(finishedRoot, finishedWork);
            flags & 512 && ("manual" === finishedWork.memoizedProps.mode ? safelyAttachRef(finishedWork, finishedWork.return) : safelyDetachRef(finishedWork, finishedWork.return));
            break;
        default:
            recursivelyTraverseLayoutEffects(finishedRoot, finishedWork);
    }
}
function detachFiberAfterEffects(fiber) {
    var alternate = fiber.alternate;
    null !== alternate && (fiber.alternate = null, detachFiberAfterEffects(alternate));
    fiber.child = null;
    fiber.deletions = null;
    fiber.sibling = null;
    fiber.stateNode = null;
    fiber.return = null;
    fiber.dependencies = null;
    fiber.memoizedProps = null;
    fiber.memoizedState = null;
    fiber.pendingProps = null;
    fiber.stateNode = null;
    fiber.updateQueue = null;
}
function recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, parent) {
    for(parent = parent.child; null !== parent;)commitDeletionEffectsOnFiber(finishedRoot, nearestMountedAncestor, parent), parent = parent.sibling;
}
function commitDeletionEffectsOnFiber(finishedRoot, nearestMountedAncestor, deletedFiber) {
    if (injectedHook && "function" === typeof injectedHook.onCommitFiberUnmount) try {
        injectedHook.onCommitFiberUnmount(rendererID, deletedFiber);
    } catch (err) {}
    switch(deletedFiber.tag){
        case 26:
        case 27:
        case 5:
            offscreenSubtreeWasHidden || safelyDetachRef(deletedFiber, nearestMountedAncestor);
        case 6:
            recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);
            break;
        case 18:
            break;
        case 4:
            createChildNodeSet();
            recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);
            break;
        case 0:
        case 11:
        case 14:
        case 15:
            offscreenSubtreeWasHidden || commitHookEffectListUnmount(2, deletedFiber, nearestMountedAncestor);
            offscreenSubtreeWasHidden || commitHookEffectListUnmount(4, deletedFiber, nearestMountedAncestor);
            recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);
            break;
        case 1:
            if (!offscreenSubtreeWasHidden) {
                safelyDetachRef(deletedFiber, nearestMountedAncestor);
                var instance = deletedFiber.stateNode;
                "function" === typeof instance.componentWillUnmount && safelyCallComponentWillUnmount(deletedFiber, nearestMountedAncestor, instance);
            }
            recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);
            break;
        case 21:
            recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);
            break;
        case 22:
            offscreenSubtreeWasHidden || safelyDetachRef(deletedFiber, nearestMountedAncestor);
            deletedFiber.mode & 1 ? (offscreenSubtreeWasHidden = (instance = offscreenSubtreeWasHidden) || null !== deletedFiber.memoizedState, recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber), offscreenSubtreeWasHidden = instance) : recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);
            break;
        default:
            recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);
    }
}
function getRetryCache(finishedWork) {
    switch(finishedWork.tag){
        case 13:
        case 19:
            var retryCache = finishedWork.stateNode;
            null === retryCache && (retryCache = finishedWork.stateNode = new PossiblyWeakSet());
            return retryCache;
        case 22:
            return finishedWork = finishedWork.stateNode, retryCache = finishedWork._retryCache, null === retryCache && (retryCache = finishedWork._retryCache = new PossiblyWeakSet()), retryCache;
        default:
            throw Error("Unexpected Suspense handler tag (" + finishedWork.tag + "). This is a bug in React.");
    }
}
function attachSuspenseRetryListeners(finishedWork, wakeables) {
    var retryCache = getRetryCache(finishedWork);
    wakeables.forEach(function(wakeable) {
        var retry = resolveRetryWakeable.bind(null, finishedWork, wakeable);
        retryCache.has(wakeable) || (retryCache.add(wakeable), wakeable.then(retry, retry));
    });
}
function recursivelyTraverseMutationEffects(root, parentFiber) {
    var deletions = parentFiber.deletions;
    if (null !== deletions) for(var i = 0; i < deletions.length; i++){
        var childToDelete = deletions[i];
        commitDeletionEffectsOnFiber(root, parentFiber, childToDelete);
        var alternate = childToDelete.alternate;
        null !== alternate && (alternate.return = null);
        childToDelete.return = null;
    }
    if (parentFiber.subtreeFlags & 13878) for(parentFiber = parentFiber.child; null !== parentFiber;)commitMutationEffectsOnFiber(parentFiber, root), parentFiber = parentFiber.sibling;
}
function commitMutationEffectsOnFiber(finishedWork, root) {
    var current = finishedWork.alternate, flags = finishedWork.flags;
    switch(finishedWork.tag){
        case 0:
        case 11:
        case 14:
        case 15:
            recursivelyTraverseMutationEffects(root, finishedWork);
            commitReconciliationEffects(finishedWork);
            flags & 4 && (commitHookEffectListUnmount(3, finishedWork, finishedWork.return), commitHookEffectListMount(3, finishedWork), commitHookEffectListUnmount(5, finishedWork, finishedWork.return));
            break;
        case 1:
            recursivelyTraverseMutationEffects(root, finishedWork);
            commitReconciliationEffects(finishedWork);
            flags & 512 && (offscreenSubtreeWasHidden || null === current || safelyDetachRef(current, current.return));
            flags & 64 && offscreenSubtreeIsHidden && (finishedWork = finishedWork.updateQueue, null !== finishedWork && (flags = finishedWork.callbacks, null !== flags && (current = finishedWork.shared.hiddenCallbacks, finishedWork.shared.hiddenCallbacks = null === current ? flags : current.concat(flags))));
            break;
        case 26:
        case 27:
        case 5:
            recursivelyTraverseMutationEffects(root, finishedWork);
            commitReconciliationEffects(finishedWork);
            flags & 512 && (offscreenSubtreeWasHidden || null === current || safelyDetachRef(current, current.return));
            break;
        case 6:
            recursivelyTraverseMutationEffects(root, finishedWork);
            commitReconciliationEffects(finishedWork);
            break;
        case 3:
            recursivelyTraverseMutationEffects(root, finishedWork);
            commitReconciliationEffects(finishedWork);
            break;
        case 4:
            recursivelyTraverseMutationEffects(root, finishedWork);
            commitReconciliationEffects(finishedWork);
            break;
        case 12:
            recursivelyTraverseMutationEffects(root, finishedWork);
            commitReconciliationEffects(finishedWork);
            break;
        case 13:
            recursivelyTraverseMutationEffects(root, finishedWork);
            commitReconciliationEffects(finishedWork);
            finishedWork.child.flags & 8192 && (current = null !== current && null !== current.memoizedState, null === finishedWork.memoizedState || current || (globalMostRecentFallbackTime = now()));
            flags & 4 && (flags = finishedWork.updateQueue, null !== flags && (finishedWork.updateQueue = null, attachSuspenseRetryListeners(finishedWork, flags)));
            break;
        case 22:
            flags & 512 && (offscreenSubtreeWasHidden || null === current || safelyDetachRef(current, current.return));
            var isHidden = null !== finishedWork.memoizedState, wasHidden = null !== current && null !== current.memoizedState;
            if (finishedWork.mode & 1) {
                var prevOffscreenSubtreeIsHidden = offscreenSubtreeIsHidden, prevOffscreenSubtreeWasHidden = offscreenSubtreeWasHidden;
                offscreenSubtreeIsHidden = prevOffscreenSubtreeIsHidden || isHidden;
                offscreenSubtreeWasHidden = prevOffscreenSubtreeWasHidden || wasHidden;
                recursivelyTraverseMutationEffects(root, finishedWork);
                offscreenSubtreeWasHidden = prevOffscreenSubtreeWasHidden;
                offscreenSubtreeIsHidden = prevOffscreenSubtreeIsHidden;
            } else recursivelyTraverseMutationEffects(root, finishedWork);
            commitReconciliationEffects(finishedWork);
            root = finishedWork.stateNode;
            root._current = finishedWork;
            root._visibility &= -3;
            root._visibility |= root._pendingVisibility & 2;
            flags & 8192 && (root._visibility = isHidden ? root._visibility & -2 : root._visibility | 1, isHidden && (isHidden = offscreenSubtreeIsHidden || offscreenSubtreeWasHidden, null === current || wasHidden || isHidden || 0 !== (finishedWork.mode & 1) && recursivelyTraverseDisappearLayoutEffects(finishedWork)));
            flags & 4 && (flags = finishedWork.updateQueue, null !== flags && (current = flags.retryQueue, null !== current && (flags.retryQueue = null, attachSuspenseRetryListeners(finishedWork, current))));
            break;
        case 19:
            recursivelyTraverseMutationEffects(root, finishedWork);
            commitReconciliationEffects(finishedWork);
            flags & 4 && (flags = finishedWork.updateQueue, null !== flags && (finishedWork.updateQueue = null, attachSuspenseRetryListeners(finishedWork, flags)));
            break;
        case 21:
            break;
        default:
            recursivelyTraverseMutationEffects(root, finishedWork), commitReconciliationEffects(finishedWork);
    }
}
function commitReconciliationEffects(finishedWork) {
    var flags = finishedWork.flags;
    flags & 2 && (finishedWork.flags &= -3);
    flags & 4096 && (finishedWork.flags &= -4097);
}
function recursivelyTraverseLayoutEffects(root, parentFiber) {
    if (parentFiber.subtreeFlags & 8772) for(parentFiber = parentFiber.child; null !== parentFiber;)commitLayoutEffectOnFiber(root, parentFiber.alternate, parentFiber), parentFiber = parentFiber.sibling;
}
function recursivelyTraverseDisappearLayoutEffects(parentFiber) {
    for(parentFiber = parentFiber.child; null !== parentFiber;){
        var finishedWork = parentFiber;
        switch(finishedWork.tag){
            case 0:
            case 11:
            case 14:
            case 15:
                commitHookEffectListUnmount(4, finishedWork, finishedWork.return);
                recursivelyTraverseDisappearLayoutEffects(finishedWork);
                break;
            case 1:
                safelyDetachRef(finishedWork, finishedWork.return);
                var instance = finishedWork.stateNode;
                "function" === typeof instance.componentWillUnmount && safelyCallComponentWillUnmount(finishedWork, finishedWork.return, instance);
                recursivelyTraverseDisappearLayoutEffects(finishedWork);
                break;
            case 26:
            case 27:
            case 5:
                safelyDetachRef(finishedWork, finishedWork.return);
                recursivelyTraverseDisappearLayoutEffects(finishedWork);
                break;
            case 22:
                safelyDetachRef(finishedWork, finishedWork.return);
                null === finishedWork.memoizedState && recursivelyTraverseDisappearLayoutEffects(finishedWork);
                break;
            default:
                recursivelyTraverseDisappearLayoutEffects(finishedWork);
        }
        parentFiber = parentFiber.sibling;
    }
}
function recursivelyTraverseReappearLayoutEffects(finishedRoot$jscomp$0, parentFiber, includeWorkInProgressEffects) {
    includeWorkInProgressEffects = includeWorkInProgressEffects && 0 !== (parentFiber.subtreeFlags & 8772);
    for(parentFiber = parentFiber.child; null !== parentFiber;){
        var current = parentFiber.alternate, finishedRoot = finishedRoot$jscomp$0, finishedWork = parentFiber, flags = finishedWork.flags;
        switch(finishedWork.tag){
            case 0:
            case 11:
            case 15:
                recursivelyTraverseReappearLayoutEffects(finishedRoot, finishedWork, includeWorkInProgressEffects);
                commitHookEffectListMount(4, finishedWork);
                break;
            case 1:
                recursivelyTraverseReappearLayoutEffects(finishedRoot, finishedWork, includeWorkInProgressEffects);
                current = finishedWork;
                finishedRoot = current.stateNode;
                if ("function" === typeof finishedRoot.componentDidMount) try {
                    finishedRoot.componentDidMount();
                } catch (error) {
                    captureCommitPhaseError(current, current.return, error);
                }
                current = finishedWork;
                finishedRoot = current.updateQueue;
                if (null !== finishedRoot) {
                    var instance = current.stateNode;
                    try {
                        var hiddenCallbacks = finishedRoot.shared.hiddenCallbacks;
                        if (null !== hiddenCallbacks) for(finishedRoot.shared.hiddenCallbacks = null, finishedRoot = 0; finishedRoot < hiddenCallbacks.length; finishedRoot++)callCallback(hiddenCallbacks[finishedRoot], instance);
                    } catch (error) {
                        captureCommitPhaseError(current, current.return, error);
                    }
                }
                includeWorkInProgressEffects && flags & 64 && commitClassCallbacks(finishedWork);
                safelyAttachRef(finishedWork, finishedWork.return);
                break;
            case 26:
            case 27:
            case 5:
                recursivelyTraverseReappearLayoutEffects(finishedRoot, finishedWork, includeWorkInProgressEffects);
                includeWorkInProgressEffects && null === current && flags & 4 && commitHostMount(finishedWork);
                safelyAttachRef(finishedWork, finishedWork.return);
                break;
            case 12:
                recursivelyTraverseReappearLayoutEffects(finishedRoot, finishedWork, includeWorkInProgressEffects);
                break;
            case 13:
                recursivelyTraverseReappearLayoutEffects(finishedRoot, finishedWork, includeWorkInProgressEffects);
                break;
            case 22:
                null === finishedWork.memoizedState && recursivelyTraverseReappearLayoutEffects(finishedRoot, finishedWork, includeWorkInProgressEffects);
                safelyAttachRef(finishedWork, finishedWork.return);
                break;
            default:
                recursivelyTraverseReappearLayoutEffects(finishedRoot, finishedWork, includeWorkInProgressEffects);
        }
        parentFiber = parentFiber.sibling;
    }
}
function commitOffscreenPassiveMountEffects(current, finishedWork) {
    var previousCache = null;
    null !== current && null !== current.memoizedState && null !== current.memoizedState.cachePool && (previousCache = current.memoizedState.cachePool.pool);
    current = null;
    null !== finishedWork.memoizedState && null !== finishedWork.memoizedState.cachePool && (current = finishedWork.memoizedState.cachePool.pool);
    current !== previousCache && (null != current && current.refCount++, null != previousCache && releaseCache(previousCache));
}
function commitCachePassiveMountEffect(current, finishedWork) {
    current = null;
    null !== finishedWork.alternate && (current = finishedWork.alternate.memoizedState.cache);
    finishedWork = finishedWork.memoizedState.cache;
    finishedWork !== current && (finishedWork.refCount++, null != current && releaseCache(current));
}
function recursivelyTraversePassiveMountEffects(root, parentFiber, committedLanes, committedTransitions) {
    if (parentFiber.subtreeFlags & 10256) for(parentFiber = parentFiber.child; null !== parentFiber;)commitPassiveMountOnFiber(root, parentFiber, committedLanes, committedTransitions), parentFiber = parentFiber.sibling;
}
function commitPassiveMountOnFiber(finishedRoot, finishedWork, committedLanes, committedTransitions) {
    var flags = finishedWork.flags;
    switch(finishedWork.tag){
        case 0:
        case 11:
        case 15:
            recursivelyTraversePassiveMountEffects(finishedRoot, finishedWork, committedLanes, committedTransitions);
            flags & 2048 && commitHookEffectListMount(9, finishedWork);
            break;
        case 3:
            recursivelyTraversePassiveMountEffects(finishedRoot, finishedWork, committedLanes, committedTransitions);
            flags & 2048 && (finishedRoot = null, null !== finishedWork.alternate && (finishedRoot = finishedWork.alternate.memoizedState.cache), finishedWork = finishedWork.memoizedState.cache, finishedWork !== finishedRoot && (finishedWork.refCount++, null != finishedRoot && releaseCache(finishedRoot)));
            break;
        case 12:
            if (flags & 2048) {
                recursivelyTraversePassiveMountEffects(finishedRoot, finishedWork, committedLanes, committedTransitions);
                finishedRoot = finishedWork.stateNode;
                try {
                    var _finishedWork$memoize2 = finishedWork.memoizedProps, id = _finishedWork$memoize2.id, onPostCommit = _finishedWork$memoize2.onPostCommit;
                    "function" === typeof onPostCommit && onPostCommit(id, null === finishedWork.alternate ? "mount" : "update", finishedRoot.passiveEffectDuration, -0);
                } catch (error) {
                    captureCommitPhaseError(finishedWork, finishedWork.return, error);
                }
            } else recursivelyTraversePassiveMountEffects(finishedRoot, finishedWork, committedLanes, committedTransitions);
            break;
        case 23:
            break;
        case 22:
            _finishedWork$memoize2 = finishedWork.stateNode;
            null !== finishedWork.memoizedState ? _finishedWork$memoize2._visibility & 4 ? recursivelyTraversePassiveMountEffects(finishedRoot, finishedWork, committedLanes, committedTransitions) : finishedWork.mode & 1 ? recursivelyTraverseAtomicPassiveEffects(finishedRoot, finishedWork) : (_finishedWork$memoize2._visibility |= 4, recursivelyTraversePassiveMountEffects(finishedRoot, finishedWork, committedLanes, committedTransitions)) : _finishedWork$memoize2._visibility & 4 ? recursivelyTraversePassiveMountEffects(finishedRoot, finishedWork, committedLanes, committedTransitions) : (_finishedWork$memoize2._visibility |= 4, recursivelyTraverseReconnectPassiveEffects(finishedRoot, finishedWork, committedLanes, committedTransitions, 0 !== (finishedWork.subtreeFlags & 10256)));
            flags & 2048 && commitOffscreenPassiveMountEffects(finishedWork.alternate, finishedWork);
            break;
        case 24:
            recursivelyTraversePassiveMountEffects(finishedRoot, finishedWork, committedLanes, committedTransitions);
            flags & 2048 && commitCachePassiveMountEffect(finishedWork.alternate, finishedWork);
            break;
        default:
            recursivelyTraversePassiveMountEffects(finishedRoot, finishedWork, committedLanes, committedTransitions);
    }
}
function recursivelyTraverseReconnectPassiveEffects(finishedRoot$jscomp$0, parentFiber, committedLanes$jscomp$0, committedTransitions$jscomp$0, includeWorkInProgressEffects) {
    includeWorkInProgressEffects = includeWorkInProgressEffects && 0 !== (parentFiber.subtreeFlags & 10256);
    for(parentFiber = parentFiber.child; null !== parentFiber;){
        var finishedRoot = finishedRoot$jscomp$0, finishedWork = parentFiber, committedLanes = committedLanes$jscomp$0, committedTransitions = committedTransitions$jscomp$0, flags = finishedWork.flags;
        switch(finishedWork.tag){
            case 0:
            case 11:
            case 15:
                recursivelyTraverseReconnectPassiveEffects(finishedRoot, finishedWork, committedLanes, committedTransitions, includeWorkInProgressEffects);
                commitHookEffectListMount(8, finishedWork);
                break;
            case 23:
                break;
            case 22:
                var instance = finishedWork.stateNode;
                null !== finishedWork.memoizedState ? instance._visibility & 4 ? recursivelyTraverseReconnectPassiveEffects(finishedRoot, finishedWork, committedLanes, committedTransitions, includeWorkInProgressEffects) : finishedWork.mode & 1 ? recursivelyTraverseAtomicPassiveEffects(finishedRoot, finishedWork) : (instance._visibility |= 4, recursivelyTraverseReconnectPassiveEffects(finishedRoot, finishedWork, committedLanes, committedTransitions, includeWorkInProgressEffects)) : (instance._visibility |= 4, recursivelyTraverseReconnectPassiveEffects(finishedRoot, finishedWork, committedLanes, committedTransitions, includeWorkInProgressEffects));
                includeWorkInProgressEffects && flags & 2048 && commitOffscreenPassiveMountEffects(finishedWork.alternate, finishedWork);
                break;
            case 24:
                recursivelyTraverseReconnectPassiveEffects(finishedRoot, finishedWork, committedLanes, committedTransitions, includeWorkInProgressEffects);
                includeWorkInProgressEffects && flags & 2048 && commitCachePassiveMountEffect(finishedWork.alternate, finishedWork);
                break;
            default:
                recursivelyTraverseReconnectPassiveEffects(finishedRoot, finishedWork, committedLanes, committedTransitions, includeWorkInProgressEffects);
        }
        parentFiber = parentFiber.sibling;
    }
}
function recursivelyTraverseAtomicPassiveEffects(finishedRoot$jscomp$0, parentFiber) {
    if (parentFiber.subtreeFlags & 10256) for(parentFiber = parentFiber.child; null !== parentFiber;){
        var finishedRoot = finishedRoot$jscomp$0, finishedWork = parentFiber, flags = finishedWork.flags;
        switch(finishedWork.tag){
            case 22:
                recursivelyTraverseAtomicPassiveEffects(finishedRoot, finishedWork);
                flags & 2048 && commitOffscreenPassiveMountEffects(finishedWork.alternate, finishedWork);
                break;
            case 24:
                recursivelyTraverseAtomicPassiveEffects(finishedRoot, finishedWork);
                flags & 2048 && commitCachePassiveMountEffect(finishedWork.alternate, finishedWork);
                break;
            default:
                recursivelyTraverseAtomicPassiveEffects(finishedRoot, finishedWork);
        }
        parentFiber = parentFiber.sibling;
    }
}
var suspenseyCommitFlag = 8192;
function recursivelyAccumulateSuspenseyCommit(parentFiber) {
    if (parentFiber.subtreeFlags & suspenseyCommitFlag) for(parentFiber = parentFiber.child; null !== parentFiber;)accumulateSuspenseyCommitOnFiber(parentFiber), parentFiber = parentFiber.sibling;
}
function accumulateSuspenseyCommitOnFiber(fiber) {
    switch(fiber.tag){
        case 26:
            recursivelyAccumulateSuspenseyCommit(fiber);
            fiber.flags & suspenseyCommitFlag && null !== fiber.memoizedState && shim();
            break;
        case 5:
            recursivelyAccumulateSuspenseyCommit(fiber);
            break;
        case 3:
        case 4:
            recursivelyAccumulateSuspenseyCommit(fiber);
            break;
        case 22:
            if (null === fiber.memoizedState) {
                var current = fiber.alternate;
                null !== current && null !== current.memoizedState ? (current = suspenseyCommitFlag, suspenseyCommitFlag = 16777216, recursivelyAccumulateSuspenseyCommit(fiber), suspenseyCommitFlag = current) : recursivelyAccumulateSuspenseyCommit(fiber);
            }
            break;
        default:
            recursivelyAccumulateSuspenseyCommit(fiber);
    }
}
function detachAlternateSiblings(parentFiber) {
    var previousFiber = parentFiber.alternate;
    if (null !== previousFiber && (parentFiber = previousFiber.child, null !== parentFiber)) {
        previousFiber.child = null;
        do previousFiber = parentFiber.sibling, parentFiber.sibling = null, parentFiber = previousFiber;
        while (null !== parentFiber);
    }
}
function recursivelyTraversePassiveUnmountEffects(parentFiber) {
    var deletions = parentFiber.deletions;
    if (0 !== (parentFiber.flags & 16)) {
        if (null !== deletions) for(var i = 0; i < deletions.length; i++){
            var childToDelete = deletions[i];
            nextEffect = childToDelete;
            commitPassiveUnmountEffectsInsideOfDeletedTree_begin(childToDelete, parentFiber);
        }
        detachAlternateSiblings(parentFiber);
    }
    if (parentFiber.subtreeFlags & 10256) for(parentFiber = parentFiber.child; null !== parentFiber;)commitPassiveUnmountOnFiber(parentFiber), parentFiber = parentFiber.sibling;
}
function commitPassiveUnmountOnFiber(finishedWork) {
    switch(finishedWork.tag){
        case 0:
        case 11:
        case 15:
            recursivelyTraversePassiveUnmountEffects(finishedWork);
            finishedWork.flags & 2048 && commitHookEffectListUnmount(9, finishedWork, finishedWork.return);
            break;
        case 3:
            recursivelyTraversePassiveUnmountEffects(finishedWork);
            break;
        case 12:
            recursivelyTraversePassiveUnmountEffects(finishedWork);
            break;
        case 22:
            var instance = finishedWork.stateNode;
            null !== finishedWork.memoizedState && instance._visibility & 4 && (null === finishedWork.return || 13 !== finishedWork.return.tag) ? (instance._visibility &= -5, recursivelyTraverseDisconnectPassiveEffects(finishedWork)) : recursivelyTraversePassiveUnmountEffects(finishedWork);
            break;
        default:
            recursivelyTraversePassiveUnmountEffects(finishedWork);
    }
}
function recursivelyTraverseDisconnectPassiveEffects(parentFiber) {
    var deletions = parentFiber.deletions;
    if (0 !== (parentFiber.flags & 16)) {
        if (null !== deletions) for(var i = 0; i < deletions.length; i++){
            var childToDelete = deletions[i];
            nextEffect = childToDelete;
            commitPassiveUnmountEffectsInsideOfDeletedTree_begin(childToDelete, parentFiber);
        }
        detachAlternateSiblings(parentFiber);
    }
    for(parentFiber = parentFiber.child; null !== parentFiber;){
        deletions = parentFiber;
        switch(deletions.tag){
            case 0:
            case 11:
            case 15:
                commitHookEffectListUnmount(8, deletions, deletions.return);
                recursivelyTraverseDisconnectPassiveEffects(deletions);
                break;
            case 22:
                i = deletions.stateNode;
                i._visibility & 4 && (i._visibility &= -5, recursivelyTraverseDisconnectPassiveEffects(deletions));
                break;
            default:
                recursivelyTraverseDisconnectPassiveEffects(deletions);
        }
        parentFiber = parentFiber.sibling;
    }
}
function commitPassiveUnmountEffectsInsideOfDeletedTree_begin(deletedSubtreeRoot, nearestMountedAncestor) {
    for(; null !== nextEffect;){
        var fiber = nextEffect;
        switch(fiber.tag){
            case 0:
            case 11:
            case 15:
                commitHookEffectListUnmount(8, fiber, nearestMountedAncestor);
                break;
            case 23:
            case 22:
                if (null !== fiber.memoizedState && null !== fiber.memoizedState.cachePool) {
                    var cache = fiber.memoizedState.cachePool.pool;
                    null != cache && cache.refCount++;
                }
                break;
            case 24:
                releaseCache(fiber.memoizedState.cache);
        }
        cache = fiber.child;
        if (null !== cache) cache.return = fiber, nextEffect = cache;
        else a: for(fiber = deletedSubtreeRoot; null !== nextEffect;){
            cache = nextEffect;
            var sibling = cache.sibling, returnFiber = cache.return;
            detachFiberAfterEffects(cache);
            if (cache === fiber) {
                nextEffect = null;
                break a;
            }
            if (null !== sibling) {
                sibling.return = returnFiber;
                nextEffect = sibling;
                break a;
            }
            nextEffect = returnFiber;
        }
    }
}
var DefaultAsyncDispatcher = {
    getCacheForType: function(resourceType) {
        var cache = readContext(CacheContext), cacheForType = cache.data.get(resourceType);
        void 0 === cacheForType && (cacheForType = resourceType(), cache.data.set(resourceType, cacheForType));
        return cacheForType;
    }
}, PossiblyWeakMap = "function" === typeof WeakMap ? WeakMap : Map, executionContext = 0, workInProgressRoot = null, workInProgress = null, workInProgressRootRenderLanes = 0, workInProgressSuspendedReason = 0, workInProgressThrownValue = null, workInProgressRootDidSkipSuspendedSiblings = !1, workInProgressRootIsPrerendering = !1, workInProgressRootDidAttachPingListener = !1, entangledRenderLanes = 0, workInProgressRootExitStatus = 0, workInProgressRootSkippedLanes = 0, workInProgressRootInterleavedUpdatedLanes = 0, workInProgressRootPingedLanes = 0, workInProgressDeferredLane = 0, workInProgressSuspendedRetryLanes = 0, workInProgressRootConcurrentErrors = null, workInProgressRootRecoverableErrors = null, workInProgressRootDidIncludeRecursiveRenderUpdate = !1, globalMostRecentFallbackTime = 0, workInProgressRootRenderTargetTime = Infinity, workInProgressTransitions = null, legacyErrorBoundariesThatAlreadyFailed = null, rootDoesHavePassiveEffects = !1, rootWithPendingPassiveEffects = null, pendingPassiveEffectsLanes = 0, pendingPassiveEffectsRemainingLanes = 0, pendingPassiveTransitions = null, nestedUpdateCount = 0, rootWithNestedUpdates = null;
function requestUpdateLane(fiber) {
    return 0 === (fiber.mode & 1) ? 2 : 0 !== (executionContext & 2) && 0 !== workInProgressRootRenderLanes ? workInProgressRootRenderLanes & -workInProgressRootRenderLanes : null !== ReactSharedInternals.T ? (fiber = currentEntangledLane, 0 !== fiber ? fiber : requestTransitionLane()) : resolveUpdatePriority();
}
function requestDeferredLane() {
    0 === workInProgressDeferredLane && (workInProgressDeferredLane = 0 !== (workInProgressRootRenderLanes & 536870912) ? 536870912 : claimNextTransitionLane());
    var suspenseHandler = suspenseHandlerStackCursor.current;
    null !== suspenseHandler && (suspenseHandler.flags |= 32);
    return workInProgressDeferredLane;
}
function scheduleUpdateOnFiber(root, fiber, lane) {
    if (root === workInProgressRoot && 2 === workInProgressSuspendedReason || null !== root.cancelPendingCommit) prepareFreshStack(root, 0), markRootSuspended(root, workInProgressRootRenderLanes, workInProgressDeferredLane, !1);
    markRootUpdated$1(root, lane);
    if (0 === (executionContext & 2) || root !== workInProgressRoot) root === workInProgressRoot && (0 === (executionContext & 2) && (workInProgressRootInterleavedUpdatedLanes |= lane), 4 === workInProgressRootExitStatus && markRootSuspended(root, workInProgressRootRenderLanes, workInProgressDeferredLane, !1)), ensureRootIsScheduled(root), 2 === lane && 0 === executionContext && 0 === (fiber.mode & 1) && (workInProgressRootRenderTargetTime = now() + 500, flushSyncWorkAcrossRoots_impl(0, !0));
}
function performWorkOnRoot(root$jscomp$0, lanes, forceSync) {
    if (0 !== (executionContext & 6)) throw Error("Should not already be working.");
    var shouldTimeSlice = !forceSync && 0 === (lanes & 60) && 0 === (lanes & root$jscomp$0.expiredLanes) || checkIfRootIsPrerendering(root$jscomp$0, lanes), exitStatus = shouldTimeSlice ? renderRootConcurrent(root$jscomp$0, lanes) : renderRootSync(root$jscomp$0, lanes, !0), renderWasConcurrent = shouldTimeSlice;
    do {
        if (0 === exitStatus) {
            workInProgressRootIsPrerendering && !shouldTimeSlice && markRootSuspended(root$jscomp$0, lanes, 0, !1);
            break;
        } else if (6 === exitStatus) markRootSuspended(root$jscomp$0, lanes, 0, !workInProgressRootDidSkipSuspendedSiblings);
        else {
            forceSync = root$jscomp$0.current.alternate;
            if (renderWasConcurrent && !isRenderConsistentWithExternalStores(forceSync)) {
                exitStatus = renderRootSync(root$jscomp$0, lanes, !1);
                renderWasConcurrent = !1;
                continue;
            }
            if (0 !== root$jscomp$0.tag && 2 === exitStatus) {
                renderWasConcurrent = lanes;
                if (root$jscomp$0.errorRecoveryDisabledLanes & renderWasConcurrent) var JSCompiler_inline_result = 0;
                else JSCompiler_inline_result = root$jscomp$0.pendingLanes & -536870913, JSCompiler_inline_result = 0 !== JSCompiler_inline_result ? JSCompiler_inline_result : JSCompiler_inline_result & 536870912 ? 536870912 : 0;
                if (0 !== JSCompiler_inline_result) {
                    lanes = JSCompiler_inline_result;
                    a: {
                        var root = root$jscomp$0;
                        exitStatus = workInProgressRootConcurrentErrors;
                        JSCompiler_inline_result = renderRootSync(root, JSCompiler_inline_result, !1);
                        if (2 !== JSCompiler_inline_result) {
                            if (workInProgressRootDidAttachPingListener) {
                                root.errorRecoveryDisabledLanes |= renderWasConcurrent;
                                workInProgressRootInterleavedUpdatedLanes |= renderWasConcurrent;
                                exitStatus = 4;
                                break a;
                            }
                            renderWasConcurrent = workInProgressRootRecoverableErrors;
                            workInProgressRootRecoverableErrors = exitStatus;
                            null !== renderWasConcurrent && queueRecoverableErrors(renderWasConcurrent);
                        }
                        exitStatus = JSCompiler_inline_result;
                    }
                    renderWasConcurrent = !1;
                    if (2 !== exitStatus) continue;
                }
            }
            if (1 === exitStatus) {
                prepareFreshStack(root$jscomp$0, 0);
                markRootSuspended(root$jscomp$0, lanes, 0, !0);
                break;
            }
            a: {
                shouldTimeSlice = root$jscomp$0;
                renderWasConcurrent = exitStatus;
                switch(renderWasConcurrent){
                    case 0:
                    case 1:
                        throw Error("Root did not complete. This is a bug in React.");
                    case 4:
                        if ((lanes & 4194176) === lanes) {
                            markRootSuspended(shouldTimeSlice, lanes, workInProgressDeferredLane, !workInProgressRootDidSkipSuspendedSiblings);
                            break a;
                        }
                        break;
                    case 2:
                        workInProgressRootRecoverableErrors = null;
                        break;
                    case 3:
                    case 5:
                        break;
                    default:
                        throw Error("Unknown root exit status.");
                }
                shouldTimeSlice.finishedWork = forceSync;
                shouldTimeSlice.finishedLanes = lanes;
                if ((lanes & 62914560) === lanes && 3 === renderWasConcurrent && (renderWasConcurrent = globalMostRecentFallbackTime + 300 - now(), 10 < renderWasConcurrent)) {
                    markRootSuspended(shouldTimeSlice, lanes, workInProgressDeferredLane, !workInProgressRootDidSkipSuspendedSiblings);
                    if (0 !== getNextLanes(shouldTimeSlice, 0)) break a;
                    shouldTimeSlice.timeoutHandle = scheduleTimeout(commitRootWhenReady.bind(null, shouldTimeSlice, forceSync, workInProgressRootRecoverableErrors, workInProgressTransitions, workInProgressRootDidIncludeRecursiveRenderUpdate, lanes, workInProgressDeferredLane, workInProgressRootInterleavedUpdatedLanes, workInProgressSuspendedRetryLanes, workInProgressRootDidSkipSuspendedSiblings, 2, -0, 0), renderWasConcurrent);
                    break a;
                }
                commitRootWhenReady(shouldTimeSlice, forceSync, workInProgressRootRecoverableErrors, workInProgressTransitions, workInProgressRootDidIncludeRecursiveRenderUpdate, lanes, workInProgressDeferredLane, workInProgressRootInterleavedUpdatedLanes, workInProgressSuspendedRetryLanes, workInProgressRootDidSkipSuspendedSiblings, 0, -0, 0);
            }
        }
        break;
    }while (1);
    ensureRootIsScheduled(root$jscomp$0);
}
function queueRecoverableErrors(errors) {
    null === workInProgressRootRecoverableErrors ? workInProgressRootRecoverableErrors = errors : workInProgressRootRecoverableErrors.push.apply(workInProgressRootRecoverableErrors, errors);
}
function commitRootWhenReady(root, finishedWork, recoverableErrors, transitions, didIncludeRenderPhaseUpdate, lanes, spawnedLane, updatedLanes, suspendedRetryLanes, didSkipSuspendedSiblings, suspendedCommitReason, completedRenderStartTime, completedRenderEndTime) {
    lanes = finishedWork.subtreeFlags;
    (lanes & 8192 || 16785408 === (lanes & 16785408)) && accumulateSuspenseyCommitOnFiber(finishedWork);
    finishedWork = ReactSharedInternals.T;
    lanes = currentUpdatePriority;
    try {
        currentUpdatePriority = 2, ReactSharedInternals.T = null, commitRootImpl(root, recoverableErrors, transitions, didIncludeRenderPhaseUpdate, lanes, spawnedLane, updatedLanes, suspendedRetryLanes, suspendedCommitReason, completedRenderStartTime, completedRenderEndTime);
    } finally{
        ReactSharedInternals.T = finishedWork, currentUpdatePriority = lanes;
    }
}
function isRenderConsistentWithExternalStores(finishedWork) {
    for(var node = finishedWork;;){
        var tag = node.tag;
        if ((0 === tag || 11 === tag || 15 === tag) && node.flags & 16384 && (tag = node.updateQueue, null !== tag && (tag = tag.stores, null !== tag))) for(var i = 0; i < tag.length; i++){
            var check = tag[i], getSnapshot = check.getSnapshot;
            check = check.value;
            try {
                if (!objectIs(getSnapshot(), check)) return !1;
            } catch (error) {
                return !1;
            }
        }
        tag = node.child;
        if (node.subtreeFlags & 16384 && null !== tag) tag.return = node, node = tag;
        else {
            if (node === finishedWork) break;
            for(; null === node.sibling;){
                if (null === node.return || node.return === finishedWork) return !0;
                node = node.return;
            }
            node.sibling.return = node.return;
            node = node.sibling;
        }
    }
    return !0;
}
function markRootSuspended(root, suspendedLanes, spawnedLane, didAttemptEntireTree) {
    suspendedLanes &= ~workInProgressRootPingedLanes;
    suspendedLanes &= ~workInProgressRootInterleavedUpdatedLanes;
    root.suspendedLanes |= suspendedLanes;
    root.pingedLanes &= ~suspendedLanes;
    didAttemptEntireTree && (root.warmLanes |= suspendedLanes);
    didAttemptEntireTree = root.expirationTimes;
    for(var lanes = suspendedLanes; 0 < lanes;){
        var index$9 = 31 - clz32(lanes), lane = 1 << index$9;
        didAttemptEntireTree[index$9] = -1;
        lanes &= ~lane;
    }
    0 !== spawnedLane && markSpawnedDeferredLane(root, spawnedLane, suspendedLanes);
}
function resetWorkInProgressStack() {
    if (null !== workInProgress) {
        if (0 === workInProgressSuspendedReason) var interruptedWork = workInProgress.return;
        else interruptedWork = workInProgress, lastContextDependency = currentlyRenderingFiber = null, resetHooksOnUnwind(interruptedWork), thenableState$1 = null, thenableIndexCounter$1 = 0, interruptedWork = workInProgress;
        for(; null !== interruptedWork;)unwindInterruptedWork(interruptedWork.alternate, interruptedWork), interruptedWork = interruptedWork.return;
        workInProgress = null;
    }
}
function prepareFreshStack(root, lanes) {
    root.finishedWork = null;
    root.finishedLanes = 0;
    var timeoutHandle = root.timeoutHandle;
    -1 !== timeoutHandle && (root.timeoutHandle = -1, cancelTimeout(timeoutHandle));
    timeoutHandle = root.cancelPendingCommit;
    null !== timeoutHandle && (root.cancelPendingCommit = null, timeoutHandle());
    resetWorkInProgressStack();
    workInProgressRoot = root;
    workInProgress = timeoutHandle = createWorkInProgress(root.current, null);
    workInProgressRootRenderLanes = lanes;
    workInProgressSuspendedReason = 0;
    workInProgressThrownValue = null;
    workInProgressRootDidSkipSuspendedSiblings = !1;
    workInProgressRootIsPrerendering = checkIfRootIsPrerendering(root, lanes);
    workInProgressRootDidAttachPingListener = !1;
    workInProgressSuspendedRetryLanes = workInProgressDeferredLane = workInProgressRootPingedLanes = workInProgressRootInterleavedUpdatedLanes = workInProgressRootSkippedLanes = workInProgressRootExitStatus = 0;
    workInProgressRootRecoverableErrors = workInProgressRootConcurrentErrors = null;
    workInProgressRootDidIncludeRecursiveRenderUpdate = !1;
    0 !== (lanes & 8) && (lanes |= lanes & 32);
    var allEntangledLanes = root.entangledLanes;
    if (0 !== allEntangledLanes) for(root = root.entanglements, allEntangledLanes &= lanes; 0 < allEntangledLanes;){
        var index$7 = 31 - clz32(allEntangledLanes), lane = 1 << index$7;
        lanes |= root[index$7];
        allEntangledLanes &= ~lane;
    }
    entangledRenderLanes = lanes;
    finishQueueingConcurrentUpdates();
    return timeoutHandle;
}
function handleThrow(root, thrownValue) {
    currentlyRenderingFiber$1 = null;
    ReactSharedInternals.H = ContextOnlyDispatcher;
    thrownValue === SuspenseException ? (thrownValue = getSuspendedThenable(), workInProgressSuspendedReason = 3) : thrownValue === SuspenseyCommitException ? (thrownValue = getSuspendedThenable(), workInProgressSuspendedReason = 4) : workInProgressSuspendedReason = thrownValue === SelectiveHydrationException ? 8 : null !== thrownValue && "object" === typeof thrownValue && "function" === typeof thrownValue.then ? 6 : 1;
    workInProgressThrownValue = thrownValue;
    null === workInProgress && (workInProgressRootExitStatus = 1, logUncaughtError(root, createCapturedValueAtFiber(thrownValue, root.current)));
}
function pushDispatcher() {
    var prevDispatcher = ReactSharedInternals.H;
    ReactSharedInternals.H = ContextOnlyDispatcher;
    return null === prevDispatcher ? ContextOnlyDispatcher : prevDispatcher;
}
function pushAsyncDispatcher() {
    var prevAsyncDispatcher = ReactSharedInternals.A;
    ReactSharedInternals.A = DefaultAsyncDispatcher;
    return prevAsyncDispatcher;
}
function renderDidSuspendDelayIfPossible() {
    workInProgressRootExitStatus = 4;
    workInProgressRootDidSkipSuspendedSiblings || (workInProgressRootRenderLanes & 4194176) !== workInProgressRootRenderLanes && null !== suspenseHandlerStackCursor.current || (workInProgressRootIsPrerendering = !0);
    0 === (workInProgressRootSkippedLanes & 134217727) && 0 === (workInProgressRootInterleavedUpdatedLanes & 134217727) || null === workInProgressRoot || markRootSuspended(workInProgressRoot, workInProgressRootRenderLanes, workInProgressDeferredLane, !1);
}
function renderRootSync(root, lanes, shouldYieldForPrerendering) {
    var prevExecutionContext = executionContext;
    executionContext |= 2;
    var prevDispatcher = pushDispatcher(), prevAsyncDispatcher = pushAsyncDispatcher();
    if (workInProgressRoot !== root || workInProgressRootRenderLanes !== lanes) workInProgressTransitions = null, prepareFreshStack(root, lanes);
    lanes = !1;
    var exitStatus = workInProgressRootExitStatus;
    a: do try {
        if (0 !== workInProgressSuspendedReason && null !== workInProgress) {
            var unitOfWork = workInProgress, thrownValue = workInProgressThrownValue;
            switch(workInProgressSuspendedReason){
                case 8:
                    resetWorkInProgressStack();
                    exitStatus = 6;
                    break a;
                case 3:
                case 2:
                case 6:
                    null === suspenseHandlerStackCursor.current && (lanes = !0);
                    var reason = workInProgressSuspendedReason;
                    workInProgressSuspendedReason = 0;
                    workInProgressThrownValue = null;
                    throwAndUnwindWorkLoop(root, unitOfWork, thrownValue, reason);
                    if (shouldYieldForPrerendering && workInProgressRootIsPrerendering) {
                        exitStatus = 0;
                        break a;
                    }
                    break;
                default:
                    reason = workInProgressSuspendedReason, workInProgressSuspendedReason = 0, workInProgressThrownValue = null, throwAndUnwindWorkLoop(root, unitOfWork, thrownValue, reason);
            }
        }
        workLoopSync();
        exitStatus = workInProgressRootExitStatus;
        break;
    } catch (thrownValue$129) {
        handleThrow(root, thrownValue$129);
    }
    while (1);
    lanes && root.shellSuspendCounter++;
    lastContextDependency = currentlyRenderingFiber = null;
    executionContext = prevExecutionContext;
    ReactSharedInternals.H = prevDispatcher;
    ReactSharedInternals.A = prevAsyncDispatcher;
    null === workInProgress && (workInProgressRoot = null, workInProgressRootRenderLanes = 0, finishQueueingConcurrentUpdates());
    return exitStatus;
}
function workLoopSync() {
    for(; null !== workInProgress;)performUnitOfWork(workInProgress);
}
function renderRootConcurrent(root, lanes) {
    var prevExecutionContext = executionContext;
    executionContext |= 2;
    var prevDispatcher = pushDispatcher(), prevAsyncDispatcher = pushAsyncDispatcher();
    workInProgressRoot !== root || workInProgressRootRenderLanes !== lanes ? (workInProgressTransitions = null, workInProgressRootRenderTargetTime = now() + 500, prepareFreshStack(root, lanes)) : workInProgressRootIsPrerendering = checkIfRootIsPrerendering(root, lanes);
    a: do try {
        if (0 !== workInProgressSuspendedReason && null !== workInProgress) {
            lanes = workInProgress;
            var thrownValue = workInProgressThrownValue;
            b: switch(workInProgressSuspendedReason){
                case 1:
                    workInProgressSuspendedReason = 0;
                    workInProgressThrownValue = null;
                    throwAndUnwindWorkLoop(root, lanes, thrownValue, 1);
                    break;
                case 2:
                    if (isThenableResolved(thrownValue)) {
                        workInProgressSuspendedReason = 0;
                        workInProgressThrownValue = null;
                        replaySuspendedUnitOfWork(lanes);
                        break;
                    }
                    lanes = function() {
                        2 === workInProgressSuspendedReason && workInProgressRoot === root && (workInProgressSuspendedReason = 7);
                        ensureRootIsScheduled(root);
                    };
                    thrownValue.then(lanes, lanes);
                    break a;
                case 3:
                    workInProgressSuspendedReason = 7;
                    break a;
                case 4:
                    workInProgressSuspendedReason = 5;
                    break a;
                case 7:
                    isThenableResolved(thrownValue) ? (workInProgressSuspendedReason = 0, workInProgressThrownValue = null, replaySuspendedUnitOfWork(lanes)) : (workInProgressSuspendedReason = 0, workInProgressThrownValue = null, throwAndUnwindWorkLoop(root, lanes, thrownValue, 7));
                    break;
                case 5:
                    var resource = null;
                    switch(workInProgress.tag){
                        case 26:
                            resource = workInProgress.memoizedState;
                        case 5:
                        case 27:
                            var hostFiber = workInProgress;
                            if (resource ? shim(resource) : 1) {
                                workInProgressSuspendedReason = 0;
                                workInProgressThrownValue = null;
                                var sibling = hostFiber.sibling;
                                if (null !== sibling) workInProgress = sibling;
                                else {
                                    var returnFiber = hostFiber.return;
                                    null !== returnFiber ? (workInProgress = returnFiber, completeUnitOfWork(returnFiber)) : workInProgress = null;
                                }
                                break b;
                            }
                    }
                    workInProgressSuspendedReason = 0;
                    workInProgressThrownValue = null;
                    throwAndUnwindWorkLoop(root, lanes, thrownValue, 5);
                    break;
                case 6:
                    workInProgressSuspendedReason = 0;
                    workInProgressThrownValue = null;
                    throwAndUnwindWorkLoop(root, lanes, thrownValue, 6);
                    break;
                case 8:
                    resetWorkInProgressStack();
                    workInProgressRootExitStatus = 6;
                    break a;
                default:
                    throw Error("Unexpected SuspendedReason. This is a bug in React.");
            }
        }
        workLoopConcurrent();
        break;
    } catch (thrownValue$131) {
        handleThrow(root, thrownValue$131);
    }
    while (1);
    lastContextDependency = currentlyRenderingFiber = null;
    ReactSharedInternals.H = prevDispatcher;
    ReactSharedInternals.A = prevAsyncDispatcher;
    executionContext = prevExecutionContext;
    if (null !== workInProgress) return 0;
    workInProgressRoot = null;
    workInProgressRootRenderLanes = 0;
    finishQueueingConcurrentUpdates();
    return workInProgressRootExitStatus;
}
function workLoopConcurrent() {
    for(; null !== workInProgress && !shouldYield();)performUnitOfWork(workInProgress);
}
function performUnitOfWork(unitOfWork) {
    var next = beginWork(unitOfWork.alternate, unitOfWork, entangledRenderLanes);
    unitOfWork.memoizedProps = unitOfWork.pendingProps;
    null === next ? completeUnitOfWork(unitOfWork) : workInProgress = next;
}
function replaySuspendedUnitOfWork(unitOfWork) {
    var next = unitOfWork;
    var current = next.alternate;
    switch(next.tag){
        case 15:
        case 0:
            next = replayFunctionComponent(current, next, next.pendingProps, next.type, void 0, workInProgressRootRenderLanes);
            break;
        case 11:
            next = replayFunctionComponent(current, next, next.pendingProps, next.type.render, next.ref, workInProgressRootRenderLanes);
            break;
        case 5:
            resetHooksOnUnwind(next);
        default:
            unwindInterruptedWork(current, next), next = workInProgress = resetWorkInProgress(next, entangledRenderLanes), next = beginWork(current, next, entangledRenderLanes);
    }
    unitOfWork.memoizedProps = unitOfWork.pendingProps;
    null === next ? completeUnitOfWork(unitOfWork) : workInProgress = next;
}
function throwAndUnwindWorkLoop(root, unitOfWork, thrownValue, suspendedReason) {
    lastContextDependency = currentlyRenderingFiber = null;
    resetHooksOnUnwind(unitOfWork);
    thenableState$1 = null;
    thenableIndexCounter$1 = 0;
    var returnFiber = unitOfWork.return;
    try {
        if (throwException(root, returnFiber, unitOfWork, thrownValue, workInProgressRootRenderLanes)) {
            workInProgressRootExitStatus = 1;
            logUncaughtError(root, createCapturedValueAtFiber(thrownValue, root.current));
            workInProgress = null;
            return;
        }
    } catch (error) {
        if (null !== returnFiber) throw workInProgress = returnFiber, error;
        workInProgressRootExitStatus = 1;
        logUncaughtError(root, createCapturedValueAtFiber(thrownValue, root.current));
        workInProgress = null;
        return;
    }
    if (unitOfWork.flags & 32768) {
        if (1 === suspendedReason) root = !0;
        else if (workInProgressRootIsPrerendering || 0 !== (workInProgressRootRenderLanes & 536870912)) root = !1;
        else if (workInProgressRootDidSkipSuspendedSiblings = root = !0, 2 === suspendedReason || 3 === suspendedReason || 6 === suspendedReason) suspendedReason = suspenseHandlerStackCursor.current, null !== suspendedReason && 13 === suspendedReason.tag && (suspendedReason.flags |= 16384);
        unwindUnitOfWork(unitOfWork, root);
    } else completeUnitOfWork(unitOfWork);
}
function completeUnitOfWork(unitOfWork) {
    var completedWork = unitOfWork;
    do {
        if (0 !== (completedWork.flags & 32768)) {
            unwindUnitOfWork(completedWork, workInProgressRootDidSkipSuspendedSiblings);
            return;
        }
        unitOfWork = completedWork.return;
        var next = completeWork(completedWork.alternate, completedWork, entangledRenderLanes);
        if (null !== next) {
            workInProgress = next;
            return;
        }
        completedWork = completedWork.sibling;
        if (null !== completedWork) {
            workInProgress = completedWork;
            return;
        }
        workInProgress = completedWork = unitOfWork;
    }while (null !== completedWork);
    0 === workInProgressRootExitStatus && (workInProgressRootExitStatus = 5);
}
function unwindUnitOfWork(unitOfWork, skipSiblings) {
    do {
        var next = unwindWork(unitOfWork.alternate, unitOfWork);
        if (null !== next) {
            next.flags &= 32767;
            workInProgress = next;
            return;
        }
        next = unitOfWork.return;
        null !== next && (next.flags |= 32768, next.subtreeFlags = 0, next.deletions = null);
        if (!skipSiblings && (unitOfWork = unitOfWork.sibling, null !== unitOfWork)) {
            workInProgress = unitOfWork;
            return;
        }
        workInProgress = unitOfWork = next;
    }while (null !== unitOfWork);
    workInProgressRootExitStatus = 6;
    workInProgress = null;
}
function commitRootImpl(root, recoverableErrors, transitions, didIncludeRenderPhaseUpdate, renderPriorityLevel, spawnedLane, updatedLanes, suspendedRetryLanes) {
    do flushPassiveEffects();
    while (null !== rootWithPendingPassiveEffects);
    if (0 !== (executionContext & 6)) throw Error("Should not already be working.");
    var finishedWork = root.finishedWork;
    didIncludeRenderPhaseUpdate = root.finishedLanes;
    if (null === finishedWork) return null;
    root.finishedWork = null;
    root.finishedLanes = 0;
    if (finishedWork === root.current) throw Error("Cannot commit the same tree as before. This error is likely caused by a bug in React. Please file an issue.");
    root.callbackNode = null;
    root.callbackPriority = 0;
    root.cancelPendingCommit = null;
    var remainingLanes = finishedWork.lanes | finishedWork.childLanes;
    remainingLanes |= concurrentlyUpdatedLanes;
    markRootFinished(root, didIncludeRenderPhaseUpdate, remainingLanes, spawnedLane, updatedLanes, suspendedRetryLanes);
    root === workInProgressRoot && (workInProgress = workInProgressRoot = null, workInProgressRootRenderLanes = 0);
    0 === (finishedWork.subtreeFlags & 10256) && 0 === (finishedWork.flags & 10256) || rootDoesHavePassiveEffects || (rootDoesHavePassiveEffects = !0, pendingPassiveEffectsRemainingLanes = remainingLanes, pendingPassiveTransitions = transitions, scheduleCallback(NormalPriority$1, function() {
        flushPassiveEffects(!0);
        return null;
    }));
    transitions = 0 !== (finishedWork.flags & 15990);
    0 !== (finishedWork.subtreeFlags & 15990) || transitions ? (transitions = ReactSharedInternals.T, ReactSharedInternals.T = null, spawnedLane = currentUpdatePriority, currentUpdatePriority = 2, updatedLanes = executionContext, executionContext |= 4, commitBeforeMutationEffects(root, finishedWork), commitMutationEffectsOnFiber(finishedWork, root), root.current = finishedWork, commitLayoutEffectOnFiber(root, finishedWork.alternate, finishedWork), requestPaint(), executionContext = updatedLanes, currentUpdatePriority = spawnedLane, ReactSharedInternals.T = transitions) : root.current = finishedWork;
    rootDoesHavePassiveEffects ? (rootDoesHavePassiveEffects = !1, rootWithPendingPassiveEffects = root, pendingPassiveEffectsLanes = didIncludeRenderPhaseUpdate) : releaseRootPooledCache(root, remainingLanes);
    remainingLanes = root.pendingLanes;
    0 === remainingLanes && (legacyErrorBoundariesThatAlreadyFailed = null);
    onCommitRoot(finishedWork.stateNode, renderPriorityLevel);
    ensureRootIsScheduled(root);
    if (null !== recoverableErrors) for(renderPriorityLevel = root.onRecoverableError, finishedWork = 0; finishedWork < recoverableErrors.length; finishedWork++)remainingLanes = recoverableErrors[finishedWork], renderPriorityLevel(remainingLanes.value, {
        componentStack: remainingLanes.stack
    });
    0 !== (pendingPassiveEffectsLanes & 3) && 0 !== root.tag && flushPassiveEffects();
    remainingLanes = root.pendingLanes;
    0 !== (didIncludeRenderPhaseUpdate & 4194218) && 0 !== (remainingLanes & 42) ? root === rootWithNestedUpdates ? nestedUpdateCount++ : (nestedUpdateCount = 0, rootWithNestedUpdates = root) : nestedUpdateCount = 0;
    flushSyncWorkAcrossRoots_impl(0, !1);
    return null;
}
function releaseRootPooledCache(root, remainingLanes) {
    0 === (root.pooledCacheLanes &= remainingLanes) && (remainingLanes = root.pooledCache, null != remainingLanes && (root.pooledCache = null, releaseCache(remainingLanes)));
}
function flushPassiveEffects() {
    if (null !== rootWithPendingPassiveEffects) {
        var root = rootWithPendingPassiveEffects, remainingLanes = pendingPassiveEffectsRemainingLanes;
        pendingPassiveEffectsRemainingLanes = 0;
        var renderPriority = lanesToEventPriority(pendingPassiveEffectsLanes), prevTransition = ReactSharedInternals.T, previousPriority = currentUpdatePriority;
        try {
            currentUpdatePriority = 32 > renderPriority ? 32 : renderPriority;
            ReactSharedInternals.T = null;
            if (null === rootWithPendingPassiveEffects) var JSCompiler_inline_result = !1;
            else {
                renderPriority = pendingPassiveTransitions;
                pendingPassiveTransitions = null;
                var root$jscomp$0 = rootWithPendingPassiveEffects, lanes = pendingPassiveEffectsLanes;
                rootWithPendingPassiveEffects = null;
                pendingPassiveEffectsLanes = 0;
                if (0 !== (executionContext & 6)) throw Error("Cannot flush passive effects while already rendering.");
                var prevExecutionContext = executionContext;
                executionContext |= 4;
                commitPassiveUnmountOnFiber(root$jscomp$0.current);
                commitPassiveMountOnFiber(root$jscomp$0, root$jscomp$0.current, lanes, renderPriority);
                executionContext = prevExecutionContext;
                flushSyncWorkAcrossRoots_impl(0, !1);
                if (injectedHook && "function" === typeof injectedHook.onPostCommitFiberRoot) try {
                    injectedHook.onPostCommitFiberRoot(rendererID, root$jscomp$0);
                } catch (err) {}
                JSCompiler_inline_result = !0;
            }
            return JSCompiler_inline_result;
        } finally{
            currentUpdatePriority = previousPriority, ReactSharedInternals.T = prevTransition, releaseRootPooledCache(root, remainingLanes);
        }
    }
    return !1;
}
function captureCommitPhaseErrorOnRoot(rootFiber, sourceFiber, error) {
    sourceFiber = createCapturedValueAtFiber(error, sourceFiber);
    sourceFiber = createRootErrorUpdate(rootFiber.stateNode, sourceFiber, 2);
    rootFiber = enqueueUpdate(rootFiber, sourceFiber, 2);
    null !== rootFiber && (markRootUpdated$1(rootFiber, 2), ensureRootIsScheduled(rootFiber));
}
function captureCommitPhaseError(sourceFiber, nearestMountedAncestor, error) {
    if (3 === sourceFiber.tag) captureCommitPhaseErrorOnRoot(sourceFiber, sourceFiber, error);
    else for(; null !== nearestMountedAncestor;){
        if (3 === nearestMountedAncestor.tag) {
            captureCommitPhaseErrorOnRoot(nearestMountedAncestor, sourceFiber, error);
            break;
        } else if (1 === nearestMountedAncestor.tag) {
            var instance = nearestMountedAncestor.stateNode;
            if ("function" === typeof nearestMountedAncestor.type.getDerivedStateFromError || "function" === typeof instance.componentDidCatch && (null === legacyErrorBoundariesThatAlreadyFailed || !legacyErrorBoundariesThatAlreadyFailed.has(instance))) {
                sourceFiber = createCapturedValueAtFiber(error, sourceFiber);
                error = createClassErrorUpdate(2);
                instance = enqueueUpdate(nearestMountedAncestor, error, 2);
                null !== instance && (initializeClassErrorUpdate(error, instance, nearestMountedAncestor, sourceFiber), markRootUpdated$1(instance, 2), ensureRootIsScheduled(instance));
                break;
            }
        }
        nearestMountedAncestor = nearestMountedAncestor.return;
    }
}
function attachPingListener(root, wakeable, lanes) {
    var pingCache = root.pingCache;
    if (null === pingCache) {
        pingCache = root.pingCache = new PossiblyWeakMap();
        var threadIDs = new Set();
        pingCache.set(wakeable, threadIDs);
    } else threadIDs = pingCache.get(wakeable), void 0 === threadIDs && (threadIDs = new Set(), pingCache.set(wakeable, threadIDs));
    threadIDs.has(lanes) || (workInProgressRootDidAttachPingListener = !0, threadIDs.add(lanes), root = pingSuspendedRoot.bind(null, root, wakeable, lanes), wakeable.then(root, root));
}
function pingSuspendedRoot(root, wakeable, pingedLanes) {
    var pingCache = root.pingCache;
    null !== pingCache && pingCache.delete(wakeable);
    root.pingedLanes |= root.suspendedLanes & pingedLanes;
    root.warmLanes &= ~pingedLanes;
    workInProgressRoot === root && (workInProgressRootRenderLanes & pingedLanes) === pingedLanes && (4 === workInProgressRootExitStatus || 3 === workInProgressRootExitStatus && (workInProgressRootRenderLanes & 62914560) === workInProgressRootRenderLanes && 300 > now() - globalMostRecentFallbackTime ? 0 === (executionContext & 2) && prepareFreshStack(root, 0) : workInProgressRootPingedLanes |= pingedLanes, workInProgressSuspendedRetryLanes === workInProgressRootRenderLanes && (workInProgressSuspendedRetryLanes = 0));
    ensureRootIsScheduled(root);
}
function retryTimedOutBoundary(boundaryFiber, retryLane) {
    0 === retryLane && (retryLane = 0 === (boundaryFiber.mode & 1) ? 2 : claimNextRetryLane());
    boundaryFiber = enqueueConcurrentRenderForLane(boundaryFiber, retryLane);
    null !== boundaryFiber && (markRootUpdated$1(boundaryFiber, retryLane), ensureRootIsScheduled(boundaryFiber));
}
function retryDehydratedSuspenseBoundary(boundaryFiber) {
    var suspenseState = boundaryFiber.memoizedState, retryLane = 0;
    null !== suspenseState && (retryLane = suspenseState.retryLane);
    retryTimedOutBoundary(boundaryFiber, retryLane);
}
function resolveRetryWakeable(boundaryFiber, wakeable) {
    var retryLane = 0;
    switch(boundaryFiber.tag){
        case 13:
            var retryCache = boundaryFiber.stateNode;
            var suspenseState = boundaryFiber.memoizedState;
            null !== suspenseState && (retryLane = suspenseState.retryLane);
            break;
        case 19:
            retryCache = boundaryFiber.stateNode;
            break;
        case 22:
            retryCache = boundaryFiber.stateNode._retryCache;
            break;
        default:
            throw Error("Pinged unknown suspense boundary type. This is probably a bug in React.");
    }
    null !== retryCache && retryCache.delete(wakeable);
    retryTimedOutBoundary(boundaryFiber, retryLane);
}
function scheduleCallback(priorityLevel, callback) {
    return scheduleCallback$3(priorityLevel, callback);
}
function FiberNode(tag, pendingProps, key, mode) {
    this.tag = tag;
    this.key = key;
    this.sibling = this.child = this.return = this.stateNode = this.type = this.elementType = null;
    this.index = 0;
    this.refCleanup = this.ref = null;
    this.pendingProps = pendingProps;
    this.dependencies = this.memoizedState = this.updateQueue = this.memoizedProps = null;
    this.mode = mode;
    this.subtreeFlags = this.flags = 0;
    this.deletions = null;
    this.childLanes = this.lanes = 0;
    this.alternate = null;
}
function createFiberImplClass(tag, pendingProps, key, mode) {
    return new FiberNode(tag, pendingProps, key, mode);
}
function shouldConstruct(Component) {
    Component = Component.prototype;
    return !(!Component || !Component.isReactComponent);
}
function createWorkInProgress(current, pendingProps) {
    var workInProgress = current.alternate;
    null === workInProgress ? (workInProgress = createFiberImplClass(current.tag, pendingProps, current.key, current.mode), workInProgress.elementType = current.elementType, workInProgress.type = current.type, workInProgress.stateNode = current.stateNode, workInProgress.alternate = current, current.alternate = workInProgress) : (workInProgress.pendingProps = pendingProps, workInProgress.type = current.type, workInProgress.flags = 0, workInProgress.subtreeFlags = 0, workInProgress.deletions = null);
    workInProgress.flags = current.flags & 31457280;
    workInProgress.childLanes = current.childLanes;
    workInProgress.lanes = current.lanes;
    workInProgress.child = current.child;
    workInProgress.memoizedProps = current.memoizedProps;
    workInProgress.memoizedState = current.memoizedState;
    workInProgress.updateQueue = current.updateQueue;
    pendingProps = current.dependencies;
    workInProgress.dependencies = null === pendingProps ? null : {
        lanes: pendingProps.lanes,
        firstContext: pendingProps.firstContext
    };
    workInProgress.sibling = current.sibling;
    workInProgress.index = current.index;
    workInProgress.ref = current.ref;
    workInProgress.refCleanup = current.refCleanup;
    return workInProgress;
}
function resetWorkInProgress(workInProgress, renderLanes) {
    workInProgress.flags &= 31457282;
    var current = workInProgress.alternate;
    null === current ? (workInProgress.childLanes = 0, workInProgress.lanes = renderLanes, workInProgress.child = null, workInProgress.subtreeFlags = 0, workInProgress.memoizedProps = null, workInProgress.memoizedState = null, workInProgress.updateQueue = null, workInProgress.dependencies = null, workInProgress.stateNode = null) : (workInProgress.childLanes = current.childLanes, workInProgress.lanes = current.lanes, workInProgress.child = current.child, workInProgress.subtreeFlags = 0, workInProgress.deletions = null, workInProgress.memoizedProps = current.memoizedProps, workInProgress.memoizedState = current.memoizedState, workInProgress.updateQueue = current.updateQueue, workInProgress.type = current.type, renderLanes = current.dependencies, workInProgress.dependencies = null === renderLanes ? null : {
        lanes: renderLanes.lanes,
        firstContext: renderLanes.firstContext
    });
    return workInProgress;
}
function createFiberFromTypeAndProps(type, key, pendingProps, owner, mode, lanes) {
    var fiberTag = 0;
    owner = type;
    if ("function" === typeof type) shouldConstruct(type) && (fiberTag = 1);
    else if ("string" === typeof type) fiberTag = 5;
    else a: switch(type){
        case REACT_FRAGMENT_TYPE:
            return createFiberFromFragment(pendingProps.children, mode, lanes, key);
        case REACT_STRICT_MODE_TYPE:
            fiberTag = 8;
            mode |= 8;
            0 !== (mode & 1) && (mode |= 16);
            break;
        case REACT_PROFILER_TYPE:
            return type = createFiberImplClass(12, pendingProps, key, mode | 2), type.elementType = REACT_PROFILER_TYPE, type.lanes = lanes, type;
        case REACT_SUSPENSE_TYPE:
            return type = createFiberImplClass(13, pendingProps, key, mode), type.elementType = REACT_SUSPENSE_TYPE, type.lanes = lanes, type;
        case REACT_SUSPENSE_LIST_TYPE:
            return type = createFiberImplClass(19, pendingProps, key, mode), type.elementType = REACT_SUSPENSE_LIST_TYPE, type.lanes = lanes, type;
        case REACT_OFFSCREEN_TYPE:
            return createFiberFromOffscreen(pendingProps, mode, lanes, key);
        default:
            if ("object" === typeof type && null !== type) switch(type.$$typeof){
                case REACT_PROVIDER_TYPE:
                case REACT_CONTEXT_TYPE:
                    fiberTag = 10;
                    break a;
                case REACT_CONSUMER_TYPE:
                    fiberTag = 9;
                    break a;
                case REACT_FORWARD_REF_TYPE:
                    fiberTag = 11;
                    break a;
                case REACT_MEMO_TYPE:
                    fiberTag = 14;
                    break a;
                case REACT_LAZY_TYPE:
                    fiberTag = 16;
                    owner = null;
                    break a;
            }
            fiberTag = 29;
            pendingProps = Error("Element type is invalid: expected a string (for built-in components) or a class/function (for composite components) but got: " + ((null === type ? "null" : typeof type) + "."));
            owner = null;
    }
    key = createFiberImplClass(fiberTag, pendingProps, key, mode);
    key.elementType = type;
    key.type = owner;
    key.lanes = lanes;
    return key;
}
function createFiberFromFragment(elements, mode, lanes, key) {
    elements = createFiberImplClass(7, elements, key, mode);
    elements.lanes = lanes;
    return elements;
}
function createFiberFromOffscreen(pendingProps, mode, lanes, key) {
    pendingProps = createFiberImplClass(22, pendingProps, key, mode);
    pendingProps.elementType = REACT_OFFSCREEN_TYPE;
    pendingProps.lanes = lanes;
    var primaryChildInstance = {
        _visibility: 1,
        _pendingVisibility: 1,
        _pendingMarkers: null,
        _retryCache: null,
        _transitions: null,
        _current: null,
        detach: function() {
            var fiber = primaryChildInstance._current;
            if (null === fiber) throw Error("Calling Offscreen.detach before instance handle has been set.");
            if (0 === (primaryChildInstance._pendingVisibility & 2)) {
                var root = enqueueConcurrentRenderForLane(fiber, 2);
                null !== root && (primaryChildInstance._pendingVisibility |= 2, scheduleUpdateOnFiber(root, fiber, 2));
            }
        },
        attach: function() {
            var fiber = primaryChildInstance._current;
            if (null === fiber) throw Error("Calling Offscreen.detach before instance handle has been set.");
            if (0 !== (primaryChildInstance._pendingVisibility & 2)) {
                var root = enqueueConcurrentRenderForLane(fiber, 2);
                null !== root && (primaryChildInstance._pendingVisibility &= -3, scheduleUpdateOnFiber(root, fiber, 2));
            }
        }
    };
    pendingProps.stateNode = primaryChildInstance;
    return pendingProps;
}
function createFiberFromText(content, mode, lanes) {
    content = createFiberImplClass(6, content, null, mode);
    content.lanes = lanes;
    return content;
}
function createFiberFromPortal(portal, mode, lanes) {
    mode = createFiberImplClass(4, null !== portal.children ? portal.children : [], portal.key, mode);
    mode.lanes = lanes;
    mode.stateNode = {
        containerInfo: portal.containerInfo,
        pendingChildren: null,
        implementation: portal.implementation
    };
    return mode;
}
function FiberRootNode(containerInfo, tag, hydrate, identifierPrefix, onUncaughtError, onCaughtError, onRecoverableError, formState) {
    this.tag = tag;
    this.containerInfo = containerInfo;
    this.finishedWork = this.pingCache = this.current = this.pendingChildren = null;
    this.timeoutHandle = -1;
    this.callbackNode = this.next = this.pendingContext = this.context = this.cancelPendingCommit = null;
    this.callbackPriority = 0;
    this.expirationTimes = createLaneMap(-1);
    this.entangledLanes = this.shellSuspendCounter = this.errorRecoveryDisabledLanes = this.finishedLanes = this.expiredLanes = this.warmLanes = this.pingedLanes = this.suspendedLanes = this.pendingLanes = 0;
    this.entanglements = createLaneMap(0);
    this.hiddenUpdates = createLaneMap(null);
    this.identifierPrefix = identifierPrefix;
    this.onUncaughtError = onUncaughtError;
    this.onCaughtError = onCaughtError;
    this.onRecoverableError = onRecoverableError;
    this.pooledCache = null;
    this.pooledCacheLanes = 0;
    this.formState = formState;
    this.incompleteTransitions = new Map();
}
function createPortal$1(children, containerInfo, implementation) {
    var key = 3 < arguments.length && void 0 !== arguments[3] ? arguments[3] : null;
    return {
        $$typeof: REACT_PORTAL_TYPE,
        key: null == key ? null : "" + key,
        children: children,
        containerInfo: containerInfo,
        implementation: implementation
    };
}
function findHostInstance(component) {
    var fiber = component._reactInternals;
    if (void 0 === fiber) {
        if ("function" === typeof component.render) throw Error("Unable to find node on an unmounted component.");
        component = Object.keys(component).join(",");
        throw Error("Argument appears to not be a ReactComponent. Keys: " + component);
    }
    component = findCurrentFiberUsingSlowPath(fiber);
    component = null !== component ? findCurrentHostFiberImpl(component) : null;
    return null === component ? null : getPublicInstance(component.stateNode);
}
function updateContainer(element, container, parentComponent, callback) {
    parentComponent = container.current;
    var lane = requestUpdateLane(parentComponent);
    null === container.context ? container.context = emptyContextObject : container.pendingContext = emptyContextObject;
    container = createUpdate(lane);
    container.payload = {
        element: element
    };
    callback = void 0 === callback ? null : callback;
    null !== callback && (container.callback = callback);
    element = enqueueUpdate(parentComponent, container, lane);
    null !== element && (scheduleUpdateOnFiber(element, parentComponent, lane), entangleTransitions(element, parentComponent, lane));
    return lane;
}
function getInspectorDataForInstance() {
    throw Error("getInspectorDataForInstance() is not available in production");
}
function shim$1() {
    throw Error("The current renderer does not support hydration. This error is likely caused by a bug in React. Please file an issue.");
}
function shim() {
    throw Error("The current renderer does not support Resources. This error is likely caused by a bug in React. Please file an issue.");
}
var _nativeFabricUIManage = nativeFabricUIManager, createNode = _nativeFabricUIManage.createNode, cloneNodeWithNewChildren = _nativeFabricUIManage.cloneNodeWithNewChildren, cloneNodeWithNewChildrenAndProps = _nativeFabricUIManage.cloneNodeWithNewChildrenAndProps, cloneNodeWithNewProps = _nativeFabricUIManage.cloneNodeWithNewProps, createChildNodeSet = _nativeFabricUIManage.createChildSet, appendChildNode = _nativeFabricUIManage.appendChild, appendChildNodeToSet = _nativeFabricUIManage.appendChildToSet, completeRoot = _nativeFabricUIManage.completeRoot, registerEventHandler = _nativeFabricUIManage.registerEventHandler, FabricDiscretePriority = _nativeFabricUIManage.unstable_DiscreteEventPriority, fabricGetCurrentEventPriority = _nativeFabricUIManage.unstable_getCurrentEventPriority, extraDevToolsConfig = {
    getInspectorDataForInstance: getInspectorDataForInstance,
    getInspectorDataForViewTag: function() {
        throw Error("getInspectorDataForViewTag() is not available in production");
    },
    getInspectorDataForViewAtPoint: function() {
        throw Error("getInspectorDataForViewAtPoint() is not available in production.");
    }
}, getViewConfigForType = ReactNativePrivateInterface.ReactNativeViewConfigRegistry.get, nextReactTag = 2;
registerEventHandler && registerEventHandler(dispatchEvent);
var PROD_HOST_CONTEXT = {
    isInAParentText: !0
};
function createTextInstance(text, rootContainerInstance, hostContext, internalInstanceHandle) {
    hostContext = nextReactTag;
    nextReactTag += 2;
    return {
        node: createNode(hostContext, "RCTRawText", rootContainerInstance, {
            text: text
        }, internalInstanceHandle)
    };
}
function getPublicInstance(instance) {
    return null != instance.canonical && null != instance.canonical.publicInstance ? instance.canonical.publicInstance : null != instance._nativeTag ? instance : null;
}
var currentUpdatePriority = 0;
function resolveUpdatePriority() {
    if (0 !== currentUpdatePriority) return currentUpdatePriority;
    var currentEventPriority = fabricGetCurrentEventPriority ? fabricGetCurrentEventPriority() : null;
    if (null != currentEventPriority) switch(currentEventPriority){
        case FabricDiscretePriority:
            return 2;
    }
    return 32;
}
var scheduleTimeout = setTimeout, cancelTimeout = clearTimeout;
function cloneHiddenInstance(instance) {
    var node = instance.node;
    var JSCompiler_inline_result = fastAddProperties(null, {
        style: {
            display: "none"
        }
    }, instance.canonical.viewConfig.validAttributes);
    return {
        node: cloneNodeWithNewProps(node, JSCompiler_inline_result),
        canonical: instance.canonical
    };
}
var HostTransitionContext = {
    $$typeof: REACT_CONTEXT_TYPE,
    Provider: null,
    Consumer: null,
    _currentValue: null,
    _currentValue2: null,
    _threadCount: 0
}, supportsMicrotasks = "undefined" !== typeof RN$enableMicrotasksInReact && !!RN$enableMicrotasksInReact, scheduleMicrotask = "function" === typeof queueMicrotask ? queueMicrotask : scheduleTimeout;
function getInstanceFromNode(node) {
    return null != node.canonical && null != node.canonical.internalInstanceHandle ? node.canonical.internalInstanceHandle : node;
}
getFiberCurrentPropsFromNode$1 = function(instance) {
    return instance.canonical.currentProps;
};
getInstanceFromNode$1 = getInstanceFromNode;
getNodeFromInstance$1 = function(fiber) {
    fiber = getPublicInstance(fiber.stateNode);
    if (null == fiber) throw Error("Could not find host instance from fiber");
    return fiber;
};
ResponderEventPlugin.injection.injectGlobalResponderHandler({
    onChange: function(from, to, blockNativeResponder) {
        from && from.stateNode && nativeFabricUIManager.setIsJSResponder(from.stateNode.node, !1, blockNativeResponder || !1);
        to && to.stateNode && nativeFabricUIManager.setIsJSResponder(to.stateNode.node, !0, blockNativeResponder || !1);
    }
});
if ("function" !== typeof ReactNativePrivateInterface.ReactFiberErrorDialog.showErrorDialog) throw Error("Expected ReactFiberErrorDialog.showErrorDialog to be a function.");
function nativeOnUncaughtError(error, errorInfo) {
    !1 !== ReactNativePrivateInterface.ReactFiberErrorDialog.showErrorDialog({
        errorBoundary: null,
        error: error,
        componentStack: null != errorInfo.componentStack ? errorInfo.componentStack : ""
    }) && reportGlobalError(error);
}
function nativeOnCaughtError(error, errorInfo) {
    !1 !== ReactNativePrivateInterface.ReactFiberErrorDialog.showErrorDialog({
        errorBoundary: errorInfo.errorBoundary,
        error: error,
        componentStack: null != errorInfo.componentStack ? errorInfo.componentStack : ""
    }) && console.error(error);
}
batchedUpdatesImpl = function(fn, a) {
    var prevExecutionContext = executionContext;
    executionContext |= 1;
    try {
        return fn(a);
    } finally{
        executionContext = prevExecutionContext, 0 === executionContext && (workInProgressRootRenderTargetTime = now() + 500, flushSyncWorkAcrossRoots_impl(0, !0));
    }
};
var roots = new Map(), internals$jscomp$inline_1147 = {
    bundleType: 0,
    version: "19.0.0",
    rendererPackageName: "react-native-renderer",
    currentDispatcherRef: ReactSharedInternals,
    findFiberByHostInstance: getInstanceFromNode,
    reconcilerVersion: "19.0.0"
};
null !== extraDevToolsConfig && (internals$jscomp$inline_1147.rendererConfig = extraDevToolsConfig);
if ("undefined" !== typeof __REACT_DEVTOOLS_GLOBAL_HOOK__) {
    var hook$jscomp$inline_1463 = __REACT_DEVTOOLS_GLOBAL_HOOK__;
    if (!hook$jscomp$inline_1463.isDisabled && hook$jscomp$inline_1463.supportsFiber) try {
        rendererID = hook$jscomp$inline_1463.inject(internals$jscomp$inline_1147), injectedHook = hook$jscomp$inline_1463;
    } catch (err) {}
}
exports.createPortal = function(children, containerTag) {
    return createPortal$1(children, containerTag, null, 2 < arguments.length && void 0 !== arguments[2] ? arguments[2] : null);
};
exports.dispatchCommand = function(handle, command, args) {
    var nativeTag = null != handle._nativeTag ? handle._nativeTag : ReactNativePrivateInterface.getNativeTagFromPublicInstance(handle);
    null != nativeTag && (handle = ReactNativePrivateInterface.getNodeFromPublicInstance(handle), null != handle ? nativeFabricUIManager.dispatchCommand(handle, command, args) : ReactNativePrivateInterface.UIManager.dispatchViewManagerCommand(nativeTag, command, args));
};
exports.findHostInstance_DEPRECATED = function(componentOrHandle) {
    return null == componentOrHandle ? null : componentOrHandle.canonical && componentOrHandle.canonical.publicInstance ? componentOrHandle.canonical.publicInstance : componentOrHandle._nativeTag ? componentOrHandle : findHostInstance(componentOrHandle);
};
exports.findNodeHandle = function(componentOrHandle) {
    if (null == componentOrHandle) return null;
    if ("number" === typeof componentOrHandle) return componentOrHandle;
    if (componentOrHandle._nativeTag) return componentOrHandle._nativeTag;
    if (null != componentOrHandle.canonical && null != componentOrHandle.canonical.nativeTag) return componentOrHandle.canonical.nativeTag;
    var nativeTag = ReactNativePrivateInterface.getNativeTagFromPublicInstance(componentOrHandle);
    if (nativeTag) return nativeTag;
    componentOrHandle = findHostInstance(componentOrHandle);
    return null == componentOrHandle ? componentOrHandle : null != componentOrHandle._nativeTag ? componentOrHandle._nativeTag : ReactNativePrivateInterface.getNativeTagFromPublicInstance(componentOrHandle);
};
exports.getInspectorDataForInstance = getInspectorDataForInstance;
exports.getNodeFromInternalInstanceHandle = function(internalInstanceHandle) {
    return internalInstanceHandle && internalInstanceHandle.stateNode && internalInstanceHandle.stateNode.node;
};
exports.getPublicInstanceFromInternalInstanceHandle = function(internalInstanceHandle) {
    var instance = internalInstanceHandle.stateNode;
    return null == instance ? null : 6 === internalInstanceHandle.tag ? (null == instance.publicInstance && (instance.publicInstance = ReactNativePrivateInterface.createPublicTextInstance(internalInstanceHandle)), instance.publicInstance) : getPublicInstance(internalInstanceHandle.stateNode);
};
exports.isChildPublicInstance = function() {
    throw Error("isChildPublicInstance() is not available in production.");
};
exports.render = function(element, containerTag, callback, concurrentRoot, options) {
    var root = roots.get(containerTag);
    if (!root) {
        root = nativeOnUncaughtError;
        var onCaughtError = nativeOnCaughtError, onRecoverableError = defaultOnRecoverableError;
        options && void 0 !== options.onUncaughtError && (root = options.onUncaughtError);
        options && void 0 !== options.onCaughtError && (onCaughtError = options.onCaughtError);
        options && void 0 !== options.onRecoverableError && (onRecoverableError = options.onRecoverableError);
        concurrentRoot = concurrentRoot ? 1 : 0;
        options = new FiberRootNode(containerTag, concurrentRoot, !1, "", root, onCaughtError, onRecoverableError, null);
        concurrentRoot = createFiberImplClass(3, null, null, 1 === concurrentRoot ? 1 : 0);
        options.current = concurrentRoot;
        concurrentRoot.stateNode = options;
        root = createCache();
        root.refCount++;
        options.pooledCache = root;
        root.refCount++;
        concurrentRoot.memoizedState = {
            element: null,
            isDehydrated: !1,
            cache: root
        };
        initializeUpdateQueue(concurrentRoot);
        root = options;
        roots.set(containerTag, root);
    }
    updateContainer(element, root, null, callback);
    a: if (element = root.current, element.child) switch(element.child.tag){
        case 27:
        case 5:
            element = getPublicInstance(element.child.stateNode);
            break a;
        default:
            element = element.child.stateNode;
    }
    else element = null;
    return element;
};
exports.sendAccessibilityEvent = function(handle, eventType) {
    var nativeTag = null != handle._nativeTag ? handle._nativeTag : ReactNativePrivateInterface.getNativeTagFromPublicInstance(handle);
    null != nativeTag && (handle = ReactNativePrivateInterface.getNodeFromPublicInstance(handle), null != handle ? nativeFabricUIManager.sendAccessibilityEvent(handle, eventType) : ReactNativePrivateInterface.legacySendAccessibilityEvent(nativeTag, eventType));
};
exports.stopSurface = function(containerTag) {
    var root = roots.get(containerTag);
    root && updateContainer(null, root, null, function() {
        roots.delete(containerTag);
    });
};
exports.unmountComponentAtNode = function(containerTag) {
    this.stopSurface(containerTag);
};


}),
43530: (function (__unused_webpack_module, exports, __webpack_require__) {
"use strict";
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 *        
 * @nolint
 * @preventMunge
 * @generated SignedSource<<f7a2299fd4eb6daeaa2b3967a6e4b69c>>
 *
 * This file was sync'd from the facebook/react repository.
 */ 
__webpack_require__(35749);
var ReactNativePrivateInterface = __webpack_require__(89603), React = __webpack_require__(31399), Scheduler = __webpack_require__(43827), isArrayImpl = Array.isArray, ReactSharedInternals = React.__CLIENT_INTERNALS_DO_NOT_USE_OR_WARN_USERS_THEY_CANNOT_UPGRADE, REACT_LEGACY_ELEMENT_TYPE = Symbol.for("react.element"), REACT_ELEMENT_TYPE = Symbol.for("react.transitional.element"), REACT_PORTAL_TYPE = Symbol.for("react.portal"), REACT_FRAGMENT_TYPE = Symbol.for("react.fragment"), REACT_STRICT_MODE_TYPE = Symbol.for("react.strict_mode"), REACT_PROFILER_TYPE = Symbol.for("react.profiler"), REACT_PROVIDER_TYPE = Symbol.for("react.provider"), REACT_CONSUMER_TYPE = Symbol.for("react.consumer"), REACT_CONTEXT_TYPE = Symbol.for("react.context"), REACT_FORWARD_REF_TYPE = Symbol.for("react.forward_ref"), REACT_SUSPENSE_TYPE = Symbol.for("react.suspense"), REACT_SUSPENSE_LIST_TYPE = Symbol.for("react.suspense_list"), REACT_MEMO_TYPE = Symbol.for("react.memo"), REACT_LAZY_TYPE = Symbol.for("react.lazy");
Symbol.for("react.scope");
Symbol.for("react.debug_trace_mode");
var REACT_OFFSCREEN_TYPE = Symbol.for("react.offscreen");
Symbol.for("react.legacy_hidden");
Symbol.for("react.tracing_marker");
var REACT_MEMO_CACHE_SENTINEL = Symbol.for("react.memo_cache_sentinel"), MAYBE_ITERATOR_SYMBOL = Symbol.iterator;
function getIteratorFn(maybeIterable) {
    if (null === maybeIterable || "object" !== typeof maybeIterable) return null;
    maybeIterable = MAYBE_ITERATOR_SYMBOL && maybeIterable[MAYBE_ITERATOR_SYMBOL] || maybeIterable["@@iterator"];
    return "function" === typeof maybeIterable ? maybeIterable : null;
}
var assign = Object.assign, prefix, suffix;
function describeBuiltInComponentFrame(name) {
    if (void 0 === prefix) try {
        throw Error();
    } catch (x) {
        var match = x.stack.trim().match(/\n( *(at )?)/);
        prefix = match && match[1] || "";
        suffix = -1 < x.stack.indexOf("\n    at") ? " (<anonymous>)" : -1 < x.stack.indexOf("@") ? "@unknown:0:0" : "";
    }
    return "\n" + prefix + name + suffix;
}
var reentry = !1;
function describeNativeComponentFrame(fn, construct) {
    if (!fn || reentry) return "";
    reentry = !0;
    var previousPrepareStackTrace = Error.prepareStackTrace;
    Error.prepareStackTrace = void 0;
    try {
        var RunInRootFrame = {
            DetermineComponentFrameRoot: function() {
                try {
                    if (construct) {
                        var Fake = function() {
                            throw Error();
                        };
                        Object.defineProperty(Fake.prototype, "props", {
                            set: function() {
                                throw Error();
                            }
                        });
                        if ("object" === typeof Reflect && Reflect.construct) {
                            try {
                                Reflect.construct(Fake, []);
                            } catch (x) {
                                var control = x;
                            }
                            Reflect.construct(fn, [], Fake);
                        } else {
                            try {
                                Fake.call();
                            } catch (x$0) {
                                control = x$0;
                            }
                            fn.call(Fake.prototype);
                        }
                    } else {
                        try {
                            throw Error();
                        } catch (x$1) {
                            control = x$1;
                        }
                        (Fake = fn()) && "function" === typeof Fake.catch && Fake.catch(function() {});
                    }
                } catch (sample) {
                    if (sample && control && "string" === typeof sample.stack) return [
                        sample.stack,
                        control.stack
                    ];
                }
                return [
                    null,
                    null
                ];
            }
        };
        RunInRootFrame.DetermineComponentFrameRoot.displayName = "DetermineComponentFrameRoot";
        var namePropDescriptor = Object.getOwnPropertyDescriptor(RunInRootFrame.DetermineComponentFrameRoot, "name");
        namePropDescriptor && namePropDescriptor.configurable && Object.defineProperty(RunInRootFrame.DetermineComponentFrameRoot, "name", {
            value: "DetermineComponentFrameRoot"
        });
        var _RunInRootFrame$Deter = RunInRootFrame.DetermineComponentFrameRoot(), sampleStack = _RunInRootFrame$Deter[0], controlStack = _RunInRootFrame$Deter[1];
        if (sampleStack && controlStack) {
            var sampleLines = sampleStack.split("\n"), controlLines = controlStack.split("\n");
            for(namePropDescriptor = RunInRootFrame = 0; RunInRootFrame < sampleLines.length && !sampleLines[RunInRootFrame].includes("DetermineComponentFrameRoot");)RunInRootFrame++;
            for(; namePropDescriptor < controlLines.length && !controlLines[namePropDescriptor].includes("DetermineComponentFrameRoot");)namePropDescriptor++;
            if (RunInRootFrame === sampleLines.length || namePropDescriptor === controlLines.length) for(RunInRootFrame = sampleLines.length - 1, namePropDescriptor = controlLines.length - 1; 1 <= RunInRootFrame && 0 <= namePropDescriptor && sampleLines[RunInRootFrame] !== controlLines[namePropDescriptor];)namePropDescriptor--;
            for(; 1 <= RunInRootFrame && 0 <= namePropDescriptor; RunInRootFrame--, namePropDescriptor--)if (sampleLines[RunInRootFrame] !== controlLines[namePropDescriptor]) {
                if (1 !== RunInRootFrame || 1 !== namePropDescriptor) {
                    do if (RunInRootFrame--, namePropDescriptor--, 0 > namePropDescriptor || sampleLines[RunInRootFrame] !== controlLines[namePropDescriptor]) {
                        var frame = "\n" + sampleLines[RunInRootFrame].replace(" at new ", " at ");
                        fn.displayName && frame.includes("<anonymous>") && (frame = frame.replace("<anonymous>", fn.displayName));
                        return frame;
                    }
                    while (1 <= RunInRootFrame && 0 <= namePropDescriptor);
                }
                break;
            }
        }
    } finally{
        reentry = !1, Error.prepareStackTrace = previousPrepareStackTrace;
    }
    return (previousPrepareStackTrace = fn ? fn.displayName || fn.name : "") ? describeBuiltInComponentFrame(previousPrepareStackTrace) : "";
}
function describeFiber(fiber) {
    switch(fiber.tag){
        case 26:
        case 27:
        case 5:
            return describeBuiltInComponentFrame(fiber.type);
        case 16:
            return describeBuiltInComponentFrame("Lazy");
        case 13:
            return describeBuiltInComponentFrame("Suspense");
        case 19:
            return describeBuiltInComponentFrame("SuspenseList");
        case 0:
        case 15:
            return fiber = describeNativeComponentFrame(fiber.type, !1), fiber;
        case 11:
            return fiber = describeNativeComponentFrame(fiber.type.render, !1), fiber;
        case 1:
            return fiber = describeNativeComponentFrame(fiber.type, !0), fiber;
        default:
            return "";
    }
}
function getStackByFiberInDevAndProd(workInProgress) {
    try {
        var info = "";
        do info += describeFiber(workInProgress), workInProgress = workInProgress.return;
        while (workInProgress);
        return info;
    } catch (x) {
        return "\nError generating stack: " + x.message + "\n" + x.stack;
    }
}
var REACT_CLIENT_REFERENCE = Symbol.for("react.client.reference");
function getComponentNameFromType(type) {
    if (null == type) return null;
    if ("function" === typeof type) return type.$$typeof === REACT_CLIENT_REFERENCE ? null : type.displayName || type.name || null;
    if ("string" === typeof type) return type;
    switch(type){
        case REACT_FRAGMENT_TYPE:
            return "Fragment";
        case REACT_PORTAL_TYPE:
            return "Portal";
        case REACT_PROFILER_TYPE:
            return "Profiler";
        case REACT_STRICT_MODE_TYPE:
            return "StrictMode";
        case REACT_SUSPENSE_TYPE:
            return "Suspense";
        case REACT_SUSPENSE_LIST_TYPE:
            return "SuspenseList";
    }
    if ("object" === typeof type) switch(type.$$typeof){
        case REACT_CONTEXT_TYPE:
            return (type.displayName || "Context") + ".Provider";
        case REACT_CONSUMER_TYPE:
            return (type._context.displayName || "Context") + ".Consumer";
        case REACT_FORWARD_REF_TYPE:
            var innerType = type.render;
            type = type.displayName;
            type || (type = innerType.displayName || innerType.name || "", type = "" !== type ? "ForwardRef(" + type + ")" : "ForwardRef");
            return type;
        case REACT_MEMO_TYPE:
            return innerType = type.displayName || null, null !== innerType ? innerType : getComponentNameFromType(type.type) || "Memo";
        case REACT_LAZY_TYPE:
            innerType = type._payload;
            type = type._init;
            try {
                return getComponentNameFromType(type(innerType));
            } catch (x) {}
    }
    return null;
}
var hasError = !1, caughtError = null, getFiberCurrentPropsFromNode$1 = null, getInstanceFromNode = null, getNodeFromInstance = null;
function executeDispatch(event, listener, inst) {
    event.currentTarget = getNodeFromInstance(inst);
    try {
        listener(event);
    } catch (error) {
        hasError || (hasError = !0, caughtError = error);
    }
    event.currentTarget = null;
}
function executeDirectDispatch(event) {
    var dispatchListener = event._dispatchListeners, dispatchInstance = event._dispatchInstances;
    if (isArrayImpl(dispatchListener)) throw Error("Invalid `event`.");
    event.currentTarget = dispatchListener ? getNodeFromInstance(dispatchInstance) : null;
    dispatchListener = dispatchListener ? dispatchListener(event) : null;
    event.currentTarget = null;
    event._dispatchListeners = null;
    event._dispatchInstances = null;
    return dispatchListener;
}
function functionThatReturnsTrue() {
    return !0;
}
function functionThatReturnsFalse() {
    return !1;
}
function SyntheticEvent(dispatchConfig, targetInst, nativeEvent, nativeEventTarget) {
    this.dispatchConfig = dispatchConfig;
    this._targetInst = targetInst;
    this.nativeEvent = nativeEvent;
    this._dispatchInstances = this._dispatchListeners = null;
    dispatchConfig = this.constructor.Interface;
    for(var propName in dispatchConfig)dispatchConfig.hasOwnProperty(propName) && ((targetInst = dispatchConfig[propName]) ? this[propName] = targetInst(nativeEvent) : "target" === propName ? this.target = nativeEventTarget : this[propName] = nativeEvent[propName]);
    this.isDefaultPrevented = (null != nativeEvent.defaultPrevented ? nativeEvent.defaultPrevented : !1 === nativeEvent.returnValue) ? functionThatReturnsTrue : functionThatReturnsFalse;
    this.isPropagationStopped = functionThatReturnsFalse;
    return this;
}
assign(SyntheticEvent.prototype, {
    preventDefault: function() {
        this.defaultPrevented = !0;
        var event = this.nativeEvent;
        event && (event.preventDefault ? event.preventDefault() : "unknown" !== typeof event.returnValue && (event.returnValue = !1), this.isDefaultPrevented = functionThatReturnsTrue);
    },
    stopPropagation: function() {
        var event = this.nativeEvent;
        event && (event.stopPropagation ? event.stopPropagation() : "unknown" !== typeof event.cancelBubble && (event.cancelBubble = !0), this.isPropagationStopped = functionThatReturnsTrue);
    },
    persist: function() {
        this.isPersistent = functionThatReturnsTrue;
    },
    isPersistent: functionThatReturnsFalse,
    destructor: function() {
        var Interface = this.constructor.Interface, propName;
        for(propName in Interface)this[propName] = null;
        this.nativeEvent = this._targetInst = this.dispatchConfig = null;
        this.isPropagationStopped = this.isDefaultPrevented = functionThatReturnsFalse;
        this._dispatchInstances = this._dispatchListeners = null;
    }
});
SyntheticEvent.Interface = {
    type: null,
    target: null,
    currentTarget: function() {
        return null;
    },
    eventPhase: null,
    bubbles: null,
    cancelable: null,
    timeStamp: function(event) {
        return event.timeStamp || Date.now();
    },
    defaultPrevented: null,
    isTrusted: null
};
SyntheticEvent.extend = function(Interface) {
    function E() {}
    function Class() {
        return Super.apply(this, arguments);
    }
    var Super = this;
    E.prototype = Super.prototype;
    var prototype = new E();
    assign(prototype, Class.prototype);
    Class.prototype = prototype;
    Class.prototype.constructor = Class;
    Class.Interface = assign({}, Super.Interface, Interface);
    Class.extend = Super.extend;
    addEventPoolingTo(Class);
    return Class;
};
addEventPoolingTo(SyntheticEvent);
function createOrGetPooledEvent(dispatchConfig, targetInst, nativeEvent, nativeInst) {
    if (this.eventPool.length) {
        var instance = this.eventPool.pop();
        this.call(instance, dispatchConfig, targetInst, nativeEvent, nativeInst);
        return instance;
    }
    return new this(dispatchConfig, targetInst, nativeEvent, nativeInst);
}
function releasePooledEvent(event) {
    if (!(event instanceof this)) throw Error("Trying to release an event instance into a pool of a different type.");
    event.destructor();
    10 > this.eventPool.length && this.eventPool.push(event);
}
function addEventPoolingTo(EventConstructor) {
    EventConstructor.getPooled = createOrGetPooledEvent;
    EventConstructor.eventPool = [];
    EventConstructor.release = releasePooledEvent;
}
var ResponderSyntheticEvent = SyntheticEvent.extend({
    touchHistory: function() {
        return null;
    }
});
function isStartish(topLevelType) {
    return "topTouchStart" === topLevelType;
}
function isMoveish(topLevelType) {
    return "topTouchMove" === topLevelType;
}
var startDependencies = [
    "topTouchStart"
], moveDependencies = [
    "topTouchMove"
], endDependencies = [
    "topTouchCancel",
    "topTouchEnd"
], touchBank = [], touchHistory = {
    touchBank: touchBank,
    numberActiveTouches: 0,
    indexOfSingleActiveTouch: -1,
    mostRecentTimeStamp: 0
};
function timestampForTouch(touch) {
    return touch.timeStamp || touch.timestamp;
}
function getTouchIdentifier(_ref) {
    _ref = _ref.identifier;
    if (null == _ref) throw Error("Touch object is missing identifier.");
    return _ref;
}
function recordTouchStart(touch) {
    var identifier = getTouchIdentifier(touch), touchRecord = touchBank[identifier];
    touchRecord ? (touchRecord.touchActive = !0, touchRecord.startPageX = touch.pageX, touchRecord.startPageY = touch.pageY, touchRecord.startTimeStamp = timestampForTouch(touch), touchRecord.currentPageX = touch.pageX, touchRecord.currentPageY = touch.pageY, touchRecord.currentTimeStamp = timestampForTouch(touch), touchRecord.previousPageX = touch.pageX, touchRecord.previousPageY = touch.pageY, touchRecord.previousTimeStamp = timestampForTouch(touch)) : (touchRecord = {
        touchActive: !0,
        startPageX: touch.pageX,
        startPageY: touch.pageY,
        startTimeStamp: timestampForTouch(touch),
        currentPageX: touch.pageX,
        currentPageY: touch.pageY,
        currentTimeStamp: timestampForTouch(touch),
        previousPageX: touch.pageX,
        previousPageY: touch.pageY,
        previousTimeStamp: timestampForTouch(touch)
    }, touchBank[identifier] = touchRecord);
    touchHistory.mostRecentTimeStamp = timestampForTouch(touch);
}
function recordTouchMove(touch) {
    var touchRecord = touchBank[getTouchIdentifier(touch)];
    touchRecord && (touchRecord.touchActive = !0, touchRecord.previousPageX = touchRecord.currentPageX, touchRecord.previousPageY = touchRecord.currentPageY, touchRecord.previousTimeStamp = touchRecord.currentTimeStamp, touchRecord.currentPageX = touch.pageX, touchRecord.currentPageY = touch.pageY, touchRecord.currentTimeStamp = timestampForTouch(touch), touchHistory.mostRecentTimeStamp = timestampForTouch(touch));
}
function recordTouchEnd(touch) {
    var touchRecord = touchBank[getTouchIdentifier(touch)];
    touchRecord && (touchRecord.touchActive = !1, touchRecord.previousPageX = touchRecord.currentPageX, touchRecord.previousPageY = touchRecord.currentPageY, touchRecord.previousTimeStamp = touchRecord.currentTimeStamp, touchRecord.currentPageX = touch.pageX, touchRecord.currentPageY = touch.pageY, touchRecord.currentTimeStamp = timestampForTouch(touch), touchHistory.mostRecentTimeStamp = timestampForTouch(touch));
}
var instrumentationCallback, ResponderTouchHistoryStore = {
    instrument: function(callback) {
        instrumentationCallback = callback;
    },
    recordTouchTrack: function(topLevelType, nativeEvent) {
        null != instrumentationCallback && instrumentationCallback(topLevelType, nativeEvent);
        if (isMoveish(topLevelType)) nativeEvent.changedTouches.forEach(recordTouchMove);
        else if (isStartish(topLevelType)) nativeEvent.changedTouches.forEach(recordTouchStart), touchHistory.numberActiveTouches = nativeEvent.touches.length, 1 === touchHistory.numberActiveTouches && (touchHistory.indexOfSingleActiveTouch = nativeEvent.touches[0].identifier);
        else if ("topTouchEnd" === topLevelType || "topTouchCancel" === topLevelType) {
            if (nativeEvent.changedTouches.forEach(recordTouchEnd), touchHistory.numberActiveTouches = nativeEvent.touches.length, 1 === touchHistory.numberActiveTouches) {
                for(topLevelType = 0; topLevelType < touchBank.length; topLevelType++)if (nativeEvent = touchBank[topLevelType], null != nativeEvent && nativeEvent.touchActive) {
                    touchHistory.indexOfSingleActiveTouch = topLevelType;
                    break;
                }
            }
        }
    },
    touchHistory: touchHistory
};
function accumulate(current, next) {
    if (null == next) throw Error("Accumulated items must not be null or undefined.");
    return null == current ? next : isArrayImpl(current) ? current.concat(next) : isArrayImpl(next) ? [
        current
    ].concat(next) : [
        current,
        next
    ];
}
function accumulateInto(current, next) {
    if (null == next) throw Error("Accumulated items must not be null or undefined.");
    if (null == current) return next;
    if (isArrayImpl(current)) {
        if (isArrayImpl(next)) return current.push.apply(current, next), current;
        current.push(next);
        return current;
    }
    return isArrayImpl(next) ? [
        current
    ].concat(next) : [
        current,
        next
    ];
}
function forEachAccumulated(arr, cb, scope) {
    Array.isArray(arr) ? arr.forEach(cb, scope) : arr && cb.call(scope, arr);
}
var responderInst = null, trackedTouchCount = 0;
function changeResponder(nextResponderInst, blockHostResponder) {
    var oldResponderInst = responderInst;
    responderInst = nextResponderInst;
    if (null !== ResponderEventPlugin.GlobalResponderHandler) ResponderEventPlugin.GlobalResponderHandler.onChange(oldResponderInst, nextResponderInst, blockHostResponder);
}
var eventTypes = {
    startShouldSetResponder: {
        phasedRegistrationNames: {
            bubbled: "onStartShouldSetResponder",
            captured: "onStartShouldSetResponderCapture"
        },
        dependencies: startDependencies
    },
    scrollShouldSetResponder: {
        phasedRegistrationNames: {
            bubbled: "onScrollShouldSetResponder",
            captured: "onScrollShouldSetResponderCapture"
        },
        dependencies: [
            "topScroll"
        ]
    },
    selectionChangeShouldSetResponder: {
        phasedRegistrationNames: {
            bubbled: "onSelectionChangeShouldSetResponder",
            captured: "onSelectionChangeShouldSetResponderCapture"
        },
        dependencies: [
            "topSelectionChange"
        ]
    },
    moveShouldSetResponder: {
        phasedRegistrationNames: {
            bubbled: "onMoveShouldSetResponder",
            captured: "onMoveShouldSetResponderCapture"
        },
        dependencies: moveDependencies
    },
    responderStart: {
        registrationName: "onResponderStart",
        dependencies: startDependencies
    },
    responderMove: {
        registrationName: "onResponderMove",
        dependencies: moveDependencies
    },
    responderEnd: {
        registrationName: "onResponderEnd",
        dependencies: endDependencies
    },
    responderRelease: {
        registrationName: "onResponderRelease",
        dependencies: endDependencies
    },
    responderTerminationRequest: {
        registrationName: "onResponderTerminationRequest",
        dependencies: []
    },
    responderGrant: {
        registrationName: "onResponderGrant",
        dependencies: []
    },
    responderReject: {
        registrationName: "onResponderReject",
        dependencies: []
    },
    responderTerminate: {
        registrationName: "onResponderTerminate",
        dependencies: []
    }
};
function getParent$1(inst) {
    do inst = inst.return;
    while (inst && 5 !== inst.tag);
    return inst ? inst : null;
}
function traverseTwoPhase$1(inst, fn, arg) {
    for(var path = []; inst;)path.push(inst), inst = getParent$1(inst);
    for(inst = path.length; 0 < inst--;)fn(path[inst], "captured", arg);
    for(inst = 0; inst < path.length; inst++)fn(path[inst], "bubbled", arg);
}
function getListener$1(inst, registrationName) {
    inst = inst.stateNode;
    if (null === inst) return null;
    inst = getFiberCurrentPropsFromNode$1(inst);
    if (null === inst) return null;
    if ((inst = inst[registrationName]) && "function" !== typeof inst) throw Error("Expected `" + registrationName + "` listener to be a function, instead got a value of `" + typeof inst + "` type.");
    return inst;
}
function accumulateDirectionalDispatches$1(inst, phase, event) {
    if (phase = getListener$1(inst, event.dispatchConfig.phasedRegistrationNames[phase])) event._dispatchListeners = accumulateInto(event._dispatchListeners, phase), event._dispatchInstances = accumulateInto(event._dispatchInstances, inst);
}
function accumulateDirectDispatchesSingle$1(event) {
    if (event && event.dispatchConfig.registrationName) {
        var inst = event._targetInst;
        if (inst && event && event.dispatchConfig.registrationName) {
            var listener = getListener$1(inst, event.dispatchConfig.registrationName);
            listener && (event._dispatchListeners = accumulateInto(event._dispatchListeners, listener), event._dispatchInstances = accumulateInto(event._dispatchInstances, inst));
        }
    }
}
function accumulateTwoPhaseDispatchesSingleSkipTarget(event) {
    if (event && event.dispatchConfig.phasedRegistrationNames) {
        var targetInst = event._targetInst;
        targetInst = targetInst ? getParent$1(targetInst) : null;
        traverseTwoPhase$1(targetInst, accumulateDirectionalDispatches$1, event);
    }
}
function accumulateTwoPhaseDispatchesSingle$1(event) {
    event && event.dispatchConfig.phasedRegistrationNames && traverseTwoPhase$1(event._targetInst, accumulateDirectionalDispatches$1, event);
}
var ResponderEventPlugin = {
    _getResponder: function() {
        return responderInst;
    },
    eventTypes: eventTypes,
    extractEvents: function(topLevelType, targetInst, nativeEvent, nativeEventTarget) {
        if (isStartish(topLevelType)) trackedTouchCount += 1;
        else if ("topTouchEnd" === topLevelType || "topTouchCancel" === topLevelType) if (0 <= trackedTouchCount) --trackedTouchCount;
        else return null;
        ResponderTouchHistoryStore.recordTouchTrack(topLevelType, nativeEvent);
        if (targetInst && ("topScroll" === topLevelType && !nativeEvent.responderIgnoreScroll || 0 < trackedTouchCount && "topSelectionChange" === topLevelType || isStartish(topLevelType) || isMoveish(topLevelType))) {
            var shouldSetEventType = isStartish(topLevelType) ? eventTypes.startShouldSetResponder : isMoveish(topLevelType) ? eventTypes.moveShouldSetResponder : "topSelectionChange" === topLevelType ? eventTypes.selectionChangeShouldSetResponder : eventTypes.scrollShouldSetResponder;
            if (responderInst) b: {
                var JSCompiler_temp = responderInst;
                for(var depthA = 0, tempA = JSCompiler_temp; tempA; tempA = getParent$1(tempA))depthA++;
                tempA = 0;
                for(var tempB = targetInst; tempB; tempB = getParent$1(tempB))tempA++;
                for(; 0 < depthA - tempA;)JSCompiler_temp = getParent$1(JSCompiler_temp), depthA--;
                for(; 0 < tempA - depthA;)targetInst = getParent$1(targetInst), tempA--;
                for(; depthA--;){
                    if (JSCompiler_temp === targetInst || JSCompiler_temp === targetInst.alternate) break b;
                    JSCompiler_temp = getParent$1(JSCompiler_temp);
                    targetInst = getParent$1(targetInst);
                }
                JSCompiler_temp = null;
            }
            else JSCompiler_temp = targetInst;
            targetInst = JSCompiler_temp;
            JSCompiler_temp = targetInst === responderInst;
            shouldSetEventType = ResponderSyntheticEvent.getPooled(shouldSetEventType, targetInst, nativeEvent, nativeEventTarget);
            shouldSetEventType.touchHistory = ResponderTouchHistoryStore.touchHistory;
            JSCompiler_temp ? forEachAccumulated(shouldSetEventType, accumulateTwoPhaseDispatchesSingleSkipTarget) : forEachAccumulated(shouldSetEventType, accumulateTwoPhaseDispatchesSingle$1);
            b: {
                JSCompiler_temp = shouldSetEventType._dispatchListeners;
                targetInst = shouldSetEventType._dispatchInstances;
                if (isArrayImpl(JSCompiler_temp)) for(depthA = 0; depthA < JSCompiler_temp.length && !shouldSetEventType.isPropagationStopped(); depthA++){
                    if (JSCompiler_temp[depthA](shouldSetEventType, targetInst[depthA])) {
                        JSCompiler_temp = targetInst[depthA];
                        break b;
                    }
                }
                else if (JSCompiler_temp && JSCompiler_temp(shouldSetEventType, targetInst)) {
                    JSCompiler_temp = targetInst;
                    break b;
                }
                JSCompiler_temp = null;
            }
            shouldSetEventType._dispatchInstances = null;
            shouldSetEventType._dispatchListeners = null;
            shouldSetEventType.isPersistent() || shouldSetEventType.constructor.release(shouldSetEventType);
            if (JSCompiler_temp && JSCompiler_temp !== responderInst) if (shouldSetEventType = ResponderSyntheticEvent.getPooled(eventTypes.responderGrant, JSCompiler_temp, nativeEvent, nativeEventTarget), shouldSetEventType.touchHistory = ResponderTouchHistoryStore.touchHistory, forEachAccumulated(shouldSetEventType, accumulateDirectDispatchesSingle$1), targetInst = !0 === executeDirectDispatch(shouldSetEventType), responderInst) if (depthA = ResponderSyntheticEvent.getPooled(eventTypes.responderTerminationRequest, responderInst, nativeEvent, nativeEventTarget), depthA.touchHistory = ResponderTouchHistoryStore.touchHistory, forEachAccumulated(depthA, accumulateDirectDispatchesSingle$1), tempA = !depthA._dispatchListeners || executeDirectDispatch(depthA), depthA.isPersistent() || depthA.constructor.release(depthA), tempA) {
                depthA = ResponderSyntheticEvent.getPooled(eventTypes.responderTerminate, responderInst, nativeEvent, nativeEventTarget);
                depthA.touchHistory = ResponderTouchHistoryStore.touchHistory;
                forEachAccumulated(depthA, accumulateDirectDispatchesSingle$1);
                var JSCompiler_temp$jscomp$0 = accumulate(JSCompiler_temp$jscomp$0, [
                    shouldSetEventType,
                    depthA
                ]);
                changeResponder(JSCompiler_temp, targetInst);
            } else shouldSetEventType = ResponderSyntheticEvent.getPooled(eventTypes.responderReject, JSCompiler_temp, nativeEvent, nativeEventTarget), shouldSetEventType.touchHistory = ResponderTouchHistoryStore.touchHistory, forEachAccumulated(shouldSetEventType, accumulateDirectDispatchesSingle$1), JSCompiler_temp$jscomp$0 = accumulate(JSCompiler_temp$jscomp$0, shouldSetEventType);
            else JSCompiler_temp$jscomp$0 = accumulate(JSCompiler_temp$jscomp$0, shouldSetEventType), changeResponder(JSCompiler_temp, targetInst);
            else JSCompiler_temp$jscomp$0 = null;
        } else JSCompiler_temp$jscomp$0 = null;
        shouldSetEventType = responderInst && isStartish(topLevelType);
        JSCompiler_temp = responderInst && isMoveish(topLevelType);
        targetInst = responderInst && ("topTouchEnd" === topLevelType || "topTouchCancel" === topLevelType);
        if (shouldSetEventType = shouldSetEventType ? eventTypes.responderStart : JSCompiler_temp ? eventTypes.responderMove : targetInst ? eventTypes.responderEnd : null) shouldSetEventType = ResponderSyntheticEvent.getPooled(shouldSetEventType, responderInst, nativeEvent, nativeEventTarget), shouldSetEventType.touchHistory = ResponderTouchHistoryStore.touchHistory, forEachAccumulated(shouldSetEventType, accumulateDirectDispatchesSingle$1), JSCompiler_temp$jscomp$0 = accumulate(JSCompiler_temp$jscomp$0, shouldSetEventType);
        shouldSetEventType = responderInst && "topTouchCancel" === topLevelType;
        if (topLevelType = responderInst && !shouldSetEventType && ("topTouchEnd" === topLevelType || "topTouchCancel" === topLevelType)) a: {
            if ((topLevelType = nativeEvent.touches) && 0 !== topLevelType.length) {
                for(JSCompiler_temp = 0; JSCompiler_temp < topLevelType.length; JSCompiler_temp++)if (targetInst = topLevelType[JSCompiler_temp].target, null !== targetInst && void 0 !== targetInst && 0 !== targetInst) {
                    depthA = getInstanceFromNode(targetInst);
                    b: {
                        for(targetInst = responderInst; depthA;){
                            if (targetInst === depthA || targetInst === depthA.alternate) {
                                targetInst = !0;
                                break b;
                            }
                            depthA = getParent$1(depthA);
                        }
                        targetInst = !1;
                    }
                    if (targetInst) {
                        topLevelType = !1;
                        break a;
                    }
                }
            }
            topLevelType = !0;
        }
        if (topLevelType = shouldSetEventType ? eventTypes.responderTerminate : topLevelType ? eventTypes.responderRelease : null) nativeEvent = ResponderSyntheticEvent.getPooled(topLevelType, responderInst, nativeEvent, nativeEventTarget), nativeEvent.touchHistory = ResponderTouchHistoryStore.touchHistory, forEachAccumulated(nativeEvent, accumulateDirectDispatchesSingle$1), JSCompiler_temp$jscomp$0 = accumulate(JSCompiler_temp$jscomp$0, nativeEvent), changeResponder(null);
        return JSCompiler_temp$jscomp$0;
    },
    GlobalResponderHandler: null,
    injection: {
        injectGlobalResponderHandler: function(GlobalResponderHandler) {
            ResponderEventPlugin.GlobalResponderHandler = GlobalResponderHandler;
        }
    }
}, eventPluginOrder = null, namesToPlugins = {};
function recomputePluginOrdering() {
    if (eventPluginOrder) for(var pluginName in namesToPlugins){
        var pluginModule = namesToPlugins[pluginName], pluginIndex = eventPluginOrder.indexOf(pluginName);
        if (-1 >= pluginIndex) throw Error("EventPluginRegistry: Cannot inject event plugins that do not exist in the plugin ordering, `" + (pluginName + "`."));
        if (!plugins[pluginIndex]) {
            if (!pluginModule.extractEvents) throw Error("EventPluginRegistry: Event plugins must implement an `extractEvents` method, but `" + (pluginName + "` does not."));
            plugins[pluginIndex] = pluginModule;
            pluginIndex = pluginModule.eventTypes;
            for(var eventName in pluginIndex){
                var JSCompiler_inline_result = void 0;
                var dispatchConfig = pluginIndex[eventName];
                if (eventNameDispatchConfigs.hasOwnProperty(eventName)) throw Error("EventPluginRegistry: More than one plugin attempted to publish the same event name, `" + (eventName + "`."));
                eventNameDispatchConfigs[eventName] = dispatchConfig;
                var phasedRegistrationNames = dispatchConfig.phasedRegistrationNames;
                if (phasedRegistrationNames) {
                    for(JSCompiler_inline_result in phasedRegistrationNames)phasedRegistrationNames.hasOwnProperty(JSCompiler_inline_result) && publishRegistrationName(phasedRegistrationNames[JSCompiler_inline_result], pluginModule);
                    JSCompiler_inline_result = !0;
                } else dispatchConfig.registrationName ? (publishRegistrationName(dispatchConfig.registrationName, pluginModule), JSCompiler_inline_result = !0) : JSCompiler_inline_result = !1;
                if (!JSCompiler_inline_result) throw Error("EventPluginRegistry: Failed to publish event `" + eventName + "` for plugin `" + pluginName + "`.");
            }
        }
    }
}
function publishRegistrationName(registrationName, pluginModule) {
    if (registrationNameModules[registrationName]) throw Error("EventPluginRegistry: More than one plugin attempted to publish the same registration name, `" + (registrationName + "`."));
    registrationNameModules[registrationName] = pluginModule;
}
var plugins = [], eventNameDispatchConfigs = {}, registrationNameModules = {};
function getListener(inst, registrationName) {
    inst = inst.stateNode;
    if (null === inst) return null;
    inst = getFiberCurrentPropsFromNode$1(inst);
    if (null === inst) return null;
    if ((inst = inst[registrationName]) && "function" !== typeof inst) throw Error("Expected `" + registrationName + "` listener to be a function, instead got a value of `" + typeof inst + "` type.");
    return inst;
}
var customBubblingEventTypes = ReactNativePrivateInterface.ReactNativeViewConfigRegistry.customBubblingEventTypes, customDirectEventTypes = ReactNativePrivateInterface.ReactNativeViewConfigRegistry.customDirectEventTypes;
function accumulateDirectionalDispatches(inst, phase, event) {
    if (phase = getListener(inst, event.dispatchConfig.phasedRegistrationNames[phase])) event._dispatchListeners = accumulateInto(event._dispatchListeners, phase), event._dispatchInstances = accumulateInto(event._dispatchInstances, inst);
}
function traverseTwoPhase(inst, fn, arg, skipBubbling) {
    for(var path = []; inst;){
        path.push(inst);
        do inst = inst.return;
        while (inst && 5 !== inst.tag);
        inst = inst ? inst : null;
    }
    for(inst = path.length; 0 < inst--;)fn(path[inst], "captured", arg);
    if (skipBubbling) fn(path[0], "bubbled", arg);
    else for(inst = 0; inst < path.length; inst++)fn(path[inst], "bubbled", arg);
}
function accumulateTwoPhaseDispatchesSingle(event) {
    event && event.dispatchConfig.phasedRegistrationNames && traverseTwoPhase(event._targetInst, accumulateDirectionalDispatches, event, !1);
}
function accumulateDirectDispatchesSingle(event) {
    if (event && event.dispatchConfig.registrationName) {
        var inst = event._targetInst;
        if (inst && event && event.dispatchConfig.registrationName) {
            var listener = getListener(inst, event.dispatchConfig.registrationName);
            listener && (event._dispatchListeners = accumulateInto(event._dispatchListeners, listener), event._dispatchInstances = accumulateInto(event._dispatchInstances, inst));
        }
    }
}
if (eventPluginOrder) throw Error("EventPluginRegistry: Cannot inject event plugin ordering more than once. You are likely trying to load more than one copy of React.");
eventPluginOrder = Array.prototype.slice.call([
    "ResponderEventPlugin",
    "ReactNativeBridgeEventPlugin"
]);
recomputePluginOrdering();
var injectedNamesToPlugins$jscomp$inline_288 = {
    ResponderEventPlugin: ResponderEventPlugin,
    ReactNativeBridgeEventPlugin: {
        eventTypes: {},
        extractEvents: function(topLevelType, targetInst, nativeEvent, nativeEventTarget) {
            if (null == targetInst) return null;
            var bubbleDispatchConfig = customBubblingEventTypes[topLevelType], directDispatchConfig = customDirectEventTypes[topLevelType];
            if (!bubbleDispatchConfig && !directDispatchConfig) throw Error('Unsupported top level event type "' + topLevelType + '" dispatched');
            topLevelType = SyntheticEvent.getPooled(bubbleDispatchConfig || directDispatchConfig, targetInst, nativeEvent, nativeEventTarget);
            if (bubbleDispatchConfig) null != topLevelType && null != topLevelType.dispatchConfig.phasedRegistrationNames && topLevelType.dispatchConfig.phasedRegistrationNames.skipBubbling ? topLevelType && topLevelType.dispatchConfig.phasedRegistrationNames && traverseTwoPhase(topLevelType._targetInst, accumulateDirectionalDispatches, topLevelType, !0) : forEachAccumulated(topLevelType, accumulateTwoPhaseDispatchesSingle);
            else if (directDispatchConfig) forEachAccumulated(topLevelType, accumulateDirectDispatchesSingle);
            else return null;
            return topLevelType;
        }
    }
}, isOrderingDirty$jscomp$inline_289 = !1, pluginName$jscomp$inline_290;
for(pluginName$jscomp$inline_290 in injectedNamesToPlugins$jscomp$inline_288)if (injectedNamesToPlugins$jscomp$inline_288.hasOwnProperty(pluginName$jscomp$inline_290)) {
    var pluginModule$jscomp$inline_291 = injectedNamesToPlugins$jscomp$inline_288[pluginName$jscomp$inline_290];
    if (!namesToPlugins.hasOwnProperty(pluginName$jscomp$inline_290) || namesToPlugins[pluginName$jscomp$inline_290] !== pluginModule$jscomp$inline_291) {
        if (namesToPlugins[pluginName$jscomp$inline_290]) throw Error("EventPluginRegistry: Cannot inject two different event plugins using the same name, `" + (pluginName$jscomp$inline_290 + "`."));
        namesToPlugins[pluginName$jscomp$inline_290] = pluginModule$jscomp$inline_291;
        isOrderingDirty$jscomp$inline_289 = !0;
    }
}
isOrderingDirty$jscomp$inline_289 && recomputePluginOrdering();
var instanceCache = new Map(), instanceProps = new Map();
function getInstanceFromTag(tag) {
    return instanceCache.get(tag) || null;
}
function batchedUpdatesImpl(fn, bookkeeping) {
    return fn(bookkeeping);
}
var isInsideEventHandler = !1;
function batchedUpdates$1(fn, bookkeeping) {
    if (isInsideEventHandler) return fn(bookkeeping);
    isInsideEventHandler = !0;
    try {
        return batchedUpdatesImpl(fn, bookkeeping);
    } finally{
        isInsideEventHandler = !1;
    }
}
var eventQueue = null;
function executeDispatchesAndReleaseTopLevel(e) {
    if (e) {
        var dispatchListeners = e._dispatchListeners, dispatchInstances = e._dispatchInstances;
        if (isArrayImpl(dispatchListeners)) for(var i = 0; i < dispatchListeners.length && !e.isPropagationStopped(); i++)executeDispatch(e, dispatchListeners[i], dispatchInstances[i]);
        else dispatchListeners && executeDispatch(e, dispatchListeners, dispatchInstances);
        e._dispatchListeners = null;
        e._dispatchInstances = null;
        e.isPersistent() || e.constructor.release(e);
    }
}
var EMPTY_NATIVE_EVENT = {};
function _receiveRootNodeIDEvent(rootNodeID, topLevelType, nativeEventParam) {
    var nativeEvent = nativeEventParam || EMPTY_NATIVE_EVENT, inst = getInstanceFromTag(rootNodeID), target = null;
    null != inst && (target = inst.stateNode);
    batchedUpdates$1(function() {
        var JSCompiler_inline_result = target;
        for(var events = null, legacyPlugins = plugins, i = 0; i < legacyPlugins.length; i++){
            var possiblePlugin = legacyPlugins[i];
            possiblePlugin && (possiblePlugin = possiblePlugin.extractEvents(topLevelType, inst, nativeEvent, JSCompiler_inline_result)) && (events = accumulateInto(events, possiblePlugin));
        }
        JSCompiler_inline_result = events;
        null !== JSCompiler_inline_result && (eventQueue = accumulateInto(eventQueue, JSCompiler_inline_result));
        JSCompiler_inline_result = eventQueue;
        eventQueue = null;
        if (JSCompiler_inline_result) {
            forEachAccumulated(JSCompiler_inline_result, executeDispatchesAndReleaseTopLevel);
            if (eventQueue) throw Error("processEventQueue(): Additional events were enqueued while processing an event queue. Support for this has not yet been implemented.");
            if (hasError) throw JSCompiler_inline_result = caughtError, hasError = !1, caughtError = null, JSCompiler_inline_result;
        }
    });
}
ReactNativePrivateInterface.RCTEventEmitter.register({
    receiveEvent: function(rootNodeID, topLevelType, nativeEventParam) {
        _receiveRootNodeIDEvent(rootNodeID, topLevelType, nativeEventParam);
    },
    receiveTouches: function(eventTopLevelType, touches, changedIndices) {
        if ("topTouchEnd" === eventTopLevelType || "topTouchCancel" === eventTopLevelType) {
            var JSCompiler_temp = [];
            for(var i = 0; i < changedIndices.length; i++){
                var index$4 = changedIndices[i];
                JSCompiler_temp.push(touches[index$4]);
                touches[index$4] = null;
            }
            for(i = changedIndices = 0; i < touches.length; i++)index$4 = touches[i], null !== index$4 && (touches[changedIndices++] = index$4);
            touches.length = changedIndices;
        } else for(JSCompiler_temp = [], i = 0; i < changedIndices.length; i++)JSCompiler_temp.push(touches[changedIndices[i]]);
        for(changedIndices = 0; changedIndices < JSCompiler_temp.length; changedIndices++){
            i = JSCompiler_temp[changedIndices];
            i.changedTouches = JSCompiler_temp;
            i.touches = touches;
            index$4 = null;
            var target = i.target;
            null === target || void 0 === target || 1 > target || (index$4 = target);
            _receiveRootNodeIDEvent(index$4, eventTopLevelType, i);
        }
    }
});
getFiberCurrentPropsFromNode$1 = function(stateNode) {
    return instanceProps.get(stateNode._nativeTag) || null;
};
getInstanceFromNode = getInstanceFromTag;
getNodeFromInstance = function(inst) {
    inst = inst.stateNode;
    var tag = inst._nativeTag;
    void 0 === tag && null != inst.canonical && (tag = inst.canonical.nativeTag, inst = inst.canonical.publicInstance);
    if (!tag) throw Error("All native instances should have a tag.");
    return inst;
};
ResponderEventPlugin.injection.injectGlobalResponderHandler({
    onChange: function(from, to, blockNativeResponder) {
        null !== to ? ReactNativePrivateInterface.UIManager.setJSResponder(to.stateNode._nativeTag, blockNativeResponder) : ReactNativePrivateInterface.UIManager.clearJSResponder();
    }
});
function getNearestMountedFiber(fiber) {
    var node = fiber, nearestMounted = fiber;
    if (fiber.alternate) for(; node.return;)node = node.return;
    else {
        fiber = node;
        do node = fiber, 0 !== (node.flags & 4098) && (nearestMounted = node.return), fiber = node.return;
        while (fiber);
    }
    return 3 === node.tag ? nearestMounted : null;
}
function assertIsMounted(fiber) {
    if (getNearestMountedFiber(fiber) !== fiber) throw Error("Unable to find node on an unmounted component.");
}
function findCurrentFiberUsingSlowPath(fiber) {
    var alternate = fiber.alternate;
    if (!alternate) {
        alternate = getNearestMountedFiber(fiber);
        if (null === alternate) throw Error("Unable to find node on an unmounted component.");
        return alternate !== fiber ? null : fiber;
    }
    for(var a = fiber, b = alternate;;){
        var parentA = a.return;
        if (null === parentA) break;
        var parentB = parentA.alternate;
        if (null === parentB) {
            b = parentA.return;
            if (null !== b) {
                a = b;
                continue;
            }
            break;
        }
        if (parentA.child === parentB.child) {
            for(parentB = parentA.child; parentB;){
                if (parentB === a) return assertIsMounted(parentA), fiber;
                if (parentB === b) return assertIsMounted(parentA), alternate;
                parentB = parentB.sibling;
            }
            throw Error("Unable to find node on an unmounted component.");
        }
        if (a.return !== b.return) a = parentA, b = parentB;
        else {
            for(var didFindChild = !1, child$5 = parentA.child; child$5;){
                if (child$5 === a) {
                    didFindChild = !0;
                    a = parentA;
                    b = parentB;
                    break;
                }
                if (child$5 === b) {
                    didFindChild = !0;
                    b = parentA;
                    a = parentB;
                    break;
                }
                child$5 = child$5.sibling;
            }
            if (!didFindChild) {
                for(child$5 = parentB.child; child$5;){
                    if (child$5 === a) {
                        didFindChild = !0;
                        a = parentB;
                        b = parentA;
                        break;
                    }
                    if (child$5 === b) {
                        didFindChild = !0;
                        b = parentB;
                        a = parentA;
                        break;
                    }
                    child$5 = child$5.sibling;
                }
                if (!didFindChild) throw Error("Child was not found in either parent set. This indicates a bug in React related to the return pointer. Please file an issue.");
            }
        }
        if (a.alternate !== b) throw Error("Return fibers should always be each others' alternates. This error is likely caused by a bug in React. Please file an issue.");
    }
    if (3 !== a.tag) throw Error("Unable to find node on an unmounted component.");
    return a.stateNode.current === a ? fiber : alternate;
}
function findCurrentHostFiberImpl(node) {
    var tag = node.tag;
    if (5 === tag || 26 === tag || 27 === tag || 6 === tag) return node;
    for(node = node.child; null !== node;){
        tag = findCurrentHostFiberImpl(node);
        if (null !== tag) return tag;
        node = node.sibling;
    }
    return null;
}
var emptyObject = {}, removedKeys = null, removedKeyCount = 0, deepDifferOptions = {
    unsafelyIgnoreFunctions: !0
};
function defaultDiffer(prevProp, nextProp) {
    return "object" !== typeof nextProp || null === nextProp ? !0 : ReactNativePrivateInterface.deepDiffer(prevProp, nextProp, deepDifferOptions);
}
function restoreDeletedValuesInNestedArray(updatePayload, node, validAttributes) {
    if (isArrayImpl(node)) for(var i = node.length; i-- && 0 < removedKeyCount;)restoreDeletedValuesInNestedArray(updatePayload, node[i], validAttributes);
    else if (node && 0 < removedKeyCount) {
        for(i in removedKeys)if (removedKeys[i]) {
            var nextProp = node[i];
            if (void 0 !== nextProp) {
                var attributeConfig = validAttributes[i];
                if (attributeConfig) {
                    "function" === typeof nextProp && (nextProp = !0);
                    "undefined" === typeof nextProp && (nextProp = null);
                    if ("object" !== typeof attributeConfig) updatePayload[i] = nextProp;
                    else if ("function" === typeof attributeConfig.diff || "function" === typeof attributeConfig.process) nextProp = "function" === typeof attributeConfig.process ? attributeConfig.process(nextProp) : nextProp, updatePayload[i] = nextProp;
                    removedKeys[i] = !1;
                    removedKeyCount--;
                }
            }
        }
    }
}
function diffNestedProperty(updatePayload, prevProp, nextProp, validAttributes) {
    if (!updatePayload && prevProp === nextProp) return updatePayload;
    if (!prevProp || !nextProp) return nextProp ? addNestedProperty(updatePayload, nextProp, validAttributes) : prevProp ? clearNestedProperty(updatePayload, prevProp, validAttributes) : updatePayload;
    if (!isArrayImpl(prevProp) && !isArrayImpl(nextProp)) return diffProperties(updatePayload, prevProp, nextProp, validAttributes);
    if (isArrayImpl(prevProp) && isArrayImpl(nextProp)) {
        var minLength = prevProp.length < nextProp.length ? prevProp.length : nextProp.length, i;
        for(i = 0; i < minLength; i++)updatePayload = diffNestedProperty(updatePayload, prevProp[i], nextProp[i], validAttributes);
        for(; i < prevProp.length; i++)updatePayload = clearNestedProperty(updatePayload, prevProp[i], validAttributes);
        for(; i < nextProp.length; i++)updatePayload = addNestedProperty(updatePayload, nextProp[i], validAttributes);
        return updatePayload;
    }
    return isArrayImpl(prevProp) ? diffProperties(updatePayload, ReactNativePrivateInterface.flattenStyle(prevProp), nextProp, validAttributes) : diffProperties(updatePayload, prevProp, ReactNativePrivateInterface.flattenStyle(nextProp), validAttributes);
}
function addNestedProperty(updatePayload, nextProp, validAttributes) {
    if (!nextProp) return updatePayload;
    if (!isArrayImpl(nextProp)) return diffProperties(updatePayload, emptyObject, nextProp, validAttributes);
    for(var i = 0; i < nextProp.length; i++)updatePayload = addNestedProperty(updatePayload, nextProp[i], validAttributes);
    return updatePayload;
}
function clearNestedProperty(updatePayload, prevProp, validAttributes) {
    if (!prevProp) return updatePayload;
    if (!isArrayImpl(prevProp)) return diffProperties(updatePayload, prevProp, emptyObject, validAttributes);
    for(var i = 0; i < prevProp.length; i++)updatePayload = clearNestedProperty(updatePayload, prevProp[i], validAttributes);
    return updatePayload;
}
function diffProperties(updatePayload, prevProps, nextProps, validAttributes) {
    var attributeConfig, propKey;
    for(propKey in nextProps)if (attributeConfig = validAttributes[propKey]) {
        var prevProp = prevProps[propKey];
        var nextProp = nextProps[propKey];
        "function" === typeof nextProp && (nextProp = !0, "function" === typeof prevProp && (prevProp = !0));
        "undefined" === typeof nextProp && (nextProp = null, "undefined" === typeof prevProp && (prevProp = null));
        removedKeys && (removedKeys[propKey] = !1);
        if (updatePayload && void 0 !== updatePayload[propKey]) if ("object" !== typeof attributeConfig) updatePayload[propKey] = nextProp;
        else {
            if ("function" === typeof attributeConfig.diff || "function" === typeof attributeConfig.process) attributeConfig = "function" === typeof attributeConfig.process ? attributeConfig.process(nextProp) : nextProp, updatePayload[propKey] = attributeConfig;
        }
        else if (prevProp !== nextProp) if ("object" !== typeof attributeConfig) defaultDiffer(prevProp, nextProp) && ((updatePayload || (updatePayload = {}))[propKey] = nextProp);
        else if ("function" === typeof attributeConfig.diff || "function" === typeof attributeConfig.process) {
            if (void 0 === prevProp || ("function" === typeof attributeConfig.diff ? attributeConfig.diff(prevProp, nextProp) : defaultDiffer(prevProp, nextProp))) attributeConfig = "function" === typeof attributeConfig.process ? attributeConfig.process(nextProp) : nextProp, (updatePayload || (updatePayload = {}))[propKey] = attributeConfig;
        } else removedKeys = null, removedKeyCount = 0, updatePayload = diffNestedProperty(updatePayload, prevProp, nextProp, attributeConfig), 0 < removedKeyCount && updatePayload && (restoreDeletedValuesInNestedArray(updatePayload, nextProp, attributeConfig), removedKeys = null);
    }
    for(var propKey$7 in prevProps)void 0 === nextProps[propKey$7] && (!(attributeConfig = validAttributes[propKey$7]) || updatePayload && void 0 !== updatePayload[propKey$7] || (prevProp = prevProps[propKey$7], void 0 !== prevProp && ("object" !== typeof attributeConfig || "function" === typeof attributeConfig.diff || "function" === typeof attributeConfig.process ? ((updatePayload || (updatePayload = {}))[propKey$7] = null, removedKeys || (removedKeys = {}), removedKeys[propKey$7] || (removedKeys[propKey$7] = !0, removedKeyCount++)) : updatePayload = clearNestedProperty(updatePayload, prevProp, attributeConfig))));
    return updatePayload;
}
function mountSafeCallback_NOT_REALLY_SAFE(context, callback) {
    return function() {
        if (callback && ("boolean" !== typeof context.__isMounted || context.__isMounted)) return callback.apply(context, arguments);
    };
}
var ReactNativeFiberHostComponent = function() {
    function ReactNativeFiberHostComponent(tag, viewConfig) {
        this.viewConfig = this._internalFiberInstanceHandleDEV = void 0;
        this._nativeTag = tag;
        this._children = [];
        this.viewConfig = viewConfig;
    }
    var _proto = ReactNativeFiberHostComponent.prototype;
    _proto.blur = function() {
        ReactNativePrivateInterface.TextInputState.blurTextInput(this);
    };
    _proto.focus = function() {
        ReactNativePrivateInterface.TextInputState.focusTextInput(this);
    };
    _proto.measure = function(callback) {
        ReactNativePrivateInterface.UIManager.measure(this._nativeTag, mountSafeCallback_NOT_REALLY_SAFE(this, callback));
    };
    _proto.measureInWindow = function(callback) {
        ReactNativePrivateInterface.UIManager.measureInWindow(this._nativeTag, mountSafeCallback_NOT_REALLY_SAFE(this, callback));
    };
    _proto.measureLayout = function(relativeToNativeNode, onSuccess, onFail) {
        if ("number" === typeof relativeToNativeNode) var relativeNode = relativeToNativeNode;
        else relativeToNativeNode._nativeTag && (relativeNode = relativeToNativeNode._nativeTag);
        null != relativeNode && ReactNativePrivateInterface.UIManager.measureLayout(this._nativeTag, relativeNode, mountSafeCallback_NOT_REALLY_SAFE(this, onFail), mountSafeCallback_NOT_REALLY_SAFE(this, onSuccess));
    };
    _proto.setNativeProps = function(nativeProps) {
        nativeProps = diffProperties(null, emptyObject, nativeProps, this.viewConfig.validAttributes);
        null != nativeProps && ReactNativePrivateInterface.UIManager.updateView(this._nativeTag, this.viewConfig.uiViewClassName, nativeProps);
    };
    return ReactNativeFiberHostComponent;
}(), scheduleCallback$3 = Scheduler.unstable_scheduleCallback, cancelCallback$1 = Scheduler.unstable_cancelCallback, shouldYield = Scheduler.unstable_shouldYield, requestPaint = Scheduler.unstable_requestPaint, now = Scheduler.unstable_now, ImmediatePriority = Scheduler.unstable_ImmediatePriority, UserBlockingPriority = Scheduler.unstable_UserBlockingPriority, NormalPriority$1 = Scheduler.unstable_NormalPriority, IdlePriority = Scheduler.unstable_IdlePriority, log$1 = Scheduler.log, unstable_setDisableYieldValue = Scheduler.unstable_setDisableYieldValue, rendererID = null, injectedHook = null;
function onCommitRoot(root) {
    if (injectedHook && "function" === typeof injectedHook.onCommitFiberRoot) try {
        injectedHook.onCommitFiberRoot(rendererID, root, void 0, 128 === (root.current.flags & 128));
    } catch (err) {}
}
function setIsStrictModeForDevtools(newIsStrictMode) {
    "function" === typeof log$1 && unstable_setDisableYieldValue(newIsStrictMode);
    if (injectedHook && "function" === typeof injectedHook.setStrictMode) try {
        injectedHook.setStrictMode(rendererID, newIsStrictMode);
    } catch (err) {}
}
var clz32 = Math.clz32 ? Math.clz32 : clz32Fallback, log = Math.log, LN2 = Math.LN2;
function clz32Fallback(x) {
    x >>>= 0;
    return 0 === x ? 32 : 31 - (log(x) / LN2 | 0) | 0;
}
var nextTransitionLane = 128, nextRetryLane = 4194304;
function getHighestPriorityLanes(lanes) {
    var pendingSyncLanes = lanes & 42;
    if (0 !== pendingSyncLanes) return pendingSyncLanes;
    switch(lanes & -lanes){
        case 1:
            return 1;
        case 2:
            return 2;
        case 4:
            return 4;
        case 8:
            return 8;
        case 16:
            return 16;
        case 32:
            return 32;
        case 64:
            return 64;
        case 128:
        case 256:
        case 512:
        case 1024:
        case 2048:
        case 4096:
        case 8192:
        case 16384:
        case 32768:
        case 65536:
        case 131072:
        case 262144:
        case 524288:
        case 1048576:
        case 2097152:
            return lanes & 4194176;
        case 4194304:
        case 8388608:
        case 16777216:
        case 33554432:
            return lanes & 62914560;
        case 67108864:
            return 67108864;
        case 134217728:
            return 134217728;
        case 268435456:
            return 268435456;
        case 536870912:
            return 536870912;
        case 1073741824:
            return 0;
        default:
            return lanes;
    }
}
function getNextLanes(root, wipLanes) {
    var pendingLanes = root.pendingLanes;
    if (0 === pendingLanes) return 0;
    var nextLanes = 0, suspendedLanes = root.suspendedLanes, pingedLanes = root.pingedLanes, warmLanes = root.warmLanes;
    root = 0 !== root.finishedLanes;
    var nonIdlePendingLanes = pendingLanes & 134217727;
    0 !== nonIdlePendingLanes ? (pendingLanes = nonIdlePendingLanes & ~suspendedLanes, 0 !== pendingLanes ? nextLanes = getHighestPriorityLanes(pendingLanes) : (pingedLanes &= nonIdlePendingLanes, 0 !== pingedLanes ? nextLanes = getHighestPriorityLanes(pingedLanes) : root || (warmLanes = nonIdlePendingLanes & ~warmLanes, 0 !== warmLanes && (nextLanes = getHighestPriorityLanes(warmLanes))))) : (nonIdlePendingLanes = pendingLanes & ~suspendedLanes, 0 !== nonIdlePendingLanes ? nextLanes = getHighestPriorityLanes(nonIdlePendingLanes) : 0 !== pingedLanes ? nextLanes = getHighestPriorityLanes(pingedLanes) : root || (warmLanes = pendingLanes & ~warmLanes, 0 !== warmLanes && (nextLanes = getHighestPriorityLanes(warmLanes))));
    return 0 === nextLanes ? 0 : 0 !== wipLanes && wipLanes !== nextLanes && 0 === (wipLanes & suspendedLanes) && (suspendedLanes = nextLanes & -nextLanes, warmLanes = wipLanes & -wipLanes, suspendedLanes >= warmLanes || 32 === suspendedLanes && 0 !== (warmLanes & 4194176)) ? wipLanes : nextLanes;
}
function checkIfRootIsPrerendering(root, renderLanes) {
    return 0 === (root.pendingLanes & ~(root.suspendedLanes & ~root.pingedLanes) & renderLanes);
}
function computeExpirationTime(lane, currentTime) {
    switch(lane){
        case 1:
        case 2:
        case 4:
        case 8:
            return currentTime + 250;
        case 16:
        case 32:
        case 64:
        case 128:
        case 256:
        case 512:
        case 1024:
        case 2048:
        case 4096:
        case 8192:
        case 16384:
        case 32768:
        case 65536:
        case 131072:
        case 262144:
        case 524288:
        case 1048576:
        case 2097152:
            return currentTime + 5e3;
        case 4194304:
        case 8388608:
        case 16777216:
        case 33554432:
            return -1;
        case 67108864:
        case 134217728:
        case 268435456:
        case 536870912:
        case 1073741824:
            return -1;
        default:
            return -1;
    }
}
function claimNextTransitionLane() {
    var lane = nextTransitionLane;
    nextTransitionLane <<= 1;
    0 === (nextTransitionLane & 4194176) && (nextTransitionLane = 128);
    return lane;
}
function claimNextRetryLane() {
    var lane = nextRetryLane;
    nextRetryLane <<= 1;
    0 === (nextRetryLane & 62914560) && (nextRetryLane = 4194304);
    return lane;
}
function createLaneMap(initial) {
    for(var laneMap = [], i = 0; 31 > i; i++)laneMap.push(initial);
    return laneMap;
}
function markRootUpdated$1(root, updateLane) {
    root.pendingLanes |= updateLane;
    268435456 !== updateLane && (root.suspendedLanes = 0, root.pingedLanes = 0, root.warmLanes = 0);
}
function markRootFinished(root, finishedLanes, remainingLanes, spawnedLane, updatedLanes, suspendedRetryLanes) {
    var previouslyPendingLanes = root.pendingLanes;
    root.pendingLanes = remainingLanes;
    root.suspendedLanes = 0;
    root.pingedLanes = 0;
    root.warmLanes = 0;
    root.expiredLanes &= remainingLanes;
    root.entangledLanes &= remainingLanes;
    root.errorRecoveryDisabledLanes &= remainingLanes;
    root.shellSuspendCounter = 0;
    var entanglements = root.entanglements, expirationTimes = root.expirationTimes, hiddenUpdates = root.hiddenUpdates;
    for(remainingLanes = previouslyPendingLanes & ~remainingLanes; 0 < remainingLanes;){
        var index$12 = 31 - clz32(remainingLanes), lane = 1 << index$12;
        entanglements[index$12] = 0;
        expirationTimes[index$12] = -1;
        var hiddenUpdatesForLane = hiddenUpdates[index$12];
        if (null !== hiddenUpdatesForLane) for(hiddenUpdates[index$12] = null, index$12 = 0; index$12 < hiddenUpdatesForLane.length; index$12++){
            var update = hiddenUpdatesForLane[index$12];
            null !== update && (update.lane &= -536870913);
        }
        remainingLanes &= ~lane;
    }
    0 !== spawnedLane && markSpawnedDeferredLane(root, spawnedLane, 0);
    0 !== suspendedRetryLanes && 0 === updatedLanes && (root.suspendedLanes |= suspendedRetryLanes & ~(previouslyPendingLanes & ~finishedLanes));
}
function markSpawnedDeferredLane(root, spawnedLane, entangledLanes) {
    root.pendingLanes |= spawnedLane;
    root.suspendedLanes &= ~spawnedLane;
    var spawnedLaneIndex = 31 - clz32(spawnedLane);
    root.entangledLanes |= spawnedLane;
    root.entanglements[spawnedLaneIndex] = root.entanglements[spawnedLaneIndex] | 1073741824 | entangledLanes & 4194218;
}
function markRootEntangled(root, entangledLanes) {
    var rootEntangledLanes = root.entangledLanes |= entangledLanes;
    for(root = root.entanglements; rootEntangledLanes;){
        var index$13 = 31 - clz32(rootEntangledLanes), lane = 1 << index$13;
        lane & entangledLanes | root[index$13] & entangledLanes && (root[index$13] |= entangledLanes);
        rootEntangledLanes &= ~lane;
    }
}
function lanesToEventPriority(lanes) {
    lanes &= -lanes;
    return 2 < lanes ? 8 < lanes ? 0 !== (lanes & 134217727) ? 32 : 268435456 : 8 : 2;
}
function getInspectorDataForInstance() {
    throw Error("getInspectorDataForInstance() is not available in production");
}
function shim$1() {
    throw Error("The current renderer does not support hydration. This error is likely caused by a bug in React. Please file an issue.");
}
function shim() {
    throw Error("The current renderer does not support Resources. This error is likely caused by a bug in React. Please file an issue.");
}
var extraDevToolsConfig = {
    getInspectorDataForInstance: getInspectorDataForInstance,
    getInspectorDataForViewTag: function() {
        throw Error("getInspectorDataForViewTag() is not available in production");
    },
    getInspectorDataForViewAtPoint: function() {
        throw Error("getInspectorDataForViewAtPoint() is not available in production.");
    }
}, getViewConfigForType = ReactNativePrivateInterface.ReactNativeViewConfigRegistry.get, nextReactTag = 3;
function allocateTag() {
    var tag = nextReactTag;
    1 === tag % 10 && (tag += 2);
    nextReactTag = tag + 2;
    return tag;
}
function recursivelyUncacheFiberNode(node) {
    if ("number" === typeof node) instanceCache.delete(node), instanceProps.delete(node);
    else {
        var tag = node._nativeTag;
        instanceCache.delete(tag);
        instanceProps.delete(tag);
        node._children.forEach(recursivelyUncacheFiberNode);
    }
}
function finalizeInitialChildren(parentInstance) {
    if (0 === parentInstance._children.length) return !1;
    var nativeTags = parentInstance._children.map(function(child) {
        return "number" === typeof child ? child : child._nativeTag;
    });
    ReactNativePrivateInterface.UIManager.setChildren(parentInstance._nativeTag, nativeTags);
    return !1;
}
function getPublicInstance(instance) {
    return null != instance.canonical && null != instance.canonical.publicInstance ? instance.canonical.publicInstance : instance;
}
var scheduleTimeout = setTimeout, cancelTimeout = clearTimeout, currentUpdatePriority = 0, HostTransitionContext = {
    $$typeof: REACT_CONTEXT_TYPE,
    Provider: null,
    Consumer: null,
    _currentValue: null,
    _currentValue2: null,
    _threadCount: 0
}, valueStack = [], index = -1;
function createCursor(defaultValue) {
    return {
        current: defaultValue
    };
}
function pop(cursor) {
    0 > index || (cursor.current = valueStack[index], valueStack[index] = null, index--);
}
function push(cursor, value) {
    index++;
    valueStack[index] = cursor.current;
    cursor.current = value;
}
var emptyContextObject = {};
function is(x, y) {
    return x === y && (0 !== x || 1 / x === 1 / y) || x !== x && y !== y;
}
var objectIs = "function" === typeof Object.is ? Object.is : is, CapturedStacks = new WeakMap();
function createCapturedValueAtFiber(value, source) {
    if ("object" === typeof value && null !== value) {
        var existing = CapturedStacks.get(value);
        if (void 0 !== existing) return existing;
        source = {
            value: value,
            source: source,
            stack: getStackByFiberInDevAndProd(source)
        };
        CapturedStacks.set(value, source);
        return source;
    }
    return {
        value: value,
        source: source,
        stack: getStackByFiberInDevAndProd(source)
    };
}
var contextStackCursor = createCursor(null), contextFiberStackCursor = createCursor(null), rootInstanceStackCursor = createCursor(null), hostTransitionProviderCursor = createCursor(null);
function pushHostContainer(fiber, nextRootInstance) {
    push(rootInstanceStackCursor, nextRootInstance);
    push(contextFiberStackCursor, fiber);
    push(contextStackCursor, null);
    pop(contextStackCursor);
    push(contextStackCursor, {
        isInAParentText: !1
    });
}
function popHostContainer() {
    pop(contextStackCursor);
    pop(contextFiberStackCursor);
    pop(rootInstanceStackCursor);
}
function pushHostContext(fiber) {
    null !== fiber.memoizedState && push(hostTransitionProviderCursor, fiber);
    var context = contextStackCursor.current;
    var JSCompiler_inline_result = fiber.type;
    JSCompiler_inline_result = "AndroidTextInput" === JSCompiler_inline_result || "RCTMultilineTextInputView" === JSCompiler_inline_result || "RCTSinglelineTextInputView" === JSCompiler_inline_result || "RCTText" === JSCompiler_inline_result || "RCTVirtualText" === JSCompiler_inline_result;
    JSCompiler_inline_result = context.isInAParentText !== JSCompiler_inline_result ? {
        isInAParentText: JSCompiler_inline_result
    } : context;
    context !== JSCompiler_inline_result && (push(contextFiberStackCursor, fiber), push(contextStackCursor, JSCompiler_inline_result));
}
function popHostContext(fiber) {
    contextFiberStackCursor.current === fiber && (pop(contextStackCursor), pop(contextFiberStackCursor));
    hostTransitionProviderCursor.current === fiber && (pop(hostTransitionProviderCursor), HostTransitionContext._currentValue = null);
}
var hydrationErrors = null, concurrentQueues = [], concurrentQueuesIndex = 0, concurrentlyUpdatedLanes = 0;
function finishQueueingConcurrentUpdates() {
    for(var endIndex = concurrentQueuesIndex, i = concurrentlyUpdatedLanes = concurrentQueuesIndex = 0; i < endIndex;){
        var fiber = concurrentQueues[i];
        concurrentQueues[i++] = null;
        var queue = concurrentQueues[i];
        concurrentQueues[i++] = null;
        var update = concurrentQueues[i];
        concurrentQueues[i++] = null;
        var lane = concurrentQueues[i];
        concurrentQueues[i++] = null;
        if (null !== queue && null !== update) {
            var pending = queue.pending;
            null === pending ? update.next = update : (update.next = pending.next, pending.next = update);
            queue.pending = update;
        }
        0 !== lane && markUpdateLaneFromFiberToRoot(fiber, update, lane);
    }
}
function enqueueUpdate$1(fiber, queue, update, lane) {
    concurrentQueues[concurrentQueuesIndex++] = fiber;
    concurrentQueues[concurrentQueuesIndex++] = queue;
    concurrentQueues[concurrentQueuesIndex++] = update;
    concurrentQueues[concurrentQueuesIndex++] = lane;
    concurrentlyUpdatedLanes |= lane;
    fiber.lanes |= lane;
    fiber = fiber.alternate;
    null !== fiber && (fiber.lanes |= lane);
}
function enqueueConcurrentHookUpdate(fiber, queue, update, lane) {
    enqueueUpdate$1(fiber, queue, update, lane);
    return getRootForUpdatedFiber(fiber);
}
function enqueueConcurrentRenderForLane(fiber, lane) {
    enqueueUpdate$1(fiber, null, null, lane);
    return getRootForUpdatedFiber(fiber);
}
function markUpdateLaneFromFiberToRoot(sourceFiber, update, lane) {
    sourceFiber.lanes |= lane;
    var alternate = sourceFiber.alternate;
    null !== alternate && (alternate.lanes |= lane);
    for(var isHidden = !1, parent = sourceFiber.return; null !== parent;)parent.childLanes |= lane, alternate = parent.alternate, null !== alternate && (alternate.childLanes |= lane), 22 === parent.tag && (sourceFiber = parent.stateNode, null === sourceFiber || sourceFiber._visibility & 1 || (isHidden = !0)), sourceFiber = parent, parent = parent.return;
    isHidden && null !== update && 3 === sourceFiber.tag && (parent = sourceFiber.stateNode, isHidden = 31 - clz32(lane), parent = parent.hiddenUpdates, sourceFiber = parent[isHidden], null === sourceFiber ? parent[isHidden] = [
        update
    ] : sourceFiber.push(update), update.lane = lane | 536870912);
}
function getRootForUpdatedFiber(sourceFiber) {
    if (50 < nestedUpdateCount) throw nestedUpdateCount = 0, rootWithNestedUpdates = null, Error("Maximum update depth exceeded. This can happen when a component repeatedly calls setState inside componentWillUpdate or componentDidUpdate. React limits the number of nested updates to prevent infinite loops.");
    for(var parent = sourceFiber.return; null !== parent;)sourceFiber = parent, parent = sourceFiber.return;
    return 3 === sourceFiber.tag ? sourceFiber.stateNode : null;
}
var firstScheduledRoot = null, lastScheduledRoot = null, didScheduleMicrotask = !1, mightHavePendingSyncWork = !1, isFlushingWork = !1, currentEventTransitionLane = 0;
function ensureRootIsScheduled(root) {
    root !== lastScheduledRoot && null === root.next && (null === lastScheduledRoot ? firstScheduledRoot = lastScheduledRoot = root : lastScheduledRoot = lastScheduledRoot.next = root);
    mightHavePendingSyncWork = !0;
    didScheduleMicrotask || (didScheduleMicrotask = !0, scheduleCallback$3(ImmediatePriority, processRootScheduleInMicrotask));
}
function flushSyncWorkAcrossRoots_impl(syncTransitionLanes, onlyLegacy) {
    if (!isFlushingWork && mightHavePendingSyncWork) {
        isFlushingWork = !0;
        do {
            var didPerformSomeWork = !1;
            for(var root = firstScheduledRoot; null !== root;){
                if (!onlyLegacy || 0 === root.tag) if (0 !== syncTransitionLanes) {
                    var pendingLanes = root.pendingLanes;
                    if (0 === pendingLanes) var JSCompiler_inline_result = 0;
                    else {
                        var suspendedLanes = root.suspendedLanes, pingedLanes = root.pingedLanes;
                        JSCompiler_inline_result = (1 << 31 - clz32(42 | syncTransitionLanes) + 1) - 1;
                        JSCompiler_inline_result &= pendingLanes & ~(suspendedLanes & ~pingedLanes);
                        JSCompiler_inline_result = JSCompiler_inline_result & 201326677 ? JSCompiler_inline_result & 201326677 | 1 : JSCompiler_inline_result ? JSCompiler_inline_result | 2 : 0;
                    }
                    0 !== JSCompiler_inline_result && (didPerformSomeWork = !0, performSyncWorkOnRoot(root, JSCompiler_inline_result));
                } else JSCompiler_inline_result = workInProgressRootRenderLanes, JSCompiler_inline_result = getNextLanes(root, root === workInProgressRoot ? JSCompiler_inline_result : 0), 0 === (JSCompiler_inline_result & 3) || checkIfRootIsPrerendering(root, JSCompiler_inline_result) || (didPerformSomeWork = !0, performSyncWorkOnRoot(root, JSCompiler_inline_result));
                root = root.next;
            }
        }while (didPerformSomeWork);
        isFlushingWork = !1;
    }
}
function processRootScheduleInMicrotask() {
    mightHavePendingSyncWork = didScheduleMicrotask = !1;
    0 !== currentEventTransitionLane && (currentEventTransitionLane = 0);
    for(var currentTime = now(), prev = null, root = firstScheduledRoot; null !== root;){
        var next = root.next, nextLanes = scheduleTaskForRootDuringMicrotask(root, currentTime);
        0 === nextLanes ? (root.next = null, null === prev ? firstScheduledRoot = next : prev.next = next, null === next && (lastScheduledRoot = prev)) : (prev = root, 0 !== (nextLanes & 3) && (mightHavePendingSyncWork = !0));
        root = next;
    }
    flushSyncWorkAcrossRoots_impl(0, !1);
}
function scheduleTaskForRootDuringMicrotask(root, currentTime) {
    for(var suspendedLanes = root.suspendedLanes, pingedLanes = root.pingedLanes, expirationTimes = root.expirationTimes, lanes = root.pendingLanes & -62914561; 0 < lanes;){
        var index$10 = 31 - clz32(lanes), lane = 1 << index$10, expirationTime = expirationTimes[index$10];
        if (-1 === expirationTime) {
            if (0 === (lane & suspendedLanes) || 0 !== (lane & pingedLanes)) expirationTimes[index$10] = computeExpirationTime(lane, currentTime);
        } else expirationTime <= currentTime && (root.expiredLanes |= lane);
        lanes &= ~lane;
    }
    currentTime = workInProgressRoot;
    suspendedLanes = workInProgressRootRenderLanes;
    suspendedLanes = getNextLanes(root, root === currentTime ? suspendedLanes : 0);
    pingedLanes = root.callbackNode;
    if (0 === suspendedLanes || root === currentTime && 2 === workInProgressSuspendedReason || null !== root.cancelPendingCommit) return null !== pingedLanes && null !== pingedLanes && cancelCallback$1(pingedLanes), root.callbackNode = null, root.callbackPriority = 0;
    if (0 === (suspendedLanes & 3) || checkIfRootIsPrerendering(root, suspendedLanes)) {
        currentTime = suspendedLanes & -suspendedLanes;
        if (currentTime === root.callbackPriority) return currentTime;
        null !== pingedLanes && cancelCallback$1(pingedLanes);
        switch(lanesToEventPriority(suspendedLanes)){
            case 2:
            case 8:
                suspendedLanes = UserBlockingPriority;
                break;
            case 32:
                suspendedLanes = NormalPriority$1;
                break;
            case 268435456:
                suspendedLanes = IdlePriority;
                break;
            default:
                suspendedLanes = NormalPriority$1;
        }
        pingedLanes = performWorkOnRootViaSchedulerTask.bind(null, root);
        suspendedLanes = scheduleCallback$3(suspendedLanes, pingedLanes);
        root.callbackPriority = currentTime;
        root.callbackNode = suspendedLanes;
        return currentTime;
    }
    null !== pingedLanes && null !== pingedLanes && cancelCallback$1(pingedLanes);
    root.callbackPriority = 2;
    root.callbackNode = null;
    return 2;
}
function performWorkOnRootViaSchedulerTask(root, didTimeout) {
    var originalCallbackNode = root.callbackNode;
    if (flushPassiveEffects() && root.callbackNode !== originalCallbackNode) return null;
    var workInProgressRootRenderLanes$jscomp$0 = workInProgressRootRenderLanes;
    workInProgressRootRenderLanes$jscomp$0 = getNextLanes(root, root === workInProgressRoot ? workInProgressRootRenderLanes$jscomp$0 : 0);
    if (0 === workInProgressRootRenderLanes$jscomp$0) return null;
    performWorkOnRoot(root, workInProgressRootRenderLanes$jscomp$0, didTimeout);
    scheduleTaskForRootDuringMicrotask(root, now());
    return null != root.callbackNode && root.callbackNode === originalCallbackNode ? performWorkOnRootViaSchedulerTask.bind(null, root) : null;
}
function performSyncWorkOnRoot(root, lanes) {
    if (flushPassiveEffects()) return null;
    performWorkOnRoot(root, lanes, !0);
}
function requestTransitionLane() {
    0 === currentEventTransitionLane && (currentEventTransitionLane = claimNextTransitionLane());
    return currentEventTransitionLane;
}
var currentEntangledListeners = null, currentEntangledPendingCount = 0, currentEntangledLane = 0, currentEntangledActionThenable = null;
function entangleAsyncAction(transition, thenable) {
    if (null === currentEntangledListeners) {
        var entangledListeners = currentEntangledListeners = [];
        currentEntangledPendingCount = 0;
        currentEntangledLane = requestTransitionLane();
        currentEntangledActionThenable = {
            status: "pending",
            value: void 0,
            then: function(resolve) {
                entangledListeners.push(resolve);
            }
        };
    }
    currentEntangledPendingCount++;
    thenable.then(pingEngtangledActionScope, pingEngtangledActionScope);
    return thenable;
}
function pingEngtangledActionScope() {
    if (0 === --currentEntangledPendingCount && null !== currentEntangledListeners) {
        null !== currentEntangledActionThenable && (currentEntangledActionThenable.status = "fulfilled");
        var listeners = currentEntangledListeners;
        currentEntangledListeners = null;
        currentEntangledLane = 0;
        currentEntangledActionThenable = null;
        for(var i = 0; i < listeners.length; i++)(0, listeners[i])();
    }
}
function chainThenableValue(thenable, result) {
    var listeners = [], thenableWithOverride = {
        status: "pending",
        value: null,
        reason: null,
        then: function(resolve) {
            listeners.push(resolve);
        }
    };
    thenable.then(function() {
        thenableWithOverride.status = "fulfilled";
        thenableWithOverride.value = result;
        for(var i = 0; i < listeners.length; i++)(0, listeners[i])(result);
    }, function(error) {
        thenableWithOverride.status = "rejected";
        thenableWithOverride.reason = error;
        for(error = 0; error < listeners.length; error++)(0, listeners[error])(void 0);
    });
    return thenableWithOverride;
}
var hasForceUpdate = !1;
function initializeUpdateQueue(fiber) {
    fiber.updateQueue = {
        baseState: fiber.memoizedState,
        firstBaseUpdate: null,
        lastBaseUpdate: null,
        shared: {
            pending: null,
            lanes: 0,
            hiddenCallbacks: null
        },
        callbacks: null
    };
}
function cloneUpdateQueue(current, workInProgress) {
    current = current.updateQueue;
    workInProgress.updateQueue === current && (workInProgress.updateQueue = {
        baseState: current.baseState,
        firstBaseUpdate: current.firstBaseUpdate,
        lastBaseUpdate: current.lastBaseUpdate,
        shared: current.shared,
        callbacks: null
    });
}
function createUpdate(lane) {
    return {
        lane: lane,
        tag: 0,
        payload: null,
        callback: null,
        next: null
    };
}
function enqueueUpdate(fiber, update, lane) {
    var updateQueue = fiber.updateQueue;
    if (null === updateQueue) return null;
    updateQueue = updateQueue.shared;
    if (0 !== (executionContext & 2)) {
        var pending = updateQueue.pending;
        null === pending ? update.next = update : (update.next = pending.next, pending.next = update);
        updateQueue.pending = update;
        update = getRootForUpdatedFiber(fiber);
        markUpdateLaneFromFiberToRoot(fiber, null, lane);
        return update;
    }
    enqueueUpdate$1(fiber, updateQueue, update, lane);
    return getRootForUpdatedFiber(fiber);
}
function entangleTransitions(root, fiber, lane) {
    fiber = fiber.updateQueue;
    if (null !== fiber && (fiber = fiber.shared, 0 !== (lane & 4194176))) {
        var queueLanes = fiber.lanes;
        queueLanes &= root.pendingLanes;
        lane |= queueLanes;
        fiber.lanes = lane;
        markRootEntangled(root, lane);
    }
}
function enqueueCapturedUpdate(workInProgress, capturedUpdate) {
    var queue = workInProgress.updateQueue, current = workInProgress.alternate;
    if (null !== current && (current = current.updateQueue, queue === current)) {
        var newFirst = null, newLast = null;
        queue = queue.firstBaseUpdate;
        if (null !== queue) {
            do {
                var clone = {
                    lane: queue.lane,
                    tag: queue.tag,
                    payload: queue.payload,
                    callback: null,
                    next: null
                };
                null === newLast ? newFirst = newLast = clone : newLast = newLast.next = clone;
                queue = queue.next;
            }while (null !== queue);
            null === newLast ? newFirst = newLast = capturedUpdate : newLast = newLast.next = capturedUpdate;
        } else newFirst = newLast = capturedUpdate;
        queue = {
            baseState: current.baseState,
            firstBaseUpdate: newFirst,
            lastBaseUpdate: newLast,
            shared: current.shared,
            callbacks: current.callbacks
        };
        workInProgress.updateQueue = queue;
        return;
    }
    workInProgress = queue.lastBaseUpdate;
    null === workInProgress ? queue.firstBaseUpdate = capturedUpdate : workInProgress.next = capturedUpdate;
    queue.lastBaseUpdate = capturedUpdate;
}
var didReadFromEntangledAsyncAction = !1;
function suspendIfUpdateReadFromEntangledAsyncAction() {
    if (didReadFromEntangledAsyncAction) {
        var entangledActionThenable = currentEntangledActionThenable;
        if (null !== entangledActionThenable) throw entangledActionThenable;
    }
}
function processUpdateQueue(workInProgress$jscomp$0, props, instance$jscomp$0, renderLanes) {
    didReadFromEntangledAsyncAction = !1;
    var queue = workInProgress$jscomp$0.updateQueue;
    hasForceUpdate = !1;
    var firstBaseUpdate = queue.firstBaseUpdate, lastBaseUpdate = queue.lastBaseUpdate, pendingQueue = queue.shared.pending;
    if (null !== pendingQueue) {
        queue.shared.pending = null;
        var lastPendingUpdate = pendingQueue, firstPendingUpdate = lastPendingUpdate.next;
        lastPendingUpdate.next = null;
        null === lastBaseUpdate ? firstBaseUpdate = firstPendingUpdate : lastBaseUpdate.next = firstPendingUpdate;
        lastBaseUpdate = lastPendingUpdate;
        var current = workInProgress$jscomp$0.alternate;
        null !== current && (current = current.updateQueue, pendingQueue = current.lastBaseUpdate, pendingQueue !== lastBaseUpdate && (null === pendingQueue ? current.firstBaseUpdate = firstPendingUpdate : pendingQueue.next = firstPendingUpdate, current.lastBaseUpdate = lastPendingUpdate));
    }
    if (null !== firstBaseUpdate) {
        var newState = queue.baseState;
        lastBaseUpdate = 0;
        current = firstPendingUpdate = lastPendingUpdate = null;
        pendingQueue = firstBaseUpdate;
        do {
            var updateLane = pendingQueue.lane & -536870913, isHiddenUpdate = updateLane !== pendingQueue.lane;
            if (isHiddenUpdate ? (workInProgressRootRenderLanes & updateLane) === updateLane : (renderLanes & updateLane) === updateLane) {
                0 !== updateLane && updateLane === currentEntangledLane && (didReadFromEntangledAsyncAction = !0);
                null !== current && (current = current.next = {
                    lane: 0,
                    tag: pendingQueue.tag,
                    payload: pendingQueue.payload,
                    callback: null,
                    next: null
                });
                a: {
                    var workInProgress = workInProgress$jscomp$0, update = pendingQueue;
                    updateLane = props;
                    var instance = instance$jscomp$0;
                    switch(update.tag){
                        case 1:
                            workInProgress = update.payload;
                            if ("function" === typeof workInProgress) {
                                newState = workInProgress.call(instance, newState, updateLane);
                                break a;
                            }
                            newState = workInProgress;
                            break a;
                        case 3:
                            workInProgress.flags = workInProgress.flags & -65537 | 128;
                        case 0:
                            workInProgress = update.payload;
                            updateLane = "function" === typeof workInProgress ? workInProgress.call(instance, newState, updateLane) : workInProgress;
                            if (null === updateLane || void 0 === updateLane) break a;
                            newState = assign({}, newState, updateLane);
                            break a;
                        case 2:
                            hasForceUpdate = !0;
                    }
                }
                updateLane = pendingQueue.callback;
                null !== updateLane && (workInProgress$jscomp$0.flags |= 64, isHiddenUpdate && (workInProgress$jscomp$0.flags |= 8192), isHiddenUpdate = queue.callbacks, null === isHiddenUpdate ? queue.callbacks = [
                    updateLane
                ] : isHiddenUpdate.push(updateLane));
            } else isHiddenUpdate = {
                lane: updateLane,
                tag: pendingQueue.tag,
                payload: pendingQueue.payload,
                callback: pendingQueue.callback,
                next: null
            }, null === current ? (firstPendingUpdate = current = isHiddenUpdate, lastPendingUpdate = newState) : current = current.next = isHiddenUpdate, lastBaseUpdate |= updateLane;
            pendingQueue = pendingQueue.next;
            if (null === pendingQueue) if (pendingQueue = queue.shared.pending, null === pendingQueue) break;
            else isHiddenUpdate = pendingQueue, pendingQueue = isHiddenUpdate.next, isHiddenUpdate.next = null, queue.lastBaseUpdate = isHiddenUpdate, queue.shared.pending = null;
        }while (1);
        null === current && (lastPendingUpdate = newState);
        queue.baseState = lastPendingUpdate;
        queue.firstBaseUpdate = firstPendingUpdate;
        queue.lastBaseUpdate = current;
        null === firstBaseUpdate && (queue.shared.lanes = 0);
        workInProgressRootSkippedLanes |= lastBaseUpdate;
        workInProgress$jscomp$0.lanes = lastBaseUpdate;
        workInProgress$jscomp$0.memoizedState = newState;
    }
}
function callCallback(callback, context) {
    if ("function" !== typeof callback) throw Error("Invalid argument passed as callback. Expected a function. Instead received: " + callback);
    callback.call(context);
}
function commitCallbacks(updateQueue, context) {
    var callbacks = updateQueue.callbacks;
    if (null !== callbacks) for(updateQueue.callbacks = null, updateQueue = 0; updateQueue < callbacks.length; updateQueue++)callCallback(callbacks[updateQueue], context);
}
var hasOwnProperty = Object.prototype.hasOwnProperty;
function shallowEqual(objA, objB) {
    if (objectIs(objA, objB)) return !0;
    if ("object" !== typeof objA || null === objA || "object" !== typeof objB || null === objB) return !1;
    var keysA = Object.keys(objA), keysB = Object.keys(objB);
    if (keysA.length !== keysB.length) return !1;
    for(keysB = 0; keysB < keysA.length; keysB++){
        var currentKey = keysA[keysB];
        if (!hasOwnProperty.call(objB, currentKey) || !objectIs(objA[currentKey], objB[currentKey])) return !1;
    }
    return !0;
}
var SuspenseException = Error("Suspense Exception: This is not a real error! It's an implementation detail of `use` to interrupt the current render. You must either rethrow it immediately, or move the `use` call outside of the `try/catch` block. Capturing without rethrowing will lead to unexpected behavior.\n\nTo handle async errors, wrap your component in an error boundary, or call the promise's `.catch` method and pass the result to `use`"), SuspenseyCommitException = Error("Suspense Exception: This is not a real error, and should not leak into userspace. If you're seeing this, it's likely a bug in React."), noopSuspenseyCommitThenable = {
    then: function() {}
};
function isThenableResolved(thenable) {
    thenable = thenable.status;
    return "fulfilled" === thenable || "rejected" === thenable;
}
function noop() {}
function trackUsedThenable(thenableState, thenable, index) {
    index = thenableState[index];
    void 0 === index ? thenableState.push(thenable) : index !== thenable && (thenable.then(noop, noop), thenable = index);
    switch(thenable.status){
        case "fulfilled":
            return thenable.value;
        case "rejected":
            throw thenableState = thenable.reason, checkIfUseWrappedInAsyncCatch(thenableState), thenableState;
        default:
            if ("string" === typeof thenable.status) thenable.then(noop, noop);
            else {
                thenableState = workInProgressRoot;
                if (null !== thenableState && 100 < thenableState.shellSuspendCounter) throw Error("async/await is not yet supported in Client Components, only Server Components. This error is often caused by accidentally adding `'use client'` to a module that was originally written for the server.");
                thenableState = thenable;
                thenableState.status = "pending";
                thenableState.then(function(fulfilledValue) {
                    if ("pending" === thenable.status) {
                        var fulfilledThenable = thenable;
                        fulfilledThenable.status = "fulfilled";
                        fulfilledThenable.value = fulfilledValue;
                    }
                }, function(error) {
                    if ("pending" === thenable.status) {
                        var rejectedThenable = thenable;
                        rejectedThenable.status = "rejected";
                        rejectedThenable.reason = error;
                    }
                });
            }
            switch(thenable.status){
                case "fulfilled":
                    return thenable.value;
                case "rejected":
                    throw thenableState = thenable.reason, checkIfUseWrappedInAsyncCatch(thenableState), thenableState;
            }
            suspendedThenable = thenable;
            throw SuspenseException;
    }
}
var suspendedThenable = null;
function getSuspendedThenable() {
    if (null === suspendedThenable) throw Error("Expected a suspended thenable. This is a bug in React. Please file an issue.");
    var thenable = suspendedThenable;
    suspendedThenable = null;
    return thenable;
}
function checkIfUseWrappedInAsyncCatch(rejectedReason) {
    if (rejectedReason === SuspenseException) throw Error("Hooks are not supported inside an async component. This error is often caused by accidentally adding `'use client'` to a module that was originally written for the server.");
}
var thenableState$1 = null, thenableIndexCounter$1 = 0;
function unwrapThenable(thenable) {
    var index = thenableIndexCounter$1;
    thenableIndexCounter$1 += 1;
    null === thenableState$1 && (thenableState$1 = []);
    return trackUsedThenable(thenableState$1, thenable, index);
}
function coerceRef(workInProgress, element) {
    element = element.props.ref;
    workInProgress.ref = void 0 !== element ? element : null;
}
function throwOnInvalidObjectType(returnFiber, newChild) {
    if (newChild.$$typeof === REACT_LEGACY_ELEMENT_TYPE) throw Error('A React Element from an older version of React was rendered. This is not supported. It can happen if:\n- Multiple copies of the "react" package is used.\n- A library pre-bundled an old copy of "react" or "react/jsx-runtime".\n- A compiler tries to "inline" JSX instead of using the runtime.');
    returnFiber = Object.prototype.toString.call(newChild);
    throw Error("Objects are not valid as a React child (found: " + ("[object Object]" === returnFiber ? "object with keys {" + Object.keys(newChild).join(", ") + "}" : returnFiber) + "). If you meant to render a collection of children, use an array instead.");
}
function resolveLazy(lazyType) {
    var init = lazyType._init;
    return init(lazyType._payload);
}
function createChildReconciler(shouldTrackSideEffects) {
    function deleteChild(returnFiber, childToDelete) {
        if (shouldTrackSideEffects) {
            var deletions = returnFiber.deletions;
            null === deletions ? (returnFiber.deletions = [
                childToDelete
            ], returnFiber.flags |= 16) : deletions.push(childToDelete);
        }
    }
    function deleteRemainingChildren(returnFiber, currentFirstChild) {
        if (!shouldTrackSideEffects) return null;
        for(; null !== currentFirstChild;)deleteChild(returnFiber, currentFirstChild), currentFirstChild = currentFirstChild.sibling;
        return null;
    }
    function mapRemainingChildren(currentFirstChild) {
        for(var existingChildren = new Map(); null !== currentFirstChild;)null !== currentFirstChild.key ? existingChildren.set(currentFirstChild.key, currentFirstChild) : existingChildren.set(currentFirstChild.index, currentFirstChild), currentFirstChild = currentFirstChild.sibling;
        return existingChildren;
    }
    function useFiber(fiber, pendingProps) {
        fiber = createWorkInProgress(fiber, pendingProps);
        fiber.index = 0;
        fiber.sibling = null;
        return fiber;
    }
    function placeChild(newFiber, lastPlacedIndex, newIndex) {
        newFiber.index = newIndex;
        if (!shouldTrackSideEffects) return newFiber.flags |= 1048576, lastPlacedIndex;
        newIndex = newFiber.alternate;
        if (null !== newIndex) return newIndex = newIndex.index, newIndex < lastPlacedIndex ? (newFiber.flags |= 33554434, lastPlacedIndex) : newIndex;
        newFiber.flags |= 33554434;
        return lastPlacedIndex;
    }
    function placeSingleChild(newFiber) {
        shouldTrackSideEffects && null === newFiber.alternate && (newFiber.flags |= 33554434);
        return newFiber;
    }
    function updateTextNode(returnFiber, current, textContent, lanes) {
        if (null === current || 6 !== current.tag) return current = createFiberFromText(textContent, returnFiber.mode, lanes), current.return = returnFiber, current;
        current = useFiber(current, textContent);
        current.return = returnFiber;
        return current;
    }
    function updateElement(returnFiber, current, element, lanes) {
        var elementType = element.type;
        if (elementType === REACT_FRAGMENT_TYPE) return updateFragment(returnFiber, current, element.props.children, lanes, element.key);
        if (null !== current && (current.elementType === elementType || "object" === typeof elementType && null !== elementType && elementType.$$typeof === REACT_LAZY_TYPE && resolveLazy(elementType) === current.type)) return current = useFiber(current, element.props), coerceRef(current, element), current.return = returnFiber, current;
        current = createFiberFromTypeAndProps(element.type, element.key, element.props, null, returnFiber.mode, lanes);
        coerceRef(current, element);
        current.return = returnFiber;
        return current;
    }
    function updatePortal(returnFiber, current, portal, lanes) {
        if (null === current || 4 !== current.tag || current.stateNode.containerInfo !== portal.containerInfo || current.stateNode.implementation !== portal.implementation) return current = createFiberFromPortal(portal, returnFiber.mode, lanes), current.return = returnFiber, current;
        current = useFiber(current, portal.children || []);
        current.return = returnFiber;
        return current;
    }
    function updateFragment(returnFiber, current, fragment, lanes, key) {
        if (null === current || 7 !== current.tag) return current = createFiberFromFragment(fragment, returnFiber.mode, lanes, key), current.return = returnFiber, current;
        current = useFiber(current, fragment);
        current.return = returnFiber;
        return current;
    }
    function createChild(returnFiber, newChild, lanes) {
        if ("string" === typeof newChild && "" !== newChild || "number" === typeof newChild || "bigint" === typeof newChild) return newChild = createFiberFromText("" + newChild, returnFiber.mode, lanes), newChild.return = returnFiber, newChild;
        if ("object" === typeof newChild && null !== newChild) {
            switch(newChild.$$typeof){
                case REACT_ELEMENT_TYPE:
                    return lanes = createFiberFromTypeAndProps(newChild.type, newChild.key, newChild.props, null, returnFiber.mode, lanes), coerceRef(lanes, newChild), lanes.return = returnFiber, lanes;
                case REACT_PORTAL_TYPE:
                    return newChild = createFiberFromPortal(newChild, returnFiber.mode, lanes), newChild.return = returnFiber, newChild;
                case REACT_LAZY_TYPE:
                    var init = newChild._init;
                    newChild = init(newChild._payload);
                    return createChild(returnFiber, newChild, lanes);
            }
            if (isArrayImpl(newChild) || getIteratorFn(newChild)) return newChild = createFiberFromFragment(newChild, returnFiber.mode, lanes, null), newChild.return = returnFiber, newChild;
            if ("function" === typeof newChild.then) return createChild(returnFiber, unwrapThenable(newChild), lanes);
            if (newChild.$$typeof === REACT_CONTEXT_TYPE) return createChild(returnFiber, readContextDuringReconciliation(returnFiber, newChild), lanes);
            throwOnInvalidObjectType(returnFiber, newChild);
        }
        return null;
    }
    function updateSlot(returnFiber, oldFiber, newChild, lanes) {
        var key = null !== oldFiber ? oldFiber.key : null;
        if ("string" === typeof newChild && "" !== newChild || "number" === typeof newChild || "bigint" === typeof newChild) return null !== key ? null : updateTextNode(returnFiber, oldFiber, "" + newChild, lanes);
        if ("object" === typeof newChild && null !== newChild) {
            switch(newChild.$$typeof){
                case REACT_ELEMENT_TYPE:
                    return newChild.key === key ? updateElement(returnFiber, oldFiber, newChild, lanes) : null;
                case REACT_PORTAL_TYPE:
                    return newChild.key === key ? updatePortal(returnFiber, oldFiber, newChild, lanes) : null;
                case REACT_LAZY_TYPE:
                    return key = newChild._init, newChild = key(newChild._payload), updateSlot(returnFiber, oldFiber, newChild, lanes);
            }
            if (isArrayImpl(newChild) || getIteratorFn(newChild)) return null !== key ? null : updateFragment(returnFiber, oldFiber, newChild, lanes, null);
            if ("function" === typeof newChild.then) return updateSlot(returnFiber, oldFiber, unwrapThenable(newChild), lanes);
            if (newChild.$$typeof === REACT_CONTEXT_TYPE) return updateSlot(returnFiber, oldFiber, readContextDuringReconciliation(returnFiber, newChild), lanes);
            throwOnInvalidObjectType(returnFiber, newChild);
        }
        return null;
    }
    function updateFromMap(existingChildren, returnFiber, newIdx, newChild, lanes) {
        if ("string" === typeof newChild && "" !== newChild || "number" === typeof newChild || "bigint" === typeof newChild) return existingChildren = existingChildren.get(newIdx) || null, updateTextNode(returnFiber, existingChildren, "" + newChild, lanes);
        if ("object" === typeof newChild && null !== newChild) {
            switch(newChild.$$typeof){
                case REACT_ELEMENT_TYPE:
                    return existingChildren = existingChildren.get(null === newChild.key ? newIdx : newChild.key) || null, updateElement(returnFiber, existingChildren, newChild, lanes);
                case REACT_PORTAL_TYPE:
                    return existingChildren = existingChildren.get(null === newChild.key ? newIdx : newChild.key) || null, updatePortal(returnFiber, existingChildren, newChild, lanes);
                case REACT_LAZY_TYPE:
                    var init = newChild._init;
                    newChild = init(newChild._payload);
                    return updateFromMap(existingChildren, returnFiber, newIdx, newChild, lanes);
            }
            if (isArrayImpl(newChild) || getIteratorFn(newChild)) return existingChildren = existingChildren.get(newIdx) || null, updateFragment(returnFiber, existingChildren, newChild, lanes, null);
            if ("function" === typeof newChild.then) return updateFromMap(existingChildren, returnFiber, newIdx, unwrapThenable(newChild), lanes);
            if (newChild.$$typeof === REACT_CONTEXT_TYPE) return updateFromMap(existingChildren, returnFiber, newIdx, readContextDuringReconciliation(returnFiber, newChild), lanes);
            throwOnInvalidObjectType(returnFiber, newChild);
        }
        return null;
    }
    function reconcileChildrenArray(returnFiber, currentFirstChild, newChildren, lanes) {
        for(var resultingFirstChild = null, previousNewFiber = null, oldFiber = currentFirstChild, newIdx = currentFirstChild = 0, nextOldFiber = null; null !== oldFiber && newIdx < newChildren.length; newIdx++){
            oldFiber.index > newIdx ? (nextOldFiber = oldFiber, oldFiber = null) : nextOldFiber = oldFiber.sibling;
            var newFiber = updateSlot(returnFiber, oldFiber, newChildren[newIdx], lanes);
            if (null === newFiber) {
                null === oldFiber && (oldFiber = nextOldFiber);
                break;
            }
            shouldTrackSideEffects && oldFiber && null === newFiber.alternate && deleteChild(returnFiber, oldFiber);
            currentFirstChild = placeChild(newFiber, currentFirstChild, newIdx);
            null === previousNewFiber ? resultingFirstChild = newFiber : previousNewFiber.sibling = newFiber;
            previousNewFiber = newFiber;
            oldFiber = nextOldFiber;
        }
        if (newIdx === newChildren.length) return deleteRemainingChildren(returnFiber, oldFiber), resultingFirstChild;
        if (null === oldFiber) {
            for(; newIdx < newChildren.length; newIdx++)oldFiber = createChild(returnFiber, newChildren[newIdx], lanes), null !== oldFiber && (currentFirstChild = placeChild(oldFiber, currentFirstChild, newIdx), null === previousNewFiber ? resultingFirstChild = oldFiber : previousNewFiber.sibling = oldFiber, previousNewFiber = oldFiber);
            return resultingFirstChild;
        }
        for(oldFiber = mapRemainingChildren(oldFiber); newIdx < newChildren.length; newIdx++)nextOldFiber = updateFromMap(oldFiber, returnFiber, newIdx, newChildren[newIdx], lanes), null !== nextOldFiber && (shouldTrackSideEffects && null !== nextOldFiber.alternate && oldFiber.delete(null === nextOldFiber.key ? newIdx : nextOldFiber.key), currentFirstChild = placeChild(nextOldFiber, currentFirstChild, newIdx), null === previousNewFiber ? resultingFirstChild = nextOldFiber : previousNewFiber.sibling = nextOldFiber, previousNewFiber = nextOldFiber);
        shouldTrackSideEffects && oldFiber.forEach(function(child) {
            return deleteChild(returnFiber, child);
        });
        return resultingFirstChild;
    }
    function reconcileChildrenIterator(returnFiber, currentFirstChild, newChildren, lanes) {
        if (null == newChildren) throw Error("An iterable object provided no iterator.");
        for(var resultingFirstChild = null, previousNewFiber = null, oldFiber = currentFirstChild, newIdx = currentFirstChild = 0, nextOldFiber = null, step = newChildren.next(); null !== oldFiber && !step.done; newIdx++, step = newChildren.next()){
            oldFiber.index > newIdx ? (nextOldFiber = oldFiber, oldFiber = null) : nextOldFiber = oldFiber.sibling;
            var newFiber = updateSlot(returnFiber, oldFiber, step.value, lanes);
            if (null === newFiber) {
                null === oldFiber && (oldFiber = nextOldFiber);
                break;
            }
            shouldTrackSideEffects && oldFiber && null === newFiber.alternate && deleteChild(returnFiber, oldFiber);
            currentFirstChild = placeChild(newFiber, currentFirstChild, newIdx);
            null === previousNewFiber ? resultingFirstChild = newFiber : previousNewFiber.sibling = newFiber;
            previousNewFiber = newFiber;
            oldFiber = nextOldFiber;
        }
        if (step.done) return deleteRemainingChildren(returnFiber, oldFiber), resultingFirstChild;
        if (null === oldFiber) {
            for(; !step.done; newIdx++, step = newChildren.next())step = createChild(returnFiber, step.value, lanes), null !== step && (currentFirstChild = placeChild(step, currentFirstChild, newIdx), null === previousNewFiber ? resultingFirstChild = step : previousNewFiber.sibling = step, previousNewFiber = step);
            return resultingFirstChild;
        }
        for(oldFiber = mapRemainingChildren(oldFiber); !step.done; newIdx++, step = newChildren.next())step = updateFromMap(oldFiber, returnFiber, newIdx, step.value, lanes), null !== step && (shouldTrackSideEffects && null !== step.alternate && oldFiber.delete(null === step.key ? newIdx : step.key), currentFirstChild = placeChild(step, currentFirstChild, newIdx), null === previousNewFiber ? resultingFirstChild = step : previousNewFiber.sibling = step, previousNewFiber = step);
        shouldTrackSideEffects && oldFiber.forEach(function(child) {
            return deleteChild(returnFiber, child);
        });
        return resultingFirstChild;
    }
    function reconcileChildFibersImpl(returnFiber, currentFirstChild, newChild, lanes) {
        "object" === typeof newChild && null !== newChild && newChild.type === REACT_FRAGMENT_TYPE && null === newChild.key && (newChild = newChild.props.children);
        if ("object" === typeof newChild && null !== newChild) {
            switch(newChild.$$typeof){
                case REACT_ELEMENT_TYPE:
                    a: {
                        for(var key = newChild.key; null !== currentFirstChild;){
                            if (currentFirstChild.key === key) {
                                key = newChild.type;
                                if (key === REACT_FRAGMENT_TYPE) {
                                    if (7 === currentFirstChild.tag) {
                                        deleteRemainingChildren(returnFiber, currentFirstChild.sibling);
                                        lanes = useFiber(currentFirstChild, newChild.props.children);
                                        lanes.return = returnFiber;
                                        returnFiber = lanes;
                                        break a;
                                    }
                                } else if (currentFirstChild.elementType === key || "object" === typeof key && null !== key && key.$$typeof === REACT_LAZY_TYPE && resolveLazy(key) === currentFirstChild.type) {
                                    deleteRemainingChildren(returnFiber, currentFirstChild.sibling);
                                    lanes = useFiber(currentFirstChild, newChild.props);
                                    coerceRef(lanes, newChild);
                                    lanes.return = returnFiber;
                                    returnFiber = lanes;
                                    break a;
                                }
                                deleteRemainingChildren(returnFiber, currentFirstChild);
                                break;
                            } else deleteChild(returnFiber, currentFirstChild);
                            currentFirstChild = currentFirstChild.sibling;
                        }
                        newChild.type === REACT_FRAGMENT_TYPE ? (lanes = createFiberFromFragment(newChild.props.children, returnFiber.mode, lanes, newChild.key), lanes.return = returnFiber, returnFiber = lanes) : (lanes = createFiberFromTypeAndProps(newChild.type, newChild.key, newChild.props, null, returnFiber.mode, lanes), coerceRef(lanes, newChild), lanes.return = returnFiber, returnFiber = lanes);
                    }
                    return placeSingleChild(returnFiber);
                case REACT_PORTAL_TYPE:
                    a: {
                        for(key = newChild.key; null !== currentFirstChild;){
                            if (currentFirstChild.key === key) if (4 === currentFirstChild.tag && currentFirstChild.stateNode.containerInfo === newChild.containerInfo && currentFirstChild.stateNode.implementation === newChild.implementation) {
                                deleteRemainingChildren(returnFiber, currentFirstChild.sibling);
                                lanes = useFiber(currentFirstChild, newChild.children || []);
                                lanes.return = returnFiber;
                                returnFiber = lanes;
                                break a;
                            } else {
                                deleteRemainingChildren(returnFiber, currentFirstChild);
                                break;
                            }
                            else deleteChild(returnFiber, currentFirstChild);
                            currentFirstChild = currentFirstChild.sibling;
                        }
                        lanes = createFiberFromPortal(newChild, returnFiber.mode, lanes);
                        lanes.return = returnFiber;
                        returnFiber = lanes;
                    }
                    return placeSingleChild(returnFiber);
                case REACT_LAZY_TYPE:
                    return key = newChild._init, newChild = key(newChild._payload), reconcileChildFibersImpl(returnFiber, currentFirstChild, newChild, lanes);
            }
            if (isArrayImpl(newChild)) return reconcileChildrenArray(returnFiber, currentFirstChild, newChild, lanes);
            if (getIteratorFn(newChild)) {
                key = getIteratorFn(newChild);
                if ("function" !== typeof key) throw Error("An object is not an iterable. This error is likely caused by a bug in React. Please file an issue.");
                newChild = key.call(newChild);
                return reconcileChildrenIterator(returnFiber, currentFirstChild, newChild, lanes);
            }
            if ("function" === typeof newChild.then) return reconcileChildFibersImpl(returnFiber, currentFirstChild, unwrapThenable(newChild), lanes);
            if (newChild.$$typeof === REACT_CONTEXT_TYPE) return reconcileChildFibersImpl(returnFiber, currentFirstChild, readContextDuringReconciliation(returnFiber, newChild), lanes);
            throwOnInvalidObjectType(returnFiber, newChild);
        }
        return "string" === typeof newChild && "" !== newChild || "number" === typeof newChild || "bigint" === typeof newChild ? (newChild = "" + newChild, null !== currentFirstChild && 6 === currentFirstChild.tag ? (deleteRemainingChildren(returnFiber, currentFirstChild.sibling), lanes = useFiber(currentFirstChild, newChild), lanes.return = returnFiber, returnFiber = lanes) : (deleteRemainingChildren(returnFiber, currentFirstChild), lanes = createFiberFromText(newChild, returnFiber.mode, lanes), lanes.return = returnFiber, returnFiber = lanes), placeSingleChild(returnFiber)) : deleteRemainingChildren(returnFiber, currentFirstChild);
    }
    return function(returnFiber, currentFirstChild, newChild, lanes) {
        try {
            thenableIndexCounter$1 = 0;
            var firstChildFiber = reconcileChildFibersImpl(returnFiber, currentFirstChild, newChild, lanes);
            thenableState$1 = null;
            return firstChildFiber;
        } catch (x) {
            if (x === SuspenseException || 0 === (returnFiber.mode & 1) && "object" === typeof x && null !== x && "function" === typeof x.then) throw x;
            var fiber = createFiberImplClass(29, x, null, returnFiber.mode);
            fiber.lanes = lanes;
            fiber.return = returnFiber;
            return fiber;
        } finally{}
    };
}
var reconcileChildFibers = createChildReconciler(!0), mountChildFibers = createChildReconciler(!1), currentTreeHiddenStackCursor = createCursor(null), prevEntangledRenderLanesCursor = createCursor(0);
function pushHiddenContext(fiber, context) {
    fiber = entangledRenderLanes;
    push(prevEntangledRenderLanesCursor, fiber);
    push(currentTreeHiddenStackCursor, context);
    entangledRenderLanes = fiber | context.baseLanes;
}
function reuseHiddenContextOnStack() {
    push(prevEntangledRenderLanesCursor, entangledRenderLanes);
    push(currentTreeHiddenStackCursor, currentTreeHiddenStackCursor.current);
}
function popHiddenContext() {
    entangledRenderLanes = prevEntangledRenderLanesCursor.current;
    pop(currentTreeHiddenStackCursor);
    pop(prevEntangledRenderLanesCursor);
}
var suspenseHandlerStackCursor = createCursor(null), shellBoundary = null;
function pushPrimaryTreeSuspenseHandler(handler) {
    var current = handler.alternate;
    push(suspenseStackCursor, suspenseStackCursor.current & 1);
    push(suspenseHandlerStackCursor, handler);
    null === shellBoundary && (null === current || null !== currentTreeHiddenStackCursor.current ? shellBoundary = handler : null !== current.memoizedState && (shellBoundary = handler));
}
function pushOffscreenSuspenseHandler(fiber) {
    if (22 === fiber.tag) {
        if (push(suspenseStackCursor, suspenseStackCursor.current), push(suspenseHandlerStackCursor, fiber), null === shellBoundary) {
            var current = fiber.alternate;
            null !== current && null !== current.memoizedState && (shellBoundary = fiber);
        }
    } else reuseSuspenseHandlerOnStack(fiber);
}
function reuseSuspenseHandlerOnStack() {
    push(suspenseStackCursor, suspenseStackCursor.current);
    push(suspenseHandlerStackCursor, suspenseHandlerStackCursor.current);
}
function popSuspenseHandler(fiber) {
    pop(suspenseHandlerStackCursor);
    shellBoundary === fiber && (shellBoundary = null);
    pop(suspenseStackCursor);
}
var suspenseStackCursor = createCursor(0);
function findFirstSuspended(row) {
    for(var node = row; null !== node;){
        if (13 === node.tag) {
            var state = node.memoizedState;
            if (null !== state && (null === state.dehydrated || shim$1() || shim$1())) return node;
        } else if (19 === node.tag && void 0 !== node.memoizedProps.revealOrder) {
            if (0 !== (node.flags & 128)) return node;
        } else if (null !== node.child) {
            node.child.return = node;
            node = node.child;
            continue;
        }
        if (node === row) break;
        for(; null === node.sibling;){
            if (null === node.return || node.return === row) return null;
            node = node.return;
        }
        node.sibling.return = node.return;
        node = node.sibling;
    }
    return null;
}
var renderLanes = 0, currentlyRenderingFiber$1 = null, currentHook = null, workInProgressHook = null, didScheduleRenderPhaseUpdate = !1, didScheduleRenderPhaseUpdateDuringThisPass = !1, shouldDoubleInvokeUserFnsInHooksDEV = !1, thenableIndexCounter = 0, thenableState = null, globalClientIdCounter = 0;
function throwInvalidHookError() {
    throw Error("Invalid hook call. Hooks can only be called inside of the body of a function component. This could happen for one of the following reasons:\n1. You might have mismatching versions of React and the renderer (such as React DOM)\n2. You might be breaking the Rules of Hooks\n3. You might have more than one copy of React in the same app\nSee https://react.dev/link/invalid-hook-call for tips about how to debug and fix this problem.");
}
function areHookInputsEqual(nextDeps, prevDeps) {
    if (null === prevDeps) return !1;
    for(var i = 0; i < prevDeps.length && i < nextDeps.length; i++)if (!objectIs(nextDeps[i], prevDeps[i])) return !1;
    return !0;
}
function renderWithHooks(current, workInProgress, Component, props, secondArg, nextRenderLanes) {
    renderLanes = nextRenderLanes;
    currentlyRenderingFiber$1 = workInProgress;
    workInProgress.memoizedState = null;
    workInProgress.updateQueue = null;
    workInProgress.lanes = 0;
    ReactSharedInternals.H = null === current || null === current.memoizedState ? HooksDispatcherOnMount : HooksDispatcherOnUpdate;
    shouldDoubleInvokeUserFnsInHooksDEV = !1;
    nextRenderLanes = Component(props, secondArg);
    shouldDoubleInvokeUserFnsInHooksDEV = !1;
    didScheduleRenderPhaseUpdateDuringThisPass && (nextRenderLanes = renderWithHooksAgain(workInProgress, Component, props, secondArg));
    finishRenderingHooks(current);
    return nextRenderLanes;
}
function finishRenderingHooks(current) {
    ReactSharedInternals.H = ContextOnlyDispatcher;
    var didRenderTooFewHooks = null !== currentHook && null !== currentHook.next;
    renderLanes = 0;
    workInProgressHook = currentHook = currentlyRenderingFiber$1 = null;
    didScheduleRenderPhaseUpdate = !1;
    thenableIndexCounter = 0;
    thenableState = null;
    if (didRenderTooFewHooks) throw Error("Rendered fewer hooks than expected. This may be caused by an accidental early return statement.");
    null === current || didReceiveUpdate || (current = current.dependencies, null !== current && checkIfContextChanged(current) && (didReceiveUpdate = !0));
}
function renderWithHooksAgain(workInProgress, Component, props, secondArg) {
    currentlyRenderingFiber$1 = workInProgress;
    var numberOfReRenders = 0;
    do {
        didScheduleRenderPhaseUpdateDuringThisPass && (thenableState = null);
        thenableIndexCounter = 0;
        didScheduleRenderPhaseUpdateDuringThisPass = !1;
        if (25 <= numberOfReRenders) throw Error("Too many re-renders. React limits the number of renders to prevent an infinite loop.");
        numberOfReRenders += 1;
        workInProgressHook = currentHook = null;
        if (null != workInProgress.updateQueue) {
            var children = workInProgress.updateQueue;
            children.lastEffect = null;
            children.events = null;
            children.stores = null;
            null != children.memoCache && (children.memoCache.index = 0);
        }
        ReactSharedInternals.H = HooksDispatcherOnRerender;
        children = Component(props, secondArg);
    }while (didScheduleRenderPhaseUpdateDuringThisPass);
    return children;
}
function TransitionAwareHostComponent() {
    var dispatcher = ReactSharedInternals.H, maybeThenable = dispatcher.useState()[0];
    maybeThenable = "function" === typeof maybeThenable.then ? useThenable(maybeThenable) : maybeThenable;
    dispatcher = dispatcher.useState()[0];
    (null !== currentHook ? currentHook.memoizedState : null) !== dispatcher && (currentlyRenderingFiber$1.flags |= 1024);
    return maybeThenable;
}
function bailoutHooks(current, workInProgress, lanes) {
    workInProgress.updateQueue = current.updateQueue;
    workInProgress.flags &= -2053;
    current.lanes &= ~lanes;
}
function resetHooksOnUnwind(workInProgress) {
    if (didScheduleRenderPhaseUpdate) {
        for(workInProgress = workInProgress.memoizedState; null !== workInProgress;){
            var queue = workInProgress.queue;
            null !== queue && (queue.pending = null);
            workInProgress = workInProgress.next;
        }
        didScheduleRenderPhaseUpdate = !1;
    }
    renderLanes = 0;
    workInProgressHook = currentHook = currentlyRenderingFiber$1 = null;
    didScheduleRenderPhaseUpdateDuringThisPass = !1;
    thenableIndexCounter = 0;
    thenableState = null;
}
function mountWorkInProgressHook() {
    var hook = {
        memoizedState: null,
        baseState: null,
        baseQueue: null,
        queue: null,
        next: null
    };
    null === workInProgressHook ? currentlyRenderingFiber$1.memoizedState = workInProgressHook = hook : workInProgressHook = workInProgressHook.next = hook;
    return workInProgressHook;
}
function updateWorkInProgressHook() {
    if (null === currentHook) {
        var nextCurrentHook = currentlyRenderingFiber$1.alternate;
        nextCurrentHook = null !== nextCurrentHook ? nextCurrentHook.memoizedState : null;
    } else nextCurrentHook = currentHook.next;
    var nextWorkInProgressHook = null === workInProgressHook ? currentlyRenderingFiber$1.memoizedState : workInProgressHook.next;
    if (null !== nextWorkInProgressHook) workInProgressHook = nextWorkInProgressHook, currentHook = nextCurrentHook;
    else {
        if (null === nextCurrentHook) {
            if (null === currentlyRenderingFiber$1.alternate) throw Error("Update hook called on initial render. This is likely a bug in React. Please file an issue.");
            throw Error("Rendered more hooks than during the previous render.");
        }
        currentHook = nextCurrentHook;
        nextCurrentHook = {
            memoizedState: currentHook.memoizedState,
            baseState: currentHook.baseState,
            baseQueue: currentHook.baseQueue,
            queue: currentHook.queue,
            next: null
        };
        null === workInProgressHook ? currentlyRenderingFiber$1.memoizedState = workInProgressHook = nextCurrentHook : workInProgressHook = workInProgressHook.next = nextCurrentHook;
    }
    return workInProgressHook;
}
var createFunctionComponentUpdateQueue;
createFunctionComponentUpdateQueue = function() {
    return {
        lastEffect: null,
        events: null,
        stores: null,
        memoCache: null
    };
};
function useThenable(thenable) {
    var index = thenableIndexCounter;
    thenableIndexCounter += 1;
    null === thenableState && (thenableState = []);
    thenable = trackUsedThenable(thenableState, thenable, index);
    index = currentlyRenderingFiber$1;
    null === (null === workInProgressHook ? index.memoizedState : workInProgressHook.next) && (index = index.alternate, ReactSharedInternals.H = null === index || null === index.memoizedState ? HooksDispatcherOnMount : HooksDispatcherOnUpdate);
    return thenable;
}
function use(usable) {
    if (null !== usable && "object" === typeof usable) {
        if ("function" === typeof usable.then) return useThenable(usable);
        if (usable.$$typeof === REACT_CONTEXT_TYPE) return readContext(usable);
    }
    throw Error("An unsupported type was passed to use(): " + String(usable));
}
function useMemoCache(size) {
    var memoCache = null, updateQueue = currentlyRenderingFiber$1.updateQueue;
    null !== updateQueue && (memoCache = updateQueue.memoCache);
    if (null == memoCache) {
        var current = currentlyRenderingFiber$1.alternate;
        null !== current && (current = current.updateQueue, null !== current && (current = current.memoCache, null != current && (memoCache = {
            data: current.data.map(function(array) {
                return array.slice();
            }),
            index: 0
        })));
    }
    null == memoCache && (memoCache = {
        data: [],
        index: 0
    });
    null === updateQueue && (updateQueue = createFunctionComponentUpdateQueue(), currentlyRenderingFiber$1.updateQueue = updateQueue);
    updateQueue.memoCache = memoCache;
    updateQueue = memoCache.data[memoCache.index];
    if (void 0 === updateQueue) for(updateQueue = memoCache.data[memoCache.index] = Array(size), current = 0; current < size; current++)updateQueue[current] = REACT_MEMO_CACHE_SENTINEL;
    memoCache.index++;
    return updateQueue;
}
function basicStateReducer(state, action) {
    return "function" === typeof action ? action(state) : action;
}
function updateReducer(reducer) {
    var hook = updateWorkInProgressHook();
    return updateReducerImpl(hook, currentHook, reducer);
}
function updateReducerImpl(hook, current, reducer) {
    var queue = hook.queue;
    if (null === queue) throw Error("Should have a queue. You are likely calling Hooks conditionally, which is not allowed. (https://react.dev/link/invalid-hook-call)");
    queue.lastRenderedReducer = reducer;
    var baseQueue = hook.baseQueue, pendingQueue = queue.pending;
    if (null !== pendingQueue) {
        if (null !== baseQueue) {
            var baseFirst = baseQueue.next;
            baseQueue.next = pendingQueue.next;
            pendingQueue.next = baseFirst;
        }
        current.baseQueue = baseQueue = pendingQueue;
        queue.pending = null;
    }
    pendingQueue = hook.baseState;
    if (null === baseQueue) hook.memoizedState = pendingQueue;
    else {
        current = baseQueue.next;
        var newBaseQueueFirst = baseFirst = null, newBaseQueueLast = null, update = current, didReadFromEntangledAsyncAction$47 = !1;
        do {
            var updateLane = update.lane & -536870913;
            if (updateLane !== update.lane ? (workInProgressRootRenderLanes & updateLane) === updateLane : (renderLanes & updateLane) === updateLane) {
                var revertLane = update.revertLane;
                if (0 === revertLane) null !== newBaseQueueLast && (newBaseQueueLast = newBaseQueueLast.next = {
                    lane: 0,
                    revertLane: 0,
                    action: update.action,
                    hasEagerState: update.hasEagerState,
                    eagerState: update.eagerState,
                    next: null
                }), updateLane === currentEntangledLane && (didReadFromEntangledAsyncAction$47 = !0);
                else if ((renderLanes & revertLane) === revertLane) {
                    update = update.next;
                    revertLane === currentEntangledLane && (didReadFromEntangledAsyncAction$47 = !0);
                    continue;
                } else updateLane = {
                    lane: 0,
                    revertLane: update.revertLane,
                    action: update.action,
                    hasEagerState: update.hasEagerState,
                    eagerState: update.eagerState,
                    next: null
                }, null === newBaseQueueLast ? (newBaseQueueFirst = newBaseQueueLast = updateLane, baseFirst = pendingQueue) : newBaseQueueLast = newBaseQueueLast.next = updateLane, currentlyRenderingFiber$1.lanes |= revertLane, workInProgressRootSkippedLanes |= revertLane;
                updateLane = update.action;
                shouldDoubleInvokeUserFnsInHooksDEV && reducer(pendingQueue, updateLane);
                pendingQueue = update.hasEagerState ? update.eagerState : reducer(pendingQueue, updateLane);
            } else revertLane = {
                lane: updateLane,
                revertLane: update.revertLane,
                action: update.action,
                hasEagerState: update.hasEagerState,
                eagerState: update.eagerState,
                next: null
            }, null === newBaseQueueLast ? (newBaseQueueFirst = newBaseQueueLast = revertLane, baseFirst = pendingQueue) : newBaseQueueLast = newBaseQueueLast.next = revertLane, currentlyRenderingFiber$1.lanes |= updateLane, workInProgressRootSkippedLanes |= updateLane;
            update = update.next;
        }while (null !== update && update !== current);
        null === newBaseQueueLast ? baseFirst = pendingQueue : newBaseQueueLast.next = newBaseQueueFirst;
        if (!objectIs(pendingQueue, hook.memoizedState) && (didReceiveUpdate = !0, didReadFromEntangledAsyncAction$47 && (reducer = currentEntangledActionThenable, null !== reducer))) throw reducer;
        hook.memoizedState = pendingQueue;
        hook.baseState = baseFirst;
        hook.baseQueue = newBaseQueueLast;
        queue.lastRenderedState = pendingQueue;
    }
    null === baseQueue && (queue.lanes = 0);
    return [
        hook.memoizedState,
        queue.dispatch
    ];
}
function rerenderReducer(reducer) {
    var hook = updateWorkInProgressHook(), queue = hook.queue;
    if (null === queue) throw Error("Should have a queue. You are likely calling Hooks conditionally, which is not allowed. (https://react.dev/link/invalid-hook-call)");
    queue.lastRenderedReducer = reducer;
    var dispatch = queue.dispatch, lastRenderPhaseUpdate = queue.pending, newState = hook.memoizedState;
    if (null !== lastRenderPhaseUpdate) {
        queue.pending = null;
        var update = lastRenderPhaseUpdate = lastRenderPhaseUpdate.next;
        do newState = reducer(newState, update.action), update = update.next;
        while (update !== lastRenderPhaseUpdate);
        objectIs(newState, hook.memoizedState) || (didReceiveUpdate = !0);
        hook.memoizedState = newState;
        null === hook.baseQueue && (hook.baseState = newState);
        queue.lastRenderedState = newState;
    }
    return [
        newState,
        dispatch
    ];
}
function updateSyncExternalStore(subscribe, getSnapshot) {
    var fiber = currentlyRenderingFiber$1, hook = updateWorkInProgressHook();
    var nextSnapshot = getSnapshot();
    var snapshotChanged = !objectIs((currentHook || hook).memoizedState, nextSnapshot);
    snapshotChanged && (hook.memoizedState = nextSnapshot, didReceiveUpdate = !0);
    hook = hook.queue;
    updateEffect(subscribeToStore.bind(null, fiber, hook, subscribe), [
        subscribe
    ]);
    if (hook.getSnapshot !== getSnapshot || snapshotChanged || null !== workInProgressHook && workInProgressHook.memoizedState.tag & 1) {
        fiber.flags |= 2048;
        pushEffect(9, updateStoreInstance.bind(null, fiber, hook, nextSnapshot, getSnapshot), {
            destroy: void 0
        }, null);
        if (null === workInProgressRoot) throw Error("Expected a work-in-progress root. This is a bug in React. Please file an issue.");
        0 !== (renderLanes & 60) || pushStoreConsistencyCheck(fiber, getSnapshot, nextSnapshot);
    }
    return nextSnapshot;
}
function pushStoreConsistencyCheck(fiber, getSnapshot, renderedSnapshot) {
    fiber.flags |= 16384;
    fiber = {
        getSnapshot: getSnapshot,
        value: renderedSnapshot
    };
    getSnapshot = currentlyRenderingFiber$1.updateQueue;
    null === getSnapshot ? (getSnapshot = createFunctionComponentUpdateQueue(), currentlyRenderingFiber$1.updateQueue = getSnapshot, getSnapshot.stores = [
        fiber
    ]) : (renderedSnapshot = getSnapshot.stores, null === renderedSnapshot ? getSnapshot.stores = [
        fiber
    ] : renderedSnapshot.push(fiber));
}
function updateStoreInstance(fiber, inst, nextSnapshot, getSnapshot) {
    inst.value = nextSnapshot;
    inst.getSnapshot = getSnapshot;
    checkIfSnapshotChanged(inst) && forceStoreRerender(fiber);
}
function subscribeToStore(fiber, inst, subscribe) {
    return subscribe(function() {
        checkIfSnapshotChanged(inst) && forceStoreRerender(fiber);
    });
}
function checkIfSnapshotChanged(inst) {
    var latestGetSnapshot = inst.getSnapshot;
    inst = inst.value;
    try {
        var nextValue = latestGetSnapshot();
        return !objectIs(inst, nextValue);
    } catch (error) {
        return !0;
    }
}
function forceStoreRerender(fiber) {
    var root = enqueueConcurrentRenderForLane(fiber, 2);
    null !== root && scheduleUpdateOnFiber(root, fiber, 2);
}
function mountStateImpl(initialState) {
    var hook = mountWorkInProgressHook();
    if ("function" === typeof initialState) {
        var initialStateInitializer = initialState;
        initialState = initialStateInitializer();
        if (shouldDoubleInvokeUserFnsInHooksDEV) {
            setIsStrictModeForDevtools(!0);
            try {
                initialStateInitializer();
            } finally{
                setIsStrictModeForDevtools(!1);
            }
        }
    }
    hook.memoizedState = hook.baseState = initialState;
    hook.queue = {
        pending: null,
        lanes: 0,
        dispatch: null,
        lastRenderedReducer: basicStateReducer,
        lastRenderedState: initialState
    };
    return hook;
}
function updateOptimisticImpl(hook, current, passthrough, reducer) {
    hook.baseState = passthrough;
    return updateReducerImpl(hook, currentHook, "function" === typeof reducer ? reducer : basicStateReducer);
}
function dispatchActionState(fiber, actionQueue, setPendingState, setState, payload) {
    if (isRenderPhaseUpdate(fiber)) throw Error("Cannot update form state while rendering.");
    fiber = actionQueue.action;
    if (null !== fiber) {
        var actionNode = {
            payload: payload,
            action: fiber,
            next: null,
            isTransition: !0,
            status: "pending",
            value: null,
            reason: null,
            listeners: [],
            then: function(listener) {
                actionNode.listeners.push(listener);
            }
        };
        null !== ReactSharedInternals.T ? setPendingState(!0) : actionNode.isTransition = !1;
        setState(actionNode);
        setPendingState = actionQueue.pending;
        null === setPendingState ? (actionNode.next = actionQueue.pending = actionNode, runActionStateAction(actionQueue, actionNode)) : (actionNode.next = setPendingState.next, actionQueue.pending = setPendingState.next = actionNode);
    }
}
function runActionStateAction(actionQueue, node) {
    var action = node.action, payload = node.payload, prevState = actionQueue.state;
    if (node.isTransition) {
        var prevTransition = ReactSharedInternals.T, currentTransition = {};
        ReactSharedInternals.T = currentTransition;
        try {
            var returnValue = action(prevState, payload), onStartTransitionFinish = ReactSharedInternals.S;
            null !== onStartTransitionFinish && onStartTransitionFinish(currentTransition, returnValue);
            handleActionReturnValue(actionQueue, node, returnValue);
        } catch (error) {
            onActionError(actionQueue, node, error);
        } finally{
            ReactSharedInternals.T = prevTransition;
        }
    } else try {
        prevTransition = action(prevState, payload), handleActionReturnValue(actionQueue, node, prevTransition);
    } catch (error$51) {
        onActionError(actionQueue, node, error$51);
    }
}
function handleActionReturnValue(actionQueue, node, returnValue) {
    null !== returnValue && "object" === typeof returnValue && "function" === typeof returnValue.then ? returnValue.then(function(nextState) {
        onActionSuccess(actionQueue, node, nextState);
    }, function(error) {
        return onActionError(actionQueue, node, error);
    }) : onActionSuccess(actionQueue, node, returnValue);
}
function onActionSuccess(actionQueue, actionNode, nextState) {
    actionNode.status = "fulfilled";
    actionNode.value = nextState;
    notifyActionListeners(actionNode);
    actionQueue.state = nextState;
    actionNode = actionQueue.pending;
    null !== actionNode && (nextState = actionNode.next, nextState === actionNode ? actionQueue.pending = null : (nextState = nextState.next, actionNode.next = nextState, runActionStateAction(actionQueue, nextState)));
}
function onActionError(actionQueue, actionNode, error) {
    var last = actionQueue.pending;
    actionQueue.pending = null;
    if (null !== last) {
        last = last.next;
        do actionNode.status = "rejected", actionNode.reason = error, notifyActionListeners(actionNode), actionNode = actionNode.next;
        while (actionNode !== last);
    }
    actionQueue.action = null;
}
function notifyActionListeners(actionNode) {
    actionNode = actionNode.listeners;
    for(var i = 0; i < actionNode.length; i++)(0, actionNode[i])();
}
function actionStateReducer(oldState, newState) {
    return newState;
}
function mountActionState(action, initialStateProp) {
    var stateHook = mountWorkInProgressHook();
    stateHook.memoizedState = stateHook.baseState = initialStateProp;
    var stateQueue = {
        pending: null,
        lanes: 0,
        dispatch: null,
        lastRenderedReducer: actionStateReducer,
        lastRenderedState: initialStateProp
    };
    stateHook.queue = stateQueue;
    stateHook = dispatchSetState.bind(null, currentlyRenderingFiber$1, stateQueue);
    stateQueue.dispatch = stateHook;
    stateQueue = mountStateImpl(!1);
    var setPendingState = dispatchOptimisticSetState.bind(null, currentlyRenderingFiber$1, !1, stateQueue.queue);
    stateQueue = mountWorkInProgressHook();
    var actionQueue = {
        state: initialStateProp,
        dispatch: null,
        action: action,
        pending: null
    };
    stateQueue.queue = actionQueue;
    stateHook = dispatchActionState.bind(null, currentlyRenderingFiber$1, actionQueue, setPendingState, stateHook);
    actionQueue.dispatch = stateHook;
    stateQueue.memoizedState = action;
    return [
        initialStateProp,
        stateHook,
        !1
    ];
}
function updateActionState(action) {
    var stateHook = updateWorkInProgressHook();
    return updateActionStateImpl(stateHook, currentHook, action);
}
function updateActionStateImpl(stateHook, currentStateHook, action) {
    currentStateHook = updateReducerImpl(stateHook, currentStateHook, actionStateReducer)[0];
    stateHook = updateReducer(basicStateReducer)[0];
    currentStateHook = "object" === typeof currentStateHook && null !== currentStateHook && "function" === typeof currentStateHook.then ? useThenable(currentStateHook) : currentStateHook;
    var actionQueueHook = updateWorkInProgressHook(), actionQueue = actionQueueHook.queue, dispatch = actionQueue.dispatch;
    action !== actionQueueHook.memoizedState && (currentlyRenderingFiber$1.flags |= 2048, pushEffect(9, actionStateActionEffect.bind(null, actionQueue, action), {
        destroy: void 0
    }, null));
    return [
        currentStateHook,
        dispatch,
        stateHook
    ];
}
function actionStateActionEffect(actionQueue, action) {
    actionQueue.action = action;
}
function rerenderActionState(action) {
    var stateHook = updateWorkInProgressHook(), currentStateHook = currentHook;
    if (null !== currentStateHook) return updateActionStateImpl(stateHook, currentStateHook, action);
    updateWorkInProgressHook();
    stateHook = stateHook.memoizedState;
    currentStateHook = updateWorkInProgressHook();
    var dispatch = currentStateHook.queue.dispatch;
    currentStateHook.memoizedState = action;
    return [
        stateHook,
        dispatch,
        !1
    ];
}
function pushEffect(tag, create, inst, deps) {
    tag = {
        tag: tag,
        create: create,
        inst: inst,
        deps: deps,
        next: null
    };
    create = currentlyRenderingFiber$1.updateQueue;
    null === create && (create = createFunctionComponentUpdateQueue(), currentlyRenderingFiber$1.updateQueue = create);
    inst = create.lastEffect;
    null === inst ? create.lastEffect = tag.next = tag : (deps = inst.next, inst.next = tag, tag.next = deps, create.lastEffect = tag);
    return tag;
}
function updateRef() {
    return updateWorkInProgressHook().memoizedState;
}
function mountEffectImpl(fiberFlags, hookFlags, create, deps) {
    var hook = mountWorkInProgressHook();
    currentlyRenderingFiber$1.flags |= fiberFlags;
    hook.memoizedState = pushEffect(1 | hookFlags, create, {
        destroy: void 0
    }, void 0 === deps ? null : deps);
}
function updateEffectImpl(fiberFlags, hookFlags, create, deps) {
    var hook = updateWorkInProgressHook();
    deps = void 0 === deps ? null : deps;
    var inst = hook.memoizedState.inst;
    null !== currentHook && null !== deps && areHookInputsEqual(deps, currentHook.memoizedState.deps) ? hook.memoizedState = pushEffect(hookFlags, create, inst, deps) : (currentlyRenderingFiber$1.flags |= fiberFlags, hook.memoizedState = pushEffect(1 | hookFlags, create, inst, deps));
}
function mountEffect(create, deps) {
    mountEffectImpl(8390656, 8, create, deps);
}
function updateEffect(create, deps) {
    updateEffectImpl(2048, 8, create, deps);
}
function updateInsertionEffect(create, deps) {
    return updateEffectImpl(4, 2, create, deps);
}
function updateLayoutEffect(create, deps) {
    return updateEffectImpl(4, 4, create, deps);
}
function imperativeHandleEffect(create, ref) {
    if ("function" === typeof ref) {
        create = create();
        var refCleanup = ref(create);
        return function() {
            "function" === typeof refCleanup ? refCleanup() : ref(null);
        };
    }
    if (null !== ref && void 0 !== ref) return create = create(), ref.current = create, function() {
        ref.current = null;
    };
}
function updateImperativeHandle(ref, create, deps) {
    deps = null !== deps && void 0 !== deps ? deps.concat([
        ref
    ]) : null;
    updateEffectImpl(4, 4, imperativeHandleEffect.bind(null, create, ref), deps);
}
function mountDebugValue() {}
function updateCallback(callback, deps) {
    var hook = updateWorkInProgressHook();
    deps = void 0 === deps ? null : deps;
    var prevState = hook.memoizedState;
    if (null !== deps && areHookInputsEqual(deps, prevState[1])) return prevState[0];
    hook.memoizedState = [
        callback,
        deps
    ];
    return callback;
}
function updateMemo(nextCreate, deps) {
    var hook = updateWorkInProgressHook();
    deps = void 0 === deps ? null : deps;
    var prevState = hook.memoizedState;
    if (null !== deps && areHookInputsEqual(deps, prevState[1])) return prevState[0];
    prevState = nextCreate();
    if (shouldDoubleInvokeUserFnsInHooksDEV) {
        setIsStrictModeForDevtools(!0);
        try {
            nextCreate();
        } finally{
            setIsStrictModeForDevtools(!1);
        }
    }
    hook.memoizedState = [
        prevState,
        deps
    ];
    return prevState;
}
function mountDeferredValueImpl(hook, value, initialValue) {
    if (void 0 === initialValue || 0 !== (renderLanes & 1073741824)) return hook.memoizedState = value;
    hook.memoizedState = initialValue;
    hook = requestDeferredLane();
    currentlyRenderingFiber$1.lanes |= hook;
    workInProgressRootSkippedLanes |= hook;
    return initialValue;
}
function updateDeferredValueImpl(hook, prevValue, value, initialValue) {
    if (objectIs(value, prevValue)) return value;
    if (null !== currentTreeHiddenStackCursor.current) return hook = mountDeferredValueImpl(hook, value, initialValue), objectIs(hook, prevValue) || (didReceiveUpdate = !0), hook;
    if (0 === (renderLanes & 42)) return didReceiveUpdate = !0, hook.memoizedState = value;
    hook = requestDeferredLane();
    currentlyRenderingFiber$1.lanes |= hook;
    workInProgressRootSkippedLanes |= hook;
    return prevValue;
}
function startTransition(fiber, queue, pendingState, finishedState, callback) {
    var previousPriority = currentUpdatePriority;
    currentUpdatePriority = 0 !== previousPriority && 8 > previousPriority ? previousPriority : 8;
    var prevTransition = ReactSharedInternals.T, currentTransition = {};
    ReactSharedInternals.T = currentTransition;
    dispatchOptimisticSetState(fiber, !1, queue, pendingState);
    try {
        var returnValue = callback(), onStartTransitionFinish = ReactSharedInternals.S;
        null !== onStartTransitionFinish && onStartTransitionFinish(currentTransition, returnValue);
        if (null !== returnValue && "object" === typeof returnValue && "function" === typeof returnValue.then) {
            var thenableForFinishedState = chainThenableValue(returnValue, finishedState);
            dispatchSetStateInternal(fiber, queue, thenableForFinishedState, requestUpdateLane(fiber));
        } else dispatchSetStateInternal(fiber, queue, finishedState, requestUpdateLane(fiber));
    } catch (error) {
        dispatchSetStateInternal(fiber, queue, {
            then: function() {},
            status: "rejected",
            reason: error
        }, requestUpdateLane(fiber));
    } finally{
        currentUpdatePriority = previousPriority, ReactSharedInternals.T = prevTransition;
    }
}
function useHostTransitionStatus() {
    return readContext(HostTransitionContext);
}
function updateId() {
    return updateWorkInProgressHook().memoizedState;
}
function updateRefresh() {
    return updateWorkInProgressHook().memoizedState;
}
function refreshCache(fiber) {
    for(var provider = fiber.return; null !== provider;){
        switch(provider.tag){
            case 24:
            case 3:
                var lane = requestUpdateLane(provider);
                fiber = createUpdate(lane);
                var root = enqueueUpdate(provider, fiber, lane);
                null !== root && (scheduleUpdateOnFiber(root, provider, lane), entangleTransitions(root, provider, lane));
                provider = {
                    cache: createCache()
                };
                fiber.payload = provider;
                return;
        }
        provider = provider.return;
    }
}
function dispatchReducerAction(fiber, queue, action) {
    var lane = requestUpdateLane(fiber);
    action = {
        lane: lane,
        revertLane: 0,
        action: action,
        hasEagerState: !1,
        eagerState: null,
        next: null
    };
    isRenderPhaseUpdate(fiber) ? enqueueRenderPhaseUpdate(queue, action) : (action = enqueueConcurrentHookUpdate(fiber, queue, action, lane), null !== action && (scheduleUpdateOnFiber(action, fiber, lane), entangleTransitionUpdate(action, queue, lane)));
}
function dispatchSetState(fiber, queue, action) {
    var lane = requestUpdateLane(fiber);
    dispatchSetStateInternal(fiber, queue, action, lane);
}
function dispatchSetStateInternal(fiber, queue, action, lane) {
    var update = {
        lane: lane,
        revertLane: 0,
        action: action,
        hasEagerState: !1,
        eagerState: null,
        next: null
    };
    if (isRenderPhaseUpdate(fiber)) enqueueRenderPhaseUpdate(queue, update);
    else {
        var alternate = fiber.alternate;
        if (0 === fiber.lanes && (null === alternate || 0 === alternate.lanes) && (alternate = queue.lastRenderedReducer, null !== alternate)) try {
            var currentState = queue.lastRenderedState, eagerState = alternate(currentState, action);
            update.hasEagerState = !0;
            update.eagerState = eagerState;
            if (objectIs(eagerState, currentState)) return enqueueUpdate$1(fiber, queue, update, 0), null === workInProgressRoot && finishQueueingConcurrentUpdates(), !1;
        } catch (error) {} finally{}
        action = enqueueConcurrentHookUpdate(fiber, queue, update, lane);
        if (null !== action) return scheduleUpdateOnFiber(action, fiber, lane), entangleTransitionUpdate(action, queue, lane), !0;
    }
    return !1;
}
function dispatchOptimisticSetState(fiber, throwIfDuringRender, queue, action) {
    action = {
        lane: 2,
        revertLane: requestTransitionLane(),
        action: action,
        hasEagerState: !1,
        eagerState: null,
        next: null
    };
    if (isRenderPhaseUpdate(fiber)) {
        if (throwIfDuringRender) throw Error("Cannot update optimistic state while rendering.");
    } else throwIfDuringRender = enqueueConcurrentHookUpdate(fiber, queue, action, 2), null !== throwIfDuringRender && scheduleUpdateOnFiber(throwIfDuringRender, fiber, 2);
}
function isRenderPhaseUpdate(fiber) {
    var alternate = fiber.alternate;
    return fiber === currentlyRenderingFiber$1 || null !== alternate && alternate === currentlyRenderingFiber$1;
}
function enqueueRenderPhaseUpdate(queue, update) {
    didScheduleRenderPhaseUpdateDuringThisPass = didScheduleRenderPhaseUpdate = !0;
    var pending = queue.pending;
    null === pending ? update.next = update : (update.next = pending.next, pending.next = update);
    queue.pending = update;
}
function entangleTransitionUpdate(root, queue, lane) {
    if (0 !== (lane & 4194176)) {
        var queueLanes = queue.lanes;
        queueLanes &= root.pendingLanes;
        lane |= queueLanes;
        queue.lanes = lane;
        markRootEntangled(root, lane);
    }
}
var ContextOnlyDispatcher = {
    readContext: readContext,
    use: use,
    useCallback: throwInvalidHookError,
    useContext: throwInvalidHookError,
    useEffect: throwInvalidHookError,
    useImperativeHandle: throwInvalidHookError,
    useLayoutEffect: throwInvalidHookError,
    useInsertionEffect: throwInvalidHookError,
    useMemo: throwInvalidHookError,
    useReducer: throwInvalidHookError,
    useRef: throwInvalidHookError,
    useState: throwInvalidHookError,
    useDebugValue: throwInvalidHookError,
    useDeferredValue: throwInvalidHookError,
    useTransition: throwInvalidHookError,
    useSyncExternalStore: throwInvalidHookError,
    useId: throwInvalidHookError
};
ContextOnlyDispatcher.useCacheRefresh = throwInvalidHookError;
ContextOnlyDispatcher.useMemoCache = throwInvalidHookError;
ContextOnlyDispatcher.useHostTransitionStatus = throwInvalidHookError;
ContextOnlyDispatcher.useFormState = throwInvalidHookError;
ContextOnlyDispatcher.useActionState = throwInvalidHookError;
ContextOnlyDispatcher.useOptimistic = throwInvalidHookError;
var HooksDispatcherOnMount = {
    readContext: readContext,
    use: use,
    useCallback: function(callback, deps) {
        mountWorkInProgressHook().memoizedState = [
            callback,
            void 0 === deps ? null : deps
        ];
        return callback;
    },
    useContext: readContext,
    useEffect: mountEffect,
    useImperativeHandle: function(ref, create, deps) {
        deps = null !== deps && void 0 !== deps ? deps.concat([
            ref
        ]) : null;
        mountEffectImpl(4194308, 4, imperativeHandleEffect.bind(null, create, ref), deps);
    },
    useLayoutEffect: function(create, deps) {
        return mountEffectImpl(4194308, 4, create, deps);
    },
    useInsertionEffect: function(create, deps) {
        mountEffectImpl(4, 2, create, deps);
    },
    useMemo: function(nextCreate, deps) {
        var hook = mountWorkInProgressHook();
        deps = void 0 === deps ? null : deps;
        var nextValue = nextCreate();
        if (shouldDoubleInvokeUserFnsInHooksDEV) {
            setIsStrictModeForDevtools(!0);
            try {
                nextCreate();
            } finally{
                setIsStrictModeForDevtools(!1);
            }
        }
        hook.memoizedState = [
            nextValue,
            deps
        ];
        return nextValue;
    },
    useReducer: function(reducer, initialArg, init) {
        var hook = mountWorkInProgressHook();
        if (void 0 !== init) {
            var initialState = init(initialArg);
            if (shouldDoubleInvokeUserFnsInHooksDEV) {
                setIsStrictModeForDevtools(!0);
                try {
                    init(initialArg);
                } finally{
                    setIsStrictModeForDevtools(!1);
                }
            }
        } else initialState = initialArg;
        hook.memoizedState = hook.baseState = initialState;
        reducer = {
            pending: null,
            lanes: 0,
            dispatch: null,
            lastRenderedReducer: reducer,
            lastRenderedState: initialState
        };
        hook.queue = reducer;
        reducer = reducer.dispatch = dispatchReducerAction.bind(null, currentlyRenderingFiber$1, reducer);
        return [
            hook.memoizedState,
            reducer
        ];
    },
    useRef: function(initialValue) {
        var hook = mountWorkInProgressHook();
        initialValue = {
            current: initialValue
        };
        return hook.memoizedState = initialValue;
    },
    useState: function(initialState) {
        initialState = mountStateImpl(initialState);
        var queue = initialState.queue, dispatch = dispatchSetState.bind(null, currentlyRenderingFiber$1, queue);
        queue.dispatch = dispatch;
        return [
            initialState.memoizedState,
            dispatch
        ];
    },
    useDebugValue: mountDebugValue,
    useDeferredValue: function(value, initialValue) {
        var hook = mountWorkInProgressHook();
        return mountDeferredValueImpl(hook, value, initialValue);
    },
    useTransition: function() {
        var stateHook = mountStateImpl(!1);
        stateHook = startTransition.bind(null, currentlyRenderingFiber$1, stateHook.queue, !0, !1);
        mountWorkInProgressHook().memoizedState = stateHook;
        return [
            !1,
            stateHook
        ];
    },
    useSyncExternalStore: function(subscribe, getSnapshot) {
        var fiber = currentlyRenderingFiber$1, hook = mountWorkInProgressHook();
        var nextSnapshot = getSnapshot();
        if (null === workInProgressRoot) throw Error("Expected a work-in-progress root. This is a bug in React. Please file an issue.");
        0 !== (workInProgressRootRenderLanes & 60) || pushStoreConsistencyCheck(fiber, getSnapshot, nextSnapshot);
        hook.memoizedState = nextSnapshot;
        var inst = {
            value: nextSnapshot,
            getSnapshot: getSnapshot
        };
        hook.queue = inst;
        mountEffect(subscribeToStore.bind(null, fiber, inst, subscribe), [
            subscribe
        ]);
        fiber.flags |= 2048;
        pushEffect(9, updateStoreInstance.bind(null, fiber, inst, nextSnapshot, getSnapshot), {
            destroy: void 0
        }, null);
        return nextSnapshot;
    },
    useId: function() {
        var hook = mountWorkInProgressHook(), identifierPrefix = workInProgressRoot.identifierPrefix, globalClientId = globalClientIdCounter++;
        identifierPrefix = ":" + identifierPrefix + "r" + globalClientId.toString(32) + ":";
        return hook.memoizedState = identifierPrefix;
    },
    useCacheRefresh: function() {
        return mountWorkInProgressHook().memoizedState = refreshCache.bind(null, currentlyRenderingFiber$1);
    }
};
HooksDispatcherOnMount.useMemoCache = useMemoCache;
HooksDispatcherOnMount.useHostTransitionStatus = useHostTransitionStatus;
HooksDispatcherOnMount.useFormState = mountActionState;
HooksDispatcherOnMount.useActionState = mountActionState;
HooksDispatcherOnMount.useOptimistic = function(passthrough) {
    var hook = mountWorkInProgressHook();
    hook.memoizedState = hook.baseState = passthrough;
    var queue = {
        pending: null,
        lanes: 0,
        dispatch: null,
        lastRenderedReducer: null,
        lastRenderedState: null
    };
    hook.queue = queue;
    hook = dispatchOptimisticSetState.bind(null, currentlyRenderingFiber$1, !0, queue);
    queue.dispatch = hook;
    return [
        passthrough,
        hook
    ];
};
var HooksDispatcherOnUpdate = {
    readContext: readContext,
    use: use,
    useCallback: updateCallback,
    useContext: readContext,
    useEffect: updateEffect,
    useImperativeHandle: updateImperativeHandle,
    useInsertionEffect: updateInsertionEffect,
    useLayoutEffect: updateLayoutEffect,
    useMemo: updateMemo,
    useReducer: updateReducer,
    useRef: updateRef,
    useState: function() {
        return updateReducer(basicStateReducer);
    },
    useDebugValue: mountDebugValue,
    useDeferredValue: function(value, initialValue) {
        var hook = updateWorkInProgressHook();
        return updateDeferredValueImpl(hook, currentHook.memoizedState, value, initialValue);
    },
    useTransition: function() {
        var booleanOrThenable = updateReducer(basicStateReducer)[0], start = updateWorkInProgressHook().memoizedState;
        return [
            "boolean" === typeof booleanOrThenable ? booleanOrThenable : useThenable(booleanOrThenable),
            start
        ];
    },
    useSyncExternalStore: updateSyncExternalStore,
    useId: updateId
};
HooksDispatcherOnUpdate.useCacheRefresh = updateRefresh;
HooksDispatcherOnUpdate.useMemoCache = useMemoCache;
HooksDispatcherOnUpdate.useHostTransitionStatus = useHostTransitionStatus;
HooksDispatcherOnUpdate.useFormState = updateActionState;
HooksDispatcherOnUpdate.useActionState = updateActionState;
HooksDispatcherOnUpdate.useOptimistic = function(passthrough, reducer) {
    var hook = updateWorkInProgressHook();
    return updateOptimisticImpl(hook, currentHook, passthrough, reducer);
};
var HooksDispatcherOnRerender = {
    readContext: readContext,
    use: use,
    useCallback: updateCallback,
    useContext: readContext,
    useEffect: updateEffect,
    useImperativeHandle: updateImperativeHandle,
    useInsertionEffect: updateInsertionEffect,
    useLayoutEffect: updateLayoutEffect,
    useMemo: updateMemo,
    useReducer: rerenderReducer,
    useRef: updateRef,
    useState: function() {
        return rerenderReducer(basicStateReducer);
    },
    useDebugValue: mountDebugValue,
    useDeferredValue: function(value, initialValue) {
        var hook = updateWorkInProgressHook();
        return null === currentHook ? mountDeferredValueImpl(hook, value, initialValue) : updateDeferredValueImpl(hook, currentHook.memoizedState, value, initialValue);
    },
    useTransition: function() {
        var booleanOrThenable = rerenderReducer(basicStateReducer)[0], start = updateWorkInProgressHook().memoizedState;
        return [
            "boolean" === typeof booleanOrThenable ? booleanOrThenable : useThenable(booleanOrThenable),
            start
        ];
    },
    useSyncExternalStore: updateSyncExternalStore,
    useId: updateId
};
HooksDispatcherOnRerender.useCacheRefresh = updateRefresh;
HooksDispatcherOnRerender.useMemoCache = useMemoCache;
HooksDispatcherOnRerender.useHostTransitionStatus = useHostTransitionStatus;
HooksDispatcherOnRerender.useFormState = rerenderActionState;
HooksDispatcherOnRerender.useActionState = rerenderActionState;
HooksDispatcherOnRerender.useOptimistic = function(passthrough, reducer) {
    var hook = updateWorkInProgressHook();
    if (null !== currentHook) return updateOptimisticImpl(hook, currentHook, passthrough, reducer);
    hook.baseState = passthrough;
    return [
        passthrough,
        hook.queue.dispatch
    ];
};
function applyDerivedStateFromProps(workInProgress, ctor, getDerivedStateFromProps, nextProps) {
    ctor = workInProgress.memoizedState;
    getDerivedStateFromProps = getDerivedStateFromProps(nextProps, ctor);
    getDerivedStateFromProps = null === getDerivedStateFromProps || void 0 === getDerivedStateFromProps ? ctor : assign({}, ctor, getDerivedStateFromProps);
    workInProgress.memoizedState = getDerivedStateFromProps;
    0 === workInProgress.lanes && (workInProgress.updateQueue.baseState = getDerivedStateFromProps);
}
var classComponentUpdater = {
    isMounted: function(component) {
        return (component = component._reactInternals) ? getNearestMountedFiber(component) === component : !1;
    },
    enqueueSetState: function(inst, payload, callback) {
        inst = inst._reactInternals;
        var lane = requestUpdateLane(inst), update = createUpdate(lane);
        update.payload = payload;
        void 0 !== callback && null !== callback && (update.callback = callback);
        payload = enqueueUpdate(inst, update, lane);
        null !== payload && (scheduleUpdateOnFiber(payload, inst, lane), entangleTransitions(payload, inst, lane));
    },
    enqueueReplaceState: function(inst, payload, callback) {
        inst = inst._reactInternals;
        var lane = requestUpdateLane(inst), update = createUpdate(lane);
        update.tag = 1;
        update.payload = payload;
        void 0 !== callback && null !== callback && (update.callback = callback);
        payload = enqueueUpdate(inst, update, lane);
        null !== payload && (scheduleUpdateOnFiber(payload, inst, lane), entangleTransitions(payload, inst, lane));
    },
    enqueueForceUpdate: function(inst, callback) {
        inst = inst._reactInternals;
        var lane = requestUpdateLane(inst), update = createUpdate(lane);
        update.tag = 2;
        void 0 !== callback && null !== callback && (update.callback = callback);
        callback = enqueueUpdate(inst, update, lane);
        null !== callback && (scheduleUpdateOnFiber(callback, inst, lane), entangleTransitions(callback, inst, lane));
    }
};
function checkShouldComponentUpdate(workInProgress, ctor, oldProps, newProps, oldState, newState, nextContext) {
    workInProgress = workInProgress.stateNode;
    return "function" === typeof workInProgress.shouldComponentUpdate ? workInProgress.shouldComponentUpdate(newProps, newState, nextContext) : ctor.prototype && ctor.prototype.isPureReactComponent ? !shallowEqual(oldProps, newProps) || !shallowEqual(oldState, newState) : !0;
}
function constructClassInstance(workInProgress, ctor, props) {
    var context = emptyContextObject, contextType = ctor.contextType;
    "object" === typeof contextType && null !== contextType && (context = readContext(contextType));
    ctor = new ctor(props, context);
    workInProgress.memoizedState = null !== ctor.state && void 0 !== ctor.state ? ctor.state : null;
    ctor.updater = classComponentUpdater;
    workInProgress.stateNode = ctor;
    ctor._reactInternals = workInProgress;
    return ctor;
}
function callComponentWillReceiveProps(workInProgress, instance, newProps, nextContext) {
    workInProgress = instance.state;
    "function" === typeof instance.componentWillReceiveProps && instance.componentWillReceiveProps(newProps, nextContext);
    "function" === typeof instance.UNSAFE_componentWillReceiveProps && instance.UNSAFE_componentWillReceiveProps(newProps, nextContext);
    instance.state !== workInProgress && classComponentUpdater.enqueueReplaceState(instance, instance.state, null);
}
function mountClassInstance(workInProgress, ctor, newProps, renderLanes) {
    var instance = workInProgress.stateNode;
    instance.props = newProps;
    instance.state = workInProgress.memoizedState;
    instance.refs = {};
    initializeUpdateQueue(workInProgress);
    var contextType = ctor.contextType;
    instance.context = "object" === typeof contextType && null !== contextType ? readContext(contextType) : emptyContextObject;
    instance.state = workInProgress.memoizedState;
    contextType = ctor.getDerivedStateFromProps;
    "function" === typeof contextType && (applyDerivedStateFromProps(workInProgress, ctor, contextType, newProps), instance.state = workInProgress.memoizedState);
    "function" === typeof ctor.getDerivedStateFromProps || "function" === typeof instance.getSnapshotBeforeUpdate || "function" !== typeof instance.UNSAFE_componentWillMount && "function" !== typeof instance.componentWillMount || (ctor = instance.state, "function" === typeof instance.componentWillMount && instance.componentWillMount(), "function" === typeof instance.UNSAFE_componentWillMount && instance.UNSAFE_componentWillMount(), ctor !== instance.state && classComponentUpdater.enqueueReplaceState(instance, instance.state, null), processUpdateQueue(workInProgress, newProps, instance, renderLanes), suspendIfUpdateReadFromEntangledAsyncAction(), instance.state = workInProgress.memoizedState);
    "function" === typeof instance.componentDidMount && (workInProgress.flags |= 4194308);
}
function resolveClassComponentProps(Component, baseProps) {
    var newProps = baseProps;
    if ("ref" in baseProps) {
        newProps = {};
        for(var propName in baseProps)"ref" !== propName && (newProps[propName] = baseProps[propName]);
    }
    if (Component = Component.defaultProps) {
        newProps === baseProps && (newProps = assign({}, newProps));
        for(var propName$53 in Component)void 0 === newProps[propName$53] && (newProps[propName$53] = Component[propName$53]);
    }
    return newProps;
}
var reportGlobalError = "function" === typeof reportError ? reportError : function(error) {
    if ("object" === typeof window && "function" === typeof window.ErrorEvent) {
        var event = new window.ErrorEvent("error", {
            bubbles: !0,
            cancelable: !0,
            message: "object" === typeof error && null !== error && "string" === typeof error.message ? String(error.message) : String(error),
            error: error
        });
        if (!window.dispatchEvent(event)) return;
    } else if ("object" === typeof process && "function" === typeof process.emit) {
        process.emit("uncaughtException", error);
        return;
    }
    console.error(error);
};
function defaultOnRecoverableError(error) {
    reportGlobalError(error);
}
function logUncaughtError(root, errorInfo) {
    try {
        var onUncaughtError = root.onUncaughtError;
        onUncaughtError(errorInfo.value, {
            componentStack: errorInfo.stack
        });
    } catch (e) {
        setTimeout(function() {
            throw e;
        });
    }
}
function logCaughtError(root, boundary, errorInfo) {
    try {
        var onCaughtError = root.onCaughtError;
        onCaughtError(errorInfo.value, {
            componentStack: errorInfo.stack,
            errorBoundary: 1 === boundary.tag ? boundary.stateNode : null
        });
    } catch (e) {
        setTimeout(function() {
            throw e;
        });
    }
}
function createRootErrorUpdate(root, errorInfo, lane) {
    lane = createUpdate(lane);
    lane.tag = 3;
    lane.payload = {
        element: null
    };
    lane.callback = function() {
        logUncaughtError(root, errorInfo);
    };
    return lane;
}
function createClassErrorUpdate(lane) {
    lane = createUpdate(lane);
    lane.tag = 3;
    return lane;
}
function initializeClassErrorUpdate(update, root, fiber, errorInfo) {
    var getDerivedStateFromError = fiber.type.getDerivedStateFromError;
    if ("function" === typeof getDerivedStateFromError) {
        var error = errorInfo.value;
        update.payload = function() {
            return getDerivedStateFromError(error);
        };
        update.callback = function() {
            logCaughtError(root, fiber, errorInfo);
        };
    }
    var inst = fiber.stateNode;
    null !== inst && "function" === typeof inst.componentDidCatch && (update.callback = function() {
        logCaughtError(root, fiber, errorInfo);
        "function" !== typeof getDerivedStateFromError && (null === legacyErrorBoundariesThatAlreadyFailed ? legacyErrorBoundariesThatAlreadyFailed = new Set([
            this
        ]) : legacyErrorBoundariesThatAlreadyFailed.add(this));
        var stack = errorInfo.stack;
        this.componentDidCatch(errorInfo.value, {
            componentStack: null !== stack ? stack : ""
        });
    });
}
function throwException(root, returnFiber, sourceFiber, value, rootRenderLanes) {
    sourceFiber.flags |= 32768;
    if (null !== value && "object" === typeof value && "function" === typeof value.then) {
        var currentSourceFiber = sourceFiber.alternate;
        null !== currentSourceFiber && propagateParentContextChanges(currentSourceFiber, sourceFiber, rootRenderLanes, !0);
        currentSourceFiber = sourceFiber.tag;
        0 !== (sourceFiber.mode & 1) || 0 !== currentSourceFiber && 11 !== currentSourceFiber && 15 !== currentSourceFiber || ((currentSourceFiber = sourceFiber.alternate) ? (sourceFiber.updateQueue = currentSourceFiber.updateQueue, sourceFiber.memoizedState = currentSourceFiber.memoizedState, sourceFiber.lanes = currentSourceFiber.lanes) : (sourceFiber.updateQueue = null, sourceFiber.memoizedState = null));
        currentSourceFiber = suspenseHandlerStackCursor.current;
        if (null !== currentSourceFiber) {
            switch(currentSourceFiber.tag){
                case 13:
                    return sourceFiber.mode & 1 && (null === shellBoundary ? renderDidSuspendDelayIfPossible() : null === currentSourceFiber.alternate && 0 === workInProgressRootExitStatus && (workInProgressRootExitStatus = 3)), currentSourceFiber.flags &= -257, 0 === (currentSourceFiber.mode & 1) ? currentSourceFiber === returnFiber ? currentSourceFiber.flags |= 65536 : (currentSourceFiber.flags |= 128, sourceFiber.flags |= 131072, sourceFiber.flags &= -52805, 1 === sourceFiber.tag ? null === sourceFiber.alternate ? sourceFiber.tag = 17 : (returnFiber = createUpdate(2), returnFiber.tag = 2, enqueueUpdate(sourceFiber, returnFiber, 2)) : 0 === sourceFiber.tag && null === sourceFiber.alternate && (sourceFiber.tag = 28), sourceFiber.lanes |= 2) : (currentSourceFiber.flags |= 65536, currentSourceFiber.lanes = rootRenderLanes), value === noopSuspenseyCommitThenable ? currentSourceFiber.flags |= 16384 : (returnFiber = currentSourceFiber.updateQueue, null === returnFiber ? currentSourceFiber.updateQueue = new Set([
                        value
                    ]) : returnFiber.add(value), currentSourceFiber.mode & 1 && attachPingListener(root, value, rootRenderLanes)), !1;
                case 22:
                    if (currentSourceFiber.mode & 1) return currentSourceFiber.flags |= 65536, value === noopSuspenseyCommitThenable ? currentSourceFiber.flags |= 16384 : (returnFiber = currentSourceFiber.updateQueue, null === returnFiber ? (returnFiber = {
                        transitions: null,
                        markerInstances: null,
                        retryQueue: new Set([
                            value
                        ])
                    }, currentSourceFiber.updateQueue = returnFiber) : (sourceFiber = returnFiber.retryQueue, null === sourceFiber ? returnFiber.retryQueue = new Set([
                        value
                    ]) : sourceFiber.add(value)), attachPingListener(root, value, rootRenderLanes)), !1;
            }
            throw Error("Unexpected Suspense handler tag (" + currentSourceFiber.tag + "). This is a bug in React.");
        }
        if (1 === root.tag) return attachPingListener(root, value, rootRenderLanes), renderDidSuspendDelayIfPossible(), !1;
        value = Error("A component suspended while responding to synchronous input. This will cause the UI to be replaced with a loading indicator. To fix, updates that suspend should be wrapped with startTransition.");
    }
    currentSourceFiber = createCapturedValueAtFiber(Error("There was an error during concurrent rendering but React was able to recover by instead synchronously rendering the entire root.", {
        cause: value
    }), sourceFiber);
    null === workInProgressRootConcurrentErrors ? workInProgressRootConcurrentErrors = [
        currentSourceFiber
    ] : workInProgressRootConcurrentErrors.push(currentSourceFiber);
    4 !== workInProgressRootExitStatus && (workInProgressRootExitStatus = 2);
    if (null === returnFiber) return !0;
    value = createCapturedValueAtFiber(value, sourceFiber);
    do {
        switch(returnFiber.tag){
            case 3:
                return returnFiber.flags |= 65536, root = rootRenderLanes & -rootRenderLanes, returnFiber.lanes |= root, root = createRootErrorUpdate(returnFiber.stateNode, value, root), enqueueCapturedUpdate(returnFiber, root), !1;
            case 1:
                if (sourceFiber = returnFiber.type, currentSourceFiber = returnFiber.stateNode, 0 === (returnFiber.flags & 128) && ("function" === typeof sourceFiber.getDerivedStateFromError || null !== currentSourceFiber && "function" === typeof currentSourceFiber.componentDidCatch && (null === legacyErrorBoundariesThatAlreadyFailed || !legacyErrorBoundariesThatAlreadyFailed.has(currentSourceFiber)))) return returnFiber.flags |= 65536, rootRenderLanes &= -rootRenderLanes, returnFiber.lanes |= rootRenderLanes, rootRenderLanes = createClassErrorUpdate(rootRenderLanes), initializeClassErrorUpdate(rootRenderLanes, root, returnFiber, value), enqueueCapturedUpdate(returnFiber, rootRenderLanes), !1;
        }
        returnFiber = returnFiber.return;
    }while (null !== returnFiber);
    return !1;
}
var SelectiveHydrationException = Error("This is not a real error. It's an implementation detail of React's selective hydration feature. If this leaks into userspace, it's a bug in React. Please file an issue."), didReceiveUpdate = !1;
function reconcileChildren(current, workInProgress, nextChildren, renderLanes) {
    workInProgress.child = null === current ? mountChildFibers(workInProgress, null, nextChildren, renderLanes) : reconcileChildFibers(workInProgress, current.child, nextChildren, renderLanes);
}
function updateForwardRef(current, workInProgress, Component, nextProps, renderLanes) {
    Component = Component.render;
    var ref = workInProgress.ref;
    if ("ref" in nextProps) {
        var propsWithoutRef = {};
        for(var key in nextProps)"ref" !== key && (propsWithoutRef[key] = nextProps[key]);
    } else propsWithoutRef = nextProps;
    prepareToReadContext(workInProgress);
    nextProps = renderWithHooks(current, workInProgress, Component, propsWithoutRef, ref, renderLanes);
    if (null !== current && !didReceiveUpdate) return bailoutHooks(current, workInProgress, renderLanes), bailoutOnAlreadyFinishedWork(current, workInProgress, renderLanes);
    workInProgress.flags |= 1;
    reconcileChildren(current, workInProgress, nextProps, renderLanes);
    return workInProgress.child;
}
function updateMemoComponent(current, workInProgress, Component, nextProps, renderLanes) {
    if (null === current) {
        var type = Component.type;
        if ("function" === typeof type && !shouldConstruct(type) && void 0 === type.defaultProps && null === Component.compare) return workInProgress.tag = 15, workInProgress.type = type, updateSimpleMemoComponent(current, workInProgress, type, nextProps, renderLanes);
        current = createFiberFromTypeAndProps(Component.type, null, nextProps, workInProgress, workInProgress.mode, renderLanes);
        current.ref = workInProgress.ref;
        current.return = workInProgress;
        return workInProgress.child = current;
    }
    type = current.child;
    if (!checkScheduledUpdateOrContext(current, renderLanes)) {
        var prevProps = type.memoizedProps;
        Component = Component.compare;
        Component = null !== Component ? Component : shallowEqual;
        if (Component(prevProps, nextProps) && current.ref === workInProgress.ref) return bailoutOnAlreadyFinishedWork(current, workInProgress, renderLanes);
    }
    workInProgress.flags |= 1;
    current = createWorkInProgress(type, nextProps);
    current.ref = workInProgress.ref;
    current.return = workInProgress;
    return workInProgress.child = current;
}
function updateSimpleMemoComponent(current, workInProgress, Component, nextProps, renderLanes) {
    if (null !== current) {
        var prevProps = current.memoizedProps;
        if (shallowEqual(prevProps, nextProps) && current.ref === workInProgress.ref) if (didReceiveUpdate = !1, workInProgress.pendingProps = nextProps = prevProps, checkScheduledUpdateOrContext(current, renderLanes)) 0 !== (current.flags & 131072) && (didReceiveUpdate = !0);
        else return workInProgress.lanes = current.lanes, bailoutOnAlreadyFinishedWork(current, workInProgress, renderLanes);
    }
    return updateFunctionComponent(current, workInProgress, Component, nextProps, renderLanes);
}
function updateOffscreenComponent(current, workInProgress, renderLanes) {
    var nextProps = workInProgress.pendingProps, nextChildren = nextProps.children, nextIsDetached = 0 !== (workInProgress.stateNode._pendingVisibility & 2), prevState = null !== current ? current.memoizedState : null;
    markRef(current, workInProgress);
    if ("hidden" === nextProps.mode || nextIsDetached) {
        if (0 !== (workInProgress.flags & 128)) {
            nextProps = null !== prevState ? prevState.baseLanes | renderLanes : renderLanes;
            if (null !== current) {
                nextChildren = workInProgress.child = current.child;
                for(nextIsDetached = 0; null !== nextChildren;)nextIsDetached = nextIsDetached | nextChildren.lanes | nextChildren.childLanes, nextChildren = nextChildren.sibling;
                workInProgress.childLanes = nextIsDetached & ~nextProps;
            } else workInProgress.childLanes = 0, workInProgress.child = null;
            return deferHiddenOffscreenComponent(current, workInProgress, nextProps, renderLanes);
        }
        if (0 === (workInProgress.mode & 1)) workInProgress.memoizedState = {
            baseLanes: 0,
            cachePool: null
        }, null !== current && pushTransition(workInProgress, null), reuseHiddenContextOnStack(), pushOffscreenSuspenseHandler(workInProgress);
        else if (0 !== (renderLanes & 536870912)) workInProgress.memoizedState = {
            baseLanes: 0,
            cachePool: null
        }, null !== current && pushTransition(workInProgress, null !== prevState ? prevState.cachePool : null), null !== prevState ? pushHiddenContext(workInProgress, prevState) : reuseHiddenContextOnStack(), pushOffscreenSuspenseHandler(workInProgress);
        else return workInProgress.lanes = workInProgress.childLanes = 536870912, deferHiddenOffscreenComponent(current, workInProgress, null !== prevState ? prevState.baseLanes | renderLanes : renderLanes, renderLanes);
    } else null !== prevState ? (pushTransition(workInProgress, prevState.cachePool), pushHiddenContext(workInProgress, prevState), reuseSuspenseHandlerOnStack(workInProgress), workInProgress.memoizedState = null) : (null !== current && pushTransition(workInProgress, null), reuseHiddenContextOnStack(), reuseSuspenseHandlerOnStack(workInProgress));
    reconcileChildren(current, workInProgress, nextChildren, renderLanes);
    return workInProgress.child;
}
function deferHiddenOffscreenComponent(current, workInProgress, nextBaseLanes, renderLanes) {
    var JSCompiler_inline_result = peekCacheFromPool();
    JSCompiler_inline_result = null === JSCompiler_inline_result ? null : {
        parent: CacheContext._currentValue,
        pool: JSCompiler_inline_result
    };
    workInProgress.memoizedState = {
        baseLanes: nextBaseLanes,
        cachePool: JSCompiler_inline_result
    };
    null !== current && pushTransition(workInProgress, null);
    reuseHiddenContextOnStack();
    pushOffscreenSuspenseHandler(workInProgress);
    null !== current && propagateParentContextChanges(current, workInProgress, renderLanes, !0);
    return null;
}
function markRef(current, workInProgress) {
    var ref = workInProgress.ref;
    if (null === ref) null !== current && null !== current.ref && (workInProgress.flags |= 2097664);
    else {
        if ("function" !== typeof ref && "object" !== typeof ref) throw Error("Expected ref to be a function, an object returned by React.createRef(), or undefined/null.");
        if (null === current || current.ref !== ref) workInProgress.flags |= 2097664;
    }
}
function updateFunctionComponent(current, workInProgress, Component, nextProps, renderLanes) {
    prepareToReadContext(workInProgress);
    Component = renderWithHooks(current, workInProgress, Component, nextProps, void 0, renderLanes);
    if (null !== current && !didReceiveUpdate) return bailoutHooks(current, workInProgress, renderLanes), bailoutOnAlreadyFinishedWork(current, workInProgress, renderLanes);
    workInProgress.flags |= 1;
    reconcileChildren(current, workInProgress, Component, renderLanes);
    return workInProgress.child;
}
function replayFunctionComponent(current, workInProgress, nextProps, Component, secondArg, renderLanes) {
    prepareToReadContext(workInProgress);
    workInProgress.updateQueue = null;
    nextProps = renderWithHooksAgain(workInProgress, Component, nextProps, secondArg);
    finishRenderingHooks(current);
    if (null !== current && !didReceiveUpdate) return bailoutHooks(current, workInProgress, renderLanes), bailoutOnAlreadyFinishedWork(current, workInProgress, renderLanes);
    workInProgress.flags |= 1;
    reconcileChildren(current, workInProgress, nextProps, renderLanes);
    return workInProgress.child;
}
function updateClassComponent(current, workInProgress, Component, nextProps, renderLanes) {
    prepareToReadContext(workInProgress);
    if (null === workInProgress.stateNode) resetSuspendedCurrentOnMountInLegacyMode(current, workInProgress), constructClassInstance(workInProgress, Component, nextProps), mountClassInstance(workInProgress, Component, nextProps, renderLanes), nextProps = !0;
    else if (null === current) {
        var instance = workInProgress.stateNode, unresolvedOldProps = workInProgress.memoizedProps, oldProps = resolveClassComponentProps(Component, unresolvedOldProps);
        instance.props = oldProps;
        var oldContext = instance.context, contextType = Component.contextType, nextContext = emptyContextObject;
        "object" === typeof contextType && null !== contextType && (nextContext = readContext(contextType));
        var getDerivedStateFromProps = Component.getDerivedStateFromProps;
        contextType = "function" === typeof getDerivedStateFromProps || "function" === typeof instance.getSnapshotBeforeUpdate;
        unresolvedOldProps = workInProgress.pendingProps !== unresolvedOldProps;
        contextType || "function" !== typeof instance.UNSAFE_componentWillReceiveProps && "function" !== typeof instance.componentWillReceiveProps || (unresolvedOldProps || oldContext !== nextContext) && callComponentWillReceiveProps(workInProgress, instance, nextProps, nextContext);
        hasForceUpdate = !1;
        var oldState = workInProgress.memoizedState;
        instance.state = oldState;
        processUpdateQueue(workInProgress, nextProps, instance, renderLanes);
        suspendIfUpdateReadFromEntangledAsyncAction();
        oldContext = workInProgress.memoizedState;
        unresolvedOldProps || oldState !== oldContext || hasForceUpdate ? ("function" === typeof getDerivedStateFromProps && (applyDerivedStateFromProps(workInProgress, Component, getDerivedStateFromProps, nextProps), oldContext = workInProgress.memoizedState), (oldProps = hasForceUpdate || checkShouldComponentUpdate(workInProgress, Component, oldProps, nextProps, oldState, oldContext, nextContext)) ? (contextType || "function" !== typeof instance.UNSAFE_componentWillMount && "function" !== typeof instance.componentWillMount || ("function" === typeof instance.componentWillMount && instance.componentWillMount(), "function" === typeof instance.UNSAFE_componentWillMount && instance.UNSAFE_componentWillMount()), "function" === typeof instance.componentDidMount && (workInProgress.flags |= 4194308)) : ("function" === typeof instance.componentDidMount && (workInProgress.flags |= 4194308), workInProgress.memoizedProps = nextProps, workInProgress.memoizedState = oldContext), instance.props = nextProps, instance.state = oldContext, instance.context = nextContext, nextProps = oldProps) : ("function" === typeof instance.componentDidMount && (workInProgress.flags |= 4194308), nextProps = !1);
    } else {
        instance = workInProgress.stateNode;
        cloneUpdateQueue(current, workInProgress);
        nextContext = workInProgress.memoizedProps;
        contextType = resolveClassComponentProps(Component, nextContext);
        instance.props = contextType;
        getDerivedStateFromProps = workInProgress.pendingProps;
        oldState = instance.context;
        oldContext = Component.contextType;
        oldProps = emptyContextObject;
        "object" === typeof oldContext && null !== oldContext && (oldProps = readContext(oldContext));
        unresolvedOldProps = Component.getDerivedStateFromProps;
        (oldContext = "function" === typeof unresolvedOldProps || "function" === typeof instance.getSnapshotBeforeUpdate) || "function" !== typeof instance.UNSAFE_componentWillReceiveProps && "function" !== typeof instance.componentWillReceiveProps || (nextContext !== getDerivedStateFromProps || oldState !== oldProps) && callComponentWillReceiveProps(workInProgress, instance, nextProps, oldProps);
        hasForceUpdate = !1;
        oldState = workInProgress.memoizedState;
        instance.state = oldState;
        processUpdateQueue(workInProgress, nextProps, instance, renderLanes);
        suspendIfUpdateReadFromEntangledAsyncAction();
        var newState = workInProgress.memoizedState;
        nextContext !== getDerivedStateFromProps || oldState !== newState || hasForceUpdate || null !== current && null !== current.dependencies && checkIfContextChanged(current.dependencies) ? ("function" === typeof unresolvedOldProps && (applyDerivedStateFromProps(workInProgress, Component, unresolvedOldProps, nextProps), newState = workInProgress.memoizedState), (contextType = hasForceUpdate || checkShouldComponentUpdate(workInProgress, Component, contextType, nextProps, oldState, newState, oldProps) || null !== current && null !== current.dependencies && checkIfContextChanged(current.dependencies)) ? (oldContext || "function" !== typeof instance.UNSAFE_componentWillUpdate && "function" !== typeof instance.componentWillUpdate || ("function" === typeof instance.componentWillUpdate && instance.componentWillUpdate(nextProps, newState, oldProps), "function" === typeof instance.UNSAFE_componentWillUpdate && instance.UNSAFE_componentWillUpdate(nextProps, newState, oldProps)), "function" === typeof instance.componentDidUpdate && (workInProgress.flags |= 4), "function" === typeof instance.getSnapshotBeforeUpdate && (workInProgress.flags |= 1024)) : ("function" !== typeof instance.componentDidUpdate || nextContext === current.memoizedProps && oldState === current.memoizedState || (workInProgress.flags |= 4), "function" !== typeof instance.getSnapshotBeforeUpdate || nextContext === current.memoizedProps && oldState === current.memoizedState || (workInProgress.flags |= 1024), workInProgress.memoizedProps = nextProps, workInProgress.memoizedState = newState), instance.props = nextProps, instance.state = newState, instance.context = oldProps, nextProps = contextType) : ("function" !== typeof instance.componentDidUpdate || nextContext === current.memoizedProps && oldState === current.memoizedState || (workInProgress.flags |= 4), "function" !== typeof instance.getSnapshotBeforeUpdate || nextContext === current.memoizedProps && oldState === current.memoizedState || (workInProgress.flags |= 1024), nextProps = !1);
    }
    return finishClassComponent(current, workInProgress, Component, nextProps, !1, renderLanes);
}
function finishClassComponent(current, workInProgress, Component, shouldUpdate, hasContext, renderLanes) {
    markRef(current, workInProgress);
    hasContext = 0 !== (workInProgress.flags & 128);
    if (!shouldUpdate && !hasContext) return bailoutOnAlreadyFinishedWork(current, workInProgress, renderLanes);
    shouldUpdate = workInProgress.stateNode;
    Component = hasContext && "function" !== typeof Component.getDerivedStateFromError ? null : shouldUpdate.render();
    workInProgress.flags |= 1;
    null !== current && hasContext ? (workInProgress.child = reconcileChildFibers(workInProgress, current.child, null, renderLanes), workInProgress.child = reconcileChildFibers(workInProgress, null, Component, renderLanes)) : reconcileChildren(current, workInProgress, Component, renderLanes);
    workInProgress.memoizedState = shouldUpdate.state;
    return workInProgress.child;
}
var SUSPENDED_MARKER = {
    dehydrated: null,
    treeContext: null,
    retryLane: 0
};
function mountSuspenseOffscreenState(renderLanes) {
    return {
        baseLanes: renderLanes,
        cachePool: getSuspendedCache()
    };
}
function getRemainingWorkInPrimaryTree(current, primaryTreeDidDefer, renderLanes) {
    current = null !== current ? current.childLanes & ~renderLanes : 0;
    primaryTreeDidDefer && (current |= workInProgressDeferredLane);
    return current;
}
function updateSuspenseComponent(current, workInProgress, renderLanes) {
    var nextProps = workInProgress.pendingProps, showFallback = !1, didSuspend = 0 !== (workInProgress.flags & 128), JSCompiler_temp;
    (JSCompiler_temp = didSuspend) || (JSCompiler_temp = null !== current && null === current.memoizedState ? !1 : 0 !== (suspenseStackCursor.current & 2));
    JSCompiler_temp && (showFallback = !0, workInProgress.flags &= -129);
    JSCompiler_temp = 0 !== (workInProgress.flags & 32);
    workInProgress.flags &= -33;
    if (null === current) {
        var nextPrimaryChildren = nextProps.children;
        nextProps = nextProps.fallback;
        if (showFallback) return reuseSuspenseHandlerOnStack(workInProgress), showFallback = workInProgress.mode, didSuspend = workInProgress.child, nextPrimaryChildren = {
            mode: "hidden",
            children: nextPrimaryChildren
        }, 0 === (showFallback & 1) && null !== didSuspend ? (didSuspend.childLanes = 0, didSuspend.pendingProps = nextPrimaryChildren) : didSuspend = createFiberFromOffscreen(nextPrimaryChildren, showFallback, 0, null), nextProps = createFiberFromFragment(nextProps, showFallback, renderLanes, null), didSuspend.return = workInProgress, nextProps.return = workInProgress, didSuspend.sibling = nextProps, workInProgress.child = didSuspend, nextPrimaryChildren = workInProgress.child, nextPrimaryChildren.memoizedState = mountSuspenseOffscreenState(renderLanes), nextPrimaryChildren.childLanes = getRemainingWorkInPrimaryTree(current, JSCompiler_temp, renderLanes), workInProgress.memoizedState = SUSPENDED_MARKER, nextProps;
        pushPrimaryTreeSuspenseHandler(workInProgress);
        return mountSuspensePrimaryChildren(workInProgress, nextPrimaryChildren);
    }
    nextPrimaryChildren = current.memoizedState;
    if (null !== nextPrimaryChildren && null !== nextPrimaryChildren.dehydrated) {
        if (didSuspend) workInProgress.flags & 256 ? (pushPrimaryTreeSuspenseHandler(workInProgress), workInProgress.flags &= -257, workInProgress = retrySuspenseComponentWithoutHydrating(current, workInProgress, renderLanes)) : null !== workInProgress.memoizedState ? (reuseSuspenseHandlerOnStack(workInProgress), workInProgress.child = current.child, workInProgress.flags |= 128, workInProgress = null) : (reuseSuspenseHandlerOnStack(workInProgress), nextPrimaryChildren = nextProps.fallback, showFallback = workInProgress.mode, nextProps = createFiberFromOffscreen({
            mode: "visible",
            children: nextProps.children
        }, showFallback, 0, null), nextPrimaryChildren = createFiberFromFragment(nextPrimaryChildren, showFallback, renderLanes, null), nextPrimaryChildren.flags |= 2, nextProps.return = workInProgress, nextPrimaryChildren.return = workInProgress, nextProps.sibling = nextPrimaryChildren, workInProgress.child = nextProps, 0 !== (workInProgress.mode & 1) && reconcileChildFibers(workInProgress, current.child, null, renderLanes), nextProps = workInProgress.child, nextProps.memoizedState = mountSuspenseOffscreenState(renderLanes), nextProps.childLanes = getRemainingWorkInPrimaryTree(current, JSCompiler_temp, renderLanes), workInProgress.memoizedState = SUSPENDED_MARKER, workInProgress = nextPrimaryChildren);
        else if (pushPrimaryTreeSuspenseHandler(workInProgress), shim$1()) JSCompiler_temp = shim$1().digest, nextProps = Error("The server could not finish this Suspense boundary, likely due to an error during server rendering. Switched to client rendering."), nextProps.stack = "", nextProps.digest = JSCompiler_temp, JSCompiler_temp = {
            value: nextProps,
            source: null,
            stack: null
        }, null === hydrationErrors ? hydrationErrors = [
            JSCompiler_temp
        ] : hydrationErrors.push(JSCompiler_temp), workInProgress = retrySuspenseComponentWithoutHydrating(current, workInProgress, renderLanes);
        else if (didReceiveUpdate || propagateParentContextChanges(current, workInProgress, renderLanes, !1), JSCompiler_temp = 0 !== (renderLanes & current.childLanes), didReceiveUpdate || JSCompiler_temp) {
            JSCompiler_temp = workInProgressRoot;
            if (null !== JSCompiler_temp) {
                nextProps = renderLanes & -renderLanes;
                if (0 !== (nextProps & 42)) nextProps = 1;
                else switch(nextProps){
                    case 2:
                        nextProps = 1;
                        break;
                    case 8:
                        nextProps = 4;
                        break;
                    case 32:
                        nextProps = 16;
                        break;
                    case 128:
                    case 256:
                    case 512:
                    case 1024:
                    case 2048:
                    case 4096:
                    case 8192:
                    case 16384:
                    case 32768:
                    case 65536:
                    case 131072:
                    case 262144:
                    case 524288:
                    case 1048576:
                    case 2097152:
                    case 4194304:
                    case 8388608:
                    case 16777216:
                    case 33554432:
                        nextProps = 64;
                        break;
                    case 268435456:
                        nextProps = 134217728;
                        break;
                    default:
                        nextProps = 0;
                }
                nextProps = 0 !== (nextProps & (JSCompiler_temp.suspendedLanes | renderLanes)) ? 0 : nextProps;
                if (0 !== nextProps && nextProps !== nextPrimaryChildren.retryLane) throw nextPrimaryChildren.retryLane = nextProps, enqueueConcurrentRenderForLane(current, nextProps), scheduleUpdateOnFiber(JSCompiler_temp, current, nextProps), SelectiveHydrationException;
            }
            shim$1() || renderDidSuspendDelayIfPossible();
            workInProgress = retrySuspenseComponentWithoutHydrating(current, workInProgress, renderLanes);
        } else shim$1() ? (workInProgress.flags |= 128, workInProgress.child = current.child, retryDehydratedSuspenseBoundary.bind(null, current), shim$1(), workInProgress = null) : (workInProgress = mountSuspensePrimaryChildren(workInProgress, nextProps.children), workInProgress.flags |= 4096);
        return workInProgress;
    }
    if (showFallback) {
        reuseSuspenseHandlerOnStack(workInProgress);
        nextPrimaryChildren = nextProps.fallback;
        showFallback = workInProgress.mode;
        didSuspend = current.child;
        var currentFallbackChildFragment = didSuspend.sibling, primaryChildProps = {
            mode: "hidden",
            children: nextProps.children
        };
        0 === (showFallback & 1) && workInProgress.child !== didSuspend ? (nextProps = workInProgress.child, nextProps.childLanes = 0, nextProps.pendingProps = primaryChildProps, workInProgress.deletions = null) : (nextProps = createWorkInProgress(didSuspend, primaryChildProps), nextProps.subtreeFlags = didSuspend.subtreeFlags & 31457280);
        null !== currentFallbackChildFragment ? nextPrimaryChildren = createWorkInProgress(currentFallbackChildFragment, nextPrimaryChildren) : (nextPrimaryChildren = createFiberFromFragment(nextPrimaryChildren, showFallback, renderLanes, null), nextPrimaryChildren.flags |= 2);
        nextPrimaryChildren.return = workInProgress;
        nextProps.return = workInProgress;
        nextProps.sibling = nextPrimaryChildren;
        workInProgress.child = nextProps;
        nextProps = nextPrimaryChildren;
        nextPrimaryChildren = workInProgress.child;
        showFallback = current.child.memoizedState;
        null === showFallback ? showFallback = mountSuspenseOffscreenState(renderLanes) : (didSuspend = showFallback.cachePool, null !== didSuspend ? (currentFallbackChildFragment = CacheContext._currentValue, didSuspend = didSuspend.parent !== currentFallbackChildFragment ? {
            parent: currentFallbackChildFragment,
            pool: currentFallbackChildFragment
        } : didSuspend) : didSuspend = getSuspendedCache(), showFallback = {
            baseLanes: showFallback.baseLanes | renderLanes,
            cachePool: didSuspend
        });
        nextPrimaryChildren.memoizedState = showFallback;
        nextPrimaryChildren.childLanes = getRemainingWorkInPrimaryTree(current, JSCompiler_temp, renderLanes);
        workInProgress.memoizedState = SUSPENDED_MARKER;
        return nextProps;
    }
    pushPrimaryTreeSuspenseHandler(workInProgress);
    JSCompiler_temp = current.child;
    current = JSCompiler_temp.sibling;
    JSCompiler_temp = createWorkInProgress(JSCompiler_temp, {
        mode: "visible",
        children: nextProps.children
    });
    0 === (workInProgress.mode & 1) && (JSCompiler_temp.lanes = renderLanes);
    JSCompiler_temp.return = workInProgress;
    JSCompiler_temp.sibling = null;
    null !== current && (renderLanes = workInProgress.deletions, null === renderLanes ? (workInProgress.deletions = [
        current
    ], workInProgress.flags |= 16) : renderLanes.push(current));
    workInProgress.child = JSCompiler_temp;
    workInProgress.memoizedState = null;
    return JSCompiler_temp;
}
function mountSuspensePrimaryChildren(workInProgress, primaryChildren) {
    primaryChildren = createFiberFromOffscreen({
        mode: "visible",
        children: primaryChildren
    }, workInProgress.mode, 0, null);
    primaryChildren.return = workInProgress;
    return workInProgress.child = primaryChildren;
}
function retrySuspenseComponentWithoutHydrating(current, workInProgress, renderLanes) {
    reconcileChildFibers(workInProgress, current.child, null, renderLanes);
    current = mountSuspensePrimaryChildren(workInProgress, workInProgress.pendingProps.children);
    current.flags |= 2;
    workInProgress.memoizedState = null;
    return current;
}
function scheduleSuspenseWorkOnFiber(fiber, renderLanes, propagationRoot) {
    fiber.lanes |= renderLanes;
    var alternate = fiber.alternate;
    null !== alternate && (alternate.lanes |= renderLanes);
    scheduleContextWorkOnParentPath(fiber.return, renderLanes, propagationRoot);
}
function initSuspenseListRenderState(workInProgress, isBackwards, tail, lastContentRow, tailMode) {
    var renderState = workInProgress.memoizedState;
    null === renderState ? workInProgress.memoizedState = {
        isBackwards: isBackwards,
        rendering: null,
        renderingStartTime: 0,
        last: lastContentRow,
        tail: tail,
        tailMode: tailMode
    } : (renderState.isBackwards = isBackwards, renderState.rendering = null, renderState.renderingStartTime = 0, renderState.last = lastContentRow, renderState.tail = tail, renderState.tailMode = tailMode);
}
function updateSuspenseListComponent(current, workInProgress, renderLanes) {
    var nextProps = workInProgress.pendingProps, revealOrder = nextProps.revealOrder, tailMode = nextProps.tail;
    reconcileChildren(current, workInProgress, nextProps.children, renderLanes);
    nextProps = suspenseStackCursor.current;
    if (0 !== (nextProps & 2)) nextProps = nextProps & 1 | 2, workInProgress.flags |= 128;
    else {
        if (null !== current && 0 !== (current.flags & 128)) a: for(current = workInProgress.child; null !== current;){
            if (13 === current.tag) null !== current.memoizedState && scheduleSuspenseWorkOnFiber(current, renderLanes, workInProgress);
            else if (19 === current.tag) scheduleSuspenseWorkOnFiber(current, renderLanes, workInProgress);
            else if (null !== current.child) {
                current.child.return = current;
                current = current.child;
                continue;
            }
            if (current === workInProgress) break a;
            for(; null === current.sibling;){
                if (null === current.return || current.return === workInProgress) break a;
                current = current.return;
            }
            current.sibling.return = current.return;
            current = current.sibling;
        }
        nextProps &= 1;
    }
    push(suspenseStackCursor, nextProps);
    if (0 === (workInProgress.mode & 1)) workInProgress.memoizedState = null;
    else switch(revealOrder){
        case "forwards":
            renderLanes = workInProgress.child;
            for(revealOrder = null; null !== renderLanes;)current = renderLanes.alternate, null !== current && null === findFirstSuspended(current) && (revealOrder = renderLanes), renderLanes = renderLanes.sibling;
            renderLanes = revealOrder;
            null === renderLanes ? (revealOrder = workInProgress.child, workInProgress.child = null) : (revealOrder = renderLanes.sibling, renderLanes.sibling = null);
            initSuspenseListRenderState(workInProgress, !1, revealOrder, renderLanes, tailMode);
            break;
        case "backwards":
            renderLanes = null;
            revealOrder = workInProgress.child;
            for(workInProgress.child = null; null !== revealOrder;){
                current = revealOrder.alternate;
                if (null !== current && null === findFirstSuspended(current)) {
                    workInProgress.child = revealOrder;
                    break;
                }
                current = revealOrder.sibling;
                revealOrder.sibling = renderLanes;
                renderLanes = revealOrder;
                revealOrder = current;
            }
            initSuspenseListRenderState(workInProgress, !0, renderLanes, null, tailMode);
            break;
        case "together":
            initSuspenseListRenderState(workInProgress, !1, null, null, void 0);
            break;
        default:
            workInProgress.memoizedState = null;
    }
    return workInProgress.child;
}
function resetSuspendedCurrentOnMountInLegacyMode(current, workInProgress) {
    0 === (workInProgress.mode & 1) && null !== current && (current.alternate = null, workInProgress.alternate = null, workInProgress.flags |= 2);
}
function bailoutOnAlreadyFinishedWork(current, workInProgress, renderLanes) {
    null !== current && (workInProgress.dependencies = current.dependencies);
    workInProgressRootSkippedLanes |= workInProgress.lanes;
    if (0 === (renderLanes & workInProgress.childLanes)) if (null !== current) {
        if (propagateParentContextChanges(current, workInProgress, renderLanes, !1), 0 === (renderLanes & workInProgress.childLanes)) return null;
    } else return null;
    if (null !== current && workInProgress.child !== current.child) throw Error("Resuming work not yet implemented.");
    if (null !== workInProgress.child) {
        current = workInProgress.child;
        renderLanes = createWorkInProgress(current, current.pendingProps);
        workInProgress.child = renderLanes;
        for(renderLanes.return = workInProgress; null !== current.sibling;)current = current.sibling, renderLanes = renderLanes.sibling = createWorkInProgress(current, current.pendingProps), renderLanes.return = workInProgress;
        renderLanes.sibling = null;
    }
    return workInProgress.child;
}
function checkScheduledUpdateOrContext(current, renderLanes) {
    if (0 !== (current.lanes & renderLanes)) return !0;
    current = current.dependencies;
    return null !== current && checkIfContextChanged(current) ? !0 : !1;
}
function attemptEarlyBailoutIfNoScheduledUpdate(current, workInProgress, renderLanes) {
    switch(workInProgress.tag){
        case 3:
            pushHostContainer(workInProgress, workInProgress.stateNode.containerInfo);
            pushProvider(workInProgress, CacheContext, current.memoizedState.cache);
            break;
        case 27:
        case 5:
            pushHostContext(workInProgress);
            break;
        case 4:
            pushHostContainer(workInProgress, workInProgress.stateNode.containerInfo);
            break;
        case 10:
            pushProvider(workInProgress, workInProgress.type, workInProgress.memoizedProps.value);
            break;
        case 13:
            var state = workInProgress.memoizedState;
            if (null !== state) {
                if (null !== state.dehydrated) return pushPrimaryTreeSuspenseHandler(workInProgress), workInProgress.flags |= 128, null;
                if (0 !== (renderLanes & workInProgress.child.childLanes)) return updateSuspenseComponent(current, workInProgress, renderLanes);
                pushPrimaryTreeSuspenseHandler(workInProgress);
                current = bailoutOnAlreadyFinishedWork(current, workInProgress, renderLanes);
                return null !== current ? current.sibling : null;
            }
            pushPrimaryTreeSuspenseHandler(workInProgress);
            break;
        case 19:
            var didSuspendBefore = 0 !== (current.flags & 128);
            state = 0 !== (renderLanes & workInProgress.childLanes);
            state || (propagateParentContextChanges(current, workInProgress, renderLanes, !1), state = 0 !== (renderLanes & workInProgress.childLanes));
            if (didSuspendBefore) {
                if (state) return updateSuspenseListComponent(current, workInProgress, renderLanes);
                workInProgress.flags |= 128;
            }
            didSuspendBefore = workInProgress.memoizedState;
            null !== didSuspendBefore && (didSuspendBefore.rendering = null, didSuspendBefore.tail = null, didSuspendBefore.lastEffect = null);
            push(suspenseStackCursor, suspenseStackCursor.current);
            if (state) break;
            else return null;
        case 22:
        case 23:
            return workInProgress.lanes = 0, updateOffscreenComponent(current, workInProgress, renderLanes);
        case 24:
            pushProvider(workInProgress, CacheContext, current.memoizedState.cache);
    }
    return bailoutOnAlreadyFinishedWork(current, workInProgress, renderLanes);
}
function beginWork(current, workInProgress, renderLanes) {
    if (null !== current) if (current.memoizedProps !== workInProgress.pendingProps) didReceiveUpdate = !0;
    else {
        if (!checkScheduledUpdateOrContext(current, renderLanes) && 0 === (workInProgress.flags & 128)) return didReceiveUpdate = !1, attemptEarlyBailoutIfNoScheduledUpdate(current, workInProgress, renderLanes);
        didReceiveUpdate = 0 !== (current.flags & 131072) ? !0 : !1;
    }
    else didReceiveUpdate = !1;
    workInProgress.lanes = 0;
    switch(workInProgress.tag){
        case 16:
            var elementType = workInProgress.elementType;
            a: {
                resetSuspendedCurrentOnMountInLegacyMode(current, workInProgress);
                current = workInProgress.pendingProps;
                var init = elementType._init;
                elementType = init(elementType._payload);
                workInProgress.type = elementType;
                if ("function" === typeof elementType) shouldConstruct(elementType) ? (current = resolveClassComponentProps(elementType, current), workInProgress.tag = 1, workInProgress = updateClassComponent(null, workInProgress, elementType, current, renderLanes)) : (workInProgress.tag = 0, workInProgress = updateFunctionComponent(null, workInProgress, elementType, current, renderLanes));
                else {
                    if (void 0 !== elementType && null !== elementType) {
                        if (init = elementType.$$typeof, init === REACT_FORWARD_REF_TYPE) {
                            workInProgress.tag = 11;
                            workInProgress = updateForwardRef(null, workInProgress, elementType, current, renderLanes);
                            break a;
                        } else if (init === REACT_MEMO_TYPE) {
                            workInProgress.tag = 14;
                            workInProgress = updateMemoComponent(null, workInProgress, elementType, current, renderLanes);
                            break a;
                        }
                    }
                    workInProgress = getComponentNameFromType(elementType) || elementType;
                    throw Error("Element type is invalid. Received a promise that resolves to: " + workInProgress + ". Lazy element type must resolve to a class or function.");
                }
            }
            return workInProgress;
        case 0:
            return updateFunctionComponent(current, workInProgress, workInProgress.type, workInProgress.pendingProps, renderLanes);
        case 1:
            return elementType = workInProgress.type, init = resolveClassComponentProps(elementType, workInProgress.pendingProps), updateClassComponent(current, workInProgress, elementType, init, renderLanes);
        case 3:
            pushHostContainer(workInProgress, workInProgress.stateNode.containerInfo);
            if (null === current) throw Error("Should have a current fiber. This is a bug in React.");
            var nextProps = workInProgress.pendingProps;
            init = workInProgress.memoizedState;
            elementType = init.element;
            cloneUpdateQueue(current, workInProgress);
            processUpdateQueue(workInProgress, nextProps, null, renderLanes);
            nextProps = workInProgress.memoizedState;
            var nextCache = nextProps.cache;
            pushProvider(workInProgress, CacheContext, nextCache);
            nextCache !== init.cache && propagateContextChanges(workInProgress, [
                CacheContext
            ], renderLanes, !0);
            suspendIfUpdateReadFromEntangledAsyncAction();
            init = nextProps.element;
            init === elementType ? workInProgress = bailoutOnAlreadyFinishedWork(current, workInProgress, renderLanes) : (reconcileChildren(current, workInProgress, init, renderLanes), workInProgress = workInProgress.child);
            return workInProgress;
        case 26:
        case 27:
        case 5:
            return pushHostContext(workInProgress), elementType = workInProgress.pendingProps.children, null !== workInProgress.memoizedState && (init = renderWithHooks(current, workInProgress, TransitionAwareHostComponent, null, null, renderLanes), HostTransitionContext._currentValue = init), markRef(current, workInProgress), reconcileChildren(current, workInProgress, elementType, renderLanes), workInProgress.child;
        case 6:
            return null;
        case 13:
            return updateSuspenseComponent(current, workInProgress, renderLanes);
        case 4:
            return pushHostContainer(workInProgress, workInProgress.stateNode.containerInfo), elementType = workInProgress.pendingProps, null === current ? workInProgress.child = reconcileChildFibers(workInProgress, null, elementType, renderLanes) : reconcileChildren(current, workInProgress, elementType, renderLanes), workInProgress.child;
        case 11:
            return updateForwardRef(current, workInProgress, workInProgress.type, workInProgress.pendingProps, renderLanes);
        case 7:
            return reconcileChildren(current, workInProgress, workInProgress.pendingProps, renderLanes), workInProgress.child;
        case 8:
            return reconcileChildren(current, workInProgress, workInProgress.pendingProps.children, renderLanes), workInProgress.child;
        case 12:
            return reconcileChildren(current, workInProgress, workInProgress.pendingProps.children, renderLanes), workInProgress.child;
        case 10:
            return elementType = workInProgress.pendingProps, pushProvider(workInProgress, workInProgress.type, elementType.value), reconcileChildren(current, workInProgress, elementType.children, renderLanes), workInProgress.child;
        case 9:
            return init = workInProgress.type._context, elementType = workInProgress.pendingProps.children, prepareToReadContext(workInProgress), init = readContext(init), elementType = elementType(init), workInProgress.flags |= 1, reconcileChildren(current, workInProgress, elementType, renderLanes), workInProgress.child;
        case 14:
            return updateMemoComponent(current, workInProgress, workInProgress.type, workInProgress.pendingProps, renderLanes);
        case 15:
            return updateSimpleMemoComponent(current, workInProgress, workInProgress.type, workInProgress.pendingProps, renderLanes);
        case 17:
            return elementType = workInProgress.type, init = resolveClassComponentProps(elementType, workInProgress.pendingProps), resetSuspendedCurrentOnMountInLegacyMode(current, workInProgress), workInProgress.tag = 1, prepareToReadContext(workInProgress), constructClassInstance(workInProgress, elementType, init), mountClassInstance(workInProgress, elementType, init, renderLanes), finishClassComponent(null, workInProgress, elementType, !0, !1, renderLanes);
        case 28:
            return elementType = workInProgress.type, init = resolveClassComponentProps(elementType, workInProgress.pendingProps), resetSuspendedCurrentOnMountInLegacyMode(current, workInProgress), workInProgress.tag = 0, updateFunctionComponent(null, workInProgress, elementType, init, renderLanes);
        case 19:
            return updateSuspenseListComponent(current, workInProgress, renderLanes);
        case 22:
            return updateOffscreenComponent(current, workInProgress, renderLanes);
        case 24:
            return prepareToReadContext(workInProgress), elementType = readContext(CacheContext), null === current ? (init = peekCacheFromPool(), null === init && (init = workInProgressRoot, nextProps = createCache(), init.pooledCache = nextProps, nextProps.refCount++, null !== nextProps && (init.pooledCacheLanes |= renderLanes), init = nextProps), workInProgress.memoizedState = {
                parent: elementType,
                cache: init
            }, initializeUpdateQueue(workInProgress), pushProvider(workInProgress, CacheContext, init)) : (0 !== (current.lanes & renderLanes) && (cloneUpdateQueue(current, workInProgress), processUpdateQueue(workInProgress, null, null, renderLanes), suspendIfUpdateReadFromEntangledAsyncAction()), init = current.memoizedState, nextProps = workInProgress.memoizedState, init.parent !== elementType ? (init = {
                parent: elementType,
                cache: elementType
            }, workInProgress.memoizedState = init, 0 === workInProgress.lanes && (workInProgress.memoizedState = workInProgress.updateQueue.baseState = init), pushProvider(workInProgress, CacheContext, elementType)) : (elementType = nextProps.cache, pushProvider(workInProgress, CacheContext, elementType), elementType !== init.cache && propagateContextChanges(workInProgress, [
                CacheContext
            ], renderLanes, !0))), reconcileChildren(current, workInProgress, workInProgress.pendingProps.children, renderLanes), workInProgress.child;
        case 29:
            throw workInProgress.pendingProps;
    }
    throw Error("Unknown unit of work tag (" + workInProgress.tag + "). This error is likely caused by a bug in React. Please file an issue.");
}
var valueCursor = createCursor(null), currentlyRenderingFiber = null, lastContextDependency = null;
function pushProvider(providerFiber, context, nextValue) {
    push(valueCursor, context._currentValue);
    context._currentValue = nextValue;
}
function popProvider(context) {
    context._currentValue = valueCursor.current;
    pop(valueCursor);
}
function scheduleContextWorkOnParentPath(parent, renderLanes, propagationRoot) {
    for(; null !== parent;){
        var alternate = parent.alternate;
        (parent.childLanes & renderLanes) !== renderLanes ? (parent.childLanes |= renderLanes, null !== alternate && (alternate.childLanes |= renderLanes)) : null !== alternate && (alternate.childLanes & renderLanes) !== renderLanes && (alternate.childLanes |= renderLanes);
        if (parent === propagationRoot) break;
        parent = parent.return;
    }
}
function propagateContextChanges(workInProgress, contexts, renderLanes, forcePropagateEntireTree) {
    var fiber = workInProgress.child;
    null !== fiber && (fiber.return = workInProgress);
    for(; null !== fiber;){
        var list = fiber.dependencies;
        if (null !== list) {
            var nextFiber = fiber.child;
            list = list.firstContext;
            a: for(; null !== list;){
                var dependency = list;
                list = fiber;
                for(var i = 0; i < contexts.length; i++)if (dependency.context === contexts[i]) {
                    list.lanes |= renderLanes;
                    dependency = list.alternate;
                    null !== dependency && (dependency.lanes |= renderLanes);
                    scheduleContextWorkOnParentPath(list.return, renderLanes, workInProgress);
                    forcePropagateEntireTree || (nextFiber = null);
                    break a;
                }
                list = dependency.next;
            }
        } else if (18 === fiber.tag) {
            nextFiber = fiber.return;
            if (null === nextFiber) throw Error("We just came from a parent so we must have had a parent. This is a bug in React.");
            nextFiber.lanes |= renderLanes;
            list = nextFiber.alternate;
            null !== list && (list.lanes |= renderLanes);
            scheduleContextWorkOnParentPath(nextFiber, renderLanes, workInProgress);
            nextFiber = null;
        } else nextFiber = fiber.child;
        if (null !== nextFiber) nextFiber.return = fiber;
        else for(nextFiber = fiber; null !== nextFiber;){
            if (nextFiber === workInProgress) {
                nextFiber = null;
                break;
            }
            fiber = nextFiber.sibling;
            if (null !== fiber) {
                fiber.return = nextFiber.return;
                nextFiber = fiber;
                break;
            }
            nextFiber = nextFiber.return;
        }
        fiber = nextFiber;
    }
}
function propagateParentContextChanges(current, workInProgress, renderLanes, forcePropagateEntireTree) {
    current = null;
    for(var parent = workInProgress, isInsidePropagationBailout = !1; null !== parent;){
        if (!isInsidePropagationBailout) {
            if (0 !== (parent.flags & 524288)) isInsidePropagationBailout = !0;
            else if (0 !== (parent.flags & 262144)) break;
        }
        if (10 === parent.tag) {
            var currentParent = parent.alternate;
            if (null === currentParent) throw Error("Should have a current fiber. This is a bug in React.");
            currentParent = currentParent.memoizedProps;
            if (null !== currentParent) {
                var context = parent.type;
                objectIs(parent.pendingProps.value, currentParent.value) || (null !== current ? current.push(context) : current = [
                    context
                ]);
            }
        } else if (parent === hostTransitionProviderCursor.current) {
            currentParent = parent.alternate;
            if (null === currentParent) throw Error("Should have a current fiber. This is a bug in React.");
            currentParent.memoizedState.memoizedState !== parent.memoizedState.memoizedState && (null !== current ? current.push(HostTransitionContext) : current = [
                HostTransitionContext
            ]);
        }
        parent = parent.return;
    }
    null !== current && propagateContextChanges(workInProgress, current, renderLanes, forcePropagateEntireTree);
    workInProgress.flags |= 262144;
}
function checkIfContextChanged(currentDependencies) {
    for(currentDependencies = currentDependencies.firstContext; null !== currentDependencies;){
        if (!objectIs(currentDependencies.context._currentValue, currentDependencies.memoizedValue)) return !0;
        currentDependencies = currentDependencies.next;
    }
    return !1;
}
function prepareToReadContext(workInProgress) {
    currentlyRenderingFiber = workInProgress;
    lastContextDependency = null;
    workInProgress = workInProgress.dependencies;
    null !== workInProgress && (workInProgress.firstContext = null);
}
function readContext(context) {
    return readContextForConsumer(currentlyRenderingFiber, context);
}
function readContextDuringReconciliation(consumer, context) {
    null === currentlyRenderingFiber && prepareToReadContext(consumer);
    return readContextForConsumer(consumer, context);
}
function readContextForConsumer(consumer, context) {
    var value = context._currentValue;
    context = {
        context: context,
        memoizedValue: value,
        next: null
    };
    if (null === lastContextDependency) {
        if (null === consumer) throw Error("Context can only be read while React is rendering. In classes, you can read it in the render method or getDerivedStateFromProps. In function components, you can read it directly in the function body, but not inside Hooks like useReducer() or useMemo().");
        lastContextDependency = context;
        consumer.dependencies = {
            lanes: 0,
            firstContext: context
        };
        consumer.flags |= 524288;
    } else lastContextDependency = lastContextDependency.next = context;
    return value;
}
var AbortControllerLocal = "undefined" !== typeof AbortController ? AbortController : function() {
    var listeners = [], signal = this.signal = {
        aborted: !1,
        addEventListener: function(type, listener) {
            listeners.push(listener);
        }
    };
    this.abort = function() {
        signal.aborted = !0;
        listeners.forEach(function(listener) {
            return listener();
        });
    };
}, scheduleCallback$1 = Scheduler.unstable_scheduleCallback, NormalPriority = Scheduler.unstable_NormalPriority, CacheContext = {
    $$typeof: REACT_CONTEXT_TYPE,
    Consumer: null,
    Provider: null,
    _currentValue: null,
    _currentValue2: null,
    _threadCount: 0
};
function createCache() {
    return {
        controller: new AbortControllerLocal(),
        data: new Map(),
        refCount: 0
    };
}
function releaseCache(cache) {
    cache.refCount--;
    0 === cache.refCount && scheduleCallback$1(NormalPriority, function() {
        cache.controller.abort();
    });
}
var prevOnStartTransitionFinish = ReactSharedInternals.S;
ReactSharedInternals.S = function(transition, returnValue) {
    "object" === typeof returnValue && null !== returnValue && "function" === typeof returnValue.then && entangleAsyncAction(transition, returnValue);
    null !== prevOnStartTransitionFinish && prevOnStartTransitionFinish(transition, returnValue);
};
var resumedCache = createCursor(null);
function peekCacheFromPool() {
    var cacheResumedFromPreviousRender = resumedCache.current;
    return null !== cacheResumedFromPreviousRender ? cacheResumedFromPreviousRender : workInProgressRoot.pooledCache;
}
function pushTransition(offscreenWorkInProgress, prevCachePool) {
    null === prevCachePool ? push(resumedCache, resumedCache.current) : push(resumedCache, prevCachePool.pool);
}
function getSuspendedCache() {
    var cacheFromPool = peekCacheFromPool();
    return null === cacheFromPool ? null : {
        parent: CacheContext._currentValue,
        pool: cacheFromPool
    };
}
function scheduleRetryEffect(workInProgress, retryQueue) {
    null !== retryQueue && (workInProgress.flags |= 4);
    workInProgress.flags & 16384 && (retryQueue = 22 !== workInProgress.tag ? claimNextRetryLane() : 536870912, workInProgress.lanes |= retryQueue, workInProgressSuspendedRetryLanes |= retryQueue);
}
function cutOffTailIfNeeded(renderState, hasRenderedATailFallback) {
    switch(renderState.tailMode){
        case "hidden":
            hasRenderedATailFallback = renderState.tail;
            for(var lastTailNode = null; null !== hasRenderedATailFallback;)null !== hasRenderedATailFallback.alternate && (lastTailNode = hasRenderedATailFallback), hasRenderedATailFallback = hasRenderedATailFallback.sibling;
            null === lastTailNode ? renderState.tail = null : lastTailNode.sibling = null;
            break;
        case "collapsed":
            lastTailNode = renderState.tail;
            for(var lastTailNode$92 = null; null !== lastTailNode;)null !== lastTailNode.alternate && (lastTailNode$92 = lastTailNode), lastTailNode = lastTailNode.sibling;
            null === lastTailNode$92 ? hasRenderedATailFallback || null === renderState.tail ? renderState.tail = null : renderState.tail.sibling = null : lastTailNode$92.sibling = null;
    }
}
function bubbleProperties(completedWork) {
    var didBailout = null !== completedWork.alternate && completedWork.alternate.child === completedWork.child, newChildLanes = 0, subtreeFlags = 0;
    if (didBailout) for(var child$93 = completedWork.child; null !== child$93;)newChildLanes |= child$93.lanes | child$93.childLanes, subtreeFlags |= child$93.subtreeFlags & 31457280, subtreeFlags |= child$93.flags & 31457280, child$93.return = completedWork, child$93 = child$93.sibling;
    else for(child$93 = completedWork.child; null !== child$93;)newChildLanes |= child$93.lanes | child$93.childLanes, subtreeFlags |= child$93.subtreeFlags, subtreeFlags |= child$93.flags, child$93.return = completedWork, child$93 = child$93.sibling;
    completedWork.subtreeFlags |= subtreeFlags;
    completedWork.childLanes = newChildLanes;
    return didBailout;
}
function completeWork(current, workInProgress, renderLanes) {
    var newProps = workInProgress.pendingProps;
    switch(workInProgress.tag){
        case 28:
        case 16:
        case 15:
        case 0:
        case 11:
        case 7:
        case 8:
        case 12:
        case 9:
        case 14:
            return bubbleProperties(workInProgress), null;
        case 1:
            return bubbleProperties(workInProgress), null;
        case 3:
            return renderLanes = workInProgress.stateNode, newProps = null, null !== current && (newProps = current.memoizedState.cache), workInProgress.memoizedState.cache !== newProps && (workInProgress.flags |= 2048), popProvider(CacheContext), popHostContainer(), renderLanes.pendingContext && (renderLanes.context = renderLanes.pendingContext, renderLanes.pendingContext = null), null !== current && null !== current.child || null === current || current.memoizedState.isDehydrated && 0 === (workInProgress.flags & 256) || (workInProgress.flags |= 1024, null !== hydrationErrors && (queueRecoverableErrors(hydrationErrors), hydrationErrors = null)), bubbleProperties(workInProgress), null;
        case 26:
        case 27:
        case 5:
            popHostContext(workInProgress);
            var type = workInProgress.type;
            if (null !== current && null != workInProgress.stateNode) current.memoizedProps !== newProps && (workInProgress.flags |= 4);
            else {
                if (!newProps) {
                    if (null === workInProgress.stateNode) throw Error("We must have new props for new mounts. This error is likely caused by a bug in React. Please file an issue.");
                    bubbleProperties(workInProgress);
                    return null;
                }
                renderLanes = rootInstanceStackCursor.current;
                current = allocateTag();
                type = getViewConfigForType(type);
                var updatePayload = diffProperties(null, emptyObject, newProps, type.validAttributes);
                ReactNativePrivateInterface.UIManager.createView(current, type.uiViewClassName, renderLanes, updatePayload);
                renderLanes = new ReactNativeFiberHostComponent(current, type, workInProgress);
                instanceCache.set(current, workInProgress);
                instanceProps.set(current, newProps);
                a: for(current = workInProgress.child; null !== current;){
                    if (5 === current.tag || 6 === current.tag) renderLanes._children.push(current.stateNode);
                    else if (4 !== current.tag && null !== current.child) {
                        current.child.return = current;
                        current = current.child;
                        continue;
                    }
                    if (current === workInProgress) break a;
                    for(; null === current.sibling;){
                        if (null === current.return || current.return === workInProgress) break a;
                        current = current.return;
                    }
                    current.sibling.return = current.return;
                    current = current.sibling;
                }
                workInProgress.stateNode = renderLanes;
                finalizeInitialChildren(renderLanes) && (workInProgress.flags |= 4);
            }
            bubbleProperties(workInProgress);
            workInProgress.flags &= -16777217;
            return null;
        case 6:
            if (current && null != workInProgress.stateNode) current.memoizedProps !== newProps && (workInProgress.flags |= 4);
            else {
                if ("string" !== typeof newProps && null === workInProgress.stateNode) throw Error("We must have new props for new mounts. This error is likely caused by a bug in React. Please file an issue.");
                current = rootInstanceStackCursor.current;
                if (!contextStackCursor.current.isInAParentText) throw Error("Text strings must be rendered within a <Text> component.");
                renderLanes = allocateTag();
                ReactNativePrivateInterface.UIManager.createView(renderLanes, "RCTRawText", current, {
                    text: newProps
                });
                instanceCache.set(renderLanes, workInProgress);
                workInProgress.stateNode = renderLanes;
            }
            bubbleProperties(workInProgress);
            return null;
        case 13:
            newProps = workInProgress.memoizedState;
            if (null === current || null !== current.memoizedState && null !== current.memoizedState.dehydrated) {
                if (null !== newProps && null !== newProps.dehydrated) {
                    if (null === current) {
                        throw Error("A dehydrated suspense component was completed without a hydrated node. This is probably a bug in React.");
                        throw Error("Expected prepareToHydrateHostSuspenseInstance() to never be called. This error is likely caused by a bug in React. Please file an issue.");
                    }
                    0 === (workInProgress.flags & 128) && (workInProgress.memoizedState = null);
                    workInProgress.flags |= 4;
                    bubbleProperties(workInProgress);
                    type = !1;
                } else null !== hydrationErrors && (queueRecoverableErrors(hydrationErrors), hydrationErrors = null), type = !0;
                if (!type) {
                    if (workInProgress.flags & 256) return popSuspenseHandler(workInProgress), workInProgress;
                    popSuspenseHandler(workInProgress);
                    return null;
                }
            }
            popSuspenseHandler(workInProgress);
            if (0 !== (workInProgress.flags & 128)) return workInProgress.lanes = renderLanes, workInProgress;
            renderLanes = null !== newProps;
            current = null !== current && null !== current.memoizedState;
            renderLanes && (newProps = workInProgress.child, type = null, null !== newProps.alternate && null !== newProps.alternate.memoizedState && null !== newProps.alternate.memoizedState.cachePool && (type = newProps.alternate.memoizedState.cachePool.pool), updatePayload = null, null !== newProps.memoizedState && null !== newProps.memoizedState.cachePool && (updatePayload = newProps.memoizedState.cachePool.pool), updatePayload !== type && (newProps.flags |= 2048));
            renderLanes !== current && renderLanes && (workInProgress.child.flags |= 8192);
            scheduleRetryEffect(workInProgress, workInProgress.updateQueue);
            bubbleProperties(workInProgress);
            return null;
        case 4:
            return popHostContainer(), bubbleProperties(workInProgress), null;
        case 10:
            return popProvider(workInProgress.type), bubbleProperties(workInProgress), null;
        case 17:
            return bubbleProperties(workInProgress), null;
        case 19:
            pop(suspenseStackCursor);
            type = workInProgress.memoizedState;
            if (null === type) return bubbleProperties(workInProgress), null;
            newProps = 0 !== (workInProgress.flags & 128);
            updatePayload = type.rendering;
            if (null === updatePayload) if (newProps) cutOffTailIfNeeded(type, !1);
            else {
                if (0 !== workInProgressRootExitStatus || null !== current && 0 !== (current.flags & 128)) for(current = workInProgress.child; null !== current;){
                    updatePayload = findFirstSuspended(current);
                    if (null !== updatePayload) {
                        workInProgress.flags |= 128;
                        cutOffTailIfNeeded(type, !1);
                        current = updatePayload.updateQueue;
                        workInProgress.updateQueue = current;
                        scheduleRetryEffect(workInProgress, current);
                        workInProgress.subtreeFlags = 0;
                        current = renderLanes;
                        for(renderLanes = workInProgress.child; null !== renderLanes;)resetWorkInProgress(renderLanes, current), renderLanes = renderLanes.sibling;
                        push(suspenseStackCursor, suspenseStackCursor.current & 1 | 2);
                        return workInProgress.child;
                    }
                    current = current.sibling;
                }
                null !== type.tail && now() > workInProgressRootRenderTargetTime && (workInProgress.flags |= 128, newProps = !0, cutOffTailIfNeeded(type, !1), workInProgress.lanes = 4194304);
            }
            else {
                if (!newProps) if (current = findFirstSuspended(updatePayload), null !== current) {
                    if (workInProgress.flags |= 128, newProps = !0, current = current.updateQueue, workInProgress.updateQueue = current, scheduleRetryEffect(workInProgress, current), cutOffTailIfNeeded(type, !0), null === type.tail && "hidden" === type.tailMode && !updatePayload.alternate) return bubbleProperties(workInProgress), null;
                } else 2 * now() - type.renderingStartTime > workInProgressRootRenderTargetTime && 536870912 !== renderLanes && (workInProgress.flags |= 128, newProps = !0, cutOffTailIfNeeded(type, !1), workInProgress.lanes = 4194304);
                type.isBackwards ? (updatePayload.sibling = workInProgress.child, workInProgress.child = updatePayload) : (current = type.last, null !== current ? current.sibling = updatePayload : workInProgress.child = updatePayload, type.last = updatePayload);
            }
            if (null !== type.tail) return workInProgress = type.tail, type.rendering = workInProgress, type.tail = workInProgress.sibling, type.renderingStartTime = now(), workInProgress.sibling = null, current = suspenseStackCursor.current, push(suspenseStackCursor, newProps ? current & 1 | 2 : current & 1), workInProgress;
            bubbleProperties(workInProgress);
            return null;
        case 22:
        case 23:
            return popSuspenseHandler(workInProgress), popHiddenContext(), newProps = null !== workInProgress.memoizedState, null !== current ? null !== current.memoizedState !== newProps && (workInProgress.flags |= 8192) : newProps && (workInProgress.flags |= 8192), newProps && 0 !== (workInProgress.mode & 1) ? 0 !== (renderLanes & 536870912) && 0 === (workInProgress.flags & 128) && (bubbleProperties(workInProgress), workInProgress.subtreeFlags & 6 && (workInProgress.flags |= 8192)) : bubbleProperties(workInProgress), renderLanes = workInProgress.updateQueue, null !== renderLanes && scheduleRetryEffect(workInProgress, renderLanes.retryQueue), renderLanes = null, null !== current && null !== current.memoizedState && null !== current.memoizedState.cachePool && (renderLanes = current.memoizedState.cachePool.pool), newProps = null, null !== workInProgress.memoizedState && null !== workInProgress.memoizedState.cachePool && (newProps = workInProgress.memoizedState.cachePool.pool), newProps !== renderLanes && (workInProgress.flags |= 2048), null !== current && pop(resumedCache), null;
        case 24:
            return renderLanes = null, null !== current && (renderLanes = current.memoizedState.cache), workInProgress.memoizedState.cache !== renderLanes && (workInProgress.flags |= 2048), popProvider(CacheContext), bubbleProperties(workInProgress), null;
        case 25:
            return null;
        case 29:
            return null;
    }
    throw Error("Unknown unit of work tag (" + workInProgress.tag + "). This error is likely caused by a bug in React. Please file an issue.");
}
function unwindWork(current, workInProgress) {
    switch(workInProgress.tag){
        case 1:
            return current = workInProgress.flags, current & 65536 ? (workInProgress.flags = current & -65537 | 128, workInProgress) : null;
        case 3:
            return popProvider(CacheContext), popHostContainer(), current = workInProgress.flags, 0 !== (current & 65536) && 0 === (current & 128) ? (workInProgress.flags = current & -65537 | 128, workInProgress) : null;
        case 26:
        case 27:
        case 5:
            return popHostContext(workInProgress), null;
        case 13:
            popSuspenseHandler(workInProgress);
            current = workInProgress.memoizedState;
            if (null !== current && null !== current.dehydrated && null === workInProgress.alternate) throw Error("Threw in newly mounted dehydrated component. This is likely a bug in React. Please file an issue.");
            current = workInProgress.flags;
            return current & 65536 ? (workInProgress.flags = current & -65537 | 128, workInProgress) : null;
        case 19:
            return pop(suspenseStackCursor), null;
        case 4:
            return popHostContainer(), null;
        case 10:
            return popProvider(workInProgress.type), null;
        case 22:
        case 23:
            return popSuspenseHandler(workInProgress), popHiddenContext(), null !== current && pop(resumedCache), current = workInProgress.flags, current & 65536 ? (workInProgress.flags = current & -65537 | 128, workInProgress) : null;
        case 24:
            return popProvider(CacheContext), null;
        case 25:
            return null;
        default:
            return null;
    }
}
function unwindInterruptedWork(current, interruptedWork) {
    switch(interruptedWork.tag){
        case 3:
            popProvider(CacheContext);
            popHostContainer();
            break;
        case 26:
        case 27:
        case 5:
            popHostContext(interruptedWork);
            break;
        case 4:
            popHostContainer();
            break;
        case 13:
            popSuspenseHandler(interruptedWork);
            break;
        case 19:
            pop(suspenseStackCursor);
            break;
        case 10:
            popProvider(interruptedWork.type);
            break;
        case 22:
        case 23:
            popSuspenseHandler(interruptedWork);
            popHiddenContext();
            null !== current && pop(resumedCache);
            break;
        case 24:
            popProvider(CacheContext);
    }
}
function commitHookEffectListMount(flags, finishedWork) {
    try {
        var updateQueue = finishedWork.updateQueue, lastEffect = null !== updateQueue ? updateQueue.lastEffect : null;
        if (null !== lastEffect) {
            var firstEffect = lastEffect.next;
            updateQueue = firstEffect;
            do {
                if ((updateQueue.tag & flags) === flags) {
                    lastEffect = void 0;
                    var create$114 = updateQueue.create, inst = updateQueue.inst;
                    lastEffect = create$114();
                    inst.destroy = lastEffect;
                }
                updateQueue = updateQueue.next;
            }while (updateQueue !== firstEffect);
        }
    } catch (error) {
        captureCommitPhaseError(finishedWork, finishedWork.return, error);
    }
}
function commitHookEffectListUnmount(flags, finishedWork, nearestMountedAncestor$jscomp$0) {
    try {
        var updateQueue = finishedWork.updateQueue, lastEffect = null !== updateQueue ? updateQueue.lastEffect : null;
        if (null !== lastEffect) {
            var firstEffect = lastEffect.next;
            updateQueue = firstEffect;
            do {
                if ((updateQueue.tag & flags) === flags) {
                    var inst = updateQueue.inst, destroy = inst.destroy;
                    if (void 0 !== destroy) {
                        inst.destroy = void 0;
                        lastEffect = finishedWork;
                        var nearestMountedAncestor = nearestMountedAncestor$jscomp$0;
                        try {
                            destroy();
                        } catch (error) {
                            captureCommitPhaseError(lastEffect, nearestMountedAncestor, error);
                        }
                    }
                }
                updateQueue = updateQueue.next;
            }while (updateQueue !== firstEffect);
        }
    } catch (error) {
        captureCommitPhaseError(finishedWork, finishedWork.return, error);
    }
}
function commitClassCallbacks(finishedWork) {
    var updateQueue = finishedWork.updateQueue;
    if (null !== updateQueue) {
        var instance = finishedWork.stateNode;
        try {
            commitCallbacks(updateQueue, instance);
        } catch (error) {
            captureCommitPhaseError(finishedWork, finishedWork.return, error);
        }
    }
}
function safelyCallComponentWillUnmount(current, nearestMountedAncestor, instance) {
    instance.props = resolveClassComponentProps(current.type, current.memoizedProps);
    instance.state = current.memoizedState;
    try {
        instance.componentWillUnmount();
    } catch (error) {
        captureCommitPhaseError(current, nearestMountedAncestor, error);
    }
}
function safelyAttachRef(current, nearestMountedAncestor) {
    try {
        var ref = current.ref;
        if (null !== ref) {
            var instance = current.stateNode;
            switch(current.tag){
                case 26:
                case 27:
                case 5:
                    var instanceToUse = getPublicInstance(instance);
                    break;
                default:
                    instanceToUse = instance;
            }
            "function" === typeof ref ? current.refCleanup = ref(instanceToUse) : ref.current = instanceToUse;
        }
    } catch (error) {
        captureCommitPhaseError(current, nearestMountedAncestor, error);
    }
}
function safelyDetachRef(current, nearestMountedAncestor) {
    var ref = current.ref, refCleanup = current.refCleanup;
    if (null !== ref) if ("function" === typeof refCleanup) try {
        refCleanup();
    } catch (error) {
        captureCommitPhaseError(current, nearestMountedAncestor, error);
    } finally{
        current.refCleanup = null, current = current.alternate, null != current && (current.refCleanup = null);
    }
    else if ("function" === typeof ref) try {
        ref(null);
    } catch (error$116) {
        captureCommitPhaseError(current, nearestMountedAncestor, error$116);
    }
    else ref.current = null;
}
function isHostParent(fiber) {
    return 5 === fiber.tag || 3 === fiber.tag || 4 === fiber.tag;
}
function getHostSibling(fiber) {
    a: for(;;){
        for(; null === fiber.sibling;){
            if (null === fiber.return || isHostParent(fiber.return)) return null;
            fiber = fiber.return;
        }
        fiber.sibling.return = fiber.return;
        for(fiber = fiber.sibling; 5 !== fiber.tag && 6 !== fiber.tag && 18 !== fiber.tag;){
            if (fiber.flags & 2) continue a;
            if (null === fiber.child || 4 === fiber.tag) continue a;
            else fiber.child.return = fiber, fiber = fiber.child;
        }
        if (!(fiber.flags & 2)) return fiber.stateNode;
    }
}
function insertOrAppendPlacementNodeIntoContainer(node, before, parent) {
    var tag = node.tag;
    if (5 === tag || 6 === tag) if (node = node.stateNode, before) {
        if ("number" === typeof parent) throw Error("Container does not support insertBefore operation");
    } else ReactNativePrivateInterface.UIManager.setChildren(parent, [
        "number" === typeof node ? node : node._nativeTag
    ]);
    else if (4 !== tag && (node = node.child, null !== node)) for(insertOrAppendPlacementNodeIntoContainer(node, before, parent), node = node.sibling; null !== node;)insertOrAppendPlacementNodeIntoContainer(node, before, parent), node = node.sibling;
}
function insertOrAppendPlacementNode(node, before, parent) {
    var tag = node.tag;
    if (5 === tag || 6 === tag) if (node = node.stateNode, before) {
        tag = parent._children;
        var index = tag.indexOf(node);
        0 <= index ? (tag.splice(index, 1), before = tag.indexOf(before), tag.splice(before, 0, node), ReactNativePrivateInterface.UIManager.manageChildren(parent._nativeTag, [
            index
        ], [
            before
        ], [], [], [])) : (before = tag.indexOf(before), tag.splice(before, 0, node), ReactNativePrivateInterface.UIManager.manageChildren(parent._nativeTag, [], [], [
            "number" === typeof node ? node : node._nativeTag
        ], [
            before
        ], []));
    } else before = "number" === typeof node ? node : node._nativeTag, tag = parent._children, index = tag.indexOf(node), 0 <= index ? (tag.splice(index, 1), tag.push(node), ReactNativePrivateInterface.UIManager.manageChildren(parent._nativeTag, [
        index
    ], [
        tag.length - 1
    ], [], [], [])) : (tag.push(node), ReactNativePrivateInterface.UIManager.manageChildren(parent._nativeTag, [], [], [
        before
    ], [
        tag.length - 1
    ], []));
    else if (4 !== tag && (node = node.child, null !== node)) for(insertOrAppendPlacementNode(node, before, parent), node = node.sibling; null !== node;)insertOrAppendPlacementNode(node, before, parent), node = node.sibling;
}
var offscreenSubtreeIsHidden = !1, offscreenSubtreeWasHidden = !1, PossiblyWeakSet = "function" === typeof WeakSet ? WeakSet : Set, nextEffect = null, shouldFireAfterActiveInstanceBlur = !1;
function commitBeforeMutationEffects(root, firstChild) {
    for(nextEffect = firstChild; null !== nextEffect;)if (root = nextEffect, firstChild = root.child, 0 !== (root.subtreeFlags & 1028) && null !== firstChild) firstChild.return = root, nextEffect = firstChild;
    else for(; null !== nextEffect;){
        root = nextEffect;
        var current = root.alternate;
        firstChild = root.flags;
        switch(root.tag){
            case 0:
                break;
            case 11:
            case 15:
                break;
            case 1:
                if (0 !== (firstChild & 1024) && null !== current) {
                    firstChild = void 0;
                    var finishedWork = root, prevProps = current.memoizedProps;
                    current = current.memoizedState;
                    var instance = finishedWork.stateNode;
                    try {
                        var resolvedPrevProps = resolveClassComponentProps(finishedWork.type, prevProps, finishedWork.elementType === finishedWork.type);
                        firstChild = instance.getSnapshotBeforeUpdate(resolvedPrevProps, current);
                        instance.__reactInternalSnapshotBeforeUpdate = firstChild;
                    } catch (error) {
                        captureCommitPhaseError(finishedWork, finishedWork.return, error);
                    }
                }
                break;
            case 3:
                break;
            case 5:
            case 26:
            case 27:
            case 6:
            case 4:
            case 17:
                break;
            default:
                if (0 !== (firstChild & 1024)) throw Error("This unit of work tag should not have side-effects. This error is likely caused by a bug in React. Please file an issue.");
        }
        firstChild = root.sibling;
        if (null !== firstChild) {
            firstChild.return = root.return;
            nextEffect = firstChild;
            break;
        }
        nextEffect = root.return;
    }
    resolvedPrevProps = shouldFireAfterActiveInstanceBlur;
    shouldFireAfterActiveInstanceBlur = !1;
    return resolvedPrevProps;
}
function commitLayoutEffectOnFiber(finishedRoot, current, finishedWork) {
    var flags = finishedWork.flags;
    switch(finishedWork.tag){
        case 0:
        case 11:
        case 15:
            recursivelyTraverseLayoutEffects(finishedRoot, finishedWork);
            flags & 4 && commitHookEffectListMount(5, finishedWork);
            break;
        case 1:
            recursivelyTraverseLayoutEffects(finishedRoot, finishedWork);
            if (flags & 4) if (finishedRoot = finishedWork.stateNode, null === current) try {
                finishedRoot.componentDidMount();
            } catch (error) {
                captureCommitPhaseError(finishedWork, finishedWork.return, error);
            }
            else {
                var prevProps = resolveClassComponentProps(finishedWork.type, current.memoizedProps);
                current = current.memoizedState;
                try {
                    finishedRoot.componentDidUpdate(prevProps, current, finishedRoot.__reactInternalSnapshotBeforeUpdate);
                } catch (error$115) {
                    captureCommitPhaseError(finishedWork, finishedWork.return, error$115);
                }
            }
            flags & 64 && commitClassCallbacks(finishedWork);
            flags & 512 && safelyAttachRef(finishedWork, finishedWork.return);
            break;
        case 3:
            recursivelyTraverseLayoutEffects(finishedRoot, finishedWork);
            if (flags & 64 && (flags = finishedWork.updateQueue, null !== flags)) {
                finishedRoot = null;
                if (null !== finishedWork.child) switch(finishedWork.child.tag){
                    case 27:
                    case 5:
                        finishedRoot = getPublicInstance(finishedWork.child.stateNode);
                        break;
                    case 1:
                        finishedRoot = finishedWork.child.stateNode;
                }
                try {
                    commitCallbacks(flags, finishedRoot);
                } catch (error) {
                    captureCommitPhaseError(finishedWork, finishedWork.return, error);
                }
            }
            break;
        case 26:
        case 27:
        case 5:
            recursivelyTraverseLayoutEffects(finishedRoot, finishedWork);
            flags & 512 && safelyAttachRef(finishedWork, finishedWork.return);
            break;
        case 12:
            recursivelyTraverseLayoutEffects(finishedRoot, finishedWork);
            break;
        case 13:
            recursivelyTraverseLayoutEffects(finishedRoot, finishedWork);
            break;
        case 22:
            if (0 !== (finishedWork.mode & 1)) {
                if (prevProps = null !== finishedWork.memoizedState || offscreenSubtreeIsHidden, !prevProps) {
                    current = null !== current && null !== current.memoizedState || offscreenSubtreeWasHidden;
                    var prevOffscreenSubtreeIsHidden = offscreenSubtreeIsHidden, prevOffscreenSubtreeWasHidden = offscreenSubtreeWasHidden;
                    offscreenSubtreeIsHidden = prevProps;
                    (offscreenSubtreeWasHidden = current) && !prevOffscreenSubtreeWasHidden ? recursivelyTraverseReappearLayoutEffects(finishedRoot, finishedWork, 0 !== (finishedWork.subtreeFlags & 8772)) : recursivelyTraverseLayoutEffects(finishedRoot, finishedWork);
                    offscreenSubtreeIsHidden = prevOffscreenSubtreeIsHidden;
                    offscreenSubtreeWasHidden = prevOffscreenSubtreeWasHidden;
                }
            } else recursivelyTraverseLayoutEffects(finishedRoot, finishedWork);
            flags & 512 && ("manual" === finishedWork.memoizedProps.mode ? safelyAttachRef(finishedWork, finishedWork.return) : safelyDetachRef(finishedWork, finishedWork.return));
            break;
        default:
            recursivelyTraverseLayoutEffects(finishedRoot, finishedWork);
    }
}
function detachFiberAfterEffects(fiber) {
    var alternate = fiber.alternate;
    null !== alternate && (fiber.alternate = null, detachFiberAfterEffects(alternate));
    fiber.child = null;
    fiber.deletions = null;
    fiber.sibling = null;
    fiber.stateNode = null;
    fiber.return = null;
    fiber.dependencies = null;
    fiber.memoizedProps = null;
    fiber.memoizedState = null;
    fiber.pendingProps = null;
    fiber.stateNode = null;
    fiber.updateQueue = null;
}
var hostParent = null, hostParentIsContainer = !1;
function recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, parent) {
    for(parent = parent.child; null !== parent;)commitDeletionEffectsOnFiber(finishedRoot, nearestMountedAncestor, parent), parent = parent.sibling;
}
function commitDeletionEffectsOnFiber(finishedRoot, nearestMountedAncestor, deletedFiber) {
    if (injectedHook && "function" === typeof injectedHook.onCommitFiberUnmount) try {
        injectedHook.onCommitFiberUnmount(rendererID, deletedFiber);
    } catch (err) {}
    switch(deletedFiber.tag){
        case 26:
        case 27:
        case 5:
            offscreenSubtreeWasHidden || safelyDetachRef(deletedFiber, nearestMountedAncestor);
        case 6:
            var prevHostParent = hostParent, prevHostParentIsContainer = hostParentIsContainer;
            hostParent = null;
            recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);
            hostParent = prevHostParent;
            hostParentIsContainer = prevHostParentIsContainer;
            if (null !== hostParent) if (hostParentIsContainer) try {
                finishedRoot = hostParent, recursivelyUncacheFiberNode(deletedFiber.stateNode), ReactNativePrivateInterface.UIManager.manageChildren(finishedRoot, [], [], [], [], [
                    0
                ]);
            } catch (error) {
                captureCommitPhaseError(deletedFiber, nearestMountedAncestor, error);
            }
            else try {
                finishedRoot = hostParent;
                var child = deletedFiber.stateNode;
                recursivelyUncacheFiberNode(child);
                var children = finishedRoot._children, index = children.indexOf(child);
                children.splice(index, 1);
                ReactNativePrivateInterface.UIManager.manageChildren(finishedRoot._nativeTag, [], [], [], [], [
                    index
                ]);
            } catch (error) {
                captureCommitPhaseError(deletedFiber, nearestMountedAncestor, error);
            }
            break;
        case 18:
            null !== hostParent && shim$1();
            break;
        case 4:
            child = hostParent;
            children = hostParentIsContainer;
            hostParent = deletedFiber.stateNode.containerInfo;
            hostParentIsContainer = !0;
            recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);
            hostParent = child;
            hostParentIsContainer = children;
            break;
        case 0:
        case 11:
        case 14:
        case 15:
            offscreenSubtreeWasHidden || commitHookEffectListUnmount(2, deletedFiber, nearestMountedAncestor);
            offscreenSubtreeWasHidden || commitHookEffectListUnmount(4, deletedFiber, nearestMountedAncestor);
            recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);
            break;
        case 1:
            offscreenSubtreeWasHidden || (safelyDetachRef(deletedFiber, nearestMountedAncestor), child = deletedFiber.stateNode, "function" === typeof child.componentWillUnmount && safelyCallComponentWillUnmount(deletedFiber, nearestMountedAncestor, child));
            recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);
            break;
        case 21:
            recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);
            break;
        case 22:
            offscreenSubtreeWasHidden || safelyDetachRef(deletedFiber, nearestMountedAncestor);
            deletedFiber.mode & 1 ? (offscreenSubtreeWasHidden = (child = offscreenSubtreeWasHidden) || null !== deletedFiber.memoizedState, recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber), offscreenSubtreeWasHidden = child) : recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);
            break;
        default:
            recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);
    }
}
function getRetryCache(finishedWork) {
    switch(finishedWork.tag){
        case 13:
        case 19:
            var retryCache = finishedWork.stateNode;
            null === retryCache && (retryCache = finishedWork.stateNode = new PossiblyWeakSet());
            return retryCache;
        case 22:
            return finishedWork = finishedWork.stateNode, retryCache = finishedWork._retryCache, null === retryCache && (retryCache = finishedWork._retryCache = new PossiblyWeakSet()), retryCache;
        default:
            throw Error("Unexpected Suspense handler tag (" + finishedWork.tag + "). This is a bug in React.");
    }
}
function attachSuspenseRetryListeners(finishedWork, wakeables) {
    var retryCache = getRetryCache(finishedWork);
    wakeables.forEach(function(wakeable) {
        var retry = resolveRetryWakeable.bind(null, finishedWork, wakeable);
        retryCache.has(wakeable) || (retryCache.add(wakeable), wakeable.then(retry, retry));
    });
}
function recursivelyTraverseMutationEffects(root$jscomp$0, parentFiber) {
    var deletions = parentFiber.deletions;
    if (null !== deletions) for(var i = 0; i < deletions.length; i++){
        var childToDelete = deletions[i], root = root$jscomp$0, returnFiber = parentFiber, parent = returnFiber;
        a: for(; null !== parent;){
            switch(parent.tag){
                case 27:
                case 5:
                    hostParent = parent.stateNode;
                    hostParentIsContainer = !1;
                    break a;
                case 3:
                    hostParent = parent.stateNode.containerInfo;
                    hostParentIsContainer = !0;
                    break a;
                case 4:
                    hostParent = parent.stateNode.containerInfo;
                    hostParentIsContainer = !0;
                    break a;
            }
            parent = parent.return;
        }
        if (null === hostParent) throw Error("Expected to find a host parent. This error is likely caused by a bug in React. Please file an issue.");
        commitDeletionEffectsOnFiber(root, returnFiber, childToDelete);
        hostParent = null;
        hostParentIsContainer = !1;
        root = childToDelete.alternate;
        null !== root && (root.return = null);
        childToDelete.return = null;
    }
    if (parentFiber.subtreeFlags & 13878) for(parentFiber = parentFiber.child; null !== parentFiber;)commitMutationEffectsOnFiber(parentFiber, root$jscomp$0), parentFiber = parentFiber.sibling;
}
function commitMutationEffectsOnFiber(finishedWork, root) {
    var current = finishedWork.alternate, flags = finishedWork.flags;
    switch(finishedWork.tag){
        case 0:
        case 11:
        case 14:
        case 15:
            recursivelyTraverseMutationEffects(root, finishedWork);
            commitReconciliationEffects(finishedWork);
            flags & 4 && (commitHookEffectListUnmount(3, finishedWork, finishedWork.return), commitHookEffectListMount(3, finishedWork), commitHookEffectListUnmount(5, finishedWork, finishedWork.return));
            break;
        case 1:
            recursivelyTraverseMutationEffects(root, finishedWork);
            commitReconciliationEffects(finishedWork);
            flags & 512 && (offscreenSubtreeWasHidden || null === current || safelyDetachRef(current, current.return));
            if (flags & 64 && offscreenSubtreeIsHidden && (finishedWork = finishedWork.updateQueue, null !== finishedWork && (flags = finishedWork.callbacks, null !== flags))) {
                var existingHiddenCallbacks = finishedWork.shared.hiddenCallbacks;
                finishedWork.shared.hiddenCallbacks = null === existingHiddenCallbacks ? flags : existingHiddenCallbacks.concat(flags);
            }
            break;
        case 26:
        case 27:
        case 5:
            recursivelyTraverseMutationEffects(root, finishedWork);
            commitReconciliationEffects(finishedWork);
            flags & 512 && (offscreenSubtreeWasHidden || null === current || safelyDetachRef(current, current.return));
            if (flags & 4 && null != finishedWork.stateNode) {
                flags = finishedWork.memoizedProps;
                existingHiddenCallbacks = null !== current ? current.memoizedProps : flags;
                try {
                    var instance = finishedWork.stateNode, viewConfig = instance.viewConfig;
                    instanceProps.set(instance._nativeTag, flags);
                    var updatePayload = diffProperties(null, existingHiddenCallbacks, flags, viewConfig.validAttributes);
                    null != updatePayload && ReactNativePrivateInterface.UIManager.updateView(instance._nativeTag, viewConfig.uiViewClassName, updatePayload);
                } catch (error) {
                    captureCommitPhaseError(finishedWork, finishedWork.return, error);
                }
            }
            break;
        case 6:
            recursivelyTraverseMutationEffects(root, finishedWork);
            commitReconciliationEffects(finishedWork);
            if (flags & 4) {
                if (null === finishedWork.stateNode) throw Error("This should have a text node initialized. This error is likely caused by a bug in React. Please file an issue.");
                flags = finishedWork.memoizedProps;
                existingHiddenCallbacks = finishedWork.stateNode;
                try {
                    ReactNativePrivateInterface.UIManager.updateView(existingHiddenCallbacks, "RCTRawText", {
                        text: flags
                    });
                } catch (error) {
                    captureCommitPhaseError(finishedWork, finishedWork.return, error);
                }
            }
            break;
        case 3:
            recursivelyTraverseMutationEffects(root, finishedWork);
            commitReconciliationEffects(finishedWork);
            break;
        case 4:
            recursivelyTraverseMutationEffects(root, finishedWork);
            commitReconciliationEffects(finishedWork);
            break;
        case 12:
            recursivelyTraverseMutationEffects(root, finishedWork);
            commitReconciliationEffects(finishedWork);
            break;
        case 13:
            recursivelyTraverseMutationEffects(root, finishedWork);
            commitReconciliationEffects(finishedWork);
            finishedWork.child.flags & 8192 && (existingHiddenCallbacks = null !== current && null !== current.memoizedState, null === finishedWork.memoizedState || existingHiddenCallbacks || (globalMostRecentFallbackTime = now()));
            flags & 4 && (flags = finishedWork.updateQueue, null !== flags && (finishedWork.updateQueue = null, attachSuspenseRetryListeners(finishedWork, flags)));
            break;
        case 22:
            flags & 512 && (offscreenSubtreeWasHidden || null === current || safelyDetachRef(current, current.return));
            instance = null !== finishedWork.memoizedState;
            viewConfig = null !== current && null !== current.memoizedState;
            if (finishedWork.mode & 1) {
                updatePayload = offscreenSubtreeIsHidden;
                var prevOffscreenSubtreeWasHidden = offscreenSubtreeWasHidden;
                offscreenSubtreeIsHidden = updatePayload || instance;
                offscreenSubtreeWasHidden = prevOffscreenSubtreeWasHidden || viewConfig;
                recursivelyTraverseMutationEffects(root, finishedWork);
                offscreenSubtreeWasHidden = prevOffscreenSubtreeWasHidden;
                offscreenSubtreeIsHidden = updatePayload;
            } else recursivelyTraverseMutationEffects(root, finishedWork);
            commitReconciliationEffects(finishedWork);
            root = finishedWork.stateNode;
            root._current = finishedWork;
            root._visibility &= -3;
            root._visibility |= root._pendingVisibility & 2;
            if (flags & 8192 && (root._visibility = instance ? root._visibility & -2 : root._visibility | 1, instance && (root = offscreenSubtreeIsHidden || offscreenSubtreeWasHidden, null === current || viewConfig || root || 0 !== (finishedWork.mode & 1) && recursivelyTraverseDisappearLayoutEffects(finishedWork)), null === finishedWork.memoizedProps || "manual" !== finishedWork.memoizedProps.mode)) a: for(current = null, root = finishedWork;;){
                if (5 === root.tag) {
                    if (null === current) {
                        viewConfig = current = root;
                        try {
                            if (existingHiddenCallbacks = viewConfig.stateNode, instance) {
                                updatePayload = existingHiddenCallbacks;
                                var viewConfig$jscomp$0 = updatePayload.viewConfig;
                                var updatePayload$jscomp$0 = diffProperties(null, emptyObject, {
                                    style: {
                                        display: "none"
                                    }
                                }, viewConfig$jscomp$0.validAttributes);
                                ReactNativePrivateInterface.UIManager.updateView(updatePayload._nativeTag, viewConfig$jscomp$0.uiViewClassName, updatePayload$jscomp$0);
                            } else {
                                var instance$jscomp$0 = viewConfig.stateNode, props = viewConfig.memoizedProps, viewConfig$jscomp$1 = instance$jscomp$0.viewConfig, prevProps = assign({}, props, {
                                    style: [
                                        props.style,
                                        {
                                            display: "none"
                                        }
                                    ]
                                });
                                var updatePayload$jscomp$1 = diffProperties(null, prevProps, props, viewConfig$jscomp$1.validAttributes);
                                ReactNativePrivateInterface.UIManager.updateView(instance$jscomp$0._nativeTag, viewConfig$jscomp$1.uiViewClassName, updatePayload$jscomp$1);
                            }
                        } catch (error) {
                            captureCommitPhaseError(viewConfig, viewConfig.return, error);
                        }
                    }
                } else if (6 === root.tag) {
                    if (null === current) {
                        viewConfig = root;
                        try {
                            throw Error("Not yet implemented.");
                        } catch (error) {
                            captureCommitPhaseError(viewConfig, viewConfig.return, error);
                        }
                    }
                } else if ((22 !== root.tag && 23 !== root.tag || null === root.memoizedState || root === finishedWork) && null !== root.child) {
                    root.child.return = root;
                    root = root.child;
                    continue;
                }
                if (root === finishedWork) break a;
                for(; null === root.sibling;){
                    if (null === root.return || root.return === finishedWork) break a;
                    current === root && (current = null);
                    root = root.return;
                }
                current === root && (current = null);
                root.sibling.return = root.return;
                root = root.sibling;
            }
            flags & 4 && (flags = finishedWork.updateQueue, null !== flags && (existingHiddenCallbacks = flags.retryQueue, null !== existingHiddenCallbacks && (flags.retryQueue = null, attachSuspenseRetryListeners(finishedWork, existingHiddenCallbacks))));
            break;
        case 19:
            recursivelyTraverseMutationEffects(root, finishedWork);
            commitReconciliationEffects(finishedWork);
            flags & 4 && (flags = finishedWork.updateQueue, null !== flags && (finishedWork.updateQueue = null, attachSuspenseRetryListeners(finishedWork, flags)));
            break;
        case 21:
            break;
        default:
            recursivelyTraverseMutationEffects(root, finishedWork), commitReconciliationEffects(finishedWork);
    }
}
function commitReconciliationEffects(finishedWork) {
    var flags = finishedWork.flags;
    if (flags & 2) {
        try {
            a: {
                for(var parent = finishedWork.return; null !== parent;){
                    if (isHostParent(parent)) {
                        var JSCompiler_inline_result = parent;
                        break a;
                    }
                    parent = parent.return;
                }
                throw Error("Expected to find a host parent. This error is likely caused by a bug in React. Please file an issue.");
            }
            switch(JSCompiler_inline_result.tag){
                case 27:
                case 5:
                    var parent$jscomp$0 = JSCompiler_inline_result.stateNode;
                    JSCompiler_inline_result.flags & 32 && (JSCompiler_inline_result.flags &= -33);
                    var before = getHostSibling(finishedWork);
                    insertOrAppendPlacementNode(finishedWork, before, parent$jscomp$0);
                    break;
                case 3:
                case 4:
                    var parent$117 = JSCompiler_inline_result.stateNode.containerInfo, before$118 = getHostSibling(finishedWork);
                    insertOrAppendPlacementNodeIntoContainer(finishedWork, before$118, parent$117);
                    break;
                default:
                    throw Error("Invalid host parent fiber. This error is likely caused by a bug in React. Please file an issue.");
            }
        } catch (error) {
            captureCommitPhaseError(finishedWork, finishedWork.return, error);
        }
        finishedWork.flags &= -3;
    }
    flags & 4096 && (finishedWork.flags &= -4097);
}
function recursivelyTraverseLayoutEffects(root, parentFiber) {
    if (parentFiber.subtreeFlags & 8772) for(parentFiber = parentFiber.child; null !== parentFiber;)commitLayoutEffectOnFiber(root, parentFiber.alternate, parentFiber), parentFiber = parentFiber.sibling;
}
function recursivelyTraverseDisappearLayoutEffects(parentFiber) {
    for(parentFiber = parentFiber.child; null !== parentFiber;){
        var finishedWork = parentFiber;
        switch(finishedWork.tag){
            case 0:
            case 11:
            case 14:
            case 15:
                commitHookEffectListUnmount(4, finishedWork, finishedWork.return);
                recursivelyTraverseDisappearLayoutEffects(finishedWork);
                break;
            case 1:
                safelyDetachRef(finishedWork, finishedWork.return);
                var instance = finishedWork.stateNode;
                "function" === typeof instance.componentWillUnmount && safelyCallComponentWillUnmount(finishedWork, finishedWork.return, instance);
                recursivelyTraverseDisappearLayoutEffects(finishedWork);
                break;
            case 26:
            case 27:
            case 5:
                safelyDetachRef(finishedWork, finishedWork.return);
                recursivelyTraverseDisappearLayoutEffects(finishedWork);
                break;
            case 22:
                safelyDetachRef(finishedWork, finishedWork.return);
                null === finishedWork.memoizedState && recursivelyTraverseDisappearLayoutEffects(finishedWork);
                break;
            default:
                recursivelyTraverseDisappearLayoutEffects(finishedWork);
        }
        parentFiber = parentFiber.sibling;
    }
}
function recursivelyTraverseReappearLayoutEffects(finishedRoot$jscomp$0, parentFiber, includeWorkInProgressEffects) {
    includeWorkInProgressEffects = includeWorkInProgressEffects && 0 !== (parentFiber.subtreeFlags & 8772);
    for(parentFiber = parentFiber.child; null !== parentFiber;){
        var finishedRoot = finishedRoot$jscomp$0, finishedWork = parentFiber, flags = finishedWork.flags;
        switch(finishedWork.tag){
            case 0:
            case 11:
            case 15:
                recursivelyTraverseReappearLayoutEffects(finishedRoot, finishedWork, includeWorkInProgressEffects);
                commitHookEffectListMount(4, finishedWork);
                break;
            case 1:
                recursivelyTraverseReappearLayoutEffects(finishedRoot, finishedWork, includeWorkInProgressEffects);
                finishedRoot = finishedWork;
                var instance = finishedRoot.stateNode;
                if ("function" === typeof instance.componentDidMount) try {
                    instance.componentDidMount();
                } catch (error) {
                    captureCommitPhaseError(finishedRoot, finishedRoot.return, error);
                }
                finishedRoot = finishedWork;
                instance = finishedRoot.updateQueue;
                if (null !== instance) {
                    var instance$jscomp$0 = finishedRoot.stateNode;
                    try {
                        var hiddenCallbacks = instance.shared.hiddenCallbacks;
                        if (null !== hiddenCallbacks) for(instance.shared.hiddenCallbacks = null, instance = 0; instance < hiddenCallbacks.length; instance++)callCallback(hiddenCallbacks[instance], instance$jscomp$0);
                    } catch (error) {
                        captureCommitPhaseError(finishedRoot, finishedRoot.return, error);
                    }
                }
                includeWorkInProgressEffects && flags & 64 && commitClassCallbacks(finishedWork);
                safelyAttachRef(finishedWork, finishedWork.return);
                break;
            case 26:
            case 27:
            case 5:
                recursivelyTraverseReappearLayoutEffects(finishedRoot, finishedWork, includeWorkInProgressEffects);
                safelyAttachRef(finishedWork, finishedWork.return);
                break;
            case 12:
                recursivelyTraverseReappearLayoutEffects(finishedRoot, finishedWork, includeWorkInProgressEffects);
                break;
            case 13:
                recursivelyTraverseReappearLayoutEffects(finishedRoot, finishedWork, includeWorkInProgressEffects);
                break;
            case 22:
                null === finishedWork.memoizedState && recursivelyTraverseReappearLayoutEffects(finishedRoot, finishedWork, includeWorkInProgressEffects);
                safelyAttachRef(finishedWork, finishedWork.return);
                break;
            default:
                recursivelyTraverseReappearLayoutEffects(finishedRoot, finishedWork, includeWorkInProgressEffects);
        }
        parentFiber = parentFiber.sibling;
    }
}
function commitOffscreenPassiveMountEffects(current, finishedWork) {
    var previousCache = null;
    null !== current && null !== current.memoizedState && null !== current.memoizedState.cachePool && (previousCache = current.memoizedState.cachePool.pool);
    current = null;
    null !== finishedWork.memoizedState && null !== finishedWork.memoizedState.cachePool && (current = finishedWork.memoizedState.cachePool.pool);
    current !== previousCache && (null != current && current.refCount++, null != previousCache && releaseCache(previousCache));
}
function commitCachePassiveMountEffect(current, finishedWork) {
    current = null;
    null !== finishedWork.alternate && (current = finishedWork.alternate.memoizedState.cache);
    finishedWork = finishedWork.memoizedState.cache;
    finishedWork !== current && (finishedWork.refCount++, null != current && releaseCache(current));
}
function recursivelyTraversePassiveMountEffects(root, parentFiber, committedLanes, committedTransitions) {
    if (parentFiber.subtreeFlags & 10256) for(parentFiber = parentFiber.child; null !== parentFiber;)commitPassiveMountOnFiber(root, parentFiber, committedLanes, committedTransitions), parentFiber = parentFiber.sibling;
}
function commitPassiveMountOnFiber(finishedRoot, finishedWork, committedLanes, committedTransitions) {
    var flags = finishedWork.flags;
    switch(finishedWork.tag){
        case 0:
        case 11:
        case 15:
            recursivelyTraversePassiveMountEffects(finishedRoot, finishedWork, committedLanes, committedTransitions);
            flags & 2048 && commitHookEffectListMount(9, finishedWork);
            break;
        case 3:
            recursivelyTraversePassiveMountEffects(finishedRoot, finishedWork, committedLanes, committedTransitions);
            flags & 2048 && (finishedRoot = null, null !== finishedWork.alternate && (finishedRoot = finishedWork.alternate.memoizedState.cache), finishedWork = finishedWork.memoizedState.cache, finishedWork !== finishedRoot && (finishedWork.refCount++, null != finishedRoot && releaseCache(finishedRoot)));
            break;
        case 12:
            if (flags & 2048) {
                recursivelyTraversePassiveMountEffects(finishedRoot, finishedWork, committedLanes, committedTransitions);
                finishedRoot = finishedWork.stateNode;
                try {
                    var _finishedWork$memoize2 = finishedWork.memoizedProps, id = _finishedWork$memoize2.id, onPostCommit = _finishedWork$memoize2.onPostCommit;
                    "function" === typeof onPostCommit && onPostCommit(id, null === finishedWork.alternate ? "mount" : "update", finishedRoot.passiveEffectDuration, -0);
                } catch (error) {
                    captureCommitPhaseError(finishedWork, finishedWork.return, error);
                }
            } else recursivelyTraversePassiveMountEffects(finishedRoot, finishedWork, committedLanes, committedTransitions);
            break;
        case 23:
            break;
        case 22:
            _finishedWork$memoize2 = finishedWork.stateNode;
            null !== finishedWork.memoizedState ? _finishedWork$memoize2._visibility & 4 ? recursivelyTraversePassiveMountEffects(finishedRoot, finishedWork, committedLanes, committedTransitions) : finishedWork.mode & 1 ? recursivelyTraverseAtomicPassiveEffects(finishedRoot, finishedWork) : (_finishedWork$memoize2._visibility |= 4, recursivelyTraversePassiveMountEffects(finishedRoot, finishedWork, committedLanes, committedTransitions)) : _finishedWork$memoize2._visibility & 4 ? recursivelyTraversePassiveMountEffects(finishedRoot, finishedWork, committedLanes, committedTransitions) : (_finishedWork$memoize2._visibility |= 4, recursivelyTraverseReconnectPassiveEffects(finishedRoot, finishedWork, committedLanes, committedTransitions, 0 !== (finishedWork.subtreeFlags & 10256)));
            flags & 2048 && commitOffscreenPassiveMountEffects(finishedWork.alternate, finishedWork);
            break;
        case 24:
            recursivelyTraversePassiveMountEffects(finishedRoot, finishedWork, committedLanes, committedTransitions);
            flags & 2048 && commitCachePassiveMountEffect(finishedWork.alternate, finishedWork);
            break;
        default:
            recursivelyTraversePassiveMountEffects(finishedRoot, finishedWork, committedLanes, committedTransitions);
    }
}
function recursivelyTraverseReconnectPassiveEffects(finishedRoot$jscomp$0, parentFiber, committedLanes$jscomp$0, committedTransitions$jscomp$0, includeWorkInProgressEffects) {
    includeWorkInProgressEffects = includeWorkInProgressEffects && 0 !== (parentFiber.subtreeFlags & 10256);
    for(parentFiber = parentFiber.child; null !== parentFiber;){
        var finishedRoot = finishedRoot$jscomp$0, finishedWork = parentFiber, committedLanes = committedLanes$jscomp$0, committedTransitions = committedTransitions$jscomp$0, flags = finishedWork.flags;
        switch(finishedWork.tag){
            case 0:
            case 11:
            case 15:
                recursivelyTraverseReconnectPassiveEffects(finishedRoot, finishedWork, committedLanes, committedTransitions, includeWorkInProgressEffects);
                commitHookEffectListMount(8, finishedWork);
                break;
            case 23:
                break;
            case 22:
                var instance = finishedWork.stateNode;
                null !== finishedWork.memoizedState ? instance._visibility & 4 ? recursivelyTraverseReconnectPassiveEffects(finishedRoot, finishedWork, committedLanes, committedTransitions, includeWorkInProgressEffects) : finishedWork.mode & 1 ? recursivelyTraverseAtomicPassiveEffects(finishedRoot, finishedWork) : (instance._visibility |= 4, recursivelyTraverseReconnectPassiveEffects(finishedRoot, finishedWork, committedLanes, committedTransitions, includeWorkInProgressEffects)) : (instance._visibility |= 4, recursivelyTraverseReconnectPassiveEffects(finishedRoot, finishedWork, committedLanes, committedTransitions, includeWorkInProgressEffects));
                includeWorkInProgressEffects && flags & 2048 && commitOffscreenPassiveMountEffects(finishedWork.alternate, finishedWork);
                break;
            case 24:
                recursivelyTraverseReconnectPassiveEffects(finishedRoot, finishedWork, committedLanes, committedTransitions, includeWorkInProgressEffects);
                includeWorkInProgressEffects && flags & 2048 && commitCachePassiveMountEffect(finishedWork.alternate, finishedWork);
                break;
            default:
                recursivelyTraverseReconnectPassiveEffects(finishedRoot, finishedWork, committedLanes, committedTransitions, includeWorkInProgressEffects);
        }
        parentFiber = parentFiber.sibling;
    }
}
function recursivelyTraverseAtomicPassiveEffects(finishedRoot$jscomp$0, parentFiber) {
    if (parentFiber.subtreeFlags & 10256) for(parentFiber = parentFiber.child; null !== parentFiber;){
        var finishedRoot = finishedRoot$jscomp$0, finishedWork = parentFiber, flags = finishedWork.flags;
        switch(finishedWork.tag){
            case 22:
                recursivelyTraverseAtomicPassiveEffects(finishedRoot, finishedWork);
                flags & 2048 && commitOffscreenPassiveMountEffects(finishedWork.alternate, finishedWork);
                break;
            case 24:
                recursivelyTraverseAtomicPassiveEffects(finishedRoot, finishedWork);
                flags & 2048 && commitCachePassiveMountEffect(finishedWork.alternate, finishedWork);
                break;
            default:
                recursivelyTraverseAtomicPassiveEffects(finishedRoot, finishedWork);
        }
        parentFiber = parentFiber.sibling;
    }
}
var suspenseyCommitFlag = 8192;
function recursivelyAccumulateSuspenseyCommit(parentFiber) {
    if (parentFiber.subtreeFlags & suspenseyCommitFlag) for(parentFiber = parentFiber.child; null !== parentFiber;)accumulateSuspenseyCommitOnFiber(parentFiber), parentFiber = parentFiber.sibling;
}
function accumulateSuspenseyCommitOnFiber(fiber) {
    switch(fiber.tag){
        case 26:
            recursivelyAccumulateSuspenseyCommit(fiber);
            fiber.flags & suspenseyCommitFlag && null !== fiber.memoizedState && shim();
            break;
        case 5:
            recursivelyAccumulateSuspenseyCommit(fiber);
            break;
        case 3:
        case 4:
            recursivelyAccumulateSuspenseyCommit(fiber);
            break;
        case 22:
            if (null === fiber.memoizedState) {
                var current = fiber.alternate;
                null !== current && null !== current.memoizedState ? (current = suspenseyCommitFlag, suspenseyCommitFlag = 16777216, recursivelyAccumulateSuspenseyCommit(fiber), suspenseyCommitFlag = current) : recursivelyAccumulateSuspenseyCommit(fiber);
            }
            break;
        default:
            recursivelyAccumulateSuspenseyCommit(fiber);
    }
}
function detachAlternateSiblings(parentFiber) {
    var previousFiber = parentFiber.alternate;
    if (null !== previousFiber && (parentFiber = previousFiber.child, null !== parentFiber)) {
        previousFiber.child = null;
        do previousFiber = parentFiber.sibling, parentFiber.sibling = null, parentFiber = previousFiber;
        while (null !== parentFiber);
    }
}
function recursivelyTraversePassiveUnmountEffects(parentFiber) {
    var deletions = parentFiber.deletions;
    if (0 !== (parentFiber.flags & 16)) {
        if (null !== deletions) for(var i = 0; i < deletions.length; i++){
            var childToDelete = deletions[i];
            nextEffect = childToDelete;
            commitPassiveUnmountEffectsInsideOfDeletedTree_begin(childToDelete, parentFiber);
        }
        detachAlternateSiblings(parentFiber);
    }
    if (parentFiber.subtreeFlags & 10256) for(parentFiber = parentFiber.child; null !== parentFiber;)commitPassiveUnmountOnFiber(parentFiber), parentFiber = parentFiber.sibling;
}
function commitPassiveUnmountOnFiber(finishedWork) {
    switch(finishedWork.tag){
        case 0:
        case 11:
        case 15:
            recursivelyTraversePassiveUnmountEffects(finishedWork);
            finishedWork.flags & 2048 && commitHookEffectListUnmount(9, finishedWork, finishedWork.return);
            break;
        case 3:
            recursivelyTraversePassiveUnmountEffects(finishedWork);
            break;
        case 12:
            recursivelyTraversePassiveUnmountEffects(finishedWork);
            break;
        case 22:
            var instance = finishedWork.stateNode;
            null !== finishedWork.memoizedState && instance._visibility & 4 && (null === finishedWork.return || 13 !== finishedWork.return.tag) ? (instance._visibility &= -5, recursivelyTraverseDisconnectPassiveEffects(finishedWork)) : recursivelyTraversePassiveUnmountEffects(finishedWork);
            break;
        default:
            recursivelyTraversePassiveUnmountEffects(finishedWork);
    }
}
function recursivelyTraverseDisconnectPassiveEffects(parentFiber) {
    var deletions = parentFiber.deletions;
    if (0 !== (parentFiber.flags & 16)) {
        if (null !== deletions) for(var i = 0; i < deletions.length; i++){
            var childToDelete = deletions[i];
            nextEffect = childToDelete;
            commitPassiveUnmountEffectsInsideOfDeletedTree_begin(childToDelete, parentFiber);
        }
        detachAlternateSiblings(parentFiber);
    }
    for(parentFiber = parentFiber.child; null !== parentFiber;){
        deletions = parentFiber;
        switch(deletions.tag){
            case 0:
            case 11:
            case 15:
                commitHookEffectListUnmount(8, deletions, deletions.return);
                recursivelyTraverseDisconnectPassiveEffects(deletions);
                break;
            case 22:
                i = deletions.stateNode;
                i._visibility & 4 && (i._visibility &= -5, recursivelyTraverseDisconnectPassiveEffects(deletions));
                break;
            default:
                recursivelyTraverseDisconnectPassiveEffects(deletions);
        }
        parentFiber = parentFiber.sibling;
    }
}
function commitPassiveUnmountEffectsInsideOfDeletedTree_begin(deletedSubtreeRoot, nearestMountedAncestor) {
    for(; null !== nextEffect;){
        var fiber = nextEffect;
        switch(fiber.tag){
            case 0:
            case 11:
            case 15:
                commitHookEffectListUnmount(8, fiber, nearestMountedAncestor);
                break;
            case 23:
            case 22:
                if (null !== fiber.memoizedState && null !== fiber.memoizedState.cachePool) {
                    var cache = fiber.memoizedState.cachePool.pool;
                    null != cache && cache.refCount++;
                }
                break;
            case 24:
                releaseCache(fiber.memoizedState.cache);
        }
        cache = fiber.child;
        if (null !== cache) cache.return = fiber, nextEffect = cache;
        else a: for(fiber = deletedSubtreeRoot; null !== nextEffect;){
            cache = nextEffect;
            var sibling = cache.sibling, returnFiber = cache.return;
            detachFiberAfterEffects(cache);
            if (cache === fiber) {
                nextEffect = null;
                break a;
            }
            if (null !== sibling) {
                sibling.return = returnFiber;
                nextEffect = sibling;
                break a;
            }
            nextEffect = returnFiber;
        }
    }
}
var DefaultAsyncDispatcher = {
    getCacheForType: function(resourceType) {
        var cache = readContext(CacheContext), cacheForType = cache.data.get(resourceType);
        void 0 === cacheForType && (cacheForType = resourceType(), cache.data.set(resourceType, cacheForType));
        return cacheForType;
    }
}, PossiblyWeakMap = "function" === typeof WeakMap ? WeakMap : Map, executionContext = 0, workInProgressRoot = null, workInProgress = null, workInProgressRootRenderLanes = 0, workInProgressSuspendedReason = 0, workInProgressThrownValue = null, workInProgressRootDidSkipSuspendedSiblings = !1, workInProgressRootIsPrerendering = !1, workInProgressRootDidAttachPingListener = !1, entangledRenderLanes = 0, workInProgressRootExitStatus = 0, workInProgressRootSkippedLanes = 0, workInProgressRootInterleavedUpdatedLanes = 0, workInProgressRootPingedLanes = 0, workInProgressDeferredLane = 0, workInProgressSuspendedRetryLanes = 0, workInProgressRootConcurrentErrors = null, workInProgressRootRecoverableErrors = null, workInProgressRootDidIncludeRecursiveRenderUpdate = !1, globalMostRecentFallbackTime = 0, workInProgressRootRenderTargetTime = Infinity, workInProgressTransitions = null, legacyErrorBoundariesThatAlreadyFailed = null, rootDoesHavePassiveEffects = !1, rootWithPendingPassiveEffects = null, pendingPassiveEffectsLanes = 0, pendingPassiveEffectsRemainingLanes = 0, pendingPassiveTransitions = null, nestedUpdateCount = 0, rootWithNestedUpdates = null;
function requestUpdateLane(fiber) {
    if (0 === (fiber.mode & 1)) return 2;
    if (0 !== (executionContext & 2) && 0 !== workInProgressRootRenderLanes) return workInProgressRootRenderLanes & -workInProgressRootRenderLanes;
    if (null !== ReactSharedInternals.T) return fiber = currentEntangledLane, 0 !== fiber ? fiber : requestTransitionLane();
    fiber = 0 !== currentUpdatePriority ? currentUpdatePriority : 32;
    return fiber;
}
function requestDeferredLane() {
    0 === workInProgressDeferredLane && (workInProgressDeferredLane = 0 !== (workInProgressRootRenderLanes & 536870912) ? 536870912 : claimNextTransitionLane());
    var suspenseHandler = suspenseHandlerStackCursor.current;
    null !== suspenseHandler && (suspenseHandler.flags |= 32);
    return workInProgressDeferredLane;
}
function scheduleUpdateOnFiber(root, fiber, lane) {
    if (root === workInProgressRoot && 2 === workInProgressSuspendedReason || null !== root.cancelPendingCommit) prepareFreshStack(root, 0), markRootSuspended(root, workInProgressRootRenderLanes, workInProgressDeferredLane, !1);
    markRootUpdated$1(root, lane);
    if (0 === (executionContext & 2) || root !== workInProgressRoot) root === workInProgressRoot && (0 === (executionContext & 2) && (workInProgressRootInterleavedUpdatedLanes |= lane), 4 === workInProgressRootExitStatus && markRootSuspended(root, workInProgressRootRenderLanes, workInProgressDeferredLane, !1)), ensureRootIsScheduled(root), 2 === lane && 0 === executionContext && 0 === (fiber.mode & 1) && (workInProgressRootRenderTargetTime = now() + 500, flushSyncWorkAcrossRoots_impl(0, !0));
}
function performWorkOnRoot(root$jscomp$0, lanes, forceSync) {
    if (0 !== (executionContext & 6)) throw Error("Should not already be working.");
    var shouldTimeSlice = !forceSync && 0 === (lanes & 60) && 0 === (lanes & root$jscomp$0.expiredLanes) || checkIfRootIsPrerendering(root$jscomp$0, lanes), exitStatus = shouldTimeSlice ? renderRootConcurrent(root$jscomp$0, lanes) : renderRootSync(root$jscomp$0, lanes, !0), renderWasConcurrent = shouldTimeSlice;
    do {
        if (0 === exitStatus) {
            workInProgressRootIsPrerendering && !shouldTimeSlice && markRootSuspended(root$jscomp$0, lanes, 0, !1);
            break;
        } else if (6 === exitStatus) markRootSuspended(root$jscomp$0, lanes, 0, !workInProgressRootDidSkipSuspendedSiblings);
        else {
            forceSync = root$jscomp$0.current.alternate;
            if (renderWasConcurrent && !isRenderConsistentWithExternalStores(forceSync)) {
                exitStatus = renderRootSync(root$jscomp$0, lanes, !1);
                renderWasConcurrent = !1;
                continue;
            }
            if (0 !== root$jscomp$0.tag && 2 === exitStatus) {
                renderWasConcurrent = lanes;
                if (root$jscomp$0.errorRecoveryDisabledLanes & renderWasConcurrent) var JSCompiler_inline_result = 0;
                else JSCompiler_inline_result = root$jscomp$0.pendingLanes & -536870913, JSCompiler_inline_result = 0 !== JSCompiler_inline_result ? JSCompiler_inline_result : JSCompiler_inline_result & 536870912 ? 536870912 : 0;
                if (0 !== JSCompiler_inline_result) {
                    lanes = JSCompiler_inline_result;
                    a: {
                        var root = root$jscomp$0;
                        exitStatus = workInProgressRootConcurrentErrors;
                        JSCompiler_inline_result = renderRootSync(root, JSCompiler_inline_result, !1);
                        if (2 !== JSCompiler_inline_result) {
                            if (workInProgressRootDidAttachPingListener) {
                                root.errorRecoveryDisabledLanes |= renderWasConcurrent;
                                workInProgressRootInterleavedUpdatedLanes |= renderWasConcurrent;
                                exitStatus = 4;
                                break a;
                            }
                            renderWasConcurrent = workInProgressRootRecoverableErrors;
                            workInProgressRootRecoverableErrors = exitStatus;
                            null !== renderWasConcurrent && queueRecoverableErrors(renderWasConcurrent);
                        }
                        exitStatus = JSCompiler_inline_result;
                    }
                    renderWasConcurrent = !1;
                    if (2 !== exitStatus) continue;
                }
            }
            if (1 === exitStatus) {
                prepareFreshStack(root$jscomp$0, 0);
                markRootSuspended(root$jscomp$0, lanes, 0, !0);
                break;
            }
            a: {
                shouldTimeSlice = root$jscomp$0;
                renderWasConcurrent = exitStatus;
                switch(renderWasConcurrent){
                    case 0:
                    case 1:
                        throw Error("Root did not complete. This is a bug in React.");
                    case 4:
                        if ((lanes & 4194176) === lanes) {
                            markRootSuspended(shouldTimeSlice, lanes, workInProgressDeferredLane, !workInProgressRootDidSkipSuspendedSiblings);
                            break a;
                        }
                        break;
                    case 2:
                        workInProgressRootRecoverableErrors = null;
                        break;
                    case 3:
                    case 5:
                        break;
                    default:
                        throw Error("Unknown root exit status.");
                }
                shouldTimeSlice.finishedWork = forceSync;
                shouldTimeSlice.finishedLanes = lanes;
                if ((lanes & 62914560) === lanes && 3 === renderWasConcurrent && (renderWasConcurrent = globalMostRecentFallbackTime + 300 - now(), 10 < renderWasConcurrent)) {
                    markRootSuspended(shouldTimeSlice, lanes, workInProgressDeferredLane, !workInProgressRootDidSkipSuspendedSiblings);
                    if (0 !== getNextLanes(shouldTimeSlice, 0)) break a;
                    shouldTimeSlice.timeoutHandle = scheduleTimeout(commitRootWhenReady.bind(null, shouldTimeSlice, forceSync, workInProgressRootRecoverableErrors, workInProgressTransitions, workInProgressRootDidIncludeRecursiveRenderUpdate, lanes, workInProgressDeferredLane, workInProgressRootInterleavedUpdatedLanes, workInProgressSuspendedRetryLanes, workInProgressRootDidSkipSuspendedSiblings, 2, -0, 0), renderWasConcurrent);
                    break a;
                }
                commitRootWhenReady(shouldTimeSlice, forceSync, workInProgressRootRecoverableErrors, workInProgressTransitions, workInProgressRootDidIncludeRecursiveRenderUpdate, lanes, workInProgressDeferredLane, workInProgressRootInterleavedUpdatedLanes, workInProgressSuspendedRetryLanes, workInProgressRootDidSkipSuspendedSiblings, 0, -0, 0);
            }
        }
        break;
    }while (1);
    ensureRootIsScheduled(root$jscomp$0);
}
function queueRecoverableErrors(errors) {
    null === workInProgressRootRecoverableErrors ? workInProgressRootRecoverableErrors = errors : workInProgressRootRecoverableErrors.push.apply(workInProgressRootRecoverableErrors, errors);
}
function commitRootWhenReady(root, finishedWork, recoverableErrors, transitions, didIncludeRenderPhaseUpdate, lanes, spawnedLane, updatedLanes, suspendedRetryLanes, didSkipSuspendedSiblings, suspendedCommitReason, completedRenderStartTime, completedRenderEndTime) {
    lanes = finishedWork.subtreeFlags;
    (lanes & 8192 || 16785408 === (lanes & 16785408)) && accumulateSuspenseyCommitOnFiber(finishedWork);
    finishedWork = ReactSharedInternals.T;
    lanes = currentUpdatePriority;
    try {
        currentUpdatePriority = 2, ReactSharedInternals.T = null, commitRootImpl(root, recoverableErrors, transitions, didIncludeRenderPhaseUpdate, lanes, spawnedLane, updatedLanes, suspendedRetryLanes, suspendedCommitReason, completedRenderStartTime, completedRenderEndTime);
    } finally{
        ReactSharedInternals.T = finishedWork, currentUpdatePriority = lanes;
    }
}
function isRenderConsistentWithExternalStores(finishedWork) {
    for(var node = finishedWork;;){
        var tag = node.tag;
        if ((0 === tag || 11 === tag || 15 === tag) && node.flags & 16384 && (tag = node.updateQueue, null !== tag && (tag = tag.stores, null !== tag))) for(var i = 0; i < tag.length; i++){
            var check = tag[i], getSnapshot = check.getSnapshot;
            check = check.value;
            try {
                if (!objectIs(getSnapshot(), check)) return !1;
            } catch (error) {
                return !1;
            }
        }
        tag = node.child;
        if (node.subtreeFlags & 16384 && null !== tag) tag.return = node, node = tag;
        else {
            if (node === finishedWork) break;
            for(; null === node.sibling;){
                if (null === node.return || node.return === finishedWork) return !0;
                node = node.return;
            }
            node.sibling.return = node.return;
            node = node.sibling;
        }
    }
    return !0;
}
function markRootSuspended(root, suspendedLanes, spawnedLane, didAttemptEntireTree) {
    suspendedLanes &= ~workInProgressRootPingedLanes;
    suspendedLanes &= ~workInProgressRootInterleavedUpdatedLanes;
    root.suspendedLanes |= suspendedLanes;
    root.pingedLanes &= ~suspendedLanes;
    didAttemptEntireTree && (root.warmLanes |= suspendedLanes);
    didAttemptEntireTree = root.expirationTimes;
    for(var lanes = suspendedLanes; 0 < lanes;){
        var index$11 = 31 - clz32(lanes), lane = 1 << index$11;
        didAttemptEntireTree[index$11] = -1;
        lanes &= ~lane;
    }
    0 !== spawnedLane && markSpawnedDeferredLane(root, spawnedLane, suspendedLanes);
}
function resetWorkInProgressStack() {
    if (null !== workInProgress) {
        if (0 === workInProgressSuspendedReason) var interruptedWork = workInProgress.return;
        else interruptedWork = workInProgress, lastContextDependency = currentlyRenderingFiber = null, resetHooksOnUnwind(interruptedWork), thenableState$1 = null, thenableIndexCounter$1 = 0, interruptedWork = workInProgress;
        for(; null !== interruptedWork;)unwindInterruptedWork(interruptedWork.alternate, interruptedWork), interruptedWork = interruptedWork.return;
        workInProgress = null;
    }
}
function prepareFreshStack(root, lanes) {
    root.finishedWork = null;
    root.finishedLanes = 0;
    var timeoutHandle = root.timeoutHandle;
    -1 !== timeoutHandle && (root.timeoutHandle = -1, cancelTimeout(timeoutHandle));
    timeoutHandle = root.cancelPendingCommit;
    null !== timeoutHandle && (root.cancelPendingCommit = null, timeoutHandle());
    resetWorkInProgressStack();
    workInProgressRoot = root;
    workInProgress = timeoutHandle = createWorkInProgress(root.current, null);
    workInProgressRootRenderLanes = lanes;
    workInProgressSuspendedReason = 0;
    workInProgressThrownValue = null;
    workInProgressRootDidSkipSuspendedSiblings = !1;
    workInProgressRootIsPrerendering = checkIfRootIsPrerendering(root, lanes);
    workInProgressRootDidAttachPingListener = !1;
    workInProgressSuspendedRetryLanes = workInProgressDeferredLane = workInProgressRootPingedLanes = workInProgressRootInterleavedUpdatedLanes = workInProgressRootSkippedLanes = workInProgressRootExitStatus = 0;
    workInProgressRootRecoverableErrors = workInProgressRootConcurrentErrors = null;
    workInProgressRootDidIncludeRecursiveRenderUpdate = !1;
    0 !== (lanes & 8) && (lanes |= lanes & 32);
    var allEntangledLanes = root.entangledLanes;
    if (0 !== allEntangledLanes) for(root = root.entanglements, allEntangledLanes &= lanes; 0 < allEntangledLanes;){
        var index$9 = 31 - clz32(allEntangledLanes), lane = 1 << index$9;
        lanes |= root[index$9];
        allEntangledLanes &= ~lane;
    }
    entangledRenderLanes = lanes;
    finishQueueingConcurrentUpdates();
    return timeoutHandle;
}
function handleThrow(root, thrownValue) {
    currentlyRenderingFiber$1 = null;
    ReactSharedInternals.H = ContextOnlyDispatcher;
    thrownValue === SuspenseException ? (thrownValue = getSuspendedThenable(), workInProgressSuspendedReason = 3) : thrownValue === SuspenseyCommitException ? (thrownValue = getSuspendedThenable(), workInProgressSuspendedReason = 4) : workInProgressSuspendedReason = thrownValue === SelectiveHydrationException ? 8 : null !== thrownValue && "object" === typeof thrownValue && "function" === typeof thrownValue.then ? 6 : 1;
    workInProgressThrownValue = thrownValue;
    null === workInProgress && (workInProgressRootExitStatus = 1, logUncaughtError(root, createCapturedValueAtFiber(thrownValue, root.current)));
}
function pushDispatcher() {
    var prevDispatcher = ReactSharedInternals.H;
    ReactSharedInternals.H = ContextOnlyDispatcher;
    return null === prevDispatcher ? ContextOnlyDispatcher : prevDispatcher;
}
function pushAsyncDispatcher() {
    var prevAsyncDispatcher = ReactSharedInternals.A;
    ReactSharedInternals.A = DefaultAsyncDispatcher;
    return prevAsyncDispatcher;
}
function renderDidSuspendDelayIfPossible() {
    workInProgressRootExitStatus = 4;
    workInProgressRootDidSkipSuspendedSiblings || (workInProgressRootRenderLanes & 4194176) !== workInProgressRootRenderLanes && null !== suspenseHandlerStackCursor.current || (workInProgressRootIsPrerendering = !0);
    0 === (workInProgressRootSkippedLanes & 134217727) && 0 === (workInProgressRootInterleavedUpdatedLanes & 134217727) || null === workInProgressRoot || markRootSuspended(workInProgressRoot, workInProgressRootRenderLanes, workInProgressDeferredLane, !1);
}
function renderRootSync(root, lanes, shouldYieldForPrerendering) {
    var prevExecutionContext = executionContext;
    executionContext |= 2;
    var prevDispatcher = pushDispatcher(), prevAsyncDispatcher = pushAsyncDispatcher();
    if (workInProgressRoot !== root || workInProgressRootRenderLanes !== lanes) workInProgressTransitions = null, prepareFreshStack(root, lanes);
    lanes = !1;
    var exitStatus = workInProgressRootExitStatus;
    a: do try {
        if (0 !== workInProgressSuspendedReason && null !== workInProgress) {
            var unitOfWork = workInProgress, thrownValue = workInProgressThrownValue;
            switch(workInProgressSuspendedReason){
                case 8:
                    resetWorkInProgressStack();
                    exitStatus = 6;
                    break a;
                case 3:
                case 2:
                case 6:
                    null === suspenseHandlerStackCursor.current && (lanes = !0);
                    var reason = workInProgressSuspendedReason;
                    workInProgressSuspendedReason = 0;
                    workInProgressThrownValue = null;
                    throwAndUnwindWorkLoop(root, unitOfWork, thrownValue, reason);
                    if (shouldYieldForPrerendering && workInProgressRootIsPrerendering) {
                        exitStatus = 0;
                        break a;
                    }
                    break;
                default:
                    reason = workInProgressSuspendedReason, workInProgressSuspendedReason = 0, workInProgressThrownValue = null, throwAndUnwindWorkLoop(root, unitOfWork, thrownValue, reason);
            }
        }
        workLoopSync();
        exitStatus = workInProgressRootExitStatus;
        break;
    } catch (thrownValue$133) {
        handleThrow(root, thrownValue$133);
    }
    while (1);
    lanes && root.shellSuspendCounter++;
    lastContextDependency = currentlyRenderingFiber = null;
    executionContext = prevExecutionContext;
    ReactSharedInternals.H = prevDispatcher;
    ReactSharedInternals.A = prevAsyncDispatcher;
    null === workInProgress && (workInProgressRoot = null, workInProgressRootRenderLanes = 0, finishQueueingConcurrentUpdates());
    return exitStatus;
}
function workLoopSync() {
    for(; null !== workInProgress;)performUnitOfWork(workInProgress);
}
function renderRootConcurrent(root, lanes) {
    var prevExecutionContext = executionContext;
    executionContext |= 2;
    var prevDispatcher = pushDispatcher(), prevAsyncDispatcher = pushAsyncDispatcher();
    workInProgressRoot !== root || workInProgressRootRenderLanes !== lanes ? (workInProgressTransitions = null, workInProgressRootRenderTargetTime = now() + 500, prepareFreshStack(root, lanes)) : workInProgressRootIsPrerendering = checkIfRootIsPrerendering(root, lanes);
    a: do try {
        if (0 !== workInProgressSuspendedReason && null !== workInProgress) {
            lanes = workInProgress;
            var thrownValue = workInProgressThrownValue;
            b: switch(workInProgressSuspendedReason){
                case 1:
                    workInProgressSuspendedReason = 0;
                    workInProgressThrownValue = null;
                    throwAndUnwindWorkLoop(root, lanes, thrownValue, 1);
                    break;
                case 2:
                    if (isThenableResolved(thrownValue)) {
                        workInProgressSuspendedReason = 0;
                        workInProgressThrownValue = null;
                        replaySuspendedUnitOfWork(lanes);
                        break;
                    }
                    lanes = function() {
                        2 === workInProgressSuspendedReason && workInProgressRoot === root && (workInProgressSuspendedReason = 7);
                        ensureRootIsScheduled(root);
                    };
                    thrownValue.then(lanes, lanes);
                    break a;
                case 3:
                    workInProgressSuspendedReason = 7;
                    break a;
                case 4:
                    workInProgressSuspendedReason = 5;
                    break a;
                case 7:
                    isThenableResolved(thrownValue) ? (workInProgressSuspendedReason = 0, workInProgressThrownValue = null, replaySuspendedUnitOfWork(lanes)) : (workInProgressSuspendedReason = 0, workInProgressThrownValue = null, throwAndUnwindWorkLoop(root, lanes, thrownValue, 7));
                    break;
                case 5:
                    var resource = null;
                    switch(workInProgress.tag){
                        case 26:
                            resource = workInProgress.memoizedState;
                        case 5:
                        case 27:
                            var hostFiber = workInProgress;
                            if (resource ? shim(resource) : 1) {
                                workInProgressSuspendedReason = 0;
                                workInProgressThrownValue = null;
                                var sibling = hostFiber.sibling;
                                if (null !== sibling) workInProgress = sibling;
                                else {
                                    var returnFiber = hostFiber.return;
                                    null !== returnFiber ? (workInProgress = returnFiber, completeUnitOfWork(returnFiber)) : workInProgress = null;
                                }
                                break b;
                            }
                    }
                    workInProgressSuspendedReason = 0;
                    workInProgressThrownValue = null;
                    throwAndUnwindWorkLoop(root, lanes, thrownValue, 5);
                    break;
                case 6:
                    workInProgressSuspendedReason = 0;
                    workInProgressThrownValue = null;
                    throwAndUnwindWorkLoop(root, lanes, thrownValue, 6);
                    break;
                case 8:
                    resetWorkInProgressStack();
                    workInProgressRootExitStatus = 6;
                    break a;
                default:
                    throw Error("Unexpected SuspendedReason. This is a bug in React.");
            }
        }
        workLoopConcurrent();
        break;
    } catch (thrownValue$135) {
        handleThrow(root, thrownValue$135);
    }
    while (1);
    lastContextDependency = currentlyRenderingFiber = null;
    ReactSharedInternals.H = prevDispatcher;
    ReactSharedInternals.A = prevAsyncDispatcher;
    executionContext = prevExecutionContext;
    if (null !== workInProgress) return 0;
    workInProgressRoot = null;
    workInProgressRootRenderLanes = 0;
    finishQueueingConcurrentUpdates();
    return workInProgressRootExitStatus;
}
function workLoopConcurrent() {
    for(; null !== workInProgress && !shouldYield();)performUnitOfWork(workInProgress);
}
function performUnitOfWork(unitOfWork) {
    var next = beginWork(unitOfWork.alternate, unitOfWork, entangledRenderLanes);
    unitOfWork.memoizedProps = unitOfWork.pendingProps;
    null === next ? completeUnitOfWork(unitOfWork) : workInProgress = next;
}
function replaySuspendedUnitOfWork(unitOfWork) {
    var next = unitOfWork;
    var current = next.alternate;
    switch(next.tag){
        case 15:
        case 0:
            next = replayFunctionComponent(current, next, next.pendingProps, next.type, void 0, workInProgressRootRenderLanes);
            break;
        case 11:
            next = replayFunctionComponent(current, next, next.pendingProps, next.type.render, next.ref, workInProgressRootRenderLanes);
            break;
        case 5:
            resetHooksOnUnwind(next);
        default:
            unwindInterruptedWork(current, next), next = workInProgress = resetWorkInProgress(next, entangledRenderLanes), next = beginWork(current, next, entangledRenderLanes);
    }
    unitOfWork.memoizedProps = unitOfWork.pendingProps;
    null === next ? completeUnitOfWork(unitOfWork) : workInProgress = next;
}
function throwAndUnwindWorkLoop(root, unitOfWork, thrownValue, suspendedReason) {
    lastContextDependency = currentlyRenderingFiber = null;
    resetHooksOnUnwind(unitOfWork);
    thenableState$1 = null;
    thenableIndexCounter$1 = 0;
    var returnFiber = unitOfWork.return;
    try {
        if (throwException(root, returnFiber, unitOfWork, thrownValue, workInProgressRootRenderLanes)) {
            workInProgressRootExitStatus = 1;
            logUncaughtError(root, createCapturedValueAtFiber(thrownValue, root.current));
            workInProgress = null;
            return;
        }
    } catch (error) {
        if (null !== returnFiber) throw workInProgress = returnFiber, error;
        workInProgressRootExitStatus = 1;
        logUncaughtError(root, createCapturedValueAtFiber(thrownValue, root.current));
        workInProgress = null;
        return;
    }
    if (unitOfWork.flags & 32768) {
        if (1 === suspendedReason) root = !0;
        else if (workInProgressRootIsPrerendering || 0 !== (workInProgressRootRenderLanes & 536870912)) root = !1;
        else if (workInProgressRootDidSkipSuspendedSiblings = root = !0, 2 === suspendedReason || 3 === suspendedReason || 6 === suspendedReason) suspendedReason = suspenseHandlerStackCursor.current, null !== suspendedReason && 13 === suspendedReason.tag && (suspendedReason.flags |= 16384);
        unwindUnitOfWork(unitOfWork, root);
    } else completeUnitOfWork(unitOfWork);
}
function completeUnitOfWork(unitOfWork) {
    var completedWork = unitOfWork;
    do {
        if (0 !== (completedWork.flags & 32768)) {
            unwindUnitOfWork(completedWork, workInProgressRootDidSkipSuspendedSiblings);
            return;
        }
        unitOfWork = completedWork.return;
        var next = completeWork(completedWork.alternate, completedWork, entangledRenderLanes);
        if (null !== next) {
            workInProgress = next;
            return;
        }
        completedWork = completedWork.sibling;
        if (null !== completedWork) {
            workInProgress = completedWork;
            return;
        }
        workInProgress = completedWork = unitOfWork;
    }while (null !== completedWork);
    0 === workInProgressRootExitStatus && (workInProgressRootExitStatus = 5);
}
function unwindUnitOfWork(unitOfWork, skipSiblings) {
    do {
        var next = unwindWork(unitOfWork.alternate, unitOfWork);
        if (null !== next) {
            next.flags &= 32767;
            workInProgress = next;
            return;
        }
        next = unitOfWork.return;
        null !== next && (next.flags |= 32768, next.subtreeFlags = 0, next.deletions = null);
        if (!skipSiblings && (unitOfWork = unitOfWork.sibling, null !== unitOfWork)) {
            workInProgress = unitOfWork;
            return;
        }
        workInProgress = unitOfWork = next;
    }while (null !== unitOfWork);
    workInProgressRootExitStatus = 6;
    workInProgress = null;
}
function commitRootImpl(root, recoverableErrors, transitions, didIncludeRenderPhaseUpdate, renderPriorityLevel, spawnedLane, updatedLanes, suspendedRetryLanes) {
    do flushPassiveEffects();
    while (null !== rootWithPendingPassiveEffects);
    if (0 !== (executionContext & 6)) throw Error("Should not already be working.");
    var finishedWork = root.finishedWork;
    didIncludeRenderPhaseUpdate = root.finishedLanes;
    if (null === finishedWork) return null;
    root.finishedWork = null;
    root.finishedLanes = 0;
    if (finishedWork === root.current) throw Error("Cannot commit the same tree as before. This error is likely caused by a bug in React. Please file an issue.");
    root.callbackNode = null;
    root.callbackPriority = 0;
    root.cancelPendingCommit = null;
    var remainingLanes = finishedWork.lanes | finishedWork.childLanes;
    remainingLanes |= concurrentlyUpdatedLanes;
    markRootFinished(root, didIncludeRenderPhaseUpdate, remainingLanes, spawnedLane, updatedLanes, suspendedRetryLanes);
    root === workInProgressRoot && (workInProgress = workInProgressRoot = null, workInProgressRootRenderLanes = 0);
    0 === (finishedWork.subtreeFlags & 10256) && 0 === (finishedWork.flags & 10256) || rootDoesHavePassiveEffects || (rootDoesHavePassiveEffects = !0, pendingPassiveEffectsRemainingLanes = remainingLanes, pendingPassiveTransitions = transitions, scheduleCallback(NormalPriority$1, function() {
        flushPassiveEffects(!0);
        return null;
    }));
    transitions = 0 !== (finishedWork.flags & 15990);
    0 !== (finishedWork.subtreeFlags & 15990) || transitions ? (transitions = ReactSharedInternals.T, ReactSharedInternals.T = null, spawnedLane = currentUpdatePriority, currentUpdatePriority = 2, updatedLanes = executionContext, executionContext |= 4, commitBeforeMutationEffects(root, finishedWork), commitMutationEffectsOnFiber(finishedWork, root), root.current = finishedWork, commitLayoutEffectOnFiber(root, finishedWork.alternate, finishedWork), requestPaint(), executionContext = updatedLanes, currentUpdatePriority = spawnedLane, ReactSharedInternals.T = transitions) : root.current = finishedWork;
    rootDoesHavePassiveEffects ? (rootDoesHavePassiveEffects = !1, rootWithPendingPassiveEffects = root, pendingPassiveEffectsLanes = didIncludeRenderPhaseUpdate) : releaseRootPooledCache(root, remainingLanes);
    remainingLanes = root.pendingLanes;
    0 === remainingLanes && (legacyErrorBoundariesThatAlreadyFailed = null);
    onCommitRoot(finishedWork.stateNode, renderPriorityLevel);
    ensureRootIsScheduled(root);
    if (null !== recoverableErrors) for(renderPriorityLevel = root.onRecoverableError, finishedWork = 0; finishedWork < recoverableErrors.length; finishedWork++)remainingLanes = recoverableErrors[finishedWork], renderPriorityLevel(remainingLanes.value, {
        componentStack: remainingLanes.stack
    });
    0 !== (pendingPassiveEffectsLanes & 3) && 0 !== root.tag && flushPassiveEffects();
    remainingLanes = root.pendingLanes;
    0 !== (didIncludeRenderPhaseUpdate & 4194218) && 0 !== (remainingLanes & 42) ? root === rootWithNestedUpdates ? nestedUpdateCount++ : (nestedUpdateCount = 0, rootWithNestedUpdates = root) : nestedUpdateCount = 0;
    flushSyncWorkAcrossRoots_impl(0, !1);
    return null;
}
function releaseRootPooledCache(root, remainingLanes) {
    0 === (root.pooledCacheLanes &= remainingLanes) && (remainingLanes = root.pooledCache, null != remainingLanes && (root.pooledCache = null, releaseCache(remainingLanes)));
}
function flushPassiveEffects() {
    if (null !== rootWithPendingPassiveEffects) {
        var root = rootWithPendingPassiveEffects, remainingLanes = pendingPassiveEffectsRemainingLanes;
        pendingPassiveEffectsRemainingLanes = 0;
        var renderPriority = lanesToEventPriority(pendingPassiveEffectsLanes), prevTransition = ReactSharedInternals.T, previousPriority = currentUpdatePriority;
        try {
            currentUpdatePriority = 32 > renderPriority ? 32 : renderPriority;
            ReactSharedInternals.T = null;
            if (null === rootWithPendingPassiveEffects) var JSCompiler_inline_result = !1;
            else {
                renderPriority = pendingPassiveTransitions;
                pendingPassiveTransitions = null;
                var root$jscomp$0 = rootWithPendingPassiveEffects, lanes = pendingPassiveEffectsLanes;
                rootWithPendingPassiveEffects = null;
                pendingPassiveEffectsLanes = 0;
                if (0 !== (executionContext & 6)) throw Error("Cannot flush passive effects while already rendering.");
                var prevExecutionContext = executionContext;
                executionContext |= 4;
                commitPassiveUnmountOnFiber(root$jscomp$0.current);
                commitPassiveMountOnFiber(root$jscomp$0, root$jscomp$0.current, lanes, renderPriority);
                executionContext = prevExecutionContext;
                flushSyncWorkAcrossRoots_impl(0, !1);
                if (injectedHook && "function" === typeof injectedHook.onPostCommitFiberRoot) try {
                    injectedHook.onPostCommitFiberRoot(rendererID, root$jscomp$0);
                } catch (err) {}
                JSCompiler_inline_result = !0;
            }
            return JSCompiler_inline_result;
        } finally{
            currentUpdatePriority = previousPriority, ReactSharedInternals.T = prevTransition, releaseRootPooledCache(root, remainingLanes);
        }
    }
    return !1;
}
function captureCommitPhaseErrorOnRoot(rootFiber, sourceFiber, error) {
    sourceFiber = createCapturedValueAtFiber(error, sourceFiber);
    sourceFiber = createRootErrorUpdate(rootFiber.stateNode, sourceFiber, 2);
    rootFiber = enqueueUpdate(rootFiber, sourceFiber, 2);
    null !== rootFiber && (markRootUpdated$1(rootFiber, 2), ensureRootIsScheduled(rootFiber));
}
function captureCommitPhaseError(sourceFiber, nearestMountedAncestor, error) {
    if (3 === sourceFiber.tag) captureCommitPhaseErrorOnRoot(sourceFiber, sourceFiber, error);
    else for(; null !== nearestMountedAncestor;){
        if (3 === nearestMountedAncestor.tag) {
            captureCommitPhaseErrorOnRoot(nearestMountedAncestor, sourceFiber, error);
            break;
        } else if (1 === nearestMountedAncestor.tag) {
            var instance = nearestMountedAncestor.stateNode;
            if ("function" === typeof nearestMountedAncestor.type.getDerivedStateFromError || "function" === typeof instance.componentDidCatch && (null === legacyErrorBoundariesThatAlreadyFailed || !legacyErrorBoundariesThatAlreadyFailed.has(instance))) {
                sourceFiber = createCapturedValueAtFiber(error, sourceFiber);
                error = createClassErrorUpdate(2);
                instance = enqueueUpdate(nearestMountedAncestor, error, 2);
                null !== instance && (initializeClassErrorUpdate(error, instance, nearestMountedAncestor, sourceFiber), markRootUpdated$1(instance, 2), ensureRootIsScheduled(instance));
                break;
            }
        }
        nearestMountedAncestor = nearestMountedAncestor.return;
    }
}
function attachPingListener(root, wakeable, lanes) {
    var pingCache = root.pingCache;
    if (null === pingCache) {
        pingCache = root.pingCache = new PossiblyWeakMap();
        var threadIDs = new Set();
        pingCache.set(wakeable, threadIDs);
    } else threadIDs = pingCache.get(wakeable), void 0 === threadIDs && (threadIDs = new Set(), pingCache.set(wakeable, threadIDs));
    threadIDs.has(lanes) || (workInProgressRootDidAttachPingListener = !0, threadIDs.add(lanes), root = pingSuspendedRoot.bind(null, root, wakeable, lanes), wakeable.then(root, root));
}
function pingSuspendedRoot(root, wakeable, pingedLanes) {
    var pingCache = root.pingCache;
    null !== pingCache && pingCache.delete(wakeable);
    root.pingedLanes |= root.suspendedLanes & pingedLanes;
    root.warmLanes &= ~pingedLanes;
    workInProgressRoot === root && (workInProgressRootRenderLanes & pingedLanes) === pingedLanes && (4 === workInProgressRootExitStatus || 3 === workInProgressRootExitStatus && (workInProgressRootRenderLanes & 62914560) === workInProgressRootRenderLanes && 300 > now() - globalMostRecentFallbackTime ? 0 === (executionContext & 2) && prepareFreshStack(root, 0) : workInProgressRootPingedLanes |= pingedLanes, workInProgressSuspendedRetryLanes === workInProgressRootRenderLanes && (workInProgressSuspendedRetryLanes = 0));
    ensureRootIsScheduled(root);
}
function retryTimedOutBoundary(boundaryFiber, retryLane) {
    0 === retryLane && (retryLane = 0 === (boundaryFiber.mode & 1) ? 2 : claimNextRetryLane());
    boundaryFiber = enqueueConcurrentRenderForLane(boundaryFiber, retryLane);
    null !== boundaryFiber && (markRootUpdated$1(boundaryFiber, retryLane), ensureRootIsScheduled(boundaryFiber));
}
function retryDehydratedSuspenseBoundary(boundaryFiber) {
    var suspenseState = boundaryFiber.memoizedState, retryLane = 0;
    null !== suspenseState && (retryLane = suspenseState.retryLane);
    retryTimedOutBoundary(boundaryFiber, retryLane);
}
function resolveRetryWakeable(boundaryFiber, wakeable) {
    var retryLane = 0;
    switch(boundaryFiber.tag){
        case 13:
            var retryCache = boundaryFiber.stateNode;
            var suspenseState = boundaryFiber.memoizedState;
            null !== suspenseState && (retryLane = suspenseState.retryLane);
            break;
        case 19:
            retryCache = boundaryFiber.stateNode;
            break;
        case 22:
            retryCache = boundaryFiber.stateNode._retryCache;
            break;
        default:
            throw Error("Pinged unknown suspense boundary type. This is probably a bug in React.");
    }
    null !== retryCache && retryCache.delete(wakeable);
    retryTimedOutBoundary(boundaryFiber, retryLane);
}
function scheduleCallback(priorityLevel, callback) {
    return scheduleCallback$3(priorityLevel, callback);
}
function FiberNode(tag, pendingProps, key, mode) {
    this.tag = tag;
    this.key = key;
    this.sibling = this.child = this.return = this.stateNode = this.type = this.elementType = null;
    this.index = 0;
    this.refCleanup = this.ref = null;
    this.pendingProps = pendingProps;
    this.dependencies = this.memoizedState = this.updateQueue = this.memoizedProps = null;
    this.mode = mode;
    this.subtreeFlags = this.flags = 0;
    this.deletions = null;
    this.childLanes = this.lanes = 0;
    this.alternate = null;
}
function createFiberImplClass(tag, pendingProps, key, mode) {
    return new FiberNode(tag, pendingProps, key, mode);
}
function shouldConstruct(Component) {
    Component = Component.prototype;
    return !(!Component || !Component.isReactComponent);
}
function createWorkInProgress(current, pendingProps) {
    var workInProgress = current.alternate;
    null === workInProgress ? (workInProgress = createFiberImplClass(current.tag, pendingProps, current.key, current.mode), workInProgress.elementType = current.elementType, workInProgress.type = current.type, workInProgress.stateNode = current.stateNode, workInProgress.alternate = current, current.alternate = workInProgress) : (workInProgress.pendingProps = pendingProps, workInProgress.type = current.type, workInProgress.flags = 0, workInProgress.subtreeFlags = 0, workInProgress.deletions = null);
    workInProgress.flags = current.flags & 31457280;
    workInProgress.childLanes = current.childLanes;
    workInProgress.lanes = current.lanes;
    workInProgress.child = current.child;
    workInProgress.memoizedProps = current.memoizedProps;
    workInProgress.memoizedState = current.memoizedState;
    workInProgress.updateQueue = current.updateQueue;
    pendingProps = current.dependencies;
    workInProgress.dependencies = null === pendingProps ? null : {
        lanes: pendingProps.lanes,
        firstContext: pendingProps.firstContext
    };
    workInProgress.sibling = current.sibling;
    workInProgress.index = current.index;
    workInProgress.ref = current.ref;
    workInProgress.refCleanup = current.refCleanup;
    return workInProgress;
}
function resetWorkInProgress(workInProgress, renderLanes) {
    workInProgress.flags &= 31457282;
    var current = workInProgress.alternate;
    null === current ? (workInProgress.childLanes = 0, workInProgress.lanes = renderLanes, workInProgress.child = null, workInProgress.subtreeFlags = 0, workInProgress.memoizedProps = null, workInProgress.memoizedState = null, workInProgress.updateQueue = null, workInProgress.dependencies = null, workInProgress.stateNode = null) : (workInProgress.childLanes = current.childLanes, workInProgress.lanes = current.lanes, workInProgress.child = current.child, workInProgress.subtreeFlags = 0, workInProgress.deletions = null, workInProgress.memoizedProps = current.memoizedProps, workInProgress.memoizedState = current.memoizedState, workInProgress.updateQueue = current.updateQueue, workInProgress.type = current.type, renderLanes = current.dependencies, workInProgress.dependencies = null === renderLanes ? null : {
        lanes: renderLanes.lanes,
        firstContext: renderLanes.firstContext
    });
    return workInProgress;
}
function createFiberFromTypeAndProps(type, key, pendingProps, owner, mode, lanes) {
    var fiberTag = 0;
    owner = type;
    if ("function" === typeof type) shouldConstruct(type) && (fiberTag = 1);
    else if ("string" === typeof type) fiberTag = 5;
    else a: switch(type){
        case REACT_FRAGMENT_TYPE:
            return createFiberFromFragment(pendingProps.children, mode, lanes, key);
        case REACT_STRICT_MODE_TYPE:
            fiberTag = 8;
            mode |= 8;
            0 !== (mode & 1) && (mode |= 16);
            break;
        case REACT_PROFILER_TYPE:
            return type = createFiberImplClass(12, pendingProps, key, mode | 2), type.elementType = REACT_PROFILER_TYPE, type.lanes = lanes, type;
        case REACT_SUSPENSE_TYPE:
            return type = createFiberImplClass(13, pendingProps, key, mode), type.elementType = REACT_SUSPENSE_TYPE, type.lanes = lanes, type;
        case REACT_SUSPENSE_LIST_TYPE:
            return type = createFiberImplClass(19, pendingProps, key, mode), type.elementType = REACT_SUSPENSE_LIST_TYPE, type.lanes = lanes, type;
        case REACT_OFFSCREEN_TYPE:
            return createFiberFromOffscreen(pendingProps, mode, lanes, key);
        default:
            if ("object" === typeof type && null !== type) switch(type.$$typeof){
                case REACT_PROVIDER_TYPE:
                case REACT_CONTEXT_TYPE:
                    fiberTag = 10;
                    break a;
                case REACT_CONSUMER_TYPE:
                    fiberTag = 9;
                    break a;
                case REACT_FORWARD_REF_TYPE:
                    fiberTag = 11;
                    break a;
                case REACT_MEMO_TYPE:
                    fiberTag = 14;
                    break a;
                case REACT_LAZY_TYPE:
                    fiberTag = 16;
                    owner = null;
                    break a;
            }
            fiberTag = 29;
            pendingProps = Error("Element type is invalid: expected a string (for built-in components) or a class/function (for composite components) but got: " + ((null === type ? "null" : typeof type) + "."));
            owner = null;
    }
    key = createFiberImplClass(fiberTag, pendingProps, key, mode);
    key.elementType = type;
    key.type = owner;
    key.lanes = lanes;
    return key;
}
function createFiberFromFragment(elements, mode, lanes, key) {
    elements = createFiberImplClass(7, elements, key, mode);
    elements.lanes = lanes;
    return elements;
}
function createFiberFromOffscreen(pendingProps, mode, lanes, key) {
    pendingProps = createFiberImplClass(22, pendingProps, key, mode);
    pendingProps.elementType = REACT_OFFSCREEN_TYPE;
    pendingProps.lanes = lanes;
    var primaryChildInstance = {
        _visibility: 1,
        _pendingVisibility: 1,
        _pendingMarkers: null,
        _retryCache: null,
        _transitions: null,
        _current: null,
        detach: function() {
            var fiber = primaryChildInstance._current;
            if (null === fiber) throw Error("Calling Offscreen.detach before instance handle has been set.");
            if (0 === (primaryChildInstance._pendingVisibility & 2)) {
                var root = enqueueConcurrentRenderForLane(fiber, 2);
                null !== root && (primaryChildInstance._pendingVisibility |= 2, scheduleUpdateOnFiber(root, fiber, 2));
            }
        },
        attach: function() {
            var fiber = primaryChildInstance._current;
            if (null === fiber) throw Error("Calling Offscreen.detach before instance handle has been set.");
            if (0 !== (primaryChildInstance._pendingVisibility & 2)) {
                var root = enqueueConcurrentRenderForLane(fiber, 2);
                null !== root && (primaryChildInstance._pendingVisibility &= -3, scheduleUpdateOnFiber(root, fiber, 2));
            }
        }
    };
    pendingProps.stateNode = primaryChildInstance;
    return pendingProps;
}
function createFiberFromText(content, mode, lanes) {
    content = createFiberImplClass(6, content, null, mode);
    content.lanes = lanes;
    return content;
}
function createFiberFromPortal(portal, mode, lanes) {
    mode = createFiberImplClass(4, null !== portal.children ? portal.children : [], portal.key, mode);
    mode.lanes = lanes;
    mode.stateNode = {
        containerInfo: portal.containerInfo,
        pendingChildren: null,
        implementation: portal.implementation
    };
    return mode;
}
function FiberRootNode(containerInfo, tag, hydrate, identifierPrefix, onUncaughtError, onCaughtError, onRecoverableError, formState) {
    this.tag = tag;
    this.containerInfo = containerInfo;
    this.finishedWork = this.pingCache = this.current = this.pendingChildren = null;
    this.timeoutHandle = -1;
    this.callbackNode = this.next = this.pendingContext = this.context = this.cancelPendingCommit = null;
    this.callbackPriority = 0;
    this.expirationTimes = createLaneMap(-1);
    this.entangledLanes = this.shellSuspendCounter = this.errorRecoveryDisabledLanes = this.finishedLanes = this.expiredLanes = this.warmLanes = this.pingedLanes = this.suspendedLanes = this.pendingLanes = 0;
    this.entanglements = createLaneMap(0);
    this.hiddenUpdates = createLaneMap(null);
    this.identifierPrefix = identifierPrefix;
    this.onUncaughtError = onUncaughtError;
    this.onCaughtError = onCaughtError;
    this.onRecoverableError = onRecoverableError;
    this.pooledCache = null;
    this.pooledCacheLanes = 0;
    this.formState = formState;
    this.incompleteTransitions = new Map();
}
function createPortal$1(children, containerInfo, implementation) {
    var key = 3 < arguments.length && void 0 !== arguments[3] ? arguments[3] : null;
    return {
        $$typeof: REACT_PORTAL_TYPE,
        key: null == key ? null : "" + key,
        children: children,
        containerInfo: containerInfo,
        implementation: implementation
    };
}
function findHostInstance(component) {
    var fiber = component._reactInternals;
    if (void 0 === fiber) {
        if ("function" === typeof component.render) throw Error("Unable to find node on an unmounted component.");
        component = Object.keys(component).join(",");
        throw Error("Argument appears to not be a ReactComponent. Keys: " + component);
    }
    component = findCurrentFiberUsingSlowPath(fiber);
    component = null !== component ? findCurrentHostFiberImpl(component) : null;
    return null === component ? null : getPublicInstance(component.stateNode);
}
function updateContainer(element, container, parentComponent, callback) {
    parentComponent = container.current;
    var lane = requestUpdateLane(parentComponent);
    null === container.context ? container.context = emptyContextObject : container.pendingContext = emptyContextObject;
    container = createUpdate(lane);
    container.payload = {
        element: element
    };
    callback = void 0 === callback ? null : callback;
    null !== callback && (container.callback = callback);
    element = enqueueUpdate(parentComponent, container, lane);
    null !== element && (scheduleUpdateOnFiber(element, parentComponent, lane), entangleTransitions(element, parentComponent, lane));
    return lane;
}
var isomorphicReactPackageVersion = React.version;
if ("19.0.0" !== isomorphicReactPackageVersion) throw Error('Incompatible React versions: The "react" and "react-native-renderer" packages must have the exact same version. Instead got:\n  - react:                  ' + (isomorphicReactPackageVersion + "\n  - react-native-renderer:  19.0.0\nLearn more: https://react.dev/warnings/version-mismatch"));
if ("function" !== typeof ReactNativePrivateInterface.ReactFiberErrorDialog.showErrorDialog) throw Error("Expected ReactFiberErrorDialog.showErrorDialog to be a function.");
function nativeOnUncaughtError(error, errorInfo) {
    !1 !== ReactNativePrivateInterface.ReactFiberErrorDialog.showErrorDialog({
        errorBoundary: null,
        error: error,
        componentStack: null != errorInfo.componentStack ? errorInfo.componentStack : ""
    }) && reportGlobalError(error);
}
function nativeOnCaughtError(error, errorInfo) {
    !1 !== ReactNativePrivateInterface.ReactFiberErrorDialog.showErrorDialog({
        errorBoundary: errorInfo.errorBoundary,
        error: error,
        componentStack: null != errorInfo.componentStack ? errorInfo.componentStack : ""
    }) && console.error(error);
}
function unmountComponentAtNode(containerTag) {
    var root = roots.get(containerTag);
    root && updateContainer(null, root, null, function() {
        roots.delete(containerTag);
    });
}
batchedUpdatesImpl = function(fn, a) {
    var prevExecutionContext = executionContext;
    executionContext |= 1;
    try {
        return fn(a);
    } finally{
        executionContext = prevExecutionContext, 0 === executionContext && (workInProgressRootRenderTargetTime = now() + 500, flushSyncWorkAcrossRoots_impl(0, !0));
    }
};
var roots = new Map(), internals$jscomp$inline_1213 = {
    bundleType: 0,
    version: "19.0.0",
    rendererPackageName: "react-native-renderer",
    currentDispatcherRef: ReactSharedInternals,
    findFiberByHostInstance: getInstanceFromTag,
    reconcilerVersion: "19.0.0"
};
null !== extraDevToolsConfig && (internals$jscomp$inline_1213.rendererConfig = extraDevToolsConfig);
if ("undefined" !== typeof __REACT_DEVTOOLS_GLOBAL_HOOK__) {
    var hook$jscomp$inline_1551 = __REACT_DEVTOOLS_GLOBAL_HOOK__;
    if (!hook$jscomp$inline_1551.isDisabled && hook$jscomp$inline_1551.supportsFiber) try {
        rendererID = hook$jscomp$inline_1551.inject(internals$jscomp$inline_1213), injectedHook = hook$jscomp$inline_1551;
    } catch (err) {}
}
exports.createPortal = function(children, containerTag) {
    return createPortal$1(children, containerTag, null, 2 < arguments.length && void 0 !== arguments[2] ? arguments[2] : null);
};
exports.dispatchCommand = function(handle, command, args) {
    var nativeTag = null != handle._nativeTag ? handle._nativeTag : ReactNativePrivateInterface.getNativeTagFromPublicInstance(handle);
    null != nativeTag && (handle = ReactNativePrivateInterface.getNodeFromPublicInstance(handle), null != handle ? nativeFabricUIManager.dispatchCommand(handle, command, args) : ReactNativePrivateInterface.UIManager.dispatchViewManagerCommand(nativeTag, command, args));
};
exports.findHostInstance_DEPRECATED = function(componentOrHandle) {
    return null == componentOrHandle ? null : componentOrHandle.canonical && componentOrHandle.canonical.publicInstance ? componentOrHandle.canonical.publicInstance : componentOrHandle._nativeTag ? componentOrHandle : findHostInstance(componentOrHandle);
};
exports.findNodeHandle = function(componentOrHandle) {
    if (null == componentOrHandle) return null;
    if ("number" === typeof componentOrHandle) return componentOrHandle;
    if (componentOrHandle._nativeTag) return componentOrHandle._nativeTag;
    if (null != componentOrHandle.canonical && null != componentOrHandle.canonical.nativeTag) return componentOrHandle.canonical.nativeTag;
    var nativeTag = ReactNativePrivateInterface.getNativeTagFromPublicInstance(componentOrHandle);
    if (nativeTag) return nativeTag;
    componentOrHandle = findHostInstance(componentOrHandle);
    return null == componentOrHandle ? componentOrHandle : null != componentOrHandle._nativeTag ? componentOrHandle._nativeTag : ReactNativePrivateInterface.getNativeTagFromPublicInstance(componentOrHandle);
};
exports.getInspectorDataForInstance = getInspectorDataForInstance;
exports.isChildPublicInstance = function() {
    throw Error("isChildPublicInstance() is not available in production.");
};
exports.render = function(element, containerTag, callback, options) {
    var root = roots.get(containerTag);
    if (!root) {
        root = nativeOnUncaughtError;
        var onCaughtError = nativeOnCaughtError, onRecoverableError = defaultOnRecoverableError;
        options && void 0 !== options.onUncaughtError && (root = options.onUncaughtError);
        options && void 0 !== options.onCaughtError && (onCaughtError = options.onCaughtError);
        options && void 0 !== options.onRecoverableError && (onRecoverableError = options.onRecoverableError);
        options = new FiberRootNode(containerTag, 0, !1, "", root, onCaughtError, onRecoverableError, null);
        root = createFiberImplClass(3, null, null, 0);
        options.current = root;
        root.stateNode = options;
        onCaughtError = createCache();
        onCaughtError.refCount++;
        options.pooledCache = onCaughtError;
        onCaughtError.refCount++;
        root.memoizedState = {
            element: null,
            isDehydrated: !1,
            cache: onCaughtError
        };
        initializeUpdateQueue(root);
        root = options;
        roots.set(containerTag, root);
    }
    updateContainer(element, root, null, callback);
    a: if (element = root.current, element.child) switch(element.child.tag){
        case 27:
        case 5:
            element = getPublicInstance(element.child.stateNode);
            break a;
        default:
            element = element.child.stateNode;
    }
    else element = null;
    return element;
};
exports.sendAccessibilityEvent = function(handle, eventType) {
    var nativeTag = null != handle._nativeTag ? handle._nativeTag : ReactNativePrivateInterface.getNativeTagFromPublicInstance(handle);
    null != nativeTag && (handle = ReactNativePrivateInterface.getNodeFromPublicInstance(handle), null != handle ? nativeFabricUIManager.sendAccessibilityEvent(handle, eventType) : ReactNativePrivateInterface.legacySendAccessibilityEvent(nativeTag, eventType));
};
exports.unmountComponentAtNode = unmountComponentAtNode;
exports.unmountComponentAtNodeAndRemoveContainer = function(containerTag) {
    unmountComponentAtNode(containerTag);
    ReactNativePrivateInterface.UIManager.removeRootView(containerTag);
};
exports.unstable_batchedUpdates = batchedUpdates$1;


}),
12262: (function (__unused_webpack_module, exports, __webpack_require__) {
"use strict";
var __webpack_unused_export__;
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * @noformat
 * @nolint
 *      
 * @generated SignedSource<<cf323fc5ca893bab5669c7d321660412>>
 */ 
__webpack_unused_export__ = ({
    value: true
});
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return _default;
    }
}));
var _ReactNativePrivateInterface = __webpack_require__(89603);
var ReactFabric;
if (false) {} else {
    ReactFabric = __webpack_require__(97257);
}
__webpack_require__.g.RN$stopSurface = ReactFabric.stopSurface;
if (__webpack_require__.g.RN$Bridgeless !== true) {
    _ReactNativePrivateInterface.BatchedBridge.registerCallableModule('ReactFabric', ReactFabric);
}
var _default = ReactFabric;


}),
1105: (function (__unused_webpack_module, exports, __webpack_require__) {
"use strict";
var __webpack_unused_export__;
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * @noformat
 * @nolint
 *      
 * @generated SignedSource<<8f46fdc9267fcc4fdc9e76842fe24066>>
 */ 
__webpack_unused_export__ = ({
    value: true
});
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return _default;
    }
}));
var ReactNative;
if (false) {} else {
    ReactNative = __webpack_require__(43530);
}
var _default = ReactNative;


}),
25232: (function (__unused_webpack_module, exports, __webpack_require__) {
"use strict";
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * @noformat
 * @nolint
 *       strict-local
 * @generated SignedSource<<83073425aa3f71ced2c8c51f25a25938>>
 */ 
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: Object.getOwnPropertyDescriptor(all, name).get
    });
}
_export(exports, {
    get customBubblingEventTypes () {
        return customBubblingEventTypes;
    },
    get customDirectEventTypes () {
        return customDirectEventTypes;
    },
    get get () {
        return get;
    },
    get register () {
        return register;
    }
});
var _interop_require_default = __webpack_require__(66705);
var _invariant = /*#__PURE__*/ _interop_require_default._(__webpack_require__(56481));
var customBubblingEventTypes = {};
var customDirectEventTypes = {};
var viewConfigCallbacks = new Map();
var viewConfigs = new Map();
function processEventTypes(viewConfig) {
    var bubblingEventTypes = viewConfig.bubblingEventTypes, directEventTypes = viewConfig.directEventTypes;
    if (false) { var topLevelType }
    if (bubblingEventTypes != null) {
        for(var topLevelType1 in bubblingEventTypes){
            if (customBubblingEventTypes[topLevelType1] == null) {
                customBubblingEventTypes[topLevelType1] = bubblingEventTypes[topLevelType1];
            }
        }
    }
    if (directEventTypes != null) {
        for(var topLevelType2 in directEventTypes){
            if (customDirectEventTypes[topLevelType2] == null) {
                customDirectEventTypes[topLevelType2] = directEventTypes[topLevelType2];
            }
        }
    }
}
function register(name, callback) {
    (0, _invariant.default)(!viewConfigCallbacks.has(name), 'Tried to register two views with the same name %s', name);
    (0, _invariant.default)(typeof callback === 'function', 'View config getter callback for component `%s` must be a function (received `%s`)', name, callback === null ? 'null' : typeof callback);
    viewConfigCallbacks.set(name, callback);
    return name;
}
function get(name) {
    var viewConfig = viewConfigs.get(name);
    if (viewConfig == null) {
        var callback = viewConfigCallbacks.get(name);
        if (typeof callback !== 'function') {
            (0, _invariant.default)(false, 'View config getter callback for component `%s` must be a function (received `%s`).%s', name, callback === null ? 'null' : typeof callback, // $FlowFixMe[recursive-definition]
            typeof name[0] === 'string' && /[a-z]/.test(name[0]) ? ' Make sure to start component names with a capital letter.' : '');
        }
        viewConfig = callback();
        (0, _invariant.default)(viewConfig, 'View config not found for component `%s`', name);
        processEventTypes(viewConfig);
        viewConfigs.set(name, viewConfig);
        // Clear the callback after the config is set so that
        // we don't mask any errors during registration.
        viewConfigCallbacks.set(name, null);
    }
    return viewConfig;
}


}),
35281: (function (__unused_webpack_module, exports, __webpack_require__) {
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * @format
 *       strict-local
 */ /** The actual type of the opaque NativeColorValue on iOS platform */ Object.defineProperty(exports, "__esModule", ({
    value: true
}));
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: Object.getOwnPropertyDescriptor(all, name).get
    });
}
_export(exports, {
    get DynamicColorIOSPrivate () {
        return DynamicColorIOSPrivate;
    },
    get PlatformColor () {
        return PlatformColor;
    },
    get normalizeColorObject () {
        return normalizeColorObject;
    },
    get processColorObject () {
        return processColorObject;
    }
});
var PlatformColor = (...names)=>{
    // $FlowExpectedError[incompatible-return] LocalNativeColorValue is the iOS LocalNativeColorValue type
    return {
        semantic: names
    };
};
var DynamicColorIOSPrivate = (tuple)=>{
    return {
        dynamic: {
            light: tuple.light,
            dark: tuple.dark,
            highContrastLight: tuple.highContrastLight,
            highContrastDark: tuple.highContrastDark
        }
    };
};
var _normalizeColorObject = (color)=>{
    if ('semantic' in color) {
        // an ios semantic color
        return color;
    } else if ('dynamic' in color && color.dynamic !== undefined) {
        var normalizeColor = __webpack_require__(12990);
        // a dynamic, appearance aware color
        var dynamic = color.dynamic;
        var dynamicColor = {
            dynamic: {
                // $FlowFixMe[incompatible-use]
                light: normalizeColor(dynamic.light),
                // $FlowFixMe[incompatible-use]
                dark: normalizeColor(dynamic.dark),
                // $FlowFixMe[incompatible-use]
                highContrastLight: normalizeColor(dynamic.highContrastLight),
                // $FlowFixMe[incompatible-use]
                highContrastDark: normalizeColor(dynamic.highContrastDark)
            }
        };
        return dynamicColor;
    }
    return null;
};
var normalizeColorObject = _normalizeColorObject;
var _processColorObject = (color)=>{
    if ('dynamic' in color && color.dynamic != null) {
        var processColor = (__webpack_require__(23865)/* ["default"] */["default"]);
        var dynamic = color.dynamic;
        var dynamicColor = {
            dynamic: {
                // $FlowFixMe[incompatible-use]
                light: processColor(dynamic.light),
                // $FlowFixMe[incompatible-use]
                dark: processColor(dynamic.dark),
                // $FlowFixMe[incompatible-use]
                highContrastLight: processColor(dynamic.highContrastLight),
                // $FlowFixMe[incompatible-use]
                highContrastDark: processColor(dynamic.highContrastDark)
            }
        };
        return dynamicColor;
    }
    return color;
};
var processColorObject = _processColorObject;


}),
5938: (function (module, exports, __webpack_require__) {
"use strict";
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 *      
 * @format
 */ 
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
var _interop_require_default = __webpack_require__(66705);
var _object_spread = __webpack_require__(36192);
var _object_spread_props = __webpack_require__(83590);
var _composeStyles = /*#__PURE__*/ _interop_require_default._(__webpack_require__(90285));
var ReactNativeStyleAttributes = __webpack_require__(34650);
var PixelRatio = (__webpack_require__(52712)/* ["default"] */["default"]);
var flatten = __webpack_require__(69490);
/**
 * This type should be used as the type for anything that is a color. It is
 * most useful when using DynamicColorIOS which can be a string or a dynamic
 * color object.
 *
 * type props = {backgroundColor: ColorValue};
 */ /**
 * This type should be used as the type for a prop that is passed through
 * to a <View>'s `style` prop. This ensures call sites of the component
 * can't pass styles that View doesn't support such as `fontSize`.`
 *
 * type Props = {style: ViewStyleProp}
 * const MyComponent = (props: Props) => <View style={props.style} />
 */ /**
 * This type should be used as the type for a prop that is passed through
 * to a <Text>'s `style` prop. This ensures call sites of the component
 * can't pass styles that Text doesn't support such as `resizeMode`.`
 *
 * type Props = {style: TextStyleProp}
 * const MyComponent = (props: Props) => <Text style={props.style} />
 */ /**
 * This type should be used as the type for a prop that is passed through
 * to an <Image>'s `style` prop. This ensures call sites of the component
 * can't pass styles that Image doesn't support such as `fontSize`.`
 *
 * type Props = {style: ImageStyleProp}
 * const MyComponent = (props: Props) => <Image style={props.style} />
 */ /**
 * WARNING: You probably shouldn't be using this type. This type
 * is similar to the ones above except it allows styles that are accepted
 * by all of View, Text, or Image. It is therefore very unsafe to pass this
 * through to an underlying component. Using this is almost always a mistake
 * and using one of the other more restrictive types is likely the right choice.
 */ /**
 * Utility type for getting the values for specific style keys.
 *
 * The following is bad because position is more restrictive than 'string':
 * ```
 * type Props = {position: string};
 * ```
 *
 * You should use the following instead:
 *
 * ```
 * type Props = {position: TypeForStyleKey<'position'>};
 * ```
 *
 * This will correctly give you the type 'absolute' | 'relative'
 */ /**
 * This type is an object of the different possible style
 * properties that can be specified for View.
 *
 * Note that this isn't a safe way to type a style prop for a component as
 * results from StyleSheet.create return an internal identifier, not
 * an object of styles.
 *
 * If you want to type the style prop of a function,
 * consider using ViewStyleProp.
 *
 * A reasonable usage of this type is for helper functions that return an
 * object of styles to pass to a View that can't be precomputed with
 * StyleSheet.create.
 */ /**
 * This type is an object of the different possible style
 * properties that can be specified for Text.
 *
 * Note that this isn't a safe way to type a style prop for a component as
 * results from StyleSheet.create return an internal identifier, not
 * an object of styles.
 *
 * If you want to type the style prop of a function,
 * consider using TextStyleProp.
 *
 * A reasonable usage of this type is for helper functions that return an
 * object of styles to pass to a Text that can't be precomputed with
 * StyleSheet.create.
 */ /**
 * This type is an object of the different possible style
 * properties that can be specified for Image.
 *
 * Note that this isn't a safe way to type a style prop for a component as
 * results from StyleSheet.create return an internal identifier, not
 * an object of styles.
 *
 * If you want to type the style prop of a function,
 * consider using ImageStyleProp.
 *
 * A reasonable usage of this type is for helper functions that return an
 * object of styles to pass to an Image that can't be precomputed with
 * StyleSheet.create.
 */ /**
 * WARNING: You probably shouldn't be using this type. This type is an object
 * with all possible style keys and their values. Note that this isn't
 * a safe way to type a style prop for a component as results from
 * StyleSheet.create return an internal identifier, not an object of styles.
 *
 * If you want to type the style prop of a function, consider using
 * ViewStyleProp, TextStyleProp, or ImageStyleProp.
 *
 * This should only be used by very core utilities that operate on an object
 * containing any possible style value.
 */ var hairlineWidth = PixelRatio.roundToNearestPixel(0.4);
if (hairlineWidth === 0) {
    hairlineWidth = 1 / PixelRatio.get();
}
var absoluteFill = {
    position: 'absolute',
    left: 0,
    right: 0,
    top: 0,
    bottom: 0
};
if (false) {}
/**
 * A StyleSheet is an abstraction similar to CSS StyleSheets
 *
 * Create a new StyleSheet:
 *
 * ```
 * const styles = StyleSheet.create({
 *   container: {
 *     borderRadius: 4,
 *     borderWidth: 0.5,
 *     borderColor: '#d6d7da',
 *   },
 *   title: {
 *     fontSize: 19,
 *     fontWeight: 'bold',
 *   },
 *   activeTitle: {
 *     color: 'red',
 *   },
 * });
 * ```
 *
 * Use a StyleSheet:
 *
 * ```
 * <View style={styles.container}>
 *   <Text style={[styles.title, this.props.isActive && styles.activeTitle]} />
 * </View>
 * ```
 *
 * Code quality:
 *
 *  - By moving styles away from the render function, you're making the code
 *    easier to understand.
 *  - Naming the styles is a good way to add meaning to the low level components
 *  in the render function, and encourage reuse.
 *  - In most IDEs, using `StyleSheet.create()` will offer static type checking
 *  and suggestions to help you write valid styles.
 *
 */ module.exports = {
    /**
   * This is defined as the width of a thin line on the platform. It can be
   * used as the thickness of a border or division between two elements.
   * Example:
   * ```
   *   {
   *     borderBottomColor: '#bbb',
   *     borderBottomWidth: StyleSheet.hairlineWidth
   *   }
   * ```
   *
   * This constant will always be a round number of pixels (so a line defined
   * by it look crisp) and will try to match the standard width of a thin line
   * on the underlying platform. However, you should not rely on it being a
   * constant size, because on different platforms and screen densities its
   * value may be calculated differently.
   *
   * A line with hairline width may not be visible if your simulator is downscaled.
   */ hairlineWidth,
    /**
   * A very common pattern is to create overlays with position absolute and zero positioning,
   * so `absoluteFill` can be used for convenience and to reduce duplication of these repeated
   * styles.
   */ absoluteFill: absoluteFill,
    /**
   * Sometimes you may want `absoluteFill` but with a couple tweaks - `absoluteFillObject` can be
   * used to create a customized entry in a `StyleSheet`, e.g.:
   *
   *   const styles = StyleSheet.create({
   *     wrapper: {
   *       ...StyleSheet.absoluteFillObject,
   *       top: 10,
   *       backgroundColor: 'transparent',
   *     },
   *   });
   */ absoluteFillObject: absoluteFill,
    /**
   * Combines two styles such that `style2` will override any styles in `style1`.
   * If either style is falsy, the other one is returned without allocating an
   * array, saving allocations and maintaining reference equality for
   * PureComponent checks.
   */ compose: _composeStyles.default,
    /**
   * Flattens an array of style objects, into one aggregated style object.
   *
   * Example:
   * ```
   * const styles = StyleSheet.create({
   *   listItem: {
   *     flex: 1,
   *     fontSize: 16,
   *     color: 'white'
   *   },
   *   selectedListItem: {
   *     color: 'green'
   *   }
   * });
   *
   * StyleSheet.flatten([styles.listItem, styles.selectedListItem])
   * // returns { flex: 1, fontSize: 16, color: 'green' }
   * ```
   */ flatten,
    /**
   * WARNING: EXPERIMENTAL. Breaking changes will probably happen a lot and will
   * not be reliably announced. The whole thing might be deleted, who knows? Use
   * at your own risk.
   *
   * Sets a function to use to pre-process a style property value. This is used
   * internally to process color and transform values. You should not use this
   * unless you really know what you are doing and have exhausted other options.
   */ setStyleAttributePreprocessor (property, process) {
        var _ReactNativeStyleAttributes_property, _ReactNativeStyleAttributes_property1;
        var value;
        if (ReactNativeStyleAttributes[property] === true) {
            value = {
                process
            };
        } else if (typeof ReactNativeStyleAttributes[property] === 'object') {
            value = _object_spread_props._(_object_spread._({}, ReactNativeStyleAttributes[property]), {
                process
            });
        } else {
            console.error(`${property} is not a valid style attribute`);
            return;
        }
        if (false) {}
        ReactNativeStyleAttributes[property] = value;
    },
    /**
   * An identity function for creating style sheets.
   */ // $FlowFixMe[unsupported-variance-annotation]
    create (obj) {
        // TODO: This should return S as the return type. But first,
        // we need to codemod all the callsites that are typing this
        // return value as a number (even though it was opaque).
        if (false) { var key }
        return obj;
    }
};


}),
69490: (function (module) {
"use strict";
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 *       strict-local
 * @format
 */ 
function flattenStyle(style) {
    if (style === null || typeof style !== 'object') {
        return undefined;
    }
    if (!Array.isArray(style)) {
        // $FlowFixMe[incompatible-return]
        return style;
    }
    var result = {};
    for(var i = 0, styleLength = style.length; i < styleLength; ++i){
        // $FlowFixMe[underconstrained-implicit-instantiation]
        var computedStyle = flattenStyle(style[i]);
        if (computedStyle) {
            // $FlowFixMe[invalid-in-rhs]
            for(var key in computedStyle){
                // $FlowFixMe[incompatible-use]
                // $FlowFixMe[invalid-computed-prop]
                result[key] = computedStyle[key];
            }
        }
    }
    // $FlowFixMe[incompatible-return]
    return result;
}
module.exports = flattenStyle;


}),
12990: (function (module, exports, __webpack_require__) {
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * @format
 *       strict-local
 */ /* eslint no-bitwise: 0 */ Object.defineProperty(exports, "__esModule", ({
    value: true
}));
var _interop_require_default = __webpack_require__(66705);
var _normalizecolors = /*#__PURE__*/ _interop_require_default._(__webpack_require__(98844));
function normalizeColor(color) {
    if (typeof color === 'object' && color != null) {
        var normalizeColorObject = (__webpack_require__(35281)/* .normalizeColorObject */.normalizeColorObject);
        var normalizedColor = normalizeColorObject(color);
        if (normalizedColor != null) {
            return normalizedColor;
        }
    }
    if (typeof color === 'string' || typeof color === 'number') {
        return (0, _normalizecolors.default)(color);
    }
}
module.exports = normalizeColor;


}),
5304: (function (module, __unused_webpack_exports, __webpack_require__) {
"use strict";
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * @format
 *       strict-local
 */ 
var invariant = __webpack_require__(56481);
function processAspectRatio(aspectRatio) {
    if (typeof aspectRatio === 'number') {
        return aspectRatio;
    }
    if (typeof aspectRatio !== 'string') {
        if (false) {}
        return;
    }
    var matches = aspectRatio.split('/').map((s)=>s.trim());
    if (matches.includes('auto')) {
        if (false) {}
        return;
    }
    var hasNonNumericValues = matches.some((n)=>Number.isNaN(Number(n)));
    if (false) {}
    if (hasNonNumericValues) {
        return;
    }
    if (matches.length === 2) {
        return Number(matches[0]) / Number(matches[1]);
    }
    return Number(matches[0]);
}
module.exports = processAspectRatio;


}),
33518: (function (__unused_webpack_module, exports, __webpack_require__) {
"use strict";
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * @format
 *       strict-local
 */ 
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return processBackgroundImage;
    }
}));
var _sliced_to_array = __webpack_require__(78474);
var processColor = (__webpack_require__(23865)/* ["default"] */["default"]);
var DIRECTION_KEYWORD_REGEX = /^to\s+(?:top|bottom|left|right)(?:\s+(?:top|bottom|left|right))?/i;
var ANGLE_UNIT_REGEX = /^([+-]?\d*\.?\d+)(deg|grad|rad|turn)$/i;
var DEFAULT_DIRECTION = {
    type: 'angle',
    value: 180
};
function processBackgroundImage(backgroundImage) {
    var result = [];
    if (backgroundImage == null) {
        return result;
    }
    if (typeof backgroundImage === 'string') {
        result = parseCSSLinearGradient(backgroundImage.replace(/\n/g, ' '));
    } else if (Array.isArray(backgroundImage)) {
        for (var bgImage of backgroundImage){
            var processedColorStops = [];
            for(var index = 0; index < bgImage.colorStops.length; index++){
                var colorStop = bgImage.colorStops[index];
                var processedColor = processColor(colorStop.color);
                if (processedColor == null) {
                    // If a color is invalid, return an empty array and do not apply gradient. Same as web.
                    return [];
                }
                if (colorStop.positions != null && colorStop.positions.length > 0) {
                    for (var position of colorStop.positions){
                        if (position.endsWith('%')) {
                            processedColorStops.push({
                                color: processedColor,
                                position: parseFloat(position) / 100
                            });
                        } else {
                            // If a position is invalid, return an empty array and do not apply gradient. Same as web.
                            return [];
                        }
                    }
                } else {
                    processedColorStops.push({
                        color: processedColor,
                        position: null
                    });
                }
            }
            var direction = DEFAULT_DIRECTION;
            var bgDirection = bgImage.direction != null ? bgImage.direction.toLowerCase() : null;
            if (bgDirection != null) {
                if (ANGLE_UNIT_REGEX.test(bgDirection)) {
                    var parsedAngle = getAngleInDegrees(bgDirection);
                    if (parsedAngle != null) {
                        direction = {
                            type: 'angle',
                            value: parsedAngle
                        };
                    } else {
                        // If an angle is invalid, return an empty array and do not apply any gradient. Same as web.
                        return [];
                    }
                } else if (DIRECTION_KEYWORD_REGEX.test(bgDirection)) {
                    var parsedDirection = getDirectionForKeyword(bgDirection);
                    if (parsedDirection != null) {
                        direction = parsedDirection;
                    } else {
                        // If a direction is invalid, return an empty array and do not apply any gradient. Same as web.
                        return [];
                    }
                } else {
                    // If a direction is invalid, return an empty array and do not apply any gradient. Same as web.
                    return [];
                }
            }
            var fixedColorStops = getFixedColorStops(processedColorStops);
            result = result.concat({
                type: 'linearGradient',
                direction,
                colorStops: fixedColorStops
            });
        }
    }
    return result;
}
function parseCSSLinearGradient(cssString) {
    var gradients = [];
    var match;
    // matches one or more linear-gradient functions in CSS
    var linearGradientRegex = /linear-gradient\s*\(((?:\([^)]*\)|[^())])*)\)/gi;
    while(match = linearGradientRegex.exec(cssString)){
        var gradientContent = match[1];
        var parts = gradientContent.split(',');
        var direction = DEFAULT_DIRECTION;
        var trimmedDirection = parts[0].trim().toLowerCase();
        // matches individual color stops in a gradient function
        // supports various color formats: named colors, hex colors, rgb(a), and hsl(a)
        // e.g. "red 20%", "blue 50%", "rgba(0, 0, 0, 0.5) 30% 50%"
        // TODO: does not support color hint syntax yet. It is WIP.
        var colorStopRegex = /\s*((?:(?:rgba?|hsla?)\s*\([^)]+\))|#[0-9a-fA-F]+|[a-zA-Z]+)(?:\s+(-?[0-9.]+%?)(?:\s+(-?[0-9.]+%?))?)?\s*/gi;
        if (ANGLE_UNIT_REGEX.test(trimmedDirection)) {
            var parsedAngle = getAngleInDegrees(trimmedDirection);
            if (parsedAngle != null) {
                direction = {
                    type: 'angle',
                    value: parsedAngle
                };
                parts.shift();
            } else {
                // If an angle is invalid, return an empty array and do not apply any gradient. Same as web.
                return [];
            }
        } else if (DIRECTION_KEYWORD_REGEX.test(trimmedDirection)) {
            var parsedDirection = getDirectionForKeyword(trimmedDirection);
            if (parsedDirection != null) {
                direction = parsedDirection;
                parts.shift();
            } else {
                // If a direction is invalid, return an empty array and do not apply any gradient. Same as web.
                return [];
            }
        } else if (!colorStopRegex.test(trimmedDirection)) {
            // If first part is not an angle/direction or a color stop, return an empty array and do not apply any gradient. Same as web.
            return [];
        }
        colorStopRegex.lastIndex = 0;
        var colorStops = [];
        var fullColorStopsStr = parts.join(',');
        var colorStopMatch = void 0;
        while(colorStopMatch = colorStopRegex.exec(fullColorStopsStr)){
            var _colorStopMatch = _sliced_to_array._(colorStopMatch, 4), color = _colorStopMatch[1], position1 = _colorStopMatch[2], position2 = _colorStopMatch[3];
            var processedColor = processColor(color.trim().toLowerCase());
            if (processedColor == null) {
                // If a color is invalid, return an empty array and do not apply any gradient. Same as web.
                return [];
            }
            if (typeof position1 !== 'undefined') {
                if (position1.endsWith('%')) {
                    colorStops.push({
                        color: processedColor,
                        position: parseFloat(position1) / 100
                    });
                } else {
                    // If a position is invalid, return an empty array and do not apply any gradient. Same as web.
                    return [];
                }
            } else {
                colorStops.push({
                    color: processedColor,
                    position: null
                });
            }
            if (typeof position2 !== 'undefined') {
                if (position2.endsWith('%')) {
                    colorStops.push({
                        color: processedColor,
                        position: parseFloat(position2) / 100
                    });
                } else {
                    // If a position is invalid, return an empty array and do not apply any gradient. Same as web.
                    return [];
                }
            }
        }
        var fixedColorStops = getFixedColorStops(colorStops);
        gradients.push({
            type: 'linearGradient',
            direction,
            colorStops: fixedColorStops
        });
    }
    return gradients;
}
function getDirectionForKeyword(direction) {
    if (direction == null) {
        return null;
    }
    // Remove extra whitespace
    var normalized = direction.replace(/\s+/g, ' ').toLowerCase();
    switch(normalized){
        case 'to top':
            return {
                type: 'angle',
                value: 0
            };
        case 'to right':
            return {
                type: 'angle',
                value: 90
            };
        case 'to bottom':
            return {
                type: 'angle',
                value: 180
            };
        case 'to left':
            return {
                type: 'angle',
                value: 270
            };
        case 'to top right':
        case 'to right top':
            return {
                type: 'keyword',
                value: 'to top right'
            };
        case 'to bottom right':
        case 'to right bottom':
            return {
                type: 'keyword',
                value: 'to bottom right'
            };
        case 'to top left':
        case 'to left top':
            return {
                type: 'keyword',
                value: 'to top left'
            };
        case 'to bottom left':
        case 'to left bottom':
            return {
                type: 'keyword',
                value: 'to bottom left'
            };
        default:
            return null;
    }
}
function getAngleInDegrees(angle) {
    if (angle == null) {
        return null;
    }
    var match = angle.match(ANGLE_UNIT_REGEX);
    if (!match) {
        return null;
    }
    var _match = _sliced_to_array._(match, 3), value = _match[1], unit = _match[2];
    var numericValue = parseFloat(value);
    switch(unit){
        case 'deg':
            return numericValue;
        case 'grad':
            return numericValue * 0.9; // 1 grad = 0.9 degrees
        case 'rad':
            return numericValue * 180 / Math.PI;
        case 'turn':
            return numericValue * 360; // 1 turn = 360 degrees
        default:
            return null;
    }
}
// https://drafts.csswg.org/css-images-4/#color-stop-fixup
function getFixedColorStops(colorStops) {
    var fixedColorStops = [];
    var hasNullPositions = false;
    var maxPositionSoFar = colorStops[0].position ?? 0;
    for(var i = 0; i < colorStops.length; i++){
        var colorStop = colorStops[i];
        var newPosition = colorStop.position;
        if (newPosition === null) {
            // Step 1:
            // If the first color stop does not have a position,
            // set its position to 0%. If the last color stop does not have a position,
            // set its position to 100%.
            if (i === 0) {
                newPosition = 0;
            } else if (i === colorStops.length - 1) {
                newPosition = 1;
            }
        }
        // Step 2:
        // If a color stop or transition hint has a position
        // that is less than the specified position of any color stop or transition hint
        // before it in the list, set its position to be equal to the
        // largest specified position of any color stop or transition hint before it.
        if (newPosition !== null) {
            newPosition = Math.max(newPosition, maxPositionSoFar);
            fixedColorStops[i] = {
                color: colorStop.color,
                position: newPosition
            };
            maxPositionSoFar = newPosition;
        } else {
            hasNullPositions = true;
        }
    }
    // Step 3:
    // If any color stop still does not have a position,
    // then, for each run of adjacent color stops without positions,
    // set their positions so that they are evenly spaced between the preceding and
    // following color stops with positions.
    if (hasNullPositions) {
        var lastDefinedIndex = 0;
        for(var i1 = 1; i1 < fixedColorStops.length; i1++){
            if (fixedColorStops[i1] !== undefined) {
                var unpositionedStops = i1 - lastDefinedIndex - 1;
                if (unpositionedStops > 0) {
                    var startPosition = fixedColorStops[lastDefinedIndex].position;
                    var endPosition = fixedColorStops[i1].position;
                    var increment = (endPosition - startPosition) / (unpositionedStops + 1);
                    for(var j = 1; j <= unpositionedStops; j++){
                        fixedColorStops[lastDefinedIndex + j] = {
                            color: colorStops[lastDefinedIndex + j].color,
                            position: startPosition + increment * j
                        };
                    }
                }
                lastDefinedIndex = i1;
            }
        }
    }
    return fixedColorStops;
}


}),
47204: (function (__unused_webpack_module, exports, __webpack_require__) {
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 *       strict-local
 * @format
 * @oncall react-native
 */ Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return processBoxShadow;
    }
}));
var _interop_require_default = __webpack_require__(66705);
var _processColor = /*#__PURE__*/ _interop_require_default._(__webpack_require__(23865));
function processBoxShadow(rawBoxShadows) {
    var result = [];
    if (rawBoxShadows == null) {
        return result;
    }
    var boxShadowList = typeof rawBoxShadows === 'string' ? parseBoxShadowString(rawBoxShadows.replace(/\n/g, ' ')) : rawBoxShadows;
    for (var rawBoxShadow of boxShadowList){
        var parsedBoxShadow = {
            offsetX: 0,
            offsetY: 0
        };
        var value = void 0;
        for(var arg in rawBoxShadow){
            switch(arg){
                case 'offsetX':
                    value = typeof rawBoxShadow.offsetX === 'string' ? parseLength(rawBoxShadow.offsetX) : rawBoxShadow.offsetX;
                    if (value == null) {
                        return [];
                    }
                    parsedBoxShadow.offsetX = value;
                    break;
                case 'offsetY':
                    value = typeof rawBoxShadow.offsetY === 'string' ? parseLength(rawBoxShadow.offsetY) : rawBoxShadow.offsetY;
                    if (value == null) {
                        return [];
                    }
                    parsedBoxShadow.offsetY = value;
                    break;
                case 'spreadDistance':
                    value = typeof rawBoxShadow.spreadDistance === 'string' ? parseLength(rawBoxShadow.spreadDistance) : rawBoxShadow.spreadDistance;
                    if (value == null) {
                        return [];
                    }
                    parsedBoxShadow.spreadDistance = value;
                    break;
                case 'blurRadius':
                    value = typeof rawBoxShadow.blurRadius === 'string' ? parseLength(rawBoxShadow.blurRadius) : rawBoxShadow.blurRadius;
                    if (value == null || value < 0) {
                        return [];
                    }
                    parsedBoxShadow.blurRadius = value;
                    break;
                case 'color':
                    var color = (0, _processColor.default)(rawBoxShadow.color);
                    if (color == null) {
                        return [];
                    }
                    parsedBoxShadow.color = color;
                    break;
                case 'inset':
                    parsedBoxShadow.inset = rawBoxShadow.inset;
            }
        }
        result.push(parsedBoxShadow);
    }
    return result;
}
function parseBoxShadowString(rawBoxShadows) {
    var result = [];
    for (var rawBoxShadow of rawBoxShadows.split(/,(?![^()]*\))/) // split by comma that is not in parenthesis
    .map((bS)=>bS.trim()).filter((bS)=>bS !== '')){
        var boxShadow = {
            offsetX: 0,
            offsetY: 0
        };
        var offsetX = void 0;
        var offsetY = void 0;
        var keywordDetectedAfterLength = false;
        var lengthCount = 0;
        // split rawBoxShadow string by all whitespaces that are not in parenthesis
        var args = rawBoxShadow.split(/\s+(?![^(]*\))/);
        for (var arg of args){
            var processedColor = (0, _processColor.default)(arg);
            if (processedColor != null) {
                if (boxShadow.color != null) {
                    return [];
                }
                if (offsetX != null) {
                    keywordDetectedAfterLength = true;
                }
                boxShadow.color = arg;
                continue;
            }
            if (arg === 'inset') {
                if (boxShadow.inset != null) {
                    return [];
                }
                if (offsetX != null) {
                    keywordDetectedAfterLength = true;
                }
                boxShadow.inset = true;
                continue;
            }
            switch(lengthCount){
                case 0:
                    offsetX = arg;
                    lengthCount++;
                    break;
                case 1:
                    if (keywordDetectedAfterLength) {
                        return [];
                    }
                    offsetY = arg;
                    lengthCount++;
                    break;
                case 2:
                    if (keywordDetectedAfterLength) {
                        return [];
                    }
                    boxShadow.blurRadius = arg;
                    lengthCount++;
                    break;
                case 3:
                    if (keywordDetectedAfterLength) {
                        return [];
                    }
                    boxShadow.spreadDistance = arg;
                    lengthCount++;
                    break;
                default:
                    return [];
            }
        }
        if (offsetX == null || offsetY == null) {
            return [];
        }
        boxShadow.offsetX = offsetX;
        boxShadow.offsetY = offsetY;
        result.push(boxShadow);
    }
    return result;
}
function parseLength(length) {
    // matches on args with units like "1.5 5% -80deg"
    var argsWithUnitsRegex = /([+-]?\d*(\.\d+)?)([\w\W]+)?/g;
    var match = argsWithUnitsRegex.exec(length);
    if (!match || Number.isNaN(match[1])) {
        return null;
    }
    if (match[3] != null && match[3] !== 'px') {
        return null;
    }
    return Number(match[1]);
}


}),
23865: (function (__unused_webpack_module, exports, __webpack_require__) {
"use strict";
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * @format
 *       strict-local
 */ 
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return _default;
    }
}));
var Platform = __webpack_require__(181);
var normalizeColor = __webpack_require__(12990);
/* eslint no-bitwise: 0 */ function processColor(color) {
    if (color === undefined || color === null) {
        return color;
    }
    var normalizedColor = normalizeColor(color);
    if (normalizedColor === null || normalizedColor === undefined) {
        return undefined;
    }
    if (typeof normalizedColor === 'object') {
        var processColorObject = (__webpack_require__(35281)/* .processColorObject */.processColorObject);
        var processedColorObj = processColorObject(normalizedColor);
        if (processedColorObj != null) {
            return processedColorObj;
        }
    }
    if (typeof normalizedColor !== 'number') {
        return null;
    }
    // Converts 0xrrggbbaa into 0xaarrggbb
    normalizedColor = (normalizedColor << 24 | normalizedColor >>> 8) >>> 0;
    if (Platform.OS === 'android') {
        // Android use 32 bit *signed* integer to represent the color
        // We utilize the fact that bitwise operations in JS also operates on
        // signed 32 bit integers, so that we can use those to convert from
        // *unsigned* to *signed* 32bit int that way.
        normalizedColor = normalizedColor | 0x0;
    }
    return normalizedColor;
}
var _default = processColor;


}),
57338: (function (module, exports, __webpack_require__) {
"use strict";
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * @format
 *       strict-local
 */ 
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
var _interop_require_default = __webpack_require__(66705);
var _processColor = /*#__PURE__*/ _interop_require_default._(__webpack_require__(23865));
var TRANSPARENT = 0; // rgba(0, 0, 0, 0)
function processColorArray(colors) {
    return colors == null ? null : colors.map(processColorElement);
}
function processColorElement(color) {
    var value = (0, _processColor.default)(color);
    // For invalid colors, fallback to transparent.
    if (value == null) {
        console.error('Invalid value in color array:', color);
        return TRANSPARENT;
    }
    return value;
}
module.exports = processColorArray;


}),
62354: (function (__unused_webpack_module, exports, __webpack_require__) {
"use strict";
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * @format strict-local
 *      
 * @oncall react-native
 */ 
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return processFilter;
    }
}));
var _interop_require_default = __webpack_require__(66705);
var _sliced_to_array = __webpack_require__(78474);
var _processColor = /*#__PURE__*/ _interop_require_default._(__webpack_require__(23865));
function processFilter(filter) {
    var result = [];
    if (filter == null) {
        return result;
    }
    if (typeof filter === 'string') {
        filter = filter.replace(/\n/g, ' ');
        // matches on functions with args and nested functions like "drop-shadow(10 10 10 rgba(0, 0, 0, 1))"
        var regex = /([\w-]+)\(([^()]*|\([^()]*\)|[^()]*\([^()]*\)[^()]*)\)/g;
        var matches;
        while(matches = regex.exec(filter)){
            var filterName = matches[1].toLowerCase();
            if (filterName === 'drop-shadow') {
                var dropShadow = parseDropShadow(matches[2]);
                if (dropShadow != null) {
                    result.push({
                        dropShadow
                    });
                } else {
                    return [];
                }
            } else {
                var camelizedName = filterName === 'drop-shadow' ? 'dropShadow' : filterName === 'hue-rotate' ? 'hueRotate' : filterName;
                var amount = _getFilterAmount(camelizedName, matches[2]);
                if (amount != null) {
                    var filterFunction = {};
                    // $FlowFixMe The key will be the correct one but flow can't see that.
                    filterFunction[camelizedName] = amount;
                    // $FlowFixMe The key will be the correct one but flow can't see that.
                    result.push(filterFunction);
                } else {
                    // If any primitive is invalid then apply none of the filters. This is how
                    // web works and makes it clear that something is wrong becuase no
                    // graphical effects are happening.
                    return [];
                }
            }
        }
    } else if (Array.isArray(filter)) {
        for (var filterFunction1 of filter){
            var _Object_entries_ = _sliced_to_array._(Object.entries(filterFunction1)[0], 2), filterName1 = _Object_entries_[0], filterValue = _Object_entries_[1];
            if (filterName1 === 'dropShadow') {
                // $FlowFixMe
                var dropShadow1 = parseDropShadow(filterValue);
                if (dropShadow1 == null) {
                    return [];
                }
                result.push({
                    dropShadow: dropShadow1
                });
            } else {
                var amount1 = _getFilterAmount(filterName1, filterValue);
                if (amount1 != null) {
                    var resultObject = {};
                    // $FlowFixMe
                    resultObject[filterName1] = amount1;
                    // $FlowFixMe
                    result.push(resultObject);
                } else {
                    // If any primitive is invalid then apply none of the filters. This is how
                    // web works and makes it clear that something is wrong becuase no
                    // graphical effects are happening.
                    return [];
                }
            }
        }
    } else {
        throw new TypeError(`${typeof filter} filter is not a string or array`);
    }
    return result;
}
function _getFilterAmount(filterName, filterArgs) {
    var filterArgAsNumber;
    var unit;
    if (typeof filterArgs === 'string') {
        // matches on args with units like "1.5 5% -80deg"
        var argsWithUnitsRegex = new RegExp(/([+-]?\d*(\.\d+)?)([a-zA-Z%]+)?/g);
        var match = argsWithUnitsRegex.exec(filterArgs);
        if (!match || isNaN(Number(match[1]))) {
            return undefined;
        }
        filterArgAsNumber = Number(match[1]);
        unit = match[3];
    } else if (typeof filterArgs === 'number') {
        filterArgAsNumber = filterArgs;
    } else {
        return undefined;
    }
    switch(filterName){
        // Hue rotate takes some angle that can have a unit and can be
        // negative. Additionally, 0 with no unit is allowed.
        case 'hueRotate':
            if (filterArgAsNumber === 0) {
                return 0;
            }
            if (unit !== 'deg' && unit !== 'rad') {
                return undefined;
            }
            return unit === 'rad' ? 180 * filterArgAsNumber / Math.PI : filterArgAsNumber;
        // blur takes any positive CSS length that is not a percent. In RN
        // we currently only have DIPs, so we are not parsing units here.
        case 'blur':
            if (unit && unit !== 'px' || filterArgAsNumber < 0) {
                return undefined;
            }
            return filterArgAsNumber;
        // All other filters except take a non negative number or percentage. There
        // are no units associated with this value and percentage numbers map 1-to-1
        // to a non-percentage number (e.g. 50% == 0.5).
        case 'brightness':
        case 'contrast':
        case 'grayscale':
        case 'invert':
        case 'opacity':
        case 'saturate':
        case 'sepia':
            if (unit && unit !== '%' && unit !== 'px' || filterArgAsNumber < 0) {
                return undefined;
            }
            if (unit === '%') {
                filterArgAsNumber /= 100;
            }
            return filterArgAsNumber;
        default:
            return undefined;
    }
}
function parseDropShadow(rawDropShadow) {
    var dropShadow = typeof rawDropShadow === 'string' ? parseDropShadowString(rawDropShadow) : rawDropShadow;
    var parsedDropShadow = {
        offsetX: 0,
        offsetY: 0
    };
    var offsetX;
    var offsetY;
    for(var arg in dropShadow){
        var value = void 0;
        switch(arg){
            case 'offsetX':
                value = typeof dropShadow.offsetX === 'string' ? parseLength(dropShadow.offsetX) : dropShadow.offsetX;
                if (value == null) {
                    return null;
                }
                offsetX = value;
                break;
            case 'offsetY':
                value = typeof dropShadow.offsetY === 'string' ? parseLength(dropShadow.offsetY) : dropShadow.offsetY;
                if (value == null) {
                    return null;
                }
                offsetY = value;
                break;
            case 'standardDeviation':
                value = typeof dropShadow.standardDeviation === 'string' ? parseLength(dropShadow.standardDeviation) : dropShadow.standardDeviation;
                if (value == null || value < 0) {
                    return null;
                }
                parsedDropShadow.standardDeviation = value;
                break;
            case 'color':
                var color = (0, _processColor.default)(dropShadow.color);
                if (color == null) {
                    return null;
                }
                parsedDropShadow.color = color;
                break;
            default:
                return null;
        }
    }
    if (offsetX == null || offsetY == null) {
        return null;
    }
    parsedDropShadow.offsetX = offsetX;
    parsedDropShadow.offsetY = offsetY;
    return parsedDropShadow;
}
function parseDropShadowString(rawDropShadow) {
    var dropShadow = {
        offsetX: 0,
        offsetY: 0
    };
    var offsetX;
    var offsetY;
    var lengthCount = 0;
    var keywordDetectedAfterLength = false;
    // split args by all whitespaces that are not in parenthesis
    for (var arg of rawDropShadow.split(/\s+(?![^(]*\))/)){
        var processedColor = (0, _processColor.default)(arg);
        if (processedColor != null) {
            if (dropShadow.color != null) {
                return null;
            }
            if (offsetX != null) {
                keywordDetectedAfterLength = true;
            }
            dropShadow.color = arg;
            continue;
        }
        switch(lengthCount){
            case 0:
                offsetX = arg;
                lengthCount++;
                break;
            case 1:
                if (keywordDetectedAfterLength) {
                    return null;
                }
                offsetY = arg;
                lengthCount++;
                break;
            case 2:
                if (keywordDetectedAfterLength) {
                    return null;
                }
                dropShadow.standardDeviation = arg;
                lengthCount++;
                break;
            default:
                return null;
        }
    }
    if (offsetX == null || offsetY == null) {
        return null;
    }
    dropShadow.offsetX = offsetX;
    dropShadow.offsetY = offsetY;
    return dropShadow;
}
function parseLength(length) {
    // matches on args with units like "1.5 5% -80deg"
    var argsWithUnitsRegex = /([+-]?\d*(\.\d+)?)([\w\W]+)?/g;
    var match = argsWithUnitsRegex.exec(length);
    if (!match || Number.isNaN(match[1])) {
        return null;
    }
    if (match[3] != null && match[3] !== 'px') {
        return null;
    }
    return Number(match[1]);
}


}),
45989: (function (module) {
"use strict";
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * @format
 *       strict-local
 */ 
function processFontVariant(fontVariant) {
    if (Array.isArray(fontVariant)) {
        return fontVariant;
    }
    // $FlowFixMe[incompatible-type]
    var match = fontVariant.split(' ').filter(Boolean);
    return match;
}
module.exports = processFontVariant;


}),
88823: (function (module, __unused_webpack_exports, __webpack_require__) {
"use strict";
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * @format
 *      
 */ 
var stringifySafe = (__webpack_require__(47264)/* ["default"] */["default"]);
var invariant = __webpack_require__(56481);
/**
 * Generate a transform matrix based on the provided transforms, and use that
 * within the style object instead.
 *
 * This allows us to provide an API that is similar to CSS, where transforms may
 * be applied in an arbitrary order, and yet have a universal, singular
 * interface to native code.
 */ function processTransform(transform) {
    if (typeof transform === 'string') {
        var regex = new RegExp(/(\w+)\(([^)]+)\)/g);
        var transformArray = [];
        var matches;
        while(matches = regex.exec(transform)){
            var _getKeyAndValueFromCSSTransform1 = _getKeyAndValueFromCSSTransform(matches[1], matches[2]), key = _getKeyAndValueFromCSSTransform1.key, value = _getKeyAndValueFromCSSTransform1.value;
            if (value !== undefined) {
                transformArray.push({
                    [key]: value
                });
            }
        }
        transform = transformArray;
    }
    if (false) {}
    return transform;
}
var _getKeyAndValueFromCSSTransform = (key, args)=>{
    var argsWithUnitsRegex = new RegExp(/([+-]?\d+(\.\d+)?)([a-zA-Z]+|%)?/g);
    switch(key){
        case 'matrix':
            var _args_match;
            return {
                key,
                value: (_args_match = args.match(/[+-]?\d+(\.\d+)?/g)) === null || _args_match === void 0 ? void 0 : _args_match.map(Number)
            };
        case 'translate':
        case 'translate3d':
            var parsedArgs = [];
            var missingUnitOfMeasurement = false;
            var matches;
            while(matches = argsWithUnitsRegex.exec(args)){
                var value = Number(matches[1]);
                var unitOfMeasurement = matches[3];
                if (value !== 0 && !unitOfMeasurement) {
                    missingUnitOfMeasurement = true;
                }
                if (unitOfMeasurement === '%') {
                    parsedArgs.push(`${value}%`);
                } else {
                    parsedArgs.push(value);
                }
            }
            if (false) {}
            if ((parsedArgs === null || parsedArgs === void 0 ? void 0 : parsedArgs.length) === 1) {
                parsedArgs.push(0);
            }
            return {
                key: 'translate',
                value: parsedArgs
            };
        case 'translateX':
        case 'translateY':
        case 'perspective':
            var argMatches = argsWithUnitsRegex.exec(args);
            if (!(argMatches === null || argMatches === void 0 ? void 0 : argMatches.length)) {
                return {
                    key,
                    value: undefined
                };
            }
            var value1 = Number(argMatches[1]);
            var unitOfMeasurement1 = argMatches[3];
            if (false) {}
            return {
                key,
                value: value1
            };
        default:
            return {
                key,
                value: !isNaN(args) ? Number(args) : args
            };
    }
};
function _validateTransforms(transform) {
    transform.forEach((transformation)=>{
        var keys = Object.keys(transformation);
        invariant(keys.length === 1, 'You must specify exactly one property per transform object. Passed properties: %s', stringifySafe(transformation));
        var key = keys[0];
        var value = transformation[key];
        if (key === 'matrix' && transform.length > 1) {
            console.error('When using a matrix transform, you must specify exactly one transform object. Passed transform: ' + stringifySafe(transform));
        }
        _validateTransform(key, value, transformation);
    });
}
function _validateTransform(key, value, transformation) {
    invariant(!value.getValue, 'You passed an Animated.Value to a normal component. ' + 'You need to wrap that component in an Animated. For example, ' + 'replace <View /> by <Animated.View />.');
    var multivalueTransforms = [
        'matrix',
        'translate'
    ];
    if (multivalueTransforms.indexOf(key) !== -1) {
        invariant(Array.isArray(value), 'Transform with key of %s must have an array as the value: %s', key, stringifySafe(transformation));
    }
    switch(key){
        case 'matrix':
            invariant(value.length === 9 || value.length === 16, 'Matrix transform must have a length of 9 (2d) or 16 (3d). ' + 'Provided matrix has a length of %s: %s', /* $FlowFixMe[prop-missing] (>=0.84.0 site=react_native_fb) This
         * comment suppresses an error found when Flow v0.84 was deployed. To
         * see the error, delete this comment and run Flow. */ value.length, stringifySafe(transformation));
            break;
        case 'translate':
            invariant(value.length === 2 || value.length === 3, 'Transform with key translate must be an array of length 2 or 3, found %s: %s', /* $FlowFixMe[prop-missing] (>=0.84.0 site=react_native_fb) This
         * comment suppresses an error found when Flow v0.84 was deployed. To
         * see the error, delete this comment and run Flow. */ value.length, stringifySafe(transformation));
            break;
        case 'rotateX':
        case 'rotateY':
        case 'rotateZ':
        case 'rotate':
        case 'skewX':
        case 'skewY':
            invariant(typeof value === 'string', 'Transform with key of "%s" must be a string: %s', key, stringifySafe(transformation));
            invariant(value.indexOf('deg') > -1 || value.indexOf('rad') > -1, 'Rotate transform must be expressed in degrees (deg) or radians ' + '(rad): %s', stringifySafe(transformation));
            break;
        case 'perspective':
            invariant(typeof value === 'number', 'Transform with key of "%s" must be a number: %s', key, stringifySafe(transformation));
            invariant(value !== 0, 'Transform with key of "%s" cannot be zero: %s', key, stringifySafe(transformation));
            break;
        case 'translateX':
        case 'translateY':
            invariant(typeof value === 'number' || typeof value === 'string' && value.endsWith('%'), 'Transform with key of "%s" must be number or a percentage. Passed value: %s.', key, stringifySafe(transformation));
            break;
        case 'scale':
        case 'scaleX':
        case 'scaleY':
            invariant(typeof value === 'number', 'Transform with key of "%s" must be a number: %s', key, stringifySafe(transformation));
            break;
        default:
            invariant(false, 'Invalid transform %s: %s', key, stringifySafe(transformation));
    }
}
module.exports = processTransform;


}),
91166: (function (__unused_webpack_module, exports, __webpack_require__) {
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * @format
 *      
 */ Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return processTransformOrigin;
    }
}));
var _interop_require_default = __webpack_require__(66705);
var _sliced_to_array = __webpack_require__(78474);
var _invariant = /*#__PURE__*/ _interop_require_default._(__webpack_require__(56481));
var INDEX_X = 0;
var INDEX_Y = 1;
var INDEX_Z = 2;
function processTransformOrigin(transformOrigin) {
    if (typeof transformOrigin === 'string') {
        var transformOriginString = transformOrigin;
        var regex = /(top|bottom|left|right|center|\d+(?:%|px)|0)/gi;
        var transformOriginArray = [
            '50%',
            '50%',
            0
        ];
        var index = INDEX_X;
        var matches;
        outer: while(matches = regex.exec(transformOriginString)){
            var nextIndex = index + 1;
            var value = matches[0];
            var valueLower = value.toLowerCase();
            switch(valueLower){
                case 'left':
                case 'right':
                    {
                        (0, _invariant.default)(index === INDEX_X, 'Transform-origin %s can only be used for x-position', value);
                        transformOriginArray[INDEX_X] = valueLower === 'left' ? 0 : '100%';
                        break;
                    }
                case 'top':
                case 'bottom':
                    {
                        (0, _invariant.default)(index !== INDEX_Z, 'Transform-origin %s can only be used for y-position', value);
                        transformOriginArray[INDEX_Y] = valueLower === 'top' ? 0 : '100%';
                        // Handle [[ center | left | right ] && [ center | top | bottom ]] <length>?
                        if (index === INDEX_X) {
                            var horizontal = regex.exec(transformOriginString);
                            if (horizontal == null) {
                                break outer;
                            }
                            switch(horizontal[0].toLowerCase()){
                                case 'left':
                                    transformOriginArray[INDEX_X] = 0;
                                    break;
                                case 'right':
                                    transformOriginArray[INDEX_X] = '100%';
                                    break;
                                case 'center':
                                    transformOriginArray[INDEX_X] = '50%';
                                    break;
                                default:
                                    (0, _invariant.default)(false, 'Could not parse transform-origin: %s', transformOriginString);
                            }
                            nextIndex = INDEX_Z;
                        }
                        break;
                    }
                case 'center':
                    {
                        (0, _invariant.default)(index !== INDEX_Z, 'Transform-origin value %s cannot be used for z-position', value);
                        transformOriginArray[index] = '50%';
                        break;
                    }
                default:
                    {
                        if (value.endsWith('%')) {
                            transformOriginArray[index] = value;
                        } else {
                            transformOriginArray[index] = parseFloat(value); // Remove `px`
                        }
                        break;
                    }
            }
            index = nextIndex;
        }
        transformOrigin = transformOriginArray;
    }
    if (false) {}
    return transformOrigin;
}
function _validateTransformOrigin(transformOrigin) {
    (0, _invariant.default)(transformOrigin.length === 3, 'Transform origin must have exactly 3 values.');
    var _transformOrigin = _sliced_to_array._(transformOrigin, 3), x = _transformOrigin[0], y = _transformOrigin[1], z = _transformOrigin[2];
    (0, _invariant.default)(typeof x === 'number' || typeof x === 'string' && x.endsWith('%'), 'Transform origin x-position must be a number. Passed value: %s.', x);
    (0, _invariant.default)(typeof y === 'number' || typeof y === 'string' && y.endsWith('%'), 'Transform origin y-position must be a number. Passed value: %s.', y);
    (0, _invariant.default)(typeof z === 'number', 'Transform origin z-position must be a number. Passed value: %s.', z);
}


}),
86981: (function (module, __unused_webpack_exports, __webpack_require__) {
"use strict";
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 *       strict
 * @format
 */ 
var React = __webpack_require__(31399);
/**
 * Whether the current element is the descendant of a <Text> element.
 */ var TextAncestorContext = React.createContext(false);
if (false) {}
module.exports = TextAncestorContext;


}),
76645: (function (__unused_webpack_module, exports, __webpack_require__) {
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 *       strict
 * @format
 */ Object.defineProperty(exports, "__esModule", ({
    value: true
}));
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: Object.getOwnPropertyDescriptor(all, name).get
    });
}
_export(exports, {
    get get () {
        return get;
    },
    get getEnforcing () {
        return getEnforcing;
    }
});
var _interop_require_default = __webpack_require__(66705);
var _invariant = /*#__PURE__*/ _interop_require_default._(__webpack_require__(56481));
var NativeModules = __webpack_require__(40225);
var turboModuleProxy = __webpack_require__.g.__turboModuleProxy;
function requireModule(name) {
    if (turboModuleProxy != null) {
        var module = turboModuleProxy(name);
        if (module != null) {
            return module;
        }
    }
    if (__webpack_require__.g.RN$Bridgeless !== true || __webpack_require__.g.RN$TurboInterop === true || __webpack_require__.g.RN$UnifiedNativeModuleProxy === true) {
        var legacyModule = NativeModules[name];
        if (legacyModule != null) {
            return legacyModule;
        }
    }
    return null;
}
function get(name) {
    return requireModule(name);
}
function getEnforcing(name) {
    var module = requireModule(name);
    (0, _invariant.default)(module != null, `TurboModuleRegistry.getEnforcing(...): '${name}' could not be found. ` + 'Verify that a module by this name is registered in the native binary.');
    return module;
}


}),
52340: (function (module) {
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 *       strict-local
 * @format
 */ function emptyFunction() {}
var BackHandler = {
    exitApp: emptyFunction,
    addEventListener (_eventName, _handler) {
        return {
            remove: emptyFunction
        };
    }
};
module.exports = BackHandler;


}),
6482: (function (__unused_webpack_module, exports, __webpack_require__) {
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * @format
 *      
 */ Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return _default;
    }
}));
var _class_call_check = __webpack_require__(8864);
var _create_class = __webpack_require__(93072);
var _interop_require_default = __webpack_require__(66705);
var _RCTDeviceEventEmitter = /*#__PURE__*/ _interop_require_default._(__webpack_require__(75296));
var _EventEmitter = /*#__PURE__*/ _interop_require_default._(__webpack_require__(47006));
var _NativeDeviceInfo = /*#__PURE__*/ _interop_require_default._(__webpack_require__(19784));
var _invariant = /*#__PURE__*/ _interop_require_default._(__webpack_require__(56481));
var eventEmitter = new _EventEmitter.default();
var dimensionsInitialized = false;
var dimensions;
var Dimensions = /*#__PURE__*/ function() {
    "use strict";
    function Dimensions() {
        _class_call_check._(this, Dimensions);
    }
    _create_class._(Dimensions, null, [
        {
            key: "get",
            value: /**
   * NOTE: `useWindowDimensions` is the preferred API for React components.
   *
   * Initial dimensions are set before `runApplication` is called so they should
   * be available before any other require's are run, but may be updated later.
   *
   * Note: Although dimensions are available immediately, they may change (e.g
   * due to device rotation) so any rendering logic or styles that depend on
   * these constants should try to call this function on every render, rather
   * than caching the value (for example, using inline styles rather than
   * setting a value in a `StyleSheet`).
   *
   * Example: `const {height, width} = Dimensions.get('window');`
   *
   * @param {string} dim Name of dimension as defined when calling `set`.
   * @returns {DisplayMetrics? | DisplayMetricsAndroid?} Value for the dimension.
   */ function get(dim) {
                // $FlowFixMe[invalid-computed-prop]
                (0, _invariant.default)(dimensions[dim], 'No dimension set for key ' + dim);
                return dimensions[dim];
            }
        },
        {
            key: "set",
            value: /**
   * This should only be called from native code by sending the
   * didUpdateDimensions event.
   *
   * @param {DimensionsPayload} dims Simple string-keyed object of dimensions to set
   */ function set(dims) {
                // We calculate the window dimensions in JS so that we don't encounter loss of
                // precision in transferring the dimensions (which could be non-integers) over
                // the bridge.
                var screen = dims.screen, window = dims.window;
                var windowPhysicalPixels = dims.windowPhysicalPixels;
                if (windowPhysicalPixels) {
                    window = {
                        width: windowPhysicalPixels.width / windowPhysicalPixels.scale,
                        height: windowPhysicalPixels.height / windowPhysicalPixels.scale,
                        scale: windowPhysicalPixels.scale,
                        fontScale: windowPhysicalPixels.fontScale
                    };
                }
                var screenPhysicalPixels = dims.screenPhysicalPixels;
                if (screenPhysicalPixels) {
                    screen = {
                        width: screenPhysicalPixels.width / screenPhysicalPixels.scale,
                        height: screenPhysicalPixels.height / screenPhysicalPixels.scale,
                        scale: screenPhysicalPixels.scale,
                        fontScale: screenPhysicalPixels.fontScale
                    };
                } else if (screen == null) {
                    screen = window;
                }
                dimensions = {
                    window,
                    screen
                };
                if (dimensionsInitialized) {
                    // Don't fire 'change' the first time the dimensions are set.
                    eventEmitter.emit('change', dimensions);
                } else {
                    dimensionsInitialized = true;
                }
            }
        },
        {
            key: "addEventListener",
            value: /**
   * Add an event handler. Supported events:
   *
   * - `change`: Fires when a property within the `Dimensions` object changes. The argument
   *   to the event handler is an object with `window` and `screen` properties whose values
   *   are the same as the return values of `Dimensions.get('window')` and
   *   `Dimensions.get('screen')`, respectively.
   */ function addEventListener(type, handler) {
                (0, _invariant.default)(type === 'change', 'Trying to subscribe to unknown event: "%s"', type);
                return eventEmitter.addListener(type, handler);
            }
        }
    ]);
    return Dimensions;
}();
// Subscribe before calling getConstants to make sure we don't miss any updates in between.
_RCTDeviceEventEmitter.default.addListener('didUpdateDimensions', (update)=>{
    Dimensions.set(update);
});
Dimensions.set(_NativeDeviceInfo.default.getConstants().Dimensions);
var _default = Dimensions;


}),
65410: (function (module) {
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 *      
 * @format
 */ /**
 * @return whether or not a @param {function} f is provided natively by calling
 * `toString` and check if the result includes `[native code]` in it.
 *
 * Note that a polyfill can technically fake this behavior but few does it.
 * Therefore, this is usually good enough for our purpose.
 */ function isNativeFunction(f) {
    return typeof f === 'function' && f.toString().indexOf('[native code]') > -1;
}
/**
 * @return whether or not the constructor of @param {object} o is an native
 * function named with @param {string} expectedName.
 */ function hasNativeConstructor(o, expectedName) {
    var con = Object.getPrototypeOf(o).constructor;
    return con.name === expectedName && isNativeFunction(con);
}
module.exports = {
    isNativeFunction,
    hasNativeConstructor
};


}),
27160: (function (module, exports, __webpack_require__) {
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 *       strict
 * @format
 */ Object.defineProperty(exports, "__esModule", ({
    value: true
}));
var _interop_require_default = __webpack_require__(66705);
var _createPerformanceLogger = /*#__PURE__*/ _interop_require_default._(__webpack_require__(41268));
/**
 * This is a global shared instance of IPerformanceLogger that is created with
 * createPerformanceLogger().
 * This logger should be used only for global performance metrics like the ones
 * that are logged during loading bundle. If you want to log something from your
 * React component you should use PerformanceLoggerContext instead.
 */ var GlobalPerformanceLogger = (0, _createPerformanceLogger.default)();
module.exports = GlobalPerformanceLogger;


}),
49646: (function (module) {
"use strict";
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * @format
 *       strict-local
 */ 
// This shim ensures DEV binary builds don't crash in JS
// when they're combined with a PROD JavaScript build.
var HMRClientProdShim = {
    setup () {},
    enable () {
        console.error('Fast Refresh is disabled in JavaScript bundles built in production mode. ' + 'Did you forget to run Metro?');
    },
    disable () {},
    registerBundle () {},
    log () {}
};
module.exports = HMRClientProdShim;


}),
44630: (function (__unused_webpack_module, exports, __webpack_require__) {
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 *       strict
 * @format
 */ Object.defineProperty(exports, "__esModule", ({
    value: true
}));
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: Object.getOwnPropertyDescriptor(all, name).get
    });
}
_export(exports, {
    get default () {
        return _default;
    },
    get usePerformanceLogger () {
        return usePerformanceLogger;
    }
});
var _interop_require_default = __webpack_require__(66705);
var _interop_require_wildcard = __webpack_require__(83610);
var _GlobalPerformanceLogger = /*#__PURE__*/ _interop_require_default._(__webpack_require__(27160));
var _react = /*#__PURE__*/ _interop_require_wildcard._(__webpack_require__(31399));
/**
 * This is a React Context that provides a scoped instance of IPerformanceLogger.
 * We wrap every <AppContainer /> with a Provider for this context so the logger
 * should be available in every component.
 * See React docs about using Context: https://react.dev/docs/context.html
 */ var PerformanceLoggerContext = /*#__PURE__*/ _react.createContext(_GlobalPerformanceLogger.default);
if (false) {}
function usePerformanceLogger() {
    return (0, _react.useContext)(PerformanceLoggerContext);
}
var _default = PerformanceLoggerContext;


}),
52712: (function (__unused_webpack_module, exports, __webpack_require__) {
"use strict";
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * @format
 *       strict-local
 */ 
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return _default;
    }
}));
var _class_call_check = __webpack_require__(8864);
var _create_class = __webpack_require__(93072);
var Dimensions = (__webpack_require__(6482)/* ["default"] */["default"]);
/**
 * PixelRatio class gives access to the device pixel density.
 *
 * ## Fetching a correctly sized image
 *
 * You should get a higher resolution image if you are on a high pixel density
 * device. A good rule of thumb is to multiply the size of the image you display
 * by the pixel ratio.
 *
 * ```
 * var image = getImage({
 *   width: PixelRatio.getPixelSizeForLayoutSize(200),
 *   height: PixelRatio.getPixelSizeForLayoutSize(100),
 * });
 * <Image source={image} style={{width: 200, height: 100}} />
 * ```
 *
 * ## Pixel grid snapping
 *
 * In iOS, you can specify positions and dimensions for elements with arbitrary
 * precision, for example 29.674825. But, ultimately the physical display only
 * have a fixed number of pixels, for example 640×960 for iPhone 4 or 750×1334
 * for iPhone 6. iOS tries to be as faithful as possible to the user value by
 * spreading one original pixel into multiple ones to trick the eye. The
 * downside of this technique is that it makes the resulting element look
 * blurry.
 *
 * In practice, we found out that developers do not want this feature and they
 * have to work around it by doing manual rounding in order to avoid having
 * blurry elements. In React Native, we are rounding all the pixels
 * automatically.
 *
 * We have to be careful when to do this rounding. You never want to work with
 * rounded and unrounded values at the same time as you're going to accumulate
 * rounding errors. Having even one rounding error is deadly because a one
 * pixel border may vanish or be twice as big.
 *
 * In React Native, everything in JavaScript and within the layout engine works
 * with arbitrary precision numbers. It's only when we set the position and
 * dimensions of the native element on the main thread that we round. Also,
 * rounding is done relative to the root rather than the parent, again to avoid
 * accumulating rounding errors.
 *
 */ var PixelRatio = /*#__PURE__*/ function() {
    function PixelRatio() {
        _class_call_check._(this, PixelRatio);
    }
    _create_class._(PixelRatio, null, [
        {
            key: "get",
            value: /**
   * Returns the device pixel density. Some examples:
   *
   *   - PixelRatio.get() === 1
   *     - mdpi Android devices (160 dpi)
   *   - PixelRatio.get() === 1.5
   *     - hdpi Android devices (240 dpi)
   *   - PixelRatio.get() === 2
   *     - iPhone 4, 4S
   *     - iPhone 5, 5c, 5s
   *     - iPhone 6
   *     - iPhone 7
   *     - iPhone 8
   *     - iPhone SE
   *     - xhdpi Android devices (320 dpi)
   *   - PixelRatio.get() === 3
   *     - iPhone 6 Plus
   *     - iPhone 7 Plus
   *     - iPhone 8 Plus
   *     - iPhone X
   *     - xxhdpi Android devices (480 dpi)
   *   - PixelRatio.get() === 3.5
   *     - Nexus 6
   */ function get() {
                return Dimensions.get('window').scale;
            }
        },
        {
            key: "getFontScale",
            value: /**
   * Returns the scaling factor for font sizes. This is the ratio that is used to calculate the
   * absolute font size, so any elements that heavily depend on that should use this to do
   * calculations.
   *
   * If a font scale is not set, this returns the device pixel ratio.
   *
   * This reflects the user preference set in:
   *  - Settings > Display > Font size on Android,
   *  - Settings > Display & Brightness > Text Size on iOS.
   */ function getFontScale() {
                return Dimensions.get('window').fontScale || PixelRatio.get();
            }
        },
        {
            key: "getPixelSizeForLayoutSize",
            value: /**
   * Converts a layout size (dp) to pixel size (px).
   *
   * Guaranteed to return an integer number.
   */ function getPixelSizeForLayoutSize(layoutSize) {
                return Math.round(layoutSize * PixelRatio.get());
            }
        },
        {
            key: "roundToNearestPixel",
            value: /**
   * Rounds a layout size (dp) to the nearest layout size that corresponds to
   * an integer number of pixels. For example, on a device with a PixelRatio
   * of 3, `PixelRatio.roundToNearestPixel(8.4) = 8.33`, which corresponds to
   * exactly (8.33 * 3) = 25 pixels.
   */ function roundToNearestPixel(layoutSize) {
                var ratio = PixelRatio.get();
                return Math.round(layoutSize * ratio) / ratio;
            }
        },
        {
            key: "startDetecting",
            value: // No-op for iOS, but used on the web. Should not be documented.
            function startDetecting() {}
        }
    ]);
    return PixelRatio;
}();
var _default = PixelRatio;


}),
181: (function (module, exports, __webpack_require__) {
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * @format
 *       strict
 */ Object.defineProperty(exports, "__esModule", ({
    value: true
}));
var _interop_require_default = __webpack_require__(66705);
var _NativePlatformConstantsIOS = /*#__PURE__*/ _interop_require_default._(__webpack_require__(30631));
var Platform = {
    __constants: null,
    OS: 'ios',
    // $FlowFixMe[unsafe-getters-setters]
    get Version () {
        // $FlowFixMe[object-this-reference]
        return this.constants.osVersion;
    },
    // $FlowFixMe[unsafe-getters-setters]
    get constants () {
        // $FlowFixMe[object-this-reference]
        if (this.__constants == null) {
            // $FlowFixMe[object-this-reference]
            this.__constants = _NativePlatformConstantsIOS.default.getConstants();
        }
        // $FlowFixMe[object-this-reference]
        return this.__constants;
    },
    // $FlowFixMe[unsafe-getters-setters]
    get isPad () {
        // $FlowFixMe[object-this-reference]
        return this.constants.interfaceIdiom === 'pad';
    },
    // $FlowFixMe[unsafe-getters-setters]
    get isTV () {
        // $FlowFixMe[object-this-reference]
        return this.constants.interfaceIdiom === 'tv';
    },
    // $FlowFixMe[unsafe-getters-setters]
    get isVision () {
        // $FlowFixMe[object-this-reference]
        return this.constants.interfaceIdiom === 'vision';
    },
    // $FlowFixMe[unsafe-getters-setters]
    get isTesting () {
        if (false) {}
        return false;
    },
    // $FlowFixMe[unsafe-getters-setters]
    get isDisableAnimations () {
        // $FlowFixMe[object-this-reference]
        return this.constants.isDisableAnimations ?? this.isTesting;
    },
    // $FlowFixMe[unsafe-getters-setters]
    get isMacCatalyst () {
        // $FlowFixMe[object-this-reference]
        return this.constants.isMacCatalyst ?? false;
    },
    select: (spec)=>// $FlowFixMe[incompatible-return]
        'ios' in spec ? spec.ios : 'native' in spec ? spec.native : spec.default
};
module.exports = Platform;


}),
23223: (function (module, __unused_webpack_exports, __webpack_require__) {
"use strict";
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 *       strict
 * @format
 */ 
var defineLazyObjectProperty = __webpack_require__(53077);
/**
 * Sets an object's property. If a property with the same name exists, this will
 * replace it but maintain its descriptor configuration. The property will be
 * replaced with a lazy getter.
 *
 * In DEV mode the original property value will be preserved as `original[PropertyName]`
 * so that, if necessary, it can be restored. For example, if you want to route
 * network requests through DevTools (to trace them):
 *
 *   global.XMLHttpRequest = global.originalXMLHttpRequest;
 *
 * @see https://github.com/facebook/react-native/issues/934
 */ function polyfillObjectProperty(object, name, getValue) {
    var descriptor = Object.getOwnPropertyDescriptor(object, name);
    if (false) { var backupName }
    var _ref = descriptor || {}, enumerable = _ref.enumerable, writable = _ref.writable, _ref_configurable = _ref.configurable, configurable = _ref_configurable === void 0 ? false : _ref_configurable;
    if (descriptor && !configurable) {
        console.error('Failed to set polyfill. ' + name + ' is not configurable.');
        return;
    }
    defineLazyObjectProperty(object, name, {
        get: getValue,
        enumerable: enumerable !== false,
        writable: writable !== false
    });
}
function polyfillGlobal(name, getValue) {
    polyfillObjectProperty(__webpack_require__.g, name, getValue);
}
module.exports = {
    polyfillObjectProperty,
    polyfillGlobal
};


}),
86053: (function (module, exports, __webpack_require__) {
"use strict";
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * @format
 *       strict
 */ 
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
var _to_consumable_array = __webpack_require__(92716);
var invariant = __webpack_require__(56481);
var levelsMap = {
    log: 'log',
    info: 'info',
    warn: 'warn',
    error: 'error',
    fatal: 'error'
};
var warningHandler = null;
var RCTLog = {
    // level one of log, info, warn, error, mustfix
    logIfNoNativeHook (level, ...args) {
        // We already printed in the native console, so only log here if using a js debugger
        if (typeof __webpack_require__.g.nativeLoggingHook === 'undefined') {
            var _RCTLog;
            (_RCTLog = RCTLog).logToConsole.apply(_RCTLog, [
                level
            ].concat(_to_consumable_array._(args)));
        } else {
            // Report native warnings to LogBox
            if (warningHandler && level === 'warn') {
                warningHandler.apply(void 0, _to_consumable_array._(args));
            }
        }
    },
    // Log to console regardless of nativeLoggingHook
    logToConsole (level, ...args) {
        var _console;
        // $FlowFixMe[invalid-computed-prop]
        var logFn = levelsMap[level];
        invariant(logFn, 'Level "' + level + '" not one of ' + Object.keys(levelsMap).toString());
        (_console = console)[logFn].apply(_console, _to_consumable_array._(args));
    },
    setWarningHandler (handler) {
        warningHandler = handler;
    }
};
module.exports = RCTLog;


}),
17858: (function (module) {
"use strict";
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * @format
 *       strict
 */ 
var _listeners = [];
var _activeScene = {
    name: 'default'
};
var SceneTracker = {
    setActiveScene (scene) {
        _activeScene = scene;
        _listeners.forEach((listener)=>listener(_activeScene));
    },
    getActiveScene () {
        return _activeScene;
    },
    addActiveSceneChangedListener (callback) {
        _listeners.push(callback);
        return {
            remove: ()=>{
                _listeners = _listeners.filter((listener)=>callback !== listener);
            }
        };
    }
};
module.exports = SceneTracker;


}),
74259: (function (module, __unused_webpack_exports, __webpack_require__) {
"use strict";
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * @format
 *       strict
 */ 
var base64 = __webpack_require__(25608);
function binaryToBase64(data) {
    if (data instanceof ArrayBuffer) {
        // $FlowFixMe[reassign-const]
        data = new Uint8Array(data);
    }
    if (data instanceof Uint8Array) {
        return base64.fromByteArray(data);
    }
    if (!ArrayBuffer.isView(data)) {
        throw new Error('data must be ArrayBuffer or typed array');
    }
    // Already checked that `data` is `DataView` in `ArrayBuffer.isView(data)`
    var buffer = data.buffer, byteOffset = data.byteOffset, byteLength = data.byteLength;
    return base64.fromByteArray(new Uint8Array(buffer, byteOffset, byteLength));
}
module.exports = binaryToBase64;


}),
21852: (function (__unused_webpack_module, exports, __webpack_require__) {
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * @format
 *      
 */ Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return _default;
    }
}));
var dispatchCommand = (__webpack_require__(46513)/* .dispatchCommand */.dispatchCommand);
function codegenNativeCommands(options) {
    var commandObj = {};
    options.supportedCommands.forEach((command)=>{
        // $FlowFixMe[missing-local-annot]
        commandObj[command] = (ref, ...args)=>{
            // $FlowFixMe[incompatible-call]
            dispatchCommand(ref, command, args);
        };
    });
    return commandObj;
}
var _default = codegenNativeCommands;


}),
41268: (function (__unused_webpack_module, exports, __webpack_require__) {
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 *       strict
 * @format
 */ Object.defineProperty(exports, "__esModule", ({
    value: true
}));
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: Object.getOwnPropertyDescriptor(all, name).get
    });
}
_export(exports, {
    get // Re-exporting for backwards compatibility with all the clients that
    // may still import it from this module.
    /**
 * This function creates performance loggers that can be used to collect and log
 * various performance data such as timespans, points and extras.
 * The loggers need to have minimal overhead since they're used in production.
 */ default () {
        return createPerformanceLogger;
    },
    get getCurrentTimestamp () {
        return getCurrentTimestamp;
    }
});
var _class_call_check = __webpack_require__(8864);
var _create_class = __webpack_require__(93072);
var _interop_require_default = __webpack_require__(66705);
var _object_spread = __webpack_require__(36192);
var _infoLog = /*#__PURE__*/ _interop_require_default._(__webpack_require__(63649));
var PRINT_TO_CONSOLE = false; // Type as false to prevent accidentally committing `true`;
var getCurrentTimestamp = __webpack_require__.g.nativeQPLTimestamp ?? (()=>__webpack_require__.g.performance.now());
var PerformanceLogger = /*#__PURE__*/ function() {
    "use strict";
    function PerformanceLogger() {
        _class_call_check._(this, PerformanceLogger);
        this._timespans = {};
        this._extras = {};
        this._points = {};
        this._pointExtras = {};
        this._closed = false;
    }
    _create_class._(PerformanceLogger, [
        {
            key: "addTimespan",
            value: function addTimespan(key, startTime, endTime, startExtras, endExtras) {
                if (this._closed) {
                    if (PRINT_TO_CONSOLE && false) {}
                    return;
                }
                if (this._timespans[key]) {
                    if (PRINT_TO_CONSOLE && false) {}
                    return;
                }
                this._timespans[key] = {
                    startTime,
                    endTime,
                    totalTime: endTime - (startTime || 0),
                    startExtras,
                    endExtras
                };
            }
        },
        {
            key: "append",
            value: function append(performanceLogger) {
                this._timespans = _object_spread._({}, performanceLogger.getTimespans(), this._timespans);
                this._extras = _object_spread._({}, performanceLogger.getExtras(), this._extras);
                this._points = _object_spread._({}, performanceLogger.getPoints(), this._points);
                this._pointExtras = _object_spread._({}, performanceLogger.getPointExtras(), this._pointExtras);
            }
        },
        {
            key: "clear",
            value: function clear() {
                this._timespans = {};
                this._extras = {};
                this._points = {};
                if (PRINT_TO_CONSOLE) {
                    (0, _infoLog.default)('PerformanceLogger.js', 'clear');
                }
            }
        },
        {
            key: "clearCompleted",
            value: function clearCompleted() {
                for(var key in this._timespans){
                    var _this__timespans_key;
                    if (((_this__timespans_key = this._timespans[key]) === null || _this__timespans_key === void 0 ? void 0 : _this__timespans_key.totalTime) != null) {
                        delete this._timespans[key];
                    }
                }
                this._extras = {};
                this._points = {};
                if (PRINT_TO_CONSOLE) {
                    (0, _infoLog.default)('PerformanceLogger.js', 'clearCompleted');
                }
            }
        },
        {
            key: "close",
            value: function close() {
                this._closed = true;
            }
        },
        {
            key: "currentTimestamp",
            value: function currentTimestamp() {
                return getCurrentTimestamp();
            }
        },
        {
            key: "getExtras",
            value: function getExtras() {
                return this._extras;
            }
        },
        {
            key: "getPoints",
            value: function getPoints() {
                return this._points;
            }
        },
        {
            key: "getPointExtras",
            value: function getPointExtras() {
                return this._pointExtras;
            }
        },
        {
            key: "getTimespans",
            value: function getTimespans() {
                return this._timespans;
            }
        },
        {
            key: "hasTimespan",
            value: function hasTimespan(key) {
                return !!this._timespans[key];
            }
        },
        {
            key: "isClosed",
            value: function isClosed() {
                return this._closed;
            }
        },
        {
            key: "logEverything",
            value: function logEverything() {
                if (PRINT_TO_CONSOLE) {
                    // log timespans
                    for(var key in this._timespans){
                        var _this__timespans_key;
                        if (((_this__timespans_key = this._timespans[key]) === null || _this__timespans_key === void 0 ? void 0 : _this__timespans_key.totalTime) != null) {
                            (0, _infoLog.default)(key + ': ' + this._timespans[key].totalTime + 'ms');
                        }
                    }
                    // log extras
                    (0, _infoLog.default)(this._extras);
                    // log points
                    for(var key1 in this._points){
                        if (this._points[key1] != null) {
                            (0, _infoLog.default)(key1 + ': ' + this._points[key1] + 'ms');
                        }
                    }
                }
            }
        },
        {
            key: "markPoint",
            value: function markPoint(key, ref, extras) {
                var timestamp = ref === void 0 ? getCurrentTimestamp() : ref;
                if (this._closed) {
                    if (PRINT_TO_CONSOLE && false) {}
                    return;
                }
                if (this._points[key] != null) {
                    if (PRINT_TO_CONSOLE && false) {}
                    return;
                }
                this._points[key] = timestamp;
                if (extras) {
                    this._pointExtras[key] = extras;
                }
            }
        },
        {
            key: "removeExtra",
            value: function removeExtra(key) {
                var value = this._extras[key];
                delete this._extras[key];
                return value;
            }
        },
        {
            key: "setExtra",
            value: function setExtra(key, value) {
                if (this._closed) {
                    if (PRINT_TO_CONSOLE && false) {}
                    return;
                }
                if (this._extras.hasOwnProperty(key)) {
                    if (PRINT_TO_CONSOLE && false) {}
                    return;
                }
                this._extras[key] = value;
            }
        },
        {
            key: "startTimespan",
            value: function startTimespan(key, ref, extras) {
                var timestamp = ref === void 0 ? getCurrentTimestamp() : ref;
                if (this._closed) {
                    if (PRINT_TO_CONSOLE && false) {}
                    return;
                }
                if (this._timespans[key]) {
                    if (PRINT_TO_CONSOLE && false) {}
                    return;
                }
                this._timespans[key] = {
                    startTime: timestamp,
                    startExtras: extras
                };
                if (PRINT_TO_CONSOLE) {
                    (0, _infoLog.default)('PerformanceLogger.js', 'start: ' + key);
                }
            }
        },
        {
            key: "stopTimespan",
            value: function stopTimespan(key, ref, extras) {
                var timestamp = ref === void 0 ? getCurrentTimestamp() : ref;
                if (this._closed) {
                    if (PRINT_TO_CONSOLE && false) {}
                    return;
                }
                var timespan = this._timespans[key];
                if (!timespan || timespan.startTime == null) {
                    if (PRINT_TO_CONSOLE && false) {}
                    return;
                }
                if (timespan.endTime != null) {
                    if (PRINT_TO_CONSOLE && false) {}
                    return;
                }
                timespan.endExtras = extras;
                timespan.endTime = timestamp;
                timespan.totalTime = timespan.endTime - (timespan.startTime || 0);
                if (PRINT_TO_CONSOLE) {
                    (0, _infoLog.default)('PerformanceLogger.js', 'end: ' + key);
                }
            }
        }
    ]);
    return PerformanceLogger;
}();
function createPerformanceLogger() {
    return new PerformanceLogger();
}


}),
14702: (function (module) {
"use strict";
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * @format
 *       strict
 */ 
/**
 * If your application is accepting different values for the same field over
 * time and is doing a diff on them, you can either (1) create a copy or
 * (2) ensure that those values are not mutated behind two passes.
 * This function helps you with (2) by freezing the object and throwing if
 * the user subsequently modifies the value.
 *
 * There are two caveats with this function:
 *   - If the call site is not in strict mode, it will only throw when
 *     mutating existing fields, adding a new one
 *     will unfortunately fail silently :(
 *   - If the object is already frozen or sealed, it will not continue the
 *     deep traversal and will leave leaf nodes unfrozen.
 *
 * Freezing the object and adding the throw mechanism is expensive and will
 * only be used in DEV.
 */ function deepFreezeAndThrowOnMutationInDev(object) {
    if (false) { var hasOwnProperty, keys, i1, i, key1, key }
    return object;
}
/* $FlowFixMe[missing-local-annot] The type annotation(s) required by Flow's
 * LTI update could not be added via codemod */ function throwOnImmutableMutation(key, value) {
    throw Error('You attempted to set the key `' + key + '` with the value `' + JSON.stringify(value) + '` on an object that is meant to be immutable ' + 'and has been frozen.');
}
function identity(value) {
    return value;
}
module.exports = deepFreezeAndThrowOnMutationInDev;


}),
53077: (function (module) {
"use strict";
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * @format
 *       strict
 */ 
/**
 * Defines a lazily evaluated property on the supplied `object`.
 */ function defineLazyObjectProperty(object, name, descriptor) {
    var get = descriptor.get;
    var enumerable = descriptor.enumerable !== false;
    var writable = descriptor.writable !== false;
    var value;
    var valueSet = false;
    function getValue() {
        // WORKAROUND: A weird infinite loop occurs where calling `getValue` calls
        // `setValue` which calls `Object.defineProperty` which somehow triggers
        // `getValue` again. Adding `valueSet` breaks this loop.
        if (!valueSet) {
            // Calling `get()` here can trigger an infinite loop if it fails to
            // remove the getter on the property, which can happen when executing
            // JS in a V8 context.  `valueSet = true` will break this loop, and
            // sets the value of the property to undefined, until the code in `get()`
            // finishes, at which point the property is set to the correct value.
            valueSet = true;
            setValue(get());
        }
        return value;
    }
    function setValue(newValue) {
        value = newValue;
        valueSet = true;
        Object.defineProperty(object, name, {
            value: newValue,
            configurable: true,
            enumerable,
            writable
        });
    }
    Object.defineProperty(object, name, {
        get: getValue,
        set: setValue,
        configurable: true,
        enumerable
    });
}
module.exports = defineLazyObjectProperty;


}),
14691: (function (module) {
"use strict";
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * @format
 *      
 */ 
var dummyInsets = {
    top: undefined,
    left: undefined,
    right: undefined,
    bottom: undefined
};
var insetsDiffer = function(one, two) {
    one = one || dummyInsets;
    two = two || dummyInsets;
    return one !== two && (one.top !== two.top || one.left !== two.left || one.right !== two.right || one.bottom !== two.bottom);
};
module.exports = insetsDiffer;


}),
96940: (function (module) {
"use strict";
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * @format
 *       strict
 */ 
/**
 * Unrolls an array comparison specially for matrices. Prioritizes
 * checking of indices that are most likely to change so that the comparison
 * bails as early as possible.
 *
 * @param {MatrixMath.Matrix} one First matrix.
 * @param {MatrixMath.Matrix} two Second matrix.
 * @return {boolean} Whether or not the two matrices differ.
 */ var matricesDiffer = function(one, two) {
    if (one === two) {
        return false;
    }
    return !one || !two || one[12] !== two[12] || one[13] !== two[13] || one[14] !== two[14] || one[5] !== two[5] || one[10] !== two[10] || one[0] !== two[0] || one[1] !== two[1] || one[2] !== two[2] || one[3] !== two[3] || one[4] !== two[4] || one[6] !== two[6] || one[7] !== two[7] || one[8] !== two[8] || one[9] !== two[9] || one[11] !== two[11] || one[15] !== two[15];
};
module.exports = matricesDiffer;


}),
60882: (function (module) {
"use strict";
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * @format
 *      
 */ 
var dummyPoint = {
    x: undefined,
    y: undefined
};
var pointsDiffer = function(one, two) {
    one = one || dummyPoint;
    two = two || dummyPoint;
    return one !== two && (one.x !== two.x || one.y !== two.y);
};
module.exports = pointsDiffer;


}),
24395: (function (module) {
"use strict";
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 *       strict
 * @format
 */ 
var dummySize = {
    width: undefined,
    height: undefined
};
var sizesDiffer = function(one, two) {
    var defaultedOne = one || dummySize;
    var defaultedTwo = two || dummySize;
    return defaultedOne !== defaultedTwo && (defaultedOne.width !== defaultedTwo.width || defaultedOne.height !== defaultedTwo.height);
};
module.exports = sizesDiffer;


}),
63649: (function (module, exports, __webpack_require__) {
"use strict";
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * @format
 *       strict
 */ 
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
var _to_consumable_array = __webpack_require__(92716);
/**
 * Intentional info-level logging for clear separation from ad-hoc console debug logging.
 */ function infoLog(...args) {
    var _console;
    return (_console = console).log.apply(_console, _to_consumable_array._(args));
}
module.exports = infoLog;


}),
47264: (function (__unused_webpack_module, exports, __webpack_require__) {
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * @format
 *       strict
 */ Object.defineProperty(exports, "__esModule", ({
    value: true
}));
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: Object.getOwnPropertyDescriptor(all, name).get
    });
}
_export(exports, {
    get createStringifySafeWithLimits () {
        return createStringifySafeWithLimits;
    },
    get default () {
        return _default;
    }
});
var _interop_require_default = __webpack_require__(66705);
var _invariant = /*#__PURE__*/ _interop_require_default._(__webpack_require__(56481));
function createStringifySafeWithLimits(limits) {
    var _limits_maxDepth = limits.maxDepth, maxDepth = _limits_maxDepth === void 0 ? Number.POSITIVE_INFINITY : _limits_maxDepth, _limits_maxStringLimit = limits.maxStringLimit, maxStringLimit = _limits_maxStringLimit === void 0 ? Number.POSITIVE_INFINITY : _limits_maxStringLimit, _limits_maxArrayLimit = limits.maxArrayLimit, maxArrayLimit = _limits_maxArrayLimit === void 0 ? Number.POSITIVE_INFINITY : _limits_maxArrayLimit, _limits_maxObjectKeysLimit = limits.maxObjectKeysLimit, maxObjectKeysLimit = _limits_maxObjectKeysLimit === void 0 ? Number.POSITIVE_INFINITY : _limits_maxObjectKeysLimit;
    var stack = [];
    /* $FlowFixMe[missing-this-annot] The 'this' type annotation(s) required by
   * Flow's LTI update could not be added via codemod */ function replacer(key, value) {
        while(stack.length && this !== stack[0]){
            stack.shift();
        }
        if (typeof value === 'string') {
            var truncatedString = '...(truncated)...';
            if (value.length > maxStringLimit + truncatedString.length) {
                return value.substring(0, maxStringLimit) + truncatedString;
            }
            return value;
        }
        if (typeof value !== 'object' || value === null) {
            return value;
        }
        var retval = value;
        if (Array.isArray(value)) {
            if (stack.length >= maxDepth) {
                retval = `[ ... array with ${value.length} values ... ]`;
            } else if (value.length > maxArrayLimit) {
                retval = value.slice(0, maxArrayLimit).concat([
                    `... extra ${value.length - maxArrayLimit} values truncated ...`
                ]);
            }
        } else {
            // Add refinement after Array.isArray call.
            (0, _invariant.default)(typeof value === 'object', 'This was already found earlier');
            var keys = Object.keys(value);
            if (stack.length >= maxDepth) {
                retval = `{ ... object with ${keys.length} keys ... }`;
            } else if (keys.length > maxObjectKeysLimit) {
                // Return a sample of the keys.
                retval = {};
                for (var k of keys.slice(0, maxObjectKeysLimit)){
                    retval[k] = value[k];
                }
                var truncatedKey = '...(truncated keys)...';
                retval[truncatedKey] = keys.length - maxObjectKeysLimit;
            }
        }
        stack.unshift(retval);
        return retval;
    }
    return function stringifySafe(arg) {
        if (arg === undefined) {
            return 'undefined';
        } else if (arg === null) {
            return 'null';
        } else if (typeof arg === 'function') {
            try {
                return arg.toString();
            } catch (e) {
                return '[function unknown]';
            }
        } else if (arg instanceof Error) {
            return arg.name + ': ' + arg.message;
        } else {
            // Perform a try catch, just in case the object has a circular
            // reference or stringify throws for some other reason.
            try {
                var ret = JSON.stringify(arg, replacer);
                if (ret === undefined) {
                    return '["' + typeof arg + '" failed to stringify]';
                }
                return ret;
            } catch (e) {
                if (typeof arg.toString === 'function') {
                    try {
                        // $FlowFixMe[incompatible-use] : toString shouldn't take any arguments in general.
                        return arg.toString();
                    } catch (E) {}
                }
            }
        }
        return '["' + typeof arg + '" failed to stringify]';
    };
}
var stringifySafe = createStringifySafeWithLimits({
    maxDepth: 10,
    maxStringLimit: 100,
    maxArrayLimit: 50,
    maxObjectKeysLimit: 50
});
var _default = stringifySafe;


}),
93473: (function (module) {
"use strict";
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * @format
 *       strict
 */ 
var warnedKeys = {};
/**
 * A simple function that prints a warning message once per session.
 *
 * @param {string} key - The key used to ensure the message is printed once.
 *                       This should be unique to the callsite.
 * @param {string} message - The message to print
 */ function warnOnce(key, message) {
    if (warnedKeys[key]) {
        return;
    }
    console.warn(message);
    warnedKeys[key] = true;
}
module.exports = warnOnce;


}),
9188: (function (module, exports, __webpack_require__) {
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * @format
 *      
 */ Object.defineProperty(exports, "__esModule", ({
    value: true
}));
var _call_super = __webpack_require__(19436);
var _class_call_check = __webpack_require__(8864);
var _create_class = __webpack_require__(93072);
var _inherits = __webpack_require__(82397);
var _interop_require_default = __webpack_require__(66705);
var _object_without_properties = __webpack_require__(86136);
var _to_consumable_array = __webpack_require__(92716);
var _Blob = /*#__PURE__*/ _interop_require_default._(__webpack_require__(56540));
var _BlobManager = /*#__PURE__*/ _interop_require_default._(__webpack_require__(28586));
var _NativeEventEmitter = /*#__PURE__*/ _interop_require_default._(__webpack_require__(55438));
var _binaryToBase64 = /*#__PURE__*/ _interop_require_default._(__webpack_require__(74259));
var _Platform = /*#__PURE__*/ _interop_require_default._(__webpack_require__(181));
var _NativeWebSocketModule = /*#__PURE__*/ _interop_require_default._(__webpack_require__(10967));
var _WebSocketEvent = /*#__PURE__*/ _interop_require_default._(__webpack_require__(77233));
var _base64js = /*#__PURE__*/ _interop_require_default._(__webpack_require__(25608));
var _eventtargetshim = /*#__PURE__*/ _interop_require_default._(__webpack_require__(65803));
var _invariant = /*#__PURE__*/ _interop_require_default._(__webpack_require__(56481));
var CONNECTING = 0;
var OPEN = 1;
var CLOSING = 2;
var CLOSED = 3;
var CLOSE_NORMAL = 1000;
// Abnormal closure where no code is provided in a control frame
// https://www.rfc-editor.org/rfc/rfc6455.html#section-7.1.5
var CLOSE_ABNORMAL = 1006;
var WEBSOCKET_EVENTS = [
    'close',
    'error',
    'message',
    'open'
];
var nextWebSocketId = 0;
/**
 * Browser-compatible WebSockets implementation.
 *
 * See https://developer.mozilla.org/en-US/docs/Web/API/WebSocket
 * See https://github.com/websockets/ws
 */ var WebSocket = /*#__PURE__*/ function(_EventTarget) {
    "use strict";
    _inherits._(WebSocket, _EventTarget);
    function WebSocket(url, protocols, options) {
        _class_call_check._(this, WebSocket);
        var _this;
        _this = _call_super._(this, WebSocket), _this.CONNECTING = CONNECTING, _this.OPEN = OPEN, _this.CLOSING = CLOSING, _this.CLOSED = CLOSED, _this.readyState = CONNECTING;
        _this.url = url;
        if (typeof protocols === 'string') {
            protocols = [
                protocols
            ];
        }
        var _ref = options || {}, _ref_headers = _ref.headers, headers = _ref_headers === void 0 ? {} : _ref_headers, unrecognized = _object_without_properties._(_ref, [
            "headers"
        ]);
        // Preserve deprecated backwards compatibility for the 'origin' option
        // $FlowFixMe[prop-missing]
        if (unrecognized && typeof unrecognized.origin === 'string') {
            console.warn('Specifying `origin` as a WebSocket connection option is deprecated. Include it under `headers` instead.');
            /* $FlowFixMe[prop-missing] (>=0.54.0 site=react_native_fb,react_native_
       * oss) This comment suppresses an error found when Flow v0.54 was
       * deployed. To see the error delete this comment and run Flow. */ headers.origin = unrecognized.origin;
            /* $FlowFixMe[prop-missing] (>=0.54.0 site=react_native_fb,react_native_
       * oss) This comment suppresses an error found when Flow v0.54 was
       * deployed. To see the error delete this comment and run Flow. */ delete unrecognized.origin;
        }
        // Warn about and discard anything else
        if (Object.keys(unrecognized).length > 0) {
            console.warn('Unrecognized WebSocket connection option(s) `' + Object.keys(unrecognized).join('`, `') + '`. ' + 'Did you mean to put these under `headers`?');
        }
        if (!Array.isArray(protocols)) {
            protocols = null;
        }
        _this._eventEmitter = new _NativeEventEmitter.default(// T88715063: NativeEventEmitter only used this parameter on iOS. Now it uses it on all platforms, so this code was modified automatically to preserve its behavior
        // If you want to use the native module on other platforms, please remove this condition and test its behavior
        _Platform.default.OS !== 'ios' ? null : _NativeWebSocketModule.default);
        _this._socketId = nextWebSocketId++;
        _this._registerEvents();
        _NativeWebSocketModule.default.connect(url, protocols, {
            headers
        }, _this._socketId);
        return _this;
    }
    _create_class._(WebSocket, [
        {
            key: "binaryType",
            get: function() {
                return this._binaryType;
            },
            set: function(binaryType) {
                if (binaryType !== 'blob' && binaryType !== 'arraybuffer') {
                    throw new Error("binaryType must be either 'blob' or 'arraybuffer'");
                }
                if (this._binaryType === 'blob' || binaryType === 'blob') {
                    (0, _invariant.default)(_BlobManager.default.isAvailable, 'Native module BlobModule is required for blob support');
                    if (binaryType === 'blob') {
                        _BlobManager.default.addWebSocketHandler(this._socketId);
                    } else {
                        _BlobManager.default.removeWebSocketHandler(this._socketId);
                    }
                }
                this._binaryType = binaryType;
            }
        },
        {
            key: "close",
            value: function close(code, reason) {
                if (this.readyState === this.CLOSING || this.readyState === this.CLOSED) {
                    return;
                }
                this.readyState = this.CLOSING;
                this._close(code, reason);
            }
        },
        {
            key: "send",
            value: function send(data) {
                if (this.readyState === this.CONNECTING) {
                    throw new Error('INVALID_STATE_ERR');
                }
                if (data instanceof _Blob.default) {
                    (0, _invariant.default)(_BlobManager.default.isAvailable, 'Native module BlobModule is required for blob support');
                    _BlobManager.default.sendOverSocket(data, this._socketId);
                    return;
                }
                if (typeof data === 'string') {
                    _NativeWebSocketModule.default.send(data, this._socketId);
                    return;
                }
                if (data instanceof ArrayBuffer || ArrayBuffer.isView(data)) {
                    _NativeWebSocketModule.default.sendBinary((0, _binaryToBase64.default)(data), this._socketId);
                    return;
                }
                throw new Error('Unsupported data type');
            }
        },
        {
            key: "ping",
            value: function ping() {
                if (this.readyState === this.CONNECTING) {
                    throw new Error('INVALID_STATE_ERR');
                }
                _NativeWebSocketModule.default.ping(this._socketId);
            }
        },
        {
            key: "_close",
            value: function _close(code, reason) {
                // See https://developer.mozilla.org/en-US/docs/Web/API/CloseEvent
                var statusCode = typeof code === 'number' ? code : CLOSE_NORMAL;
                var closeReason = typeof reason === 'string' ? reason : '';
                _NativeWebSocketModule.default.close(statusCode, closeReason, this._socketId);
                if (_BlobManager.default.isAvailable && this._binaryType === 'blob') {
                    _BlobManager.default.removeWebSocketHandler(this._socketId);
                }
            }
        },
        {
            key: "_unregisterEvents",
            value: function _unregisterEvents() {
                this._subscriptions.forEach((e)=>e.remove());
                this._subscriptions = [];
            }
        },
        {
            key: "_registerEvents",
            value: function _registerEvents() {
                this._subscriptions = [
                    this._eventEmitter.addListener('websocketMessage', (ev)=>{
                        if (ev.id !== this._socketId) {
                            return;
                        }
                        var data = ev.data;
                        switch(ev.type){
                            case 'binary':
                                data = _base64js.default.toByteArray(ev.data).buffer;
                                break;
                            case 'blob':
                                data = _BlobManager.default.createFromOptions(ev.data);
                                break;
                        }
                        this.dispatchEvent(new _WebSocketEvent.default('message', {
                            data
                        }));
                    }),
                    this._eventEmitter.addListener('websocketOpen', (ev)=>{
                        if (ev.id !== this._socketId) {
                            return;
                        }
                        this.readyState = this.OPEN;
                        this.protocol = ev.protocol;
                        this.dispatchEvent(new _WebSocketEvent.default('open'));
                    }),
                    this._eventEmitter.addListener('websocketClosed', (ev)=>{
                        if (ev.id !== this._socketId) {
                            return;
                        }
                        this.readyState = this.CLOSED;
                        this.dispatchEvent(new _WebSocketEvent.default('close', {
                            code: ev.code,
                            reason: ev.reason
                        }));
                        this._unregisterEvents();
                        this.close();
                    }),
                    this._eventEmitter.addListener('websocketFailed', (ev)=>{
                        if (ev.id !== this._socketId) {
                            return;
                        }
                        this.readyState = this.CLOSED;
                        this.dispatchEvent(new _WebSocketEvent.default('error', {
                            message: ev.message
                        }));
                        this.dispatchEvent(new _WebSocketEvent.default('close', {
                            code: CLOSE_ABNORMAL,
                            reason: ev.message
                        }));
                        this._unregisterEvents();
                        this.close();
                    })
                ];
            }
        }
    ]);
    return WebSocket;
}(_eventtargetshim.default.apply(void 0, _to_consumable_array._(WEBSOCKET_EVENTS)));
WebSocket.CONNECTING = CONNECTING;
WebSocket.OPEN = OPEN;
WebSocket.CLOSING = CLOSING;
WebSocket.CLOSED = CLOSED;
module.exports = WebSocket;


}),
77233: (function (module, exports, __webpack_require__) {
"use strict";
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * @format
 *       strict-local
 */ 
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
var _class_call_check = __webpack_require__(8864);
/**
 * Event object passed to the `onopen`, `onclose`, `onmessage`, `onerror`
 * callbacks of `WebSocket`.
 *
 * The `type` property is "open", "close", "message", "error" respectively.
 *
 * In case of "message", the `data` property contains the incoming data.
 */ var WebSocketEvent = function WebSocketEvent(type, eventInitDict) {
    _class_call_check._(this, WebSocketEvent);
    this.type = type.toString();
    Object.assign(this, eventInitDict);
};
module.exports = WebSocketEvent;


}),
78549: (function (module, __unused_webpack_exports, __webpack_require__) {
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * @format
 *       strict
 */ /**
 * The particular require runtime that we are using looks for a global
 * `ErrorUtils` object and if it exists, then it requires modules with the
 * error handler specified via ErrorUtils.setGlobalHandler by calling the
 * require function with applyWithGuard. Since the require module is loaded
 * before any of the modules, this ErrorUtils must be defined (and the handler
 * set) globally before requiring anything.
 *
 * However, we still want to treat ErrorUtils as a module so that other modules
 * that use it aren't just using a global variable, so simply export the global
 * variable here. ErrorUtils is originally defined in a file named error-guard.js.
 */ module.exports = __webpack_require__.g.ErrorUtils;


}),
47006: (function (__unused_webpack_module, exports, __webpack_require__) {
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 *       strict
 * @format
 */ /**
 * EventEmitter manages listeners and publishes events to them.
 *
 * EventEmitter accepts a single type parameter that defines the valid events
 * and associated listener argument(s).
 *
 * @example
 *
 *   const emitter = new EventEmitter<{
 *     success: [number, string],
 *     error: [Error],
 *   }>();
 *
 *   emitter.on('success', (statusCode, responseText) => {...});
 *   emitter.emit('success', 200, '...');
 *
 *   emitter.on('error', error => {...});
 *   emitter.emit('error', new Error('Resource not found'));
 *
 */ Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return EventEmitter;
    }
}));
var _class_call_check = __webpack_require__(8864);
var _class_private_field_loose_base = __webpack_require__(28713);
var _class_private_field_loose_key = __webpack_require__(7979);
var _create_class = __webpack_require__(93072);
var // $FlowFixMe[incompatible-type]
_registry = /*#__PURE__*/ _class_private_field_loose_key._("_registry");
var EventEmitter = /*#__PURE__*/ function() {
    "use strict";
    function EventEmitter() {
        _class_call_check._(this, EventEmitter);
        Object.defineProperty(this, _registry, {
            writable: true,
            value: void 0
        });
        _class_private_field_loose_base._(this, _registry)[_registry] = {};
    }
    _create_class._(EventEmitter, [
        {
            /**
   * Registers a listener that is called when the supplied event is emitted.
   * Returns a subscription that has a `remove` method to undo registration.
   */ key: "addListener",
            value: function addListener(eventType, listener, context) {
                if (typeof listener !== 'function') {
                    throw new TypeError('EventEmitter.addListener(...): 2nd argument must be a function.');
                }
                var registrations = allocate(_class_private_field_loose_base._(this, _registry)[_registry], eventType);
                var registration = {
                    context,
                    listener,
                    remove () {
                        registrations.delete(registration);
                    }
                };
                registrations.add(registration);
                return registration;
            }
        },
        {
            /**
   * Emits the supplied event. Additional arguments supplied to `emit` will be
   * passed through to each of the registered listeners.
   *
   * If a listener modifies the listeners registered for the same event, those
   * changes will not be reflected in the current invocation of `emit`.
   */ key: "emit",
            value: function emit(eventType, ...args) {
                var registrations = _class_private_field_loose_base._(this, _registry)[_registry][eventType];
                if (registrations != null) {
                    // Copy `registrations` to take a snapshot when we invoke `emit`, in case
                    // registrations are added or removed when listeners are invoked.
                    for (var registration of Array.from(registrations)){
                        // $FlowFixMe[incompatible-call]
                        registration.listener.apply(registration.context, args);
                    }
                }
            }
        },
        {
            /**
   * Removes all registered listeners.
   */ key: "removeAllListeners",
            value: function removeAllListeners(eventType) {
                if (eventType == null) {
                    // $FlowFixMe[incompatible-type]
                    _class_private_field_loose_base._(this, _registry)[_registry] = {};
                } else {
                    delete _class_private_field_loose_base._(this, _registry)[_registry][eventType];
                }
            }
        },
        {
            /**
   * Returns the number of registered listeners for the supplied event.
   */ key: "listenerCount",
            value: function listenerCount(eventType) {
                var registrations = _class_private_field_loose_base._(this, _registry)[_registry][eventType];
                return registrations == null ? 0 : registrations.size;
            }
        }
    ]);
    return EventEmitter;
}();
function allocate(registry, eventType) {
    var registrations = registry[eventType];
    if (registrations == null) {
        registrations = new Set();
        registry[eventType] = registrations;
    }
    return registrations;
}


}),
31022: (function (__unused_webpack_module, exports, __webpack_require__) {
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * @generated SignedSource<<3037cf1c938dae492b656333cec9633c>>
 *       strict
 */ /**
 * IMPORTANT: Do NOT modify this file directly.
 *
 * To change the definition of the flags, edit
 *   packages/react-native/scripts/featureflags/ReactNativeFeatureFlags.config.js.
 *
 * To regenerate this code, run the following script from the repo root:
 *   yarn featureflags --update
 */ Object.defineProperty(exports, "__esModule", ({
    value: true
}));
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: Object.getOwnPropertyDescriptor(all, name).get
    });
}
_export(exports, {
    get animatedShouldDebounceQueueFlush () {
        return animatedShouldDebounceQueueFlush;
    },
    get animatedShouldUseSingleOp () {
        return animatedShouldUseSingleOp;
    },
    get commonTestFlag () {
        return commonTestFlag;
    },
    get commonTestFlagWithoutNativeImplementation () {
        return commonTestFlagWithoutNativeImplementation;
    },
    get completeReactInstanceCreationOnBgThreadOnAndroid () {
        return completeReactInstanceCreationOnBgThreadOnAndroid;
    },
    get disableEventLoopOnBridgeless () {
        return disableEventLoopOnBridgeless;
    },
    get disableInteractionManager () {
        return disableInteractionManager;
    },
    get disableInteractionManagerInBatchinator () {
        return disableInteractionManagerInBatchinator;
    },
    get disableMountItemReorderingAndroid () {
        return disableMountItemReorderingAndroid;
    },
    get enableAccessToHostTreeInFabric () {
        return enableAccessToHostTreeInFabric;
    },
    get enableAccumulatedUpdatesInRawPropsAndroid () {
        return enableAccumulatedUpdatesInRawPropsAndroid;
    },
    get enableAnimatedAllowlist () {
        return enableAnimatedAllowlist;
    },
    get enableAnimatedClearImmediateFix () {
        return enableAnimatedClearImmediateFix;
    },
    get enableAnimatedPropsMemo () {
        return enableAnimatedPropsMemo;
    },
    get enableBridgelessArchitecture () {
        return enableBridgelessArchitecture;
    },
    get enableCppPropsIteratorSetter () {
        return enableCppPropsIteratorSetter;
    },
    get enableDeletionOfUnmountedViews () {
        return enableDeletionOfUnmountedViews;
    },
    get enableEagerRootViewAttachment () {
        return enableEagerRootViewAttachment;
    },
    get enableEventEmitterRetentionDuringGesturesOnAndroid () {
        return enableEventEmitterRetentionDuringGesturesOnAndroid;
    },
    get enableFabricLogs () {
        return enableFabricLogs;
    },
    get enableFabricRenderer () {
        return enableFabricRenderer;
    },
    get enableFixForViewCommandRace () {
        return enableFixForViewCommandRace;
    },
    get enableGranularShadowTreeStateReconciliation () {
        return enableGranularShadowTreeStateReconciliation;
    },
    get enableIOSViewClipToPaddingBox () {
        return enableIOSViewClipToPaddingBox;
    },
    get enableImagePrefetchingAndroid () {
        return enableImagePrefetchingAndroid;
    },
    get enableLayoutAnimationsOnAndroid () {
        return enableLayoutAnimationsOnAndroid;
    },
    get enableLayoutAnimationsOnIOS () {
        return enableLayoutAnimationsOnIOS;
    },
    get enableLongTaskAPI () {
        return enableLongTaskAPI;
    },
    get enableNewBackgroundAndBorderDrawables () {
        return enableNewBackgroundAndBorderDrawables;
    },
    get enablePreciseSchedulingForPremountItemsOnAndroid () {
        return enablePreciseSchedulingForPremountItemsOnAndroid;
    },
    get enablePropsUpdateReconciliationAndroid () {
        return enablePropsUpdateReconciliationAndroid;
    },
    get enableReportEventPaintTime () {
        return enableReportEventPaintTime;
    },
    get enableSynchronousStateUpdates () {
        return enableSynchronousStateUpdates;
    },
    get enableUIConsistency () {
        return enableUIConsistency;
    },
    get enableViewRecycling () {
        return enableViewRecycling;
    },
    get excludeYogaFromRawProps () {
        return excludeYogaFromRawProps;
    },
    get fixDifferentiatorEmittingUpdatesWithWrongParentTag () {
        return fixDifferentiatorEmittingUpdatesWithWrongParentTag;
    },
    get fixMappingOfEventPrioritiesBetweenFabricAndReact () {
        return fixMappingOfEventPrioritiesBetweenFabricAndReact;
    },
    get fixMountingCoordinatorReportedPendingTransactionsOnAndroid () {
        return fixMountingCoordinatorReportedPendingTransactionsOnAndroid;
    },
    get fixVirtualizeListCollapseWindowSize () {
        return fixVirtualizeListCollapseWindowSize;
    },
    get fuseboxEnabledRelease () {
        return fuseboxEnabledRelease;
    },
    get initEagerTurboModulesOnNativeModulesQueueAndroid () {
        return initEagerTurboModulesOnNativeModulesQueueAndroid;
    },
    get isLayoutAnimationEnabled () {
        return isLayoutAnimationEnabled;
    },
    get jsOnlyTestFlag () {
        return jsOnlyTestFlag;
    },
    get lazyAnimationCallbacks () {
        return lazyAnimationCallbacks;
    },
    get loadVectorDrawablesOnImages () {
        return loadVectorDrawablesOnImages;
    },
    get override () {
        return override;
    },
    get shouldSkipStateUpdatesForLoopingAnimations () {
        return shouldSkipStateUpdatesForLoopingAnimations;
    },
    get shouldUseAnimatedObjectForTransform () {
        return shouldUseAnimatedObjectForTransform;
    },
    get shouldUseRemoveClippedSubviewsAsDefaultOnIOS () {
        return shouldUseRemoveClippedSubviewsAsDefaultOnIOS;
    },
    get shouldUseSetNativePropsInFabric () {
        return shouldUseSetNativePropsInFabric;
    },
    get traceTurboModulePromiseRejectionsOnAndroid () {
        return traceTurboModulePromiseRejectionsOnAndroid;
    },
    get useAlwaysAvailableJSErrorHandling () {
        return useAlwaysAvailableJSErrorHandling;
    },
    get useFabricInterop () {
        return useFabricInterop;
    },
    get useImmediateExecutorInAndroidBridgeless () {
        return useImmediateExecutorInAndroidBridgeless;
    },
    get useInsertionEffectsForAnimations () {
        return useInsertionEffectsForAnimations;
    },
    get useNativeViewConfigsInBridgelessMode () {
        return useNativeViewConfigsInBridgelessMode;
    },
    get useOptimisedViewPreallocationOnAndroid () {
        return useOptimisedViewPreallocationOnAndroid;
    },
    get useOptimizedEventBatchingOnAndroid () {
        return useOptimizedEventBatchingOnAndroid;
    },
    get useRawPropsJsiValue () {
        return useRawPropsJsiValue;
    },
    get useRefsForTextInputState () {
        return useRefsForTextInputState;
    },
    get useRuntimeShadowNodeReferenceUpdate () {
        return useRuntimeShadowNodeReferenceUpdate;
    },
    get useTurboModuleInterop () {
        return useTurboModuleInterop;
    },
    get useTurboModules () {
        return useTurboModules;
    }
});
var _ReactNativeFeatureFlagsBase = __webpack_require__(25282);
var jsOnlyTestFlag = (0, _ReactNativeFeatureFlagsBase.createJavaScriptFlagGetter)('jsOnlyTestFlag', false);
var animatedShouldDebounceQueueFlush = (0, _ReactNativeFeatureFlagsBase.createJavaScriptFlagGetter)('animatedShouldDebounceQueueFlush', false);
var animatedShouldUseSingleOp = (0, _ReactNativeFeatureFlagsBase.createJavaScriptFlagGetter)('animatedShouldUseSingleOp', false);
var disableInteractionManager = (0, _ReactNativeFeatureFlagsBase.createJavaScriptFlagGetter)('disableInteractionManager', false);
var disableInteractionManagerInBatchinator = (0, _ReactNativeFeatureFlagsBase.createJavaScriptFlagGetter)('disableInteractionManagerInBatchinator', false);
var enableAccessToHostTreeInFabric = (0, _ReactNativeFeatureFlagsBase.createJavaScriptFlagGetter)('enableAccessToHostTreeInFabric', false);
var enableAnimatedAllowlist = (0, _ReactNativeFeatureFlagsBase.createJavaScriptFlagGetter)('enableAnimatedAllowlist', true);
var enableAnimatedClearImmediateFix = (0, _ReactNativeFeatureFlagsBase.createJavaScriptFlagGetter)('enableAnimatedClearImmediateFix', true);
var enableAnimatedPropsMemo = (0, _ReactNativeFeatureFlagsBase.createJavaScriptFlagGetter)('enableAnimatedPropsMemo', true);
var fixVirtualizeListCollapseWindowSize = (0, _ReactNativeFeatureFlagsBase.createJavaScriptFlagGetter)('fixVirtualizeListCollapseWindowSize', false);
var isLayoutAnimationEnabled = (0, _ReactNativeFeatureFlagsBase.createJavaScriptFlagGetter)('isLayoutAnimationEnabled', true);
var shouldSkipStateUpdatesForLoopingAnimations = (0, _ReactNativeFeatureFlagsBase.createJavaScriptFlagGetter)('shouldSkipStateUpdatesForLoopingAnimations', true);
var shouldUseAnimatedObjectForTransform = (0, _ReactNativeFeatureFlagsBase.createJavaScriptFlagGetter)('shouldUseAnimatedObjectForTransform', false);
var shouldUseRemoveClippedSubviewsAsDefaultOnIOS = (0, _ReactNativeFeatureFlagsBase.createJavaScriptFlagGetter)('shouldUseRemoveClippedSubviewsAsDefaultOnIOS', false);
var shouldUseSetNativePropsInFabric = (0, _ReactNativeFeatureFlagsBase.createJavaScriptFlagGetter)('shouldUseSetNativePropsInFabric', true);
var useInsertionEffectsForAnimations = (0, _ReactNativeFeatureFlagsBase.createJavaScriptFlagGetter)('useInsertionEffectsForAnimations', true);
var useRefsForTextInputState = (0, _ReactNativeFeatureFlagsBase.createJavaScriptFlagGetter)('useRefsForTextInputState', false);
var commonTestFlag = (0, _ReactNativeFeatureFlagsBase.createNativeFlagGetter)('commonTestFlag', false);
var commonTestFlagWithoutNativeImplementation = (0, _ReactNativeFeatureFlagsBase.createNativeFlagGetter)('commonTestFlagWithoutNativeImplementation', false);
var completeReactInstanceCreationOnBgThreadOnAndroid = (0, _ReactNativeFeatureFlagsBase.createNativeFlagGetter)('completeReactInstanceCreationOnBgThreadOnAndroid', true);
var disableEventLoopOnBridgeless = (0, _ReactNativeFeatureFlagsBase.createNativeFlagGetter)('disableEventLoopOnBridgeless', false);
var disableMountItemReorderingAndroid = (0, _ReactNativeFeatureFlagsBase.createNativeFlagGetter)('disableMountItemReorderingAndroid', false);
var enableAccumulatedUpdatesInRawPropsAndroid = (0, _ReactNativeFeatureFlagsBase.createNativeFlagGetter)('enableAccumulatedUpdatesInRawPropsAndroid', false);
var enableBridgelessArchitecture = (0, _ReactNativeFeatureFlagsBase.createNativeFlagGetter)('enableBridgelessArchitecture', false);
var enableCppPropsIteratorSetter = (0, _ReactNativeFeatureFlagsBase.createNativeFlagGetter)('enableCppPropsIteratorSetter', false);
var enableDeletionOfUnmountedViews = (0, _ReactNativeFeatureFlagsBase.createNativeFlagGetter)('enableDeletionOfUnmountedViews', false);
var enableEagerRootViewAttachment = (0, _ReactNativeFeatureFlagsBase.createNativeFlagGetter)('enableEagerRootViewAttachment', false);
var enableEventEmitterRetentionDuringGesturesOnAndroid = (0, _ReactNativeFeatureFlagsBase.createNativeFlagGetter)('enableEventEmitterRetentionDuringGesturesOnAndroid', false);
var enableFabricLogs = (0, _ReactNativeFeatureFlagsBase.createNativeFlagGetter)('enableFabricLogs', false);
var enableFabricRenderer = (0, _ReactNativeFeatureFlagsBase.createNativeFlagGetter)('enableFabricRenderer', false);
var enableFixForViewCommandRace = (0, _ReactNativeFeatureFlagsBase.createNativeFlagGetter)('enableFixForViewCommandRace', false);
var enableGranularShadowTreeStateReconciliation = (0, _ReactNativeFeatureFlagsBase.createNativeFlagGetter)('enableGranularShadowTreeStateReconciliation', false);
var enableIOSViewClipToPaddingBox = (0, _ReactNativeFeatureFlagsBase.createNativeFlagGetter)('enableIOSViewClipToPaddingBox', false);
var enableImagePrefetchingAndroid = (0, _ReactNativeFeatureFlagsBase.createNativeFlagGetter)('enableImagePrefetchingAndroid', false);
var enableLayoutAnimationsOnAndroid = (0, _ReactNativeFeatureFlagsBase.createNativeFlagGetter)('enableLayoutAnimationsOnAndroid', false);
var enableLayoutAnimationsOnIOS = (0, _ReactNativeFeatureFlagsBase.createNativeFlagGetter)('enableLayoutAnimationsOnIOS', true);
var enableLongTaskAPI = (0, _ReactNativeFeatureFlagsBase.createNativeFlagGetter)('enableLongTaskAPI', false);
var enableNewBackgroundAndBorderDrawables = (0, _ReactNativeFeatureFlagsBase.createNativeFlagGetter)('enableNewBackgroundAndBorderDrawables', false);
var enablePreciseSchedulingForPremountItemsOnAndroid = (0, _ReactNativeFeatureFlagsBase.createNativeFlagGetter)('enablePreciseSchedulingForPremountItemsOnAndroid', false);
var enablePropsUpdateReconciliationAndroid = (0, _ReactNativeFeatureFlagsBase.createNativeFlagGetter)('enablePropsUpdateReconciliationAndroid', false);
var enableReportEventPaintTime = (0, _ReactNativeFeatureFlagsBase.createNativeFlagGetter)('enableReportEventPaintTime', false);
var enableSynchronousStateUpdates = (0, _ReactNativeFeatureFlagsBase.createNativeFlagGetter)('enableSynchronousStateUpdates', false);
var enableUIConsistency = (0, _ReactNativeFeatureFlagsBase.createNativeFlagGetter)('enableUIConsistency', false);
var enableViewRecycling = (0, _ReactNativeFeatureFlagsBase.createNativeFlagGetter)('enableViewRecycling', false);
var excludeYogaFromRawProps = (0, _ReactNativeFeatureFlagsBase.createNativeFlagGetter)('excludeYogaFromRawProps', false);
var fixDifferentiatorEmittingUpdatesWithWrongParentTag = (0, _ReactNativeFeatureFlagsBase.createNativeFlagGetter)('fixDifferentiatorEmittingUpdatesWithWrongParentTag', true);
var fixMappingOfEventPrioritiesBetweenFabricAndReact = (0, _ReactNativeFeatureFlagsBase.createNativeFlagGetter)('fixMappingOfEventPrioritiesBetweenFabricAndReact', false);
var fixMountingCoordinatorReportedPendingTransactionsOnAndroid = (0, _ReactNativeFeatureFlagsBase.createNativeFlagGetter)('fixMountingCoordinatorReportedPendingTransactionsOnAndroid', false);
var fuseboxEnabledRelease = (0, _ReactNativeFeatureFlagsBase.createNativeFlagGetter)('fuseboxEnabledRelease', false);
var initEagerTurboModulesOnNativeModulesQueueAndroid = (0, _ReactNativeFeatureFlagsBase.createNativeFlagGetter)('initEagerTurboModulesOnNativeModulesQueueAndroid', true);
var lazyAnimationCallbacks = (0, _ReactNativeFeatureFlagsBase.createNativeFlagGetter)('lazyAnimationCallbacks', false);
var loadVectorDrawablesOnImages = (0, _ReactNativeFeatureFlagsBase.createNativeFlagGetter)('loadVectorDrawablesOnImages', true);
var traceTurboModulePromiseRejectionsOnAndroid = (0, _ReactNativeFeatureFlagsBase.createNativeFlagGetter)('traceTurboModulePromiseRejectionsOnAndroid', false);
var useAlwaysAvailableJSErrorHandling = (0, _ReactNativeFeatureFlagsBase.createNativeFlagGetter)('useAlwaysAvailableJSErrorHandling', false);
var useFabricInterop = (0, _ReactNativeFeatureFlagsBase.createNativeFlagGetter)('useFabricInterop', false);
var useImmediateExecutorInAndroidBridgeless = (0, _ReactNativeFeatureFlagsBase.createNativeFlagGetter)('useImmediateExecutorInAndroidBridgeless', true);
var useNativeViewConfigsInBridgelessMode = (0, _ReactNativeFeatureFlagsBase.createNativeFlagGetter)('useNativeViewConfigsInBridgelessMode', false);
var useOptimisedViewPreallocationOnAndroid = (0, _ReactNativeFeatureFlagsBase.createNativeFlagGetter)('useOptimisedViewPreallocationOnAndroid', false);
var useOptimizedEventBatchingOnAndroid = (0, _ReactNativeFeatureFlagsBase.createNativeFlagGetter)('useOptimizedEventBatchingOnAndroid', false);
var useRawPropsJsiValue = (0, _ReactNativeFeatureFlagsBase.createNativeFlagGetter)('useRawPropsJsiValue', false);
var useRuntimeShadowNodeReferenceUpdate = (0, _ReactNativeFeatureFlagsBase.createNativeFlagGetter)('useRuntimeShadowNodeReferenceUpdate', true);
var useTurboModuleInterop = (0, _ReactNativeFeatureFlagsBase.createNativeFlagGetter)('useTurboModuleInterop', false);
var useTurboModules = (0, _ReactNativeFeatureFlagsBase.createNativeFlagGetter)('useTurboModules', false);
var override = _ReactNativeFeatureFlagsBase.setOverrides;


}),
25282: (function (__unused_webpack_module, exports, __webpack_require__) {
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 *       strict
 * @format
 */ Object.defineProperty(exports, "__esModule", ({
    value: true
}));
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: Object.getOwnPropertyDescriptor(all, name).get
    });
}
_export(exports, {
    get createJavaScriptFlagGetter () {
        return createJavaScriptFlagGetter;
    },
    get createNativeFlagGetter () {
        return createNativeFlagGetter;
    },
    get getOverrides () {
        return getOverrides;
    },
    get setOverrides () {
        return setOverrides;
    }
});
var _interop_require_default = __webpack_require__(66705);
var _NativeReactNativeFeatureFlags = /*#__PURE__*/ _interop_require_default._(__webpack_require__(51038));
var accessedFeatureFlags = new Set();
var overrides;
// This defines the types for the overrides object, whose methods also receive
// the default value as a parameter.
function createGetter(configName, customValueGetter, defaultValue) {
    var cachedValue;
    return ()=>{
        if (cachedValue == null) {
            cachedValue = customValueGetter() ?? defaultValue;
        }
        return cachedValue;
    };
}
function createJavaScriptFlagGetter(configName, defaultValue) {
    return createGetter(configName, ()=>{
        var _overrides_configName;
        accessedFeatureFlags.add(configName);
        return overrides === null || overrides === void 0 ? void 0 : (_overrides_configName = overrides[configName]) === null || _overrides_configName === void 0 ? void 0 : _overrides_configName.call(overrides, defaultValue);
    }, defaultValue);
}
function createNativeFlagGetter(configName, defaultValue) {
    return createGetter(configName, ()=>{
        var _NativeReactNativeFeatureFlags_configName;
        var valueFromNative = _NativeReactNativeFeatureFlags.default === null || _NativeReactNativeFeatureFlags.default === void 0 ? void 0 : (_NativeReactNativeFeatureFlags_configName = _NativeReactNativeFeatureFlags.default[configName]) === null || _NativeReactNativeFeatureFlags_configName === void 0 ? void 0 : _NativeReactNativeFeatureFlags_configName.call(_NativeReactNativeFeatureFlags.default);
        if (valueFromNative == null) {
            logUnavailableNativeModuleError(configName);
        }
        return valueFromNative;
    }, defaultValue);
}
function getOverrides() {
    return overrides;
}
function setOverrides(newOverrides) {
    if (overrides != null) {
        throw new Error('Feature flags cannot be overridden more than once');
    }
    if (accessedFeatureFlags.size > 0) {
        var accessedFeatureFlagsStr = Array.from(accessedFeatureFlags).join(', ');
        throw new Error(`Feature flags were accessed before being overridden: ${accessedFeatureFlagsStr}`);
    }
    overrides = newOverrides;
}
var reportedConfigNames = new Set();
function logUnavailableNativeModuleError(configName) {
    if (!reportedConfigNames.has(configName)) {
        reportedConfigNames.add(configName);
        console.error(`Could not access feature flag '${configName}' because native module method was not available`);
    }
}


}),
21934: (function (__unused_webpack_module, exports, __webpack_require__) {
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * @format
 *       strict
 */ Object.defineProperty(exports, "__esModule", ({
    value: true
}));
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: Object.getOwnPropertyDescriptor(all, name).get
    });
}
_export(exports, {
    get onCaughtError () {
        return onCaughtError;
    },
    get onRecoverableError () {
        return onRecoverableError;
    },
    get onUncaughtError () {
        return onUncaughtError;
    }
});
var _ExceptionsManager = __webpack_require__(48065);
function getExtendedError(errorValue, errorInfo) {
    var error;
    // Typically, `errorValue` should be an error. However, other values such as
    // strings (or even null) are sometimes thrown.
    if (errorValue instanceof Error) {
        /* $FlowFixMe[class-object-subtyping] added when improving typing for
     * this parameters */ // $FlowFixMe[incompatible-cast]
        error = errorValue;
    } else if (typeof errorValue === 'string') {
        /* $FlowFixMe[class-object-subtyping] added when improving typing for
     * this parameters */ // $FlowFixMe[incompatible-cast]
        error = new _ExceptionsManager.SyntheticError(errorValue);
    } else {
        /* $FlowFixMe[class-object-subtyping] added when improving typing for
     * this parameters */ // $FlowFixMe[incompatible-cast]
        error = new _ExceptionsManager.SyntheticError('Unspecified error');
    }
    try {
        // $FlowFixMe[incompatible-use] this is in try/catch.
        error.componentStack = errorInfo.componentStack;
        error.isComponentError = true;
    } catch  {
    // Ignored.
    }
    return error;
}
function onUncaughtError(errorValue, errorInfo) {
    var error = getExtendedError(errorValue, errorInfo);
    // Uncaught errors are fatal.
    (0, _ExceptionsManager.handleException)(error, true);
}
function onCaughtError(errorValue, errorInfo) {
    var error = getExtendedError(errorValue, errorInfo);
    // Caught errors are not fatal.
    (0, _ExceptionsManager.handleException)(error, false);
}
function onRecoverableError(errorValue, errorInfo) {
    var error = getExtendedError(errorValue, errorInfo);
    // Recoverable errors should only be warnings.
    // This will make it a soft error in LogBox.
    // TODO: improve the logging for recoverable errors in prod.
    console.warn(error);
}


}),
38213: (function (__unused_webpack_module, exports, __webpack_require__) {
var __webpack_unused_export__;
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 *       strict
 * @format
 */ __webpack_unused_export__ = ({
    value: true
});
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return setUpDOM;
    }
}));
var _PolyfillFunctions = __webpack_require__(23223);
var initialized = false;
function setUpDOM() {
    if (initialized) {
        return;
    }
    initialized = true;
    (0, _PolyfillFunctions.polyfillGlobal)('DOMRect', ()=>(__webpack_require__(6556)/* ["default"] */["default"]));
    (0, _PolyfillFunctions.polyfillGlobal)('DOMRectReadOnly', ()=>(__webpack_require__(98610)/* ["default"] */["default"]));
    (0, _PolyfillFunctions.polyfillGlobal)('NodeList', ()=>(__webpack_require__(89648)/* ["default"] */["default"]));
}


}),
90285: (function (__unused_webpack_module, exports) {
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 *       strict
 * @format
 */ /**
 * Combines two styles such that `style2` will override any styles in `style1`.
 * If either style is null or undefined, the other one is returned without
 * allocating an array, saving allocations and enabling memoization.
 */ Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return composeStyles;
    }
}));
function composeStyles(style1, style2) {
    if (style1 == null) {
        return style2;
    }
    if (style2 == null) {
        return style1;
    }
    return [
        style1,
        style2
    ];
}


}),
6556: (function (__unused_webpack_module, exports, __webpack_require__) {
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 *       strict
 * @format
 */ /**
 * The JSDoc comments in this file have been extracted from [DOMRect](https://developer.mozilla.org/en-US/docs/Web/API/DOMRect).
 * Content by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/DOMRect/contributors.txt),
 * licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).
 */ Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return DOMRect;
    }
}));
var _call_super = __webpack_require__(19436);
var _class_call_check = __webpack_require__(8864);
var _create_class = __webpack_require__(93072);
var _inherits = __webpack_require__(82397);
var _interop_require_default = __webpack_require__(66705);
var _wrap_native_super = __webpack_require__(30753);
var _DOMRectReadOnly = /*#__PURE__*/ _interop_require_default._(__webpack_require__(98610));
var DOMRect = /*#__PURE__*/ function(DOMRectReadOnly) {
    "use strict";
    _inherits._(DOMRect, DOMRectReadOnly);
    function DOMRect() {
        _class_call_check._(this, DOMRect);
        return _call_super._(this, DOMRect, arguments);
    }
    _create_class._(DOMRect, [
        {
            key: "x",
            get: /**
   * The x coordinate of the `DOMRect`'s origin.
   */ function() {
                return this.__getInternalX();
            },
            set: function(x) {
                this.__setInternalX(x);
            }
        },
        {
            key: "y",
            get: /**
   * The y coordinate of the `DOMRect`'s origin.
   */ function() {
                return this.__getInternalY();
            },
            set: function(y) {
                this.__setInternalY(y);
            }
        },
        {
            key: "width",
            get: /**
   * The width of the `DOMRect`.
   */ function() {
                return this.__getInternalWidth();
            },
            set: function(width) {
                this.__setInternalWidth(width);
            }
        },
        {
            key: "height",
            get: /**
   * The height of the `DOMRect`.
   */ function() {
                return this.__getInternalHeight();
            },
            set: function(height) {
                this.__setInternalHeight(height);
            }
        }
    ], [
        {
            key: "fromRect",
            value: /**
   * Creates a new `DOMRect` object with a given location and dimensions.
   */ function fromRect(rect) {
                if (!rect) {
                    return new DOMRect();
                }
                return new DOMRect(rect.x, rect.y, rect.width, rect.height);
            }
        }
    ]);
    return DOMRect;
}(_wrap_native_super._(_DOMRectReadOnly.default));


}),
98610: (function (__unused_webpack_module, exports, __webpack_require__) {
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 *       strict
 * @format
 */ /**
 * The JSDoc comments in this file have been extracted from [DOMRectReadOnly](https://developer.mozilla.org/en-US/docs/Web/API/DOMRectReadOnly).
 * Content by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/DOMRectReadOnly/contributors.txt),
 * licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).
 */ // flowlint sketchy-null:off, unsafe-getters-setters:off
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return DOMRectReadOnly;
    }
}));
var _class_call_check = __webpack_require__(8864);
var _class_private_field_loose_base = __webpack_require__(28713);
var _class_private_field_loose_key = __webpack_require__(7979);
var _create_class = __webpack_require__(93072);
function castToNumber(value) {
    return value ? Number(value) : 0;
}
var _x = /*#__PURE__*/ _class_private_field_loose_key._("_x"), _y = /*#__PURE__*/ _class_private_field_loose_key._("_y"), _width = /*#__PURE__*/ _class_private_field_loose_key._("_width"), _height = /*#__PURE__*/ _class_private_field_loose_key._("_height");
var DOMRectReadOnly = /*#__PURE__*/ function() {
    "use strict";
    function DOMRectReadOnly(x, y, width, height) {
        _class_call_check._(this, DOMRectReadOnly);
        Object.defineProperty(this, _x, {
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, _y, {
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, _width, {
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, _height, {
            writable: true,
            value: void 0
        });
        this.__setInternalX(x);
        this.__setInternalY(y);
        this.__setInternalWidth(width);
        this.__setInternalHeight(height);
    }
    _create_class._(DOMRectReadOnly, [
        {
            key: "x",
            get: /**
   * The x coordinate of the `DOMRectReadOnly`'s origin.
   */ function() {
                return _class_private_field_loose_base._(this, _x)[_x];
            }
        },
        {
            key: "y",
            get: /**
   * The y coordinate of the `DOMRectReadOnly`'s origin.
   */ function() {
                return _class_private_field_loose_base._(this, _y)[_y];
            }
        },
        {
            key: "width",
            get: /**
   * The width of the `DOMRectReadOnly`.
   */ function() {
                return _class_private_field_loose_base._(this, _width)[_width];
            }
        },
        {
            key: "height",
            get: /**
   * The height of the `DOMRectReadOnly`.
   */ function() {
                return _class_private_field_loose_base._(this, _height)[_height];
            }
        },
        {
            key: "top",
            get: /**
   * Returns the top coordinate value of the `DOMRect` (has the same value as `y`, or `y + height` if `height` is negative).
   */ function() {
                var height = _class_private_field_loose_base._(this, _height)[_height];
                var y = _class_private_field_loose_base._(this, _y)[_y];
                if (height < 0) {
                    return y + height;
                }
                return y;
            }
        },
        {
            key: "right",
            get: /**
   * Returns the right coordinate value of the `DOMRect` (has the same value as ``x + width`, or `x` if `width` is negative).
   */ function() {
                var width = _class_private_field_loose_base._(this, _width)[_width];
                var x = _class_private_field_loose_base._(this, _x)[_x];
                if (width < 0) {
                    return x;
                }
                return x + width;
            }
        },
        {
            key: "bottom",
            get: /**
   * Returns the bottom coordinate value of the `DOMRect` (has the same value as `y + height`, or `y` if `height` is negative).
   */ function() {
                var height = _class_private_field_loose_base._(this, _height)[_height];
                var y = _class_private_field_loose_base._(this, _y)[_y];
                if (height < 0) {
                    return y;
                }
                return y + height;
            }
        },
        {
            key: "left",
            get: /**
   * Returns the left coordinate value of the `DOMRect` (has the same value as `x`, or `x + width` if `width` is negative).
   */ function() {
                var width = _class_private_field_loose_base._(this, _width)[_width];
                var x = _class_private_field_loose_base._(this, _x)[_x];
                if (width < 0) {
                    return x + width;
                }
                return x;
            }
        },
        {
            key: "toJSON",
            value: function toJSON() {
                var _this = this, x = _this.x, y = _this.y, width = _this.width, height = _this.height, top = _this.top, left = _this.left, bottom = _this.bottom, right = _this.right;
                return {
                    x,
                    y,
                    width,
                    height,
                    top,
                    left,
                    bottom,
                    right
                };
            }
        },
        {
            key: "__getInternalX",
            value: function __getInternalX() {
                return _class_private_field_loose_base._(this, _x)[_x];
            }
        },
        {
            key: "__getInternalY",
            value: function __getInternalY() {
                return _class_private_field_loose_base._(this, _y)[_y];
            }
        },
        {
            key: "__getInternalWidth",
            value: function __getInternalWidth() {
                return _class_private_field_loose_base._(this, _width)[_width];
            }
        },
        {
            key: "__getInternalHeight",
            value: function __getInternalHeight() {
                return _class_private_field_loose_base._(this, _height)[_height];
            }
        },
        {
            key: "__setInternalX",
            value: function __setInternalX(x) {
                _class_private_field_loose_base._(this, _x)[_x] = castToNumber(x);
            }
        },
        {
            key: "__setInternalY",
            value: function __setInternalY(y) {
                _class_private_field_loose_base._(this, _y)[_y] = castToNumber(y);
            }
        },
        {
            key: "__setInternalWidth",
            value: function __setInternalWidth(width) {
                _class_private_field_loose_base._(this, _width)[_width] = castToNumber(width);
            }
        },
        {
            key: "__setInternalHeight",
            value: function __setInternalHeight(height) {
                _class_private_field_loose_base._(this, _height)[_height] = castToNumber(height);
            }
        }
    ], [
        {
            key: "fromRect",
            value: /**
   * Creates a new `DOMRectReadOnly` object with a given location and dimensions.
   */ function fromRect(rect) {
                if (!rect) {
                    return new DOMRectReadOnly();
                }
                return new DOMRectReadOnly(rect.x, rect.y, rect.width, rect.height);
            }
        }
    ]);
    return DOMRectReadOnly;
}();


}),
54154: (function (__unused_webpack_module, exports) {
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * @format
 *       strict
 */ /**
 * This definition is different from the current built-in type `$ArrayLike`
 * provided by Flow, in that this is an interface and that one is an object.
 *
 * The difference is important because, when using objects, Flow thinks
 * a `length` property would be copied over when using the spread operator,
 * which is incorrect.
 */ Object.defineProperty(exports, "__esModule", ({
    value: true
}));
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: Object.getOwnPropertyDescriptor(all, name).get
    });
}
_export(exports, {
    get createEntriesIterator () {
        return createEntriesIterator;
    },
    get createKeyIterator () {
        return createKeyIterator;
    },
    get createValueIterator () {
        return createValueIterator;
    }
});
function* createValueIterator(arrayLike) {
    for(var i = 0; i < arrayLike.length; i++){
        yield arrayLike[i];
    }
}
function* createKeyIterator(arrayLike) {
    for(var i = 0; i < arrayLike.length; i++){
        yield i;
    }
}
function* createEntriesIterator(arrayLike) {
    for(var i = 0; i < arrayLike.length; i++){
        yield [
            i,
            arrayLike[i]
        ];
    }
}


}),
89648: (function (__unused_webpack_module, exports, __webpack_require__) {
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * @format
 *       strict
 */ // flowlint unsafe-getters-setters:off
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: Object.getOwnPropertyDescriptor(all, name).get
    });
}
_export(exports, {
    get createNodeList () {
        return createNodeList;
    },
    get default () {
        return NodeList;
    }
});
var _class_call_check = __webpack_require__(8864);
var _class_private_field_loose_base = __webpack_require__(28713);
var _class_private_field_loose_key = __webpack_require__(7979);
var _create_class = __webpack_require__(93072);
var _ArrayLikeUtils = __webpack_require__(54154);
var _length = /*#__PURE__*/ _class_private_field_loose_key._("_length");
var NodeList = /*#__PURE__*/ function() {
    "use strict";
    function NodeList(elements) {
        _class_call_check._(this, NodeList);
        Object.defineProperty(this, _length, {
            writable: true,
            value: void 0
        });
        for(var i = 0; i < elements.length; i++){
            Object.defineProperty(this, i, {
                value: elements[i],
                writable: false
            });
        }
        _class_private_field_loose_base._(this, _length)[_length] = elements.length;
    }
    _create_class._(NodeList, [
        {
            key: "length",
            get: function() {
                return _class_private_field_loose_base._(this, _length)[_length];
            }
        },
        {
            key: "item",
            value: function item(index) {
                if (index < 0 || index >= _class_private_field_loose_base._(this, _length)[_length]) {
                    return null;
                }
                // assigning to the interface allows us to access the indexer property in a
                // type-safe way.
                // eslint-disable-next-line consistent-this
                var arrayLike = this;
                return arrayLike[index];
            }
        },
        {
            key: "entries",
            value: function entries() {
                return (0, _ArrayLikeUtils.createEntriesIterator)(this);
            }
        },
        {
            key: "forEach",
            value: function forEach(callbackFn, thisArg) {
                // assigning to the interface allows us to access the indexer property in a
                // type-safe way.
                // eslint-disable-next-line consistent-this
                var arrayLike = this;
                for(var index = 0; index < _class_private_field_loose_base._(this, _length)[_length]; index++){
                    if (thisArg == null) {
                        callbackFn(arrayLike[index], index, this);
                    } else {
                        callbackFn.call(thisArg, arrayLike[index], index, this);
                    }
                }
            }
        },
        {
            key: "keys",
            value: function keys() {
                return (0, _ArrayLikeUtils.createKeyIterator)(this);
            }
        },
        {
            key: "values",
            value: function values() {
                return (0, _ArrayLikeUtils.createValueIterator)(this);
            }
        },
        {
            // $FlowIssue[unsupported-syntax] Flow does not support computed properties in classes.
            key: Symbol.iterator,
            value: function() {
                return (0, _ArrayLikeUtils.createValueIterator)(this);
            }
        }
    ]);
    return NodeList;
}();
function createNodeList(elements) {
    return new NodeList(elements);
}


}),
45233: (function (__unused_webpack_module, exports, __webpack_require__) {
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * @format
 *       strict
 */ // flowlint unsafe-getters-setters:off
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: Object.getOwnPropertyDescriptor(all, name).get
    });
}
_export(exports, {
    get EventCounts () {
        return EventCounts;
    },
    get PerformanceEventTiming () {
        return PerformanceEventTiming;
    }
});
var _call_super = __webpack_require__(19436);
var _class_call_check = __webpack_require__(8864);
var _class_private_field_loose_base = __webpack_require__(28713);
var _class_private_field_loose_key = __webpack_require__(7979);
var _create_class = __webpack_require__(93072);
var _get = __webpack_require__(616);
var _get_prototype_of = __webpack_require__(86880);
var _inherits = __webpack_require__(82397);
var _interop_require_default = __webpack_require__(66705);
var _object_spread = __webpack_require__(36192);
var _object_spread_props = __webpack_require__(83590);
var _wrap_native_super = __webpack_require__(30753);
var _PerformanceEntry = __webpack_require__(78097);
var _NativePerformance = /*#__PURE__*/ _interop_require_default._(__webpack_require__(23806));
var _Utilities = __webpack_require__(77859);
var _processingStart = /*#__PURE__*/ _class_private_field_loose_key._("_processingStart"), _processingEnd = /*#__PURE__*/ _class_private_field_loose_key._("_processingEnd"), _interactionId = /*#__PURE__*/ _class_private_field_loose_key._("_interactionId");
var PerformanceEventTiming = /*#__PURE__*/ function(PerformanceEntry) {
    "use strict";
    _inherits._(PerformanceEventTiming, PerformanceEntry);
    function PerformanceEventTiming(init) {
        _class_call_check._(this, PerformanceEventTiming);
        var _this;
        _this = _call_super._(this, PerformanceEventTiming, [
            {
                name: init.name,
                entryType: 'event',
                startTime: init.startTime ?? 0,
                duration: init.duration ?? 0
            }
        ]), Object.defineProperty(_this, _processingStart, {
            writable: true,
            value: void 0
        }), Object.defineProperty(_this, _processingEnd, {
            writable: true,
            value: void 0
        }), Object.defineProperty(_this, _interactionId, {
            writable: true,
            value: void 0
        });
        _class_private_field_loose_base._(_this, _processingStart)[_processingStart] = init.processingStart ?? 0;
        _class_private_field_loose_base._(_this, _processingEnd)[_processingEnd] = init.processingEnd ?? 0;
        _class_private_field_loose_base._(_this, _interactionId)[_interactionId] = init.interactionId ?? 0;
        return _this;
    }
    _create_class._(PerformanceEventTiming, [
        {
            key: "processingStart",
            get: function() {
                return _class_private_field_loose_base._(this, _processingStart)[_processingStart];
            }
        },
        {
            key: "processingEnd",
            get: function() {
                return _class_private_field_loose_base._(this, _processingEnd)[_processingEnd];
            }
        },
        {
            key: "interactionId",
            get: function() {
                return _class_private_field_loose_base._(this, _interactionId)[_interactionId];
            }
        },
        {
            key: "toJSON",
            value: function toJSON() {
                return _object_spread_props._(_object_spread._({}, _get._(_get_prototype_of._(PerformanceEventTiming.prototype), "toJSON", this).call(this)), {
                    processingStart: _class_private_field_loose_base._(this, _processingStart)[_processingStart],
                    processingEnd: _class_private_field_loose_base._(this, _processingEnd)[_processingEnd],
                    interactionId: _class_private_field_loose_base._(this, _interactionId)[_interactionId]
                });
            }
        }
    ]);
    return PerformanceEventTiming;
}(_wrap_native_super._(_PerformanceEntry.PerformanceEntry));
var cachedEventCounts;
function getCachedEventCounts() {
    var _NativePerformance_getEventCounts;
    if (cachedEventCounts) {
        return cachedEventCounts;
    }
    if (!_NativePerformance.default || !(_NativePerformance.default === null || _NativePerformance.default === void 0 ? void 0 : _NativePerformance.default.getEventCounts)) {
        (0, _Utilities.warnNoNativePerformance)();
        cachedEventCounts = new Map();
        return cachedEventCounts;
    }
    var eventCounts = new Map(((_NativePerformance_getEventCounts = _NativePerformance.default.getEventCounts) === null || _NativePerformance_getEventCounts === void 0 ? void 0 : _NativePerformance_getEventCounts.call(_NativePerformance.default)) ?? []);
    cachedEventCounts = eventCounts;
    // $FlowFixMe[incompatible-call]
    __webpack_require__.g.queueMicrotask(()=>{
        // To be consistent with the calls to the API from the same task,
        // but also not to refetch the data from native too often,
        // schedule to invalidate the cache later,
        // after the current task is guaranteed to have finished.
        cachedEventCounts = null;
    });
    return eventCounts;
}
var EventCounts = /*#__PURE__*/ function() {
    "use strict";
    function EventCounts() {
        _class_call_check._(this, EventCounts);
    }
    _create_class._(EventCounts, [
        {
            key: "size",
            get: function() {
                return getCachedEventCounts().size;
            }
        },
        {
            key: "entries",
            value: function entries() {
                return getCachedEventCounts().entries();
            }
        },
        {
            key: "forEach",
            value: function forEach(callback) {
                return getCachedEventCounts().forEach(callback);
            }
        },
        {
            key: "get",
            value: function get(key) {
                return getCachedEventCounts().get(key);
            }
        },
        {
            key: "has",
            value: function has(key) {
                return getCachedEventCounts().has(key);
            }
        },
        {
            key: "keys",
            value: function keys() {
                return getCachedEventCounts().keys();
            }
        },
        {
            key: "values",
            value: function values() {
                return getCachedEventCounts().values();
            }
        }
    ]);
    return EventCounts;
}();


}),
49529: (function (__unused_webpack_module, exports, __webpack_require__) {
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * @format
 *       strict
 */ // flowlint unsafe-getters-setters:off
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: Object.getOwnPropertyDescriptor(all, name).get
    });
}
_export(exports, {
    get PerformanceLongTaskTiming () {
        return PerformanceLongTaskTiming;
    },
    get TaskAttributionTiming () {
        return TaskAttributionTiming;
    }
});
var _call_super = __webpack_require__(19436);
var _class_call_check = __webpack_require__(8864);
var _create_class = __webpack_require__(93072);
var _get = __webpack_require__(616);
var _get_prototype_of = __webpack_require__(86880);
var _inherits = __webpack_require__(82397);
var _object_spread = __webpack_require__(36192);
var _object_spread_props = __webpack_require__(83590);
var _wrap_native_super = __webpack_require__(30753);
var _PerformanceEntry = __webpack_require__(78097);
var TaskAttributionTiming = /*#__PURE__*/ function(PerformanceEntry) {
    "use strict";
    _inherits._(TaskAttributionTiming, PerformanceEntry);
    function TaskAttributionTiming() {
        _class_call_check._(this, TaskAttributionTiming);
        return _call_super._(this, TaskAttributionTiming, arguments);
    }
    return TaskAttributionTiming;
}(_wrap_native_super._(_PerformanceEntry.PerformanceEntry));
var EMPTY_ATTRIBUTION = Object.preventExtensions([]);
var PerformanceLongTaskTiming = /*#__PURE__*/ function(PerformanceEntry) {
    "use strict";
    _inherits._(PerformanceLongTaskTiming, PerformanceEntry);
    function PerformanceLongTaskTiming() {
        _class_call_check._(this, PerformanceLongTaskTiming);
        return _call_super._(this, PerformanceLongTaskTiming, arguments);
    }
    _create_class._(PerformanceLongTaskTiming, [
        {
            key: "attribution",
            get: function() {
                return EMPTY_ATTRIBUTION;
            }
        },
        {
            key: "toJSON",
            value: function toJSON() {
                return _object_spread_props._(_object_spread._({}, _get._(_get_prototype_of._(PerformanceLongTaskTiming.prototype), "toJSON", this).call(this)), {
                    attribution: this.attribution
                });
            }
        }
    ]);
    return PerformanceLongTaskTiming;
}(_wrap_native_super._(_PerformanceEntry.PerformanceEntry));


}),
28991: (function (__unused_webpack_module, exports, __webpack_require__) {
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 *       strict
 * @format
 * @oncall react_native
 */ // flowlint unsafe-getters-setters:off
// Read-only object with JS memory information. This is returned by the performance.memory API.
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return MemoryInfo;
    }
}));
var _class_call_check = __webpack_require__(8864);
var _class_private_field_loose_base = __webpack_require__(28713);
var _class_private_field_loose_key = __webpack_require__(7979);
var _create_class = __webpack_require__(93072);
var _jsHeapSizeLimit = /*#__PURE__*/ _class_private_field_loose_key._("_jsHeapSizeLimit"), _totalJSHeapSize = /*#__PURE__*/ _class_private_field_loose_key._("_totalJSHeapSize"), _usedJSHeapSize = /*#__PURE__*/ _class_private_field_loose_key._("_usedJSHeapSize");
var MemoryInfo = /*#__PURE__*/ function() {
    "use strict";
    function MemoryInfo(memoryInfo) {
        _class_call_check._(this, MemoryInfo);
        Object.defineProperty(this, _jsHeapSizeLimit, {
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, _totalJSHeapSize, {
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, _usedJSHeapSize, {
            writable: true,
            value: void 0
        });
        if (memoryInfo != null) {
            _class_private_field_loose_base._(this, _jsHeapSizeLimit)[_jsHeapSizeLimit] = memoryInfo.jsHeapSizeLimit;
            _class_private_field_loose_base._(this, _totalJSHeapSize)[_totalJSHeapSize] = memoryInfo.totalJSHeapSize;
            _class_private_field_loose_base._(this, _usedJSHeapSize)[_usedJSHeapSize] = memoryInfo.usedJSHeapSize;
        }
    }
    _create_class._(MemoryInfo, [
        {
            key: "jsHeapSizeLimit",
            get: /**
   * The maximum size of the heap, in bytes, that is available to the context
   */ function() {
                return _class_private_field_loose_base._(this, _jsHeapSizeLimit)[_jsHeapSizeLimit];
            }
        },
        {
            key: "totalJSHeapSize",
            get: /**
   * The total allocated heap size, in bytes
   */ function() {
                return _class_private_field_loose_base._(this, _totalJSHeapSize)[_totalJSHeapSize];
            }
        },
        {
            key: "usedJSHeapSize",
            get: /**
   * The currently active segment of JS heap, in bytes.
   */ function() {
                return _class_private_field_loose_base._(this, _usedJSHeapSize)[_usedJSHeapSize];
            }
        }
    ]);
    return MemoryInfo;
}();


}),
2453: (function (__unused_webpack_module, exports, __webpack_require__) {
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * @format
 *       strict
 */ // flowlint unsafe-getters-setters:off
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return Performance;
    }
}));
var _class_call_check = __webpack_require__(8864);
var _create_class = __webpack_require__(93072);
var _interop_require_default = __webpack_require__(66705);
var _sliced_to_array = __webpack_require__(78474);
var _EventTiming = __webpack_require__(45233);
var _MemoryInfo = /*#__PURE__*/ _interop_require_default._(__webpack_require__(28991));
var _RawPerformanceEntry = __webpack_require__(84641);
var _ReactNativeStartupTiming = /*#__PURE__*/ _interop_require_default._(__webpack_require__(63439));
var _NativePerformance = /*#__PURE__*/ _interop_require_default._(__webpack_require__(23806));
var _UserTiming = __webpack_require__(58488);
var _Utilities = __webpack_require__(77859);
var getCurrentTimeStamp = (_NativePerformance.default === null || _NativePerformance.default === void 0 ? void 0 : _NativePerformance.default.now) ?? __webpack_require__.g.nativePerformanceNow ?? (()=>Date.now());
var ENTRY_TYPES_AVAILABLE_FROM_TIMELINE = [
    'mark',
    'measure'
];
var Performance = /*#__PURE__*/ function() {
    "use strict";
    function Performance() {
        _class_call_check._(this, Performance);
        this.eventCounts = new _EventTiming.EventCounts();
    }
    _create_class._(Performance, [
        {
            key: "memory",
            get: // Get the current JS memory information.
            function() {
                if (_NativePerformance.default === null || _NativePerformance.default === void 0 ? void 0 : _NativePerformance.default.getSimpleMemoryInfo) {
                    // JSI API implementations may have different variants of names for the JS
                    // heap information we need here. We will parse the result based on our
                    // guess of the implementation for now.
                    var memoryInfo = _NativePerformance.default.getSimpleMemoryInfo();
                    if (memoryInfo.hasOwnProperty('hermes_heapSize')) {
                        // We got memory information from Hermes
                        var totalJSHeapSize = memoryInfo.hermes_heapSize, usedJSHeapSize = memoryInfo.hermes_allocatedBytes;
                        return new _MemoryInfo.default({
                            jsHeapSizeLimit: null,
                            totalJSHeapSize,
                            usedJSHeapSize
                        });
                    } else {
                        // JSC and V8 has no native implementations for memory information in JSI::Instrumentation
                        return new _MemoryInfo.default();
                    }
                }
                return new _MemoryInfo.default();
            }
        },
        {
            key: "rnStartupTiming",
            get: // Startup metrics is not used in web, but only in React Native.
            function() {
                if (_NativePerformance.default === null || _NativePerformance.default === void 0 ? void 0 : _NativePerformance.default.getReactNativeStartupTiming) {
                    var _NativePerformance_getReactNativeStartupTiming = _NativePerformance.default.getReactNativeStartupTiming(), startTime = _NativePerformance_getReactNativeStartupTiming.startTime, endTime = _NativePerformance_getReactNativeStartupTiming.endTime, initializeRuntimeStart = _NativePerformance_getReactNativeStartupTiming.initializeRuntimeStart, initializeRuntimeEnd = _NativePerformance_getReactNativeStartupTiming.initializeRuntimeEnd, executeJavaScriptBundleEntryPointStart = _NativePerformance_getReactNativeStartupTiming.executeJavaScriptBundleEntryPointStart, executeJavaScriptBundleEntryPointEnd = _NativePerformance_getReactNativeStartupTiming.executeJavaScriptBundleEntryPointEnd;
                    return new _ReactNativeStartupTiming.default({
                        startTime,
                        endTime,
                        initializeRuntimeStart,
                        initializeRuntimeEnd,
                        executeJavaScriptBundleEntryPointStart,
                        executeJavaScriptBundleEntryPointEnd
                    });
                }
                return new _ReactNativeStartupTiming.default();
            }
        },
        {
            key: "mark",
            value: function mark(markName, markOptions) {
                var computedStartTime;
                if (_NativePerformance.default === null || _NativePerformance.default === void 0 ? void 0 : _NativePerformance.default.markWithResult) {
                    computedStartTime = _NativePerformance.default.markWithResult(markName, markOptions === null || markOptions === void 0 ? void 0 : markOptions.startTime);
                } else {
                    (0, _Utilities.warnNoNativePerformance)();
                    computedStartTime = performance.now();
                }
                return new _UserTiming.PerformanceMark(markName, {
                    startTime: computedStartTime,
                    detail: markOptions === null || markOptions === void 0 ? void 0 : markOptions.detail
                });
            }
        },
        {
            key: "clearMarks",
            value: function clearMarks(markName) {
                if (!(_NativePerformance.default === null || _NativePerformance.default === void 0 ? void 0 : _NativePerformance.default.clearMarks)) {
                    (0, _Utilities.warnNoNativePerformance)();
                    return;
                }
                _NativePerformance.default.clearMarks(markName);
            }
        },
        {
            key: "measure",
            value: function measure(measureName, startMarkOrOptions, endMark) {
                var options;
                var startMarkName, endMarkName = endMark, duration, startTime = 0, endTime = 0;
                if (typeof startMarkOrOptions === 'string') {
                    startMarkName = startMarkOrOptions;
                    options = {};
                } else if (startMarkOrOptions !== undefined) {
                    options = startMarkOrOptions;
                    if (endMark !== undefined) {
                        throw new TypeError("Performance.measure: Can't have both options and endMark");
                    }
                    if (options.start === undefined && options.end === undefined) {
                        throw new TypeError('Performance.measure: Must have at least one of start/end specified in options');
                    }
                    if (options.start !== undefined && options.end !== undefined && options.duration !== undefined) {
                        throw new TypeError("Performance.measure: Can't have both start/end and duration explicitly in options");
                    }
                    if (typeof options.start === 'number') {
                        startTime = options.start;
                    } else {
                        startMarkName = options.start;
                    }
                    if (typeof options.end === 'number') {
                        endTime = options.end;
                    } else {
                        endMarkName = options.end;
                    }
                    duration = options.duration ?? duration;
                }
                var computedStartTime = startTime;
                var computedDuration = duration;
                if (_NativePerformance.default === null || _NativePerformance.default === void 0 ? void 0 : _NativePerformance.default.measureWithResult) {
                    var ref;
                    ref = _sliced_to_array._(_NativePerformance.default.measureWithResult(measureName, startTime, endTime, duration, startMarkName, endMarkName), 2), computedStartTime = ref[0], computedDuration = ref[1], ref;
                } else {
                    (0, _Utilities.warnNoNativePerformance)();
                }
                var measure = new _UserTiming.PerformanceMeasure(measureName, {
                    startTime: computedStartTime,
                    duration: computedDuration ?? 0,
                    detail: options === null || options === void 0 ? void 0 : options.detail
                });
                return measure;
            }
        },
        {
            key: "clearMeasures",
            value: function clearMeasures(measureName) {
                if (!(_NativePerformance.default === null || _NativePerformance.default === void 0 ? void 0 : _NativePerformance.default.clearMeasures)) {
                    (0, _Utilities.warnNoNativePerformance)();
                    return;
                }
                _NativePerformance.default === null || _NativePerformance.default === void 0 ? void 0 : _NativePerformance.default.clearMeasures(measureName);
            }
        },
        {
            /**
   * Returns a double, measured in milliseconds.
   * https://developer.mozilla.org/en-US/docs/Web/API/Performance/now
   */ key: "now",
            value: function now() {
                return getCurrentTimeStamp();
            }
        },
        {
            /**
   * An extension that allows to get back to JS all currently logged marks/measures
   * (in our case, be it from JS or native), see
   * https://www.w3.org/TR/performance-timeline/#extensions-to-the-performance-interface
   */ key: "getEntries",
            value: function getEntries() {
                if (!(_NativePerformance.default === null || _NativePerformance.default === void 0 ? void 0 : _NativePerformance.default.getEntries)) {
                    (0, _Utilities.warnNoNativePerformance)();
                    return [];
                }
                return _NativePerformance.default.getEntries().map(_RawPerformanceEntry.rawToPerformanceEntry);
            }
        },
        {
            key: "getEntriesByType",
            value: function getEntriesByType(entryType) {
                if (entryType != null && !ENTRY_TYPES_AVAILABLE_FROM_TIMELINE.includes(entryType)) {
                    console.warn('Deprecated API for given entry type.');
                    return [];
                }
                if (!(_NativePerformance.default === null || _NativePerformance.default === void 0 ? void 0 : _NativePerformance.default.getEntriesByType)) {
                    (0, _Utilities.warnNoNativePerformance)();
                    return [];
                }
                return _NativePerformance.default.getEntriesByType((0, _RawPerformanceEntry.performanceEntryTypeToRaw)(entryType)).map(_RawPerformanceEntry.rawToPerformanceEntry);
            }
        },
        {
            key: "getEntriesByName",
            value: function getEntriesByName(entryName, entryType) {
                if (entryType != null && !ENTRY_TYPES_AVAILABLE_FROM_TIMELINE.includes(entryType)) {
                    console.warn('Deprecated API for given entry type.');
                    return [];
                }
                if (!(_NativePerformance.default === null || _NativePerformance.default === void 0 ? void 0 : _NativePerformance.default.getEntriesByName)) {
                    (0, _Utilities.warnNoNativePerformance)();
                    return [];
                }
                return _NativePerformance.default.getEntriesByName(entryName, entryType != null ? (0, _RawPerformanceEntry.performanceEntryTypeToRaw)(entryType) : undefined).map(_RawPerformanceEntry.rawToPerformanceEntry);
            }
        }
    ]);
    return Performance;
}();


}),
78097: (function (__unused_webpack_module, exports, __webpack_require__) {
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * @format
 *       strict
 */ // flowlint unsafe-getters-setters:off
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "PerformanceEntry", ({
    enumerable: true,
    get: function() {
        return PerformanceEntry;
    }
}));
var _class_call_check = __webpack_require__(8864);
var _class_private_field_loose_base = __webpack_require__(28713);
var _class_private_field_loose_key = __webpack_require__(7979);
var _create_class = __webpack_require__(93072);
var _name = /*#__PURE__*/ _class_private_field_loose_key._("_name"), _entryType = /*#__PURE__*/ _class_private_field_loose_key._("_entryType"), _startTime = /*#__PURE__*/ _class_private_field_loose_key._("_startTime"), _duration = /*#__PURE__*/ _class_private_field_loose_key._("_duration");
var PerformanceEntry = /*#__PURE__*/ function() {
    "use strict";
    function PerformanceEntry(init) {
        _class_call_check._(this, PerformanceEntry);
        Object.defineProperty(this, _name, {
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, _entryType, {
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, _startTime, {
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, _duration, {
            writable: true,
            value: void 0
        });
        _class_private_field_loose_base._(this, _name)[_name] = init.name;
        _class_private_field_loose_base._(this, _entryType)[_entryType] = init.entryType;
        _class_private_field_loose_base._(this, _startTime)[_startTime] = init.startTime;
        _class_private_field_loose_base._(this, _duration)[_duration] = init.duration;
    }
    _create_class._(PerformanceEntry, [
        {
            key: "name",
            get: function() {
                return _class_private_field_loose_base._(this, _name)[_name];
            }
        },
        {
            key: "entryType",
            get: function() {
                return _class_private_field_loose_base._(this, _entryType)[_entryType];
            }
        },
        {
            key: "startTime",
            get: function() {
                return _class_private_field_loose_base._(this, _startTime)[_startTime];
            }
        },
        {
            key: "duration",
            get: function() {
                return _class_private_field_loose_base._(this, _duration)[_duration];
            }
        },
        {
            key: "toJSON",
            value: function toJSON() {
                return {
                    name: _class_private_field_loose_base._(this, _name)[_name],
                    entryType: _class_private_field_loose_base._(this, _entryType)[_entryType],
                    startTime: _class_private_field_loose_base._(this, _startTime)[_startTime],
                    duration: _class_private_field_loose_base._(this, _duration)[_duration]
                };
            }
        }
    ]);
    return PerformanceEntry;
}();


}),
84641: (function (__unused_webpack_module, exports, __webpack_require__) {
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * @format
 *       strict
 */ Object.defineProperty(exports, "__esModule", ({
    value: true
}));
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: Object.getOwnPropertyDescriptor(all, name).get
    });
}
_export(exports, {
    get RawPerformanceEntryTypeValues () {
        return RawPerformanceEntryTypeValues;
    },
    get performanceEntryTypeToRaw () {
        return performanceEntryTypeToRaw;
    },
    get rawToPerformanceEntry () {
        return rawToPerformanceEntry;
    },
    get rawToPerformanceEntryType () {
        return rawToPerformanceEntryType;
    }
});
var _EventTiming = __webpack_require__(45233);
var _LongTasks = __webpack_require__(49529);
var _PerformanceEntry = __webpack_require__(78097);
var _UserTiming = __webpack_require__(58488);
var RawPerformanceEntryTypeValues = {
    MARK: 1,
    MEASURE: 2,
    EVENT: 3,
    LONGTASK: 4
};
function rawToPerformanceEntry(entry) {
    if (entry.entryType === RawPerformanceEntryTypeValues.EVENT) {
        return new _EventTiming.PerformanceEventTiming({
            name: entry.name,
            startTime: entry.startTime,
            duration: entry.duration,
            processingStart: entry.processingStart,
            processingEnd: entry.processingEnd,
            interactionId: entry.interactionId
        });
    } else if (entry.entryType === RawPerformanceEntryTypeValues.LONGTASK) {
        return new _LongTasks.PerformanceLongTaskTiming({
            name: entry.name,
            entryType: rawToPerformanceEntryType(entry.entryType),
            startTime: entry.startTime,
            duration: entry.duration
        });
    } else if (entry.entryType === RawPerformanceEntryTypeValues.MARK) {
        return new _UserTiming.PerformanceMark(entry.name, {
            startTime: entry.startTime
        });
    } else if (entry.entryType === RawPerformanceEntryTypeValues.MEASURE) {
        return new _UserTiming.PerformanceMeasure(entry.name, {
            startTime: entry.startTime,
            duration: entry.duration
        });
    } else {
        return new _PerformanceEntry.PerformanceEntry({
            name: entry.name,
            entryType: rawToPerformanceEntryType(entry.entryType),
            startTime: entry.startTime,
            duration: entry.duration
        });
    }
}
function rawToPerformanceEntryType(type) {
    switch(type){
        case RawPerformanceEntryTypeValues.MARK:
            return 'mark';
        case RawPerformanceEntryTypeValues.MEASURE:
            return 'measure';
        case RawPerformanceEntryTypeValues.EVENT:
            return 'event';
        case RawPerformanceEntryTypeValues.LONGTASK:
            return 'longtask';
        default:
            throw new TypeError(`rawToPerformanceEntryType: unexpected performance entry type received: ${type}`);
    }
}
function performanceEntryTypeToRaw(type) {
    switch(type){
        case 'mark':
            return RawPerformanceEntryTypeValues.MARK;
        case 'measure':
            return RawPerformanceEntryTypeValues.MEASURE;
        case 'event':
            return RawPerformanceEntryTypeValues.EVENT;
        case 'longtask':
            return RawPerformanceEntryTypeValues.LONGTASK;
        default:
            // Verify exhaustive check with Flow
            type;
            throw new TypeError(`performanceEntryTypeToRaw: unexpected performance entry type received: ${type}`);
    }
}


}),
63439: (function (__unused_webpack_module, exports, __webpack_require__) {
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 *       strict
 * @format
 * @oncall react_native
 */ // flowlint unsafe-getters-setters:off
// Read-only object with RN startup timing information.
// This is returned by the performance.reactNativeStartup API.
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return ReactNativeStartupTiming;
    }
}));
var _class_call_check = __webpack_require__(8864);
var _class_private_field_loose_base = __webpack_require__(28713);
var _class_private_field_loose_key = __webpack_require__(7979);
var _create_class = __webpack_require__(93072);
var // All time information here are in ms. The values may be null if not provided.
// We do NOT match web spect here for two reasons:
// 1. The `ReactNativeStartupTiming` is non-standard API
// 2. The timing information is relative to the time origin, which means `0` has valid meaning
_startTime = /*#__PURE__*/ _class_private_field_loose_key._("_startTime"), _endTime = /*#__PURE__*/ _class_private_field_loose_key._("_endTime"), _initializeRuntimeStart = /*#__PURE__*/ _class_private_field_loose_key._("_initializeRuntimeStart"), _initializeRuntimeEnd = /*#__PURE__*/ _class_private_field_loose_key._("_initializeRuntimeEnd"), _executeJavaScriptBundleEntryPointStart = /*#__PURE__*/ _class_private_field_loose_key._("_executeJavaScriptBundleEntryPointStart"), _executeJavaScriptBundleEntryPointEnd = /*#__PURE__*/ _class_private_field_loose_key._("_executeJavaScriptBundleEntryPointEnd");
var ReactNativeStartupTiming = /*#__PURE__*/ function() {
    "use strict";
    function ReactNativeStartupTiming(startUpTiming) {
        _class_call_check._(this, ReactNativeStartupTiming);
        Object.defineProperty(this, _startTime, {
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, _endTime, {
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, _initializeRuntimeStart, {
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, _initializeRuntimeEnd, {
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, _executeJavaScriptBundleEntryPointStart, {
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, _executeJavaScriptBundleEntryPointEnd, {
            writable: true,
            value: void 0
        });
        if (startUpTiming != null) {
            _class_private_field_loose_base._(this, _startTime)[_startTime] = startUpTiming.startTime;
            _class_private_field_loose_base._(this, _endTime)[_endTime] = startUpTiming.endTime;
            _class_private_field_loose_base._(this, _initializeRuntimeStart)[_initializeRuntimeStart] = startUpTiming.initializeRuntimeStart;
            _class_private_field_loose_base._(this, _initializeRuntimeEnd)[_initializeRuntimeEnd] = startUpTiming.initializeRuntimeEnd;
            _class_private_field_loose_base._(this, _executeJavaScriptBundleEntryPointStart)[_executeJavaScriptBundleEntryPointStart] = startUpTiming.executeJavaScriptBundleEntryPointStart;
            _class_private_field_loose_base._(this, _executeJavaScriptBundleEntryPointEnd)[_executeJavaScriptBundleEntryPointEnd] = startUpTiming.executeJavaScriptBundleEntryPointEnd;
        }
    }
    _create_class._(ReactNativeStartupTiming, [
        {
            key: "startTime",
            get: /**
   * Start time of the RN app startup process. This is provided by the platform by implementing the `ReactMarker.setAppStartTime` API in the native platform code.
   */ function() {
                return _class_private_field_loose_base._(this, _startTime)[_startTime];
            }
        },
        {
            key: "endTime",
            get: /**
   * End time of the RN app startup process. This is equal to `executeJavaScriptBundleEntryPointEnd`.
   */ function() {
                return _class_private_field_loose_base._(this, _endTime)[_endTime];
            }
        },
        {
            key: "initializeRuntimeStart",
            get: /**
   * Start time when RN runtime get initialized. This is when RN infra first kicks in app startup process.
   */ function() {
                return _class_private_field_loose_base._(this, _initializeRuntimeStart)[_initializeRuntimeStart];
            }
        },
        {
            key: "initializeRuntimeEnd",
            get: /**
   * End time when RN runtime get initialized. This is the last marker before ends of the app startup process.
   */ function() {
                return _class_private_field_loose_base._(this, _initializeRuntimeEnd)[_initializeRuntimeEnd];
            }
        },
        {
            key: "executeJavaScriptBundleEntryPointStart",
            get: /**
   * Start time of JS bundle being executed. This indicates the RN JS bundle is loaded and start to be evaluated.
   */ function() {
                return _class_private_field_loose_base._(this, _executeJavaScriptBundleEntryPointStart)[_executeJavaScriptBundleEntryPointStart];
            }
        },
        {
            key: "executeJavaScriptBundleEntryPointEnd",
            get: /**
   * End time of JS bundle being executed. This indicates all the synchronous entry point jobs are finished.
   */ function() {
                return _class_private_field_loose_base._(this, _executeJavaScriptBundleEntryPointEnd)[_executeJavaScriptBundleEntryPointEnd];
            }
        }
    ]);
    return ReactNativeStartupTiming;
}();


}),
58488: (function (__unused_webpack_module, exports, __webpack_require__) {
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * @format
 *       strict
 */ // flowlint unsafe-getters-setters:off
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: Object.getOwnPropertyDescriptor(all, name).get
    });
}
_export(exports, {
    get PerformanceMark () {
        return PerformanceMark;
    },
    get PerformanceMeasure () {
        return PerformanceMeasure;
    }
});
var _call_super = __webpack_require__(19436);
var _class_call_check = __webpack_require__(8864);
var _class_private_field_loose_base = __webpack_require__(28713);
var _class_private_field_loose_key = __webpack_require__(7979);
var _create_class = __webpack_require__(93072);
var _inherits = __webpack_require__(82397);
var _wrap_native_super = __webpack_require__(30753);
var _PerformanceEntry = __webpack_require__(78097);
var _detail = /*#__PURE__*/ _class_private_field_loose_key._("_detail");
var PerformanceMark = /*#__PURE__*/ function(PerformanceEntry) {
    "use strict";
    _inherits._(PerformanceMark, PerformanceEntry);
    function PerformanceMark(markName, markOptions) {
        _class_call_check._(this, PerformanceMark);
        var _this;
        _this = _call_super._(this, PerformanceMark, [
            {
                name: markName,
                entryType: 'mark',
                startTime: (markOptions === null || markOptions === void 0 ? void 0 : markOptions.startTime) ?? performance.now(),
                duration: 0
            }
        ]), Object.defineProperty(_this, _detail, {
            writable: true,
            value: void 0
        });
        if (markOptions) {
            _class_private_field_loose_base._(_this, _detail)[_detail] = markOptions.detail;
        }
        return _this;
    }
    _create_class._(PerformanceMark, [
        {
            key: "detail",
            get: function() {
                return _class_private_field_loose_base._(this, _detail)[_detail];
            }
        }
    ]);
    return PerformanceMark;
}(_wrap_native_super._(_PerformanceEntry.PerformanceEntry));
var _detail1 = /*#__PURE__*/ _class_private_field_loose_key._("_detail");
var PerformanceMeasure = /*#__PURE__*/ function(PerformanceEntry) {
    "use strict";
    _inherits._(PerformanceMeasure, PerformanceEntry);
    function PerformanceMeasure(measureName, measureOptions) {
        _class_call_check._(this, PerformanceMeasure);
        var _this;
        _this = _call_super._(this, PerformanceMeasure, [
            {
                name: measureName,
                entryType: 'measure',
                startTime: measureOptions.startTime,
                duration: measureOptions.duration
            }
        ]), Object.defineProperty(_this, _detail1, {
            writable: true,
            value: void 0
        });
        if (measureOptions) {
            _class_private_field_loose_base._(_this, _detail1)[_detail1] = measureOptions.detail;
        }
        return _this;
    }
    _create_class._(PerformanceMeasure, [
        {
            key: "detail",
            get: function() {
                return _class_private_field_loose_base._(this, _detail1)[_detail1];
            }
        }
    ]);
    return PerformanceMeasure;
}(_wrap_native_super._(_PerformanceEntry.PerformanceEntry));


}),
77859: (function (__unused_webpack_module, exports, __webpack_require__) {
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * @format
 *       strict
 */ Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "warnNoNativePerformance", ({
    enumerable: true,
    get: function() {
        return warnNoNativePerformance;
    }
}));
var _interop_require_default = __webpack_require__(66705);
var _warnOnce = /*#__PURE__*/ _interop_require_default._(__webpack_require__(93473));
function warnNoNativePerformance() {
    (0, _warnOnce.default)('missing-native-performance', 'Missing native implementation of Performance');
}


}),
65262: (function (__unused_webpack_module, exports, __webpack_require__) {
var __webpack_unused_export__;
__webpack_unused_export__ = ({
    value: true
});
var _interop_require_default = __webpack_require__(66705);
var _sliced_to_array = __webpack_require__(78474);
var _to_consumable_array = __webpack_require__(92716);
var _indexcjs = /*#__PURE__*/ _interop_require_default._(__webpack_require__(67657));
var _prefetchplugin = /*#__PURE__*/ _interop_require_default._(__webpack_require__(93076));
var _resolverplugin = /*#__PURE__*/ _interop_require_default._(__webpack_require__(92998));
var _coreplugin = /*#__PURE__*/ _interop_require_default._(__webpack_require__(9065));
var __module_federation_runtime_plugins__ = [
    (0, _prefetchplugin.default)(),
    (0, _resolverplugin.default)(),
    (0, _coreplugin.default)()
];
var __module_federation_remote_infos__ = {};
var __module_federation_container_name__ = "miniApp";
var __module_federation_share_strategy__ = "loaded-first";
if ((__webpack_require__.initializeSharingData || __webpack_require__.initializeExposesData) && __webpack_require__.federation) {
    var __webpack_require___remotesLoadingData, __webpack_require___remotesLoadingData1, __webpack_require___initializeSharingData, __webpack_require___consumesLoadingData, __webpack_require___consumesLoadingData1, __webpack_require___initializeExposesData, __webpack_require___consumesLoadingData2;
    var override = (obj, key, value)=>{
        if (!obj) return;
        if (obj[key]) obj[key] = value;
    };
    var merge = (obj, key, fn)=>{
        var value = fn();
        if (Array.isArray(value)) {
            var _obj_key;
            var _obj, _key;
            var _;
            (_ = (_obj = obj)[_key = key]) !== null && _ !== void 0 ? _ : _obj[_key] = [];
            (_obj_key = obj[key]).push.apply(_obj_key, _to_consumable_array._(value));
        } else if (typeof value === "object" && value !== null) {
            var _obj1, _key1;
            var _1;
            (_1 = (_obj1 = obj)[_key1 = key]) !== null && _1 !== void 0 ? _1 : _obj1[_key1] = {};
            Object.assign(obj[key], value);
        }
    };
    var early = (obj, key, initial)=>{
        var _obj, _key;
        var _;
        (_ = (_obj = obj)[_key = key]) !== null && _ !== void 0 ? _ : _obj[_key] = initial();
    };
    var __webpack_require___remotesLoadingData_chunkMapping;
    var remotesLoadingChunkMapping = (__webpack_require___remotesLoadingData_chunkMapping = (__webpack_require___remotesLoadingData = __webpack_require__.remotesLoadingData) === null || __webpack_require___remotesLoadingData === void 0 ? void 0 : __webpack_require___remotesLoadingData.chunkMapping) !== null && __webpack_require___remotesLoadingData_chunkMapping !== void 0 ? __webpack_require___remotesLoadingData_chunkMapping : {};
    var __webpack_require___remotesLoadingData_moduleIdToRemoteDataMapping;
    var remotesLoadingModuleIdToRemoteDataMapping = (__webpack_require___remotesLoadingData_moduleIdToRemoteDataMapping = (__webpack_require___remotesLoadingData1 = __webpack_require__.remotesLoadingData) === null || __webpack_require___remotesLoadingData1 === void 0 ? void 0 : __webpack_require___remotesLoadingData1.moduleIdToRemoteDataMapping) !== null && __webpack_require___remotesLoadingData_moduleIdToRemoteDataMapping !== void 0 ? __webpack_require___remotesLoadingData_moduleIdToRemoteDataMapping : {};
    var __webpack_require___initializeSharingData_scopeToSharingDataMapping;
    var initializeSharingScopeToInitDataMapping = (__webpack_require___initializeSharingData_scopeToSharingDataMapping = (__webpack_require___initializeSharingData = __webpack_require__.initializeSharingData) === null || __webpack_require___initializeSharingData === void 0 ? void 0 : __webpack_require___initializeSharingData.scopeToSharingDataMapping) !== null && __webpack_require___initializeSharingData_scopeToSharingDataMapping !== void 0 ? __webpack_require___initializeSharingData_scopeToSharingDataMapping : {};
    var __webpack_require___consumesLoadingData_chunkMapping;
    var consumesLoadingChunkMapping = (__webpack_require___consumesLoadingData_chunkMapping = (__webpack_require___consumesLoadingData = __webpack_require__.consumesLoadingData) === null || __webpack_require___consumesLoadingData === void 0 ? void 0 : __webpack_require___consumesLoadingData.chunkMapping) !== null && __webpack_require___consumesLoadingData_chunkMapping !== void 0 ? __webpack_require___consumesLoadingData_chunkMapping : {};
    var __webpack_require___consumesLoadingData_moduleIdToConsumeDataMapping;
    var consumesLoadingModuleToConsumeDataMapping = (__webpack_require___consumesLoadingData_moduleIdToConsumeDataMapping = (__webpack_require___consumesLoadingData1 = __webpack_require__.consumesLoadingData) === null || __webpack_require___consumesLoadingData1 === void 0 ? void 0 : __webpack_require___consumesLoadingData1.moduleIdToConsumeDataMapping) !== null && __webpack_require___consumesLoadingData_moduleIdToConsumeDataMapping !== void 0 ? __webpack_require___consumesLoadingData_moduleIdToConsumeDataMapping : {};
    var consumesLoadinginstalledModules = {};
    var initializeSharingInitPromises = [];
    var initializeSharingInitTokens = {};
    var containerShareScope = (__webpack_require___initializeExposesData = __webpack_require__.initializeExposesData) === null || __webpack_require___initializeExposesData === void 0 ? void 0 : __webpack_require___initializeExposesData.shareScope;
    for(var key in _indexcjs.default){
        __webpack_require__.federation[key] = _indexcjs.default[key];
    }
    early(__webpack_require__.federation, "consumesLoadingModuleToHandlerMapping", ()=>{
        var consumesLoadingModuleToHandlerMapping = {};
        for (var ref of Object.entries(consumesLoadingModuleToConsumeDataMapping)){
            var _ref = _sliced_to_array._(ref, 2), moduleId = _ref[0], data = _ref[1];
            consumesLoadingModuleToHandlerMapping[moduleId] = {
                getter: data.fallback,
                shareInfo: {
                    shareConfig: {
                        fixedDependencies: false,
                        requiredVersion: data.requiredVersion,
                        strictVersion: data.strictVersion,
                        singleton: data.singleton,
                        eager: data.eager
                    },
                    scope: [
                        data.shareScope
                    ]
                },
                shareKey: data.shareKey
            };
        }
        return consumesLoadingModuleToHandlerMapping;
    });
    early(__webpack_require__.federation, "initOptions", ()=>({}));
    early(__webpack_require__.federation.initOptions, "name", ()=>__module_federation_container_name__);
    early(__webpack_require__.federation.initOptions, "shareStrategy", ()=>__module_federation_share_strategy__);
    early(__webpack_require__.federation.initOptions, "shared", ()=>{
        var shared = {};
        for (var ref of Object.entries(initializeSharingScopeToInitDataMapping)){
            var _ref = _sliced_to_array._(ref, 2), scope = _ref[0], stages = _ref[1];
            for (var stage of stages){
                if (typeof stage === "object" && stage !== null) {
                    var name = stage.name, version = stage.version, factory = stage.factory, eager = stage.eager, singleton = stage.singleton, requiredVersion = stage.requiredVersion, strictVersion = stage.strictVersion;
                    var shareConfig = {};
                    var isValidValue = function(val) {
                        return typeof val !== "undefined";
                    };
                    if (isValidValue(singleton)) {
                        shareConfig.singleton = singleton;
                    }
                    if (isValidValue(requiredVersion)) {
                        shareConfig.requiredVersion = requiredVersion;
                    }
                    if (isValidValue(eager)) {
                        shareConfig.eager = eager;
                    }
                    if (isValidValue(strictVersion)) {
                        shareConfig.strictVersion = strictVersion;
                    }
                    var options = {
                        version,
                        scope: [
                            scope
                        ],
                        shareConfig,
                        get: factory
                    };
                    if (shared[name]) {
                        shared[name].push(options);
                    } else {
                        shared[name] = [
                            options
                        ];
                    }
                }
            }
        }
        return shared;
    });
    merge(__webpack_require__.federation.initOptions, "remotes", ()=>Object.values(__module_federation_remote_infos__).flat().filter((remote)=>remote.externalType === "script"));
    merge(__webpack_require__.federation.initOptions, "plugins", ()=>__module_federation_runtime_plugins__);
    early(__webpack_require__.federation, "bundlerRuntimeOptions", ()=>({}));
    early(__webpack_require__.federation.bundlerRuntimeOptions, "remotes", ()=>({}));
    early(__webpack_require__.federation.bundlerRuntimeOptions.remotes, "chunkMapping", ()=>remotesLoadingChunkMapping);
    early(__webpack_require__.federation.bundlerRuntimeOptions.remotes, "idToExternalAndNameMapping", ()=>{
        var remotesLoadingIdToExternalAndNameMappingMapping = {};
        for (var ref of Object.entries(remotesLoadingModuleIdToRemoteDataMapping)){
            var _ref = _sliced_to_array._(ref, 2), moduleId = _ref[0], data = _ref[1];
            remotesLoadingIdToExternalAndNameMappingMapping[moduleId] = [
                data.shareScope,
                data.name,
                data.externalModuleId,
                data.remoteName
            ];
        }
        return remotesLoadingIdToExternalAndNameMappingMapping;
    });
    early(__webpack_require__.federation.bundlerRuntimeOptions.remotes, "webpackRequire", ()=>__webpack_require__);
    merge(__webpack_require__.federation.bundlerRuntimeOptions.remotes, "idToRemoteMap", ()=>{
        var idToRemoteMap = {};
        for (var ref of Object.entries(remotesLoadingModuleIdToRemoteDataMapping)){
            var _ref = _sliced_to_array._(ref, 2), id = _ref[0], remoteData = _ref[1];
            var info = __module_federation_remote_infos__[remoteData.remoteName];
            if (info) idToRemoteMap[id] = info;
        }
        return idToRemoteMap;
    });
    override(__webpack_require__, "S", __webpack_require__.federation.bundlerRuntime.S);
    if (__webpack_require__.federation.attachShareScopeMap) {
        __webpack_require__.federation.attachShareScopeMap(__webpack_require__);
    }
    override(__webpack_require__.f, "remotes", (chunkId, promises)=>__webpack_require__.federation.bundlerRuntime.remotes({
            chunkId,
            promises,
            chunkMapping: remotesLoadingChunkMapping,
            idToExternalAndNameMapping: __webpack_require__.federation.bundlerRuntimeOptions.remotes.idToExternalAndNameMapping,
            idToRemoteMap: __webpack_require__.federation.bundlerRuntimeOptions.remotes.idToRemoteMap,
            webpackRequire: __webpack_require__
        }));
    override(__webpack_require__.f, "consumes", (chunkId, promises)=>__webpack_require__.federation.bundlerRuntime.consumes({
            chunkId,
            promises,
            chunkMapping: consumesLoadingChunkMapping,
            moduleToHandlerMapping: __webpack_require__.federation.consumesLoadingModuleToHandlerMapping,
            installedModules: consumesLoadinginstalledModules,
            webpackRequire: __webpack_require__
        }));
    override(__webpack_require__, "I", (name, initScope)=>__webpack_require__.federation.bundlerRuntime.I({
            shareScopeName: name,
            initScope,
            initPromises: initializeSharingInitPromises,
            initTokens: initializeSharingInitTokens,
            webpackRequire: __webpack_require__
        }));
    override(__webpack_require__, "initContainer", (shareScope, initScope, remoteEntryInitOptions)=>__webpack_require__.federation.bundlerRuntime.initContainerEntry({
            shareScope,
            initScope,
            remoteEntryInitOptions,
            shareScopeKey: containerShareScope,
            webpackRequire: __webpack_require__
        }));
    override(__webpack_require__, "getContainer", (module1, getScope)=>{
        var moduleMap = __webpack_require__.initializeExposesData.moduleMap;
        __webpack_require__.R = getScope;
        getScope = Object.prototype.hasOwnProperty.call(moduleMap, module1) ? moduleMap[module1]() : Promise.resolve().then(()=>{
            throw new Error('Module "' + module1 + '" does not exist in container.');
        });
        __webpack_require__.R = undefined;
        return getScope;
    });
    __webpack_require__.federation.instance = __webpack_require__.federation.runtime.init(__webpack_require__.federation.initOptions);
    if ((__webpack_require___consumesLoadingData2 = __webpack_require__.consumesLoadingData) === null || __webpack_require___consumesLoadingData2 === void 0 ? void 0 : __webpack_require___consumesLoadingData2.initialConsumes) {
        __webpack_require__.federation.bundlerRuntime.installInitialConsumes({
            webpackRequire: __webpack_require__,
            installedModules: consumesLoadinginstalledModules,
            initialConsumes: __webpack_require__.consumesLoadingData.initialConsumes,
            moduleToHandlerMapping: __webpack_require__.federation.consumesLoadingModuleToHandlerMapping
        });
    }
}


}),
20881: (function (__unused_webpack_module, exports, __webpack_require__) {
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "useAccountZutandStore", ({
    enumerable: true,
    get: function() {
        return useAccountZutandStore;
    }
}));
var _object_spread = __webpack_require__(36192);
var _object_spread_props = __webpack_require__(83590);
var _zustand = __webpack_require__(60251);
var initialSettingState = {
    isLogin: false,
    dataAccount: {}
};
var useAccountZutandStore = (0, _zustand.create)((set, get)=>_object_spread_props._(_object_spread._({}, initialSettingState), {
        setDataAccount: (dataAccount)=>{
            set({
                dataAccount
            });
        },
        setIsLogin: (isLogin)=>{
            set({
                isLogin
            });
        }
    }));


}),
49402: (function (__unused_webpack_module, exports, __webpack_require__) {
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return _default;
    }
}));
var _interop_require_default = __webpack_require__(66705);
var _jsxruntime = __webpack_require__(70095);
var _reactnativesafeareacontext = __webpack_require__(33503);
var _native = __webpack_require__(25822);
var _navigation = /*#__PURE__*/ _interop_require_default._(__webpack_require__(50178));
function App() {
    return /*#__PURE__*/ (0, _jsxruntime.jsx)(_reactnativesafeareacontext.SafeAreaProvider, {
        children: /*#__PURE__*/ (0, _jsxruntime.jsx)(_native.NavigationContainer, {
            children: /*#__PURE__*/ (0, _jsxruntime.jsx)(_navigation.default, {})
        })
    });
}
var _default = App;


}),
19686: (function (__unused_webpack_module, exports, __webpack_require__) {
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return _default;
    }
}));
var _interop_require_default = __webpack_require__(66705);
var _jsxruntime = __webpack_require__(70095);
var _nativestack = __webpack_require__(64684);
var _home = /*#__PURE__*/ _interop_require_default._(__webpack_require__(48268));
var _ServiceScreen = /*#__PURE__*/ _interop_require_default._(__webpack_require__(76305));
var Stack = (0, _nativestack.createNativeStackNavigator)();
var AuthorizedNavigation = ()=>{
    return /*#__PURE__*/ (0, _jsxruntime.jsxs)(Stack.Navigator, {
        initialRouteName: "Home",
        children: [
            /*#__PURE__*/ (0, _jsxruntime.jsx)(Stack.Screen, {
                name: "Home",
                component: _home.default
            }),
            /*#__PURE__*/ (0, _jsxruntime.jsx)(Stack.Screen, {
                name: "Service",
                component: _ServiceScreen.default
            })
        ]
    });
};
var _default = AuthorizedNavigation;


}),
50178: (function (__unused_webpack_module, exports, __webpack_require__) {
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return _default;
    }
}));
var _interop_require_default = __webpack_require__(66705);
var _interop_require_wildcard = __webpack_require__(83610);
var _jsxruntime = __webpack_require__(70095);
var _react = /*#__PURE__*/ _interop_require_wildcard._(__webpack_require__(31399));
var _nativestack = __webpack_require__(64684);
var _wrapauthunauth = /*#__PURE__*/ _interop_require_default._(__webpack_require__(13217));
var _reactnative = __webpack_require__(3345);
var Stack = (0, _nativestack.createNativeStackNavigator)();
var WrapNavigationRemote = ()=>{
    (0, _react.useEffect)(()=>{
        var miniAppReact = _react.default;
        var hostReact = globalThis.hostReact;
        console.log('MINI APP REACT INSTANCE:', miniAppReact.version);
        if (hostReact) {
            console.log("--- KI\u1EC2M TRA SO S\xc1NH ---");
            console.log("React c\u1EE7a Host v\xe0 Mini c\xf3 ph\u1EA3i l\xe0 m\u1ED9t kh\xf4ng?", hostReact === miniAppReact);
        } else {
            console.warn("Kh\xf4ng t\xecm th\u1EA5y hostReact tr\xean global scope!");
        }
    }, []);
    (0, _react.useEffect)(()=>{
        console.log('WrapNavigatio from remote');
    }, []);
    return /*#__PURE__*/ (0, _jsxruntime.jsx)(_reactnative.View, {
        style: {
            flex: 1
        },
        children: /*#__PURE__*/ (0, _jsxruntime.jsx)(Stack.Navigator, {
            children: /*#__PURE__*/ (0, _jsxruntime.jsx)(Stack.Screen, {
                name: "wrap-auth-unauth",
                component: _wrapauthunauth.default,
                options: {
                    headerShown: false
                }
            })
        })
    });
};
var _default = WrapNavigationRemote;


}),
53127: (function (__unused_webpack_module, exports, __webpack_require__) {
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return _default;
    }
}));
var _interop_require_default = __webpack_require__(66705);
var _jsxruntime = __webpack_require__(70095);
var _nativestack = __webpack_require__(64684);
var _login = /*#__PURE__*/ _interop_require_default._(__webpack_require__(89977));
var Stack = (0, _nativestack.createNativeStackNavigator)();
var UnAuthorizedNavigation = ()=>{
    return /*#__PURE__*/ (0, _jsxruntime.jsx)(Stack.Navigator, {
        initialRouteName: "Login",
        children: /*#__PURE__*/ (0, _jsxruntime.jsx)(Stack.Screen, {
            name: "Login",
            component: _login.default
        })
    });
};
var _default = UnAuthorizedNavigation;


}),
13217: (function (__unused_webpack_module, exports, __webpack_require__) {
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return _default;
    }
}));
var _interop_require_default = __webpack_require__(66705);
var _jsxruntime = __webpack_require__(70095);
var _accountZustandStore = __webpack_require__(20881);
var _authnavigation = /*#__PURE__*/ _interop_require_default._(__webpack_require__(19686));
var _unauthnavigation = /*#__PURE__*/ _interop_require_default._(__webpack_require__(53127));
console.log('WrapAuthAndUnAuthNavigator');
var WrapAuthAndUnAuthNavigator = ()=>{
    var isLogin = (0, _accountZustandStore.useAccountZutandStore)().isLogin;
    return /*#__PURE__*/ (0, _jsxruntime.jsx)(_jsxruntime.Fragment, {
        children: isLogin ? /*#__PURE__*/ (0, _jsxruntime.jsx)(_authnavigation.default, {}) : /*#__PURE__*/ (0, _jsxruntime.jsx)(_unauthnavigation.default, {})
    });
};
var _default = WrapAuthAndUnAuthNavigator;


}),
48268: (function (__unused_webpack_module, exports, __webpack_require__) {
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return _default;
    }
}));
var _jsxruntime = __webpack_require__(70095);
var _native = __webpack_require__(25822);
var _reactnative = __webpack_require__(3345);
var _accountZustandStore = __webpack_require__(20881);
var HomeScreenMiniApp = ()=>{
    var setIsLogin = (0, _accountZustandStore.useAccountZutandStore)().setIsLogin;
    var navigation = (0, _native.useNavigation)();
    var handleLogout = ()=>{
        setIsLogin(false);
    };
    return /*#__PURE__*/ (0, _jsxruntime.jsxs)(_reactnative.View, {
        style: {
            flex: 1,
            alignItems: 'center',
            justifyContent: 'center'
        },
        children: [
            /*#__PURE__*/ (0, _jsxruntime.jsx)(_reactnative.Text, {
                style: {
                    textAlign: 'center'
                },
                children: "Home Screen"
            }),
            /*#__PURE__*/ (0, _jsxruntime.jsx)(_reactnative.Button, {
                title: "Sang service ",
                onPress: ()=>navigation.navigate('Service')
            }),
            /*#__PURE__*/ (0, _jsxruntime.jsx)(_reactnative.Button, {
                title: "\u0110\u0103ng xu\u1EA5t",
                onPress: handleLogout
            })
        ]
    });
};
var _default = HomeScreenMiniApp;


}),
89977: (function (__unused_webpack_module, exports, __webpack_require__) {
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return _default;
    }
}));
var _interop_require_wildcard = __webpack_require__(83610);
var _jsxruntime = __webpack_require__(70095);
var _react = /*#__PURE__*/ _interop_require_wildcard._(__webpack_require__(31399));
var _reactnative = __webpack_require__(3345);
var _accountZustandStore = __webpack_require__(20881);
var LoginScreen = ()=>{
    var setIsLogin = (0, _accountZustandStore.useAccountZutandStore)().setIsLogin;
    (0, _react.useEffect)(()=>{
        console.log('LoginScreen');
    }, []);
    var handleLogin = ()=>{
        //goi api login
        //nếu login thành công thì set isLogin = true
        setIsLogin(true);
    };
    return /*#__PURE__*/ (0, _jsxruntime.jsxs)(_reactnative.View, {
        style: {
            flex: 1,
            justifyContent: 'center',
            alignItems: 'center'
        },
        children: [
            /*#__PURE__*/ (0, _jsxruntime.jsx)(_reactnative.Text, {
                children: "LoginScreen"
            }),
            /*#__PURE__*/ (0, _jsxruntime.jsx)(_reactnative.Button, {
                title: "\u0110\u0103ng nh\u1EADp",
                onPress: handleLogin
            })
        ]
    });
};
var _default = LoginScreen;


}),
76305: (function (__unused_webpack_module, exports, __webpack_require__) {
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return _default;
    }
}));
var _jsxruntime = __webpack_require__(70095);
var _native = __webpack_require__(25822);
var _reactnative = __webpack_require__(3345);
var _accountZustandStore = __webpack_require__(20881);
var ServiceScreenMiniApp = ()=>{
    var setIsLogin = (0, _accountZustandStore.useAccountZutandStore)().setIsLogin;
    var navigation = (0, _native.useNavigation)();
    var handleLogout = ()=>{
        setIsLogin(false);
    };
    return /*#__PURE__*/ (0, _jsxruntime.jsxs)(_reactnative.View, {
        style: {
            flex: 1,
            alignItems: 'center',
            justifyContent: 'center'
        },
        children: [
            /*#__PURE__*/ (0, _jsxruntime.jsx)(_reactnative.Text, {
                style: {
                    textAlign: 'center'
                },
                children: "Service Screen"
            }),
            /*#__PURE__*/ (0, _jsxruntime.jsx)(_reactnative.Button, {
                title: "sang home",
                onPress: ()=>navigation.navigate('Home')
            }),
            /*#__PURE__*/ (0, _jsxruntime.jsx)(_reactnative.Button, {
                onPress: ()=>navigation.goBack(),
                title: "Go back"
            }),
            /*#__PURE__*/ (0, _jsxruntime.jsx)(_reactnative.Button, {
                onPress: ()=>navigation.popTo('Home'),
                title: "Go to Home"
            }),
            /*#__PURE__*/ (0, _jsxruntime.jsx)(_reactnative.Button, {
                title: "Go back to first screen in stack",
                onPress: ()=>{
                    navigation.popToTop();
                }
            }),
            /*#__PURE__*/ (0, _jsxruntime.jsx)(_reactnative.Button, {
                title: "\u0110\u0103ng xu\u1EA5t",
                onPress: handleLogout
            })
        ]
    });
};
var _default = ServiceScreenMiniApp;


}),
93359: (function (module) {
"use strict";
module.exports = JSON.parse('{"name":"miniAppTest","displayName":"miniAppTest"}')

}),

});
/************************************************************************/
// The module cache
var __webpack_module_cache__ = {};

// The require function
function __webpack_require__(moduleId) {

// Check if module is in cache
var cachedModule = __webpack_module_cache__[moduleId];
if (cachedModule !== undefined) {
return cachedModule.exports;
}
// Create a new module (and put it into the cache)
var module = (__webpack_module_cache__[moduleId] = {
exports: {}
});
// Execute the module function
__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);

// Return the exports of the module
return module.exports;

}

// expose the modules object (__webpack_modules__)
__webpack_require__.m = __webpack_modules__;

// expose the module cache
__webpack_require__.c = __webpack_module_cache__;

/************************************************************************/
// module_federation/runtime
!function() {

if(!__webpack_require__.federation){
    __webpack_require__.federation = {
        
chunkMatcher: function(chunkId) {
    return !/^webpack_sharing_consume_default_react(\-na(tive(_(assets\-registry_(path\-support_react\-native_assets\-35f154|registry_react\-native_assets\-reg\-5d1eae)|Libraries_(React(Native_(AppContainer_react\-native_\-32e0e9|RendererProxy_react\-native\-89db02)|Private_ReactNativePrivateInitial\-96a696)|NativeComponent_NativeComponentRegistr\-515c18)|normalize\-colors_react\-native_normalize\-colors|src_private_featureflags_ReactNativeFeatureFlags\-fd3090|virtualized\-lists_react\-native_virtualized\-lists\-e7b8d0)|\-safe\-area\-context_react\-native\-safe\-area\-context\-5636ea)|vigation_native_react\-navigation_native)|_react)$/.test(chunkId);
},
rootOutputDir: "",

    };
}

}();
// webpack/runtime/ensure_chunk
!function() {
__webpack_require__.f = {};
// This file contains only the entry chunk.
// The chunk loading function for additional chunks
__webpack_require__.e = function(chunkId) {
	return Promise.all(
		Object.keys(__webpack_require__.f).reduce(function(promises, key) {
			__webpack_require__.f[key](chunkId, promises);
			return promises;
		}, [])
	);
};
}();
// webpack/runtime/get javascript chunk filename
!function() {
// This function allow to reference chunks
__webpack_require__.u = function(chunkId) {
  // return url for filenames not based on template
  
  // return url for filenames based on template
  return "" + chunkId + ".chunk.bundle"
}
}();
// webpack/runtime/global
!function() {
__webpack_require__.g = (function() {
	if (typeof globalThis === 'object') return globalThis;
	try {
		return this || new Function('return this')();
	} catch (e) {
		if (typeof window === 'object') return window;
	}
})();
}();
// webpack/runtime/has_own_property
!function() {
__webpack_require__.o = function(obj, prop) { return Object.prototype.hasOwnProperty.call(obj, prop); }
}();
// webpack/runtime/load_script
!function() {
  function loadScriptHandler(name, caller, done, referenceUrl) {
    if (__webpack_require__.repack.shared.scriptManager) {
      __webpack_require__.repack.shared.scriptManager.loadScript(name, caller, __webpack_require__, referenceUrl).then(function () {
        done();
        return;
      }).catch(function (reason) {
        console.error('[RepackRuntime] Loading script failed:', reason);
        done({
          type: 'exec',
          target: {
            src: name
          }
        });
      });
    } else {
      console.error('[RepackRuntime] Script manager was not provided');
      done({
        type: 'exec',
        target: {
          src: name
        }
      });
    }
  }
  function loadHotUpdateHandler(url, done) {
    if (!false) {
      console.error('[RepackRuntime] Loading HMR update chunks is disabled');
      done({
        type: 'disabled',
        target: {
          src: url
        }
      });
      return;
    }
    fetch(url).then(function (response) {
      if (!response.ok) {
        console.error('[RepackRuntime] Loading HMR update failed:', response.statusText);
        done({
          type: response.statusText,
          target: {
            src: url
          }
        });
        return;
      }
      return response.text();
    }).then(function (script) {
      if (script) {
        if (__webpack_require__.repack.shared.scriptManager) {
          __webpack_require__.repack.shared.scriptManager.unstable_evaluateScript(script, url);
        } else {
          eval(script);
        }
      }
      return;
    }).catch(function (reason) {
      console.error('[RepackRuntime] Loading HMR update chunk failed:', reason);
      done({
        type: 'exec',
        target: {
          src: url
        }
      });
    });
  }
  __webpack_require__.l = function loadScript(url, done, key, chunkId) {
    if (key && chunkId) {
      loadScriptHandler(chunkId, 'main', done, url);
    } else if (key) {
      loadScriptHandler(key, undefined, done, url);
    } else {
      loadHotUpdateHandler(url, done);
    }
  };
}();
// webpack/runtime/public_path
!function() {
__webpack_require__.p = "noop:///";
}();
// webpack/runtime/repack/guarded require
!function() {
  var inGuard = false;
  var originalWebpackRequire = __webpack_require__;
  function guardedWebpackRequire(moduleId) {
    if (!inGuard && self.ErrorUtils) {
      inGuard = true;
      let exports;
      try {
        exports = originalWebpackRequire(moduleId);
      } catch (e) {
        self.ErrorUtils.reportFatalError(e);
      }
      inGuard = false;
      return exports;
    } else {
      return originalWebpackRequire(moduleId);
    }
  }
  Object.getOwnPropertyNames(originalWebpackRequire).forEach(key => {
    guardedWebpackRequire[key] = originalWebpackRequire[key];
  });
  __webpack_require__ = guardedWebpackRequire;
}();
// webpack/runtime/repack/init
!function() {
  var repackRuntime = {
    shared: self.__repack__ && self.__repack__.shared || __webpack_require__.repack && __webpack_require__.repack.shared || {
      scriptManager: undefined,
      enqueuedResolvers: []
    }
  };
  __webpack_require__.repack = self.__repack__ = repackRuntime;
}();
// webpack/runtime/rspack_version
!function() {
__webpack_require__.rv = function() { return "1.3.15"; }
}();
// webpack/runtime/sharing
!function() {

__webpack_require__.S = {};
__webpack_require__.initializeSharingData = { scopeToSharingDataMapping: { "default": [{ name: "@react-native/assets-registry/path-support", version: "0.78.2", factory: function() { return __webpack_require__.e("node_modules_react-native_assets-registry_path-support_js").then(function() { return function() { return __webpack_require__(82348); }; }); }, eager: 0, singleton: 1, requiredVersion: "*" }, { name: "@react-native/assets-registry/registry", version: "0.78.2", factory: function() { return __webpack_require__.e("node_modules_react-native_assets-registry_registry_js").then(function() { return function() { return __webpack_require__(58258); }; }); }, eager: 0, singleton: 1, requiredVersion: "*" }, { name: "@react-native/normalize-colors", version: "0.78.2", factory: function() { return __webpack_require__.e("node_modules_react-native_normalize-colors_index_js").then(function() { return function() { return __webpack_require__(35665); }; }); }, eager: 0, singleton: 1, requiredVersion: "*" }, { name: "@react-native/virtualized-lists", version: "0.78.2", factory: function() { return Promise.all([__webpack_require__.e("vendors-node_modules_react-native_node_modules_react-native_virtualized-lists_index_js"), __webpack_require__.e("webpack_sharing_consume_default_react_react"), __webpack_require__.e("webpack_sharing_consume_default_react-native_src_private_featureflags_ReactNativeFeatureFlags-fd3090"), __webpack_require__.e("node_modules_swc_helpers_cjs__get_cjs-node_modules_swc_helpers_cjs__interop_require_wildcard_-d69ae8")]).then(function() { return function() { return __webpack_require__(10179); }; }); }, eager: 0, singleton: 1, requiredVersion: "*" }, { name: "@react-navigation/native-stack", version: "7.2.0", factory: function() { return Promise.all([__webpack_require__.e("vendors-node_modules_react-navigation_native-stack_lib_commonjs_index_js"), __webpack_require__.e("webpack_sharing_consume_default_react_react"), __webpack_require__.e("webpack_sharing_consume_default_react-native-safe-area-context_react-native-safe-area-context-5636ea"), __webpack_require__.e("webpack_sharing_consume_default_react-navigation_native_react-navigation_native"), __webpack_require__.e("node_modules_swc_helpers_cjs__interop_require_wildcard_cjs-node_modules_swc_helpers_cjs__obje-15d7661")]).then(function() { return function() { return __webpack_require__(27750); }; }); }, eager: 0, singleton: 1, requiredVersion: "7.2.0" }, { name: "@react-navigation/native", version: "7.0.14", factory: function() { return Promise.all([__webpack_require__.e("vendors-node_modules_react-navigation_native_lib_commonjs_index_js"), __webpack_require__.e("webpack_sharing_consume_default_react_react"), __webpack_require__.e("node_modules_swc_helpers_cjs__interop_require_wildcard_cjs-node_modules_swc_helpers_cjs__obje-15d7660")]).then(function() { return function() { return __webpack_require__(54657); }; }); }, eager: 0, singleton: 1, requiredVersion: "7.0.14" }, { name: "react-native-safe-area-context", version: "5.3.0", factory: function() { return Promise.all([__webpack_require__.e("webpack_sharing_consume_default_react_react"), __webpack_require__.e("webpack_sharing_consume_default_react-native_Libraries_NativeComponent_NativeComponentRegistr-515c18"), __webpack_require__.e("node_modules_react-native-safe-area-context_src_index_tsx-_4b461")]).then(function() { return function() { return __webpack_require__(60103); }; }); }, eager: 0, singleton: 1, requiredVersion: "5.3.0" }, { name: "react-native-screens", version: "4.10.0", factory: function() { return Promise.all([__webpack_require__.e("vendors-node_modules_react-native-screens_src_index_tsx"), __webpack_require__.e("webpack_sharing_consume_default_react_react"), __webpack_require__.e("webpack_sharing_consume_default_react-native_Libraries_NativeComponent_NativeComponentRegistr-515c18"), __webpack_require__.e("webpack_sharing_consume_default_react-native_Libraries_ReactNative_RendererProxy_react-native-89db02"), __webpack_require__.e("webpack_sharing_consume_default_react-native_Libraries_ReactNative_AppContainer_react-native_-32e0e9"), __webpack_require__.e("node_modules_swc_helpers_cjs__interop_require_wildcard_cjs-node_modules_swc_helpers_cjs__obje-a42dd8")]).then(function() { return function() { return __webpack_require__(57978); }; }); }, eager: 0, singleton: 1, requiredVersion: "4.10.0" }, { name: "react-native/Libraries/Components/View/ReactNativeStyleAttributes", version: "0.78.2", factory: function() { return Promise.all([__webpack_require__.e("vendors-node_modules_react-native_Libraries_TurboModule_TurboModuleRegistry_js"), __webpack_require__.e("vendors-node_modules_react-native_Libraries_Components_View_ReactNativeStyleAttributes_js"), __webpack_require__.e("webpack_sharing_consume_default_react-native_normalize-colors_react-native_normalize-colors"), __webpack_require__.e("node_modules_invariant_browser_js-node_modules_react-native_Libraries_Utilities_Platform_ios_-6979294")]).then(function() { return function() { return __webpack_require__(34650); }; }); }, eager: 0, singleton: 1, requiredVersion: "*" }, { name: "react-native/Libraries/Image/AssetRegistry", version: "0.78.2", factory: function() { return Promise.all([__webpack_require__.e("webpack_sharing_consume_default_react-native_assets-registry_registry_react-native_assets-reg-5d1eae"), __webpack_require__.e("node_modules_react-native_Libraries_Image_AssetRegistry_js-_24551")]).then(function() { return function() { return __webpack_require__(84669); }; }); }, eager: 0, singleton: 1, requiredVersion: "*" }, { name: "react-native/Libraries/Image/AssetSourceResolver", version: "0.78.2", factory: function() { return Promise.all([__webpack_require__.e("vendors-node_modules_react-native_Libraries_TurboModule_TurboModuleRegistry_js"), __webpack_require__.e("vendors-node_modules_react-native_Libraries_Image_AssetSourceResolver_js"), __webpack_require__.e("webpack_sharing_consume_default_react-native_assets-registry_path-support_react-native_assets-35f154"), __webpack_require__.e("node_modules_invariant_browser_js-node_modules_react-native_Libraries_Utilities_Platform_ios_-6979293")]).then(function() { return function() { return __webpack_require__(77127); }; }); }, eager: 0, singleton: 1, requiredVersion: "*" }, { name: "react-native/Libraries/NativeComponent/NativeComponentRegistry", version: "0.78.2", factory: function() { return Promise.all([__webpack_require__.e("vendors-node_modules_react-native_Libraries_TurboModule_TurboModuleRegistry_js"), __webpack_require__.e("vendors-node_modules_react-native_Libraries_Components_View_ReactNativeStyleAttributes_js"), __webpack_require__.e("vendors-node_modules_react-native_Libraries_Image_AssetSourceResolver_js"), __webpack_require__.e("vendors-node_modules_react-native_Libraries_NativeComponent_NativeComponentRegistry_js"), __webpack_require__.e("webpack_sharing_consume_default_react_react"), __webpack_require__.e("webpack_sharing_consume_default_react-native_normalize-colors_react-native_normalize-colors"), __webpack_require__.e("webpack_sharing_consume_default_react-native_assets-registry_path-support_react-native_assets-35f154"), __webpack_require__.e("webpack_sharing_consume_default_react-native_assets-registry_registry_react-native_assets-reg-5d1eae"), __webpack_require__.e("node_modules_swc_helpers_cjs__object_spread_props_cjs-node_modules_invariant_browser_js-node_-2d8b79")]).then(function() { return function() { return __webpack_require__(97267); }; }); }, eager: 0, singleton: 1, requiredVersion: "*" }, { name: "react-native/Libraries/NativeComponent/ViewConfigIgnore", version: "0.78.2", factory: function() { return Promise.all([__webpack_require__.e("vendors-node_modules_react-native_Libraries_TurboModule_TurboModuleRegistry_js"), __webpack_require__.e("node_modules_invariant_browser_js-node_modules_react-native_Libraries_NativeComponent_ViewCon-a0528d1")]).then(function() { return function() { return __webpack_require__(72291); }; }); }, eager: 0, singleton: 1, requiredVersion: "*" }, { name: "react-native/Libraries/ReactNative/AppContainer", version: "0.78.2", factory: function() { return Promise.all([__webpack_require__.e("vendors-node_modules_react-native_Libraries_TurboModule_TurboModuleRegistry_js"), __webpack_require__.e("vendors-node_modules_react-native_Libraries_Components_View_ReactNativeStyleAttributes_js"), __webpack_require__.e("vendors-node_modules_react-native_Libraries_Image_AssetSourceResolver_js"), __webpack_require__.e("vendors-node_modules_react-native_Libraries_NativeComponent_NativeComponentRegistry_js"), __webpack_require__.e("vendors-node_modules_invariant_browser_js-node_modules_react-native_Libraries_ReactNative_Ren-2c5665"), __webpack_require__.e("vendors-node_modules_react-native_Libraries_ReactNative_AppContainer_js"), __webpack_require__.e("webpack_sharing_consume_default_react_react"), __webpack_require__.e("webpack_sharing_consume_default_react-native_normalize-colors_react-native_normalize-colors"), __webpack_require__.e("webpack_sharing_consume_default_react-native_assets-registry_path-support_react-native_assets-35f154"), __webpack_require__.e("webpack_sharing_consume_default_react-native_assets-registry_registry_react-native_assets-reg-5d1eae"), __webpack_require__.e("webpack_sharing_consume_default_react-native_Libraries_ReactPrivate_ReactNativePrivateInitial-96a696"), __webpack_require__.e("node_modules_swc_helpers_cjs__interop_require_wildcard_cjs-node_modules_swc_helpers_cjs__obje-23e9b4")]).then(function() { return function() { return __webpack_require__(68710); }; }); }, eager: 0, singleton: 1, requiredVersion: "*" }, { name: "react-native/Libraries/ReactNative/RendererProxy", version: "0.78.2", factory: function() { return Promise.all([__webpack_require__.e("vendors-node_modules_react-native_Libraries_TurboModule_TurboModuleRegistry_js"), __webpack_require__.e("vendors-node_modules_invariant_browser_js-node_modules_react-native_Libraries_ReactNative_Ren-2c5665"), __webpack_require__.e("webpack_sharing_consume_default_react_react"), __webpack_require__.e("webpack_sharing_consume_default_react-native_Libraries_ReactPrivate_ReactNativePrivateInitial-96a696"), __webpack_require__.e("node_modules_swc_helpers_cjs__interop_require_wildcard_cjs-node_modules_swc_helpers_cjs__obje-29f1901")]).then(function() { return function() { return __webpack_require__(46513); }; }); }, eager: 0, singleton: 1, requiredVersion: "*" }, { name: "react-native/Libraries/ReactPrivate/ReactNativePrivateInitializeCore", version: "0.78.2", factory: function() { return __webpack_require__.e("node_modules_callstack_repack_dist_modules_EmptyModule_js").then(function() { return function() { return __webpack_require__(3135); }; }); }, eager: 0, singleton: 1, requiredVersion: "*" }, { name: "react-native/Libraries/ReactPrivate/ReactNativePrivateInterface", version: "0.78.2", factory: function() { return Promise.all([__webpack_require__.e("vendors-node_modules_react-native_Libraries_TurboModule_TurboModuleRegistry_js"), __webpack_require__.e("vendors-node_modules_react-native_Libraries_Components_View_ReactNativeStyleAttributes_js"), __webpack_require__.e("vendors-node_modules_react-native_Libraries_Image_AssetSourceResolver_js"), __webpack_require__.e("vendors-node_modules_react-native_Libraries_NativeComponent_NativeComponentRegistry_js"), __webpack_require__.e("vendors-node_modules_invariant_browser_js-node_modules_react-native_Libraries_ReactNative_Ren-2c5665"), __webpack_require__.e("vendors-node_modules_react-native_src_private_featureflags_ReactNativeFeatureFlags_js"), __webpack_require__.e("vendors-node_modules_react-native_Libraries_Components_AccessibilityInfo_legacySendAccessibil-834983"), __webpack_require__.e("vendors-node_modules_react-native_Libraries_ReactPrivate_ReactNativePrivateInterface_js"), __webpack_require__.e("webpack_sharing_consume_default_react_react"), __webpack_require__.e("webpack_sharing_consume_default_react-native_normalize-colors_react-native_normalize-colors"), __webpack_require__.e("webpack_sharing_consume_default_react-native_assets-registry_path-support_react-native_assets-35f154"), __webpack_require__.e("webpack_sharing_consume_default_react-native_assets-registry_registry_react-native_assets-reg-5d1eae"), __webpack_require__.e("webpack_sharing_consume_default_react-native_Libraries_ReactPrivate_ReactNativePrivateInitial-96a696"), __webpack_require__.e("node_modules_swc_helpers_cjs__interop_require_wildcard_cjs-node_modules_swc_helpers_cjs__obje-29f1900")]).then(function() { return function() { return __webpack_require__(53244); }; }); }, eager: 0, singleton: 1, requiredVersion: "*" }, { name: "react-native/Libraries/StyleSheet/processColor", version: "0.78.2", factory: function() { return Promise.all([__webpack_require__.e("vendors-node_modules_react-native_Libraries_TurboModule_TurboModuleRegistry_js"), __webpack_require__.e("webpack_sharing_consume_default_react-native_normalize-colors_react-native_normalize-colors"), __webpack_require__.e("node_modules_invariant_browser_js-node_modules_react-native_Libraries_StyleSheet_PlatformColo-5bbade1")]).then(function() { return function() { return __webpack_require__(23865); }; }); }, eager: 0, singleton: 1, requiredVersion: "*" }, { name: "react-native/Libraries/StyleSheet/processColorArray", version: "0.78.2", factory: function() { return Promise.all([__webpack_require__.e("vendors-node_modules_react-native_Libraries_TurboModule_TurboModuleRegistry_js"), __webpack_require__.e("webpack_sharing_consume_default_react-native_normalize-colors_react-native_normalize-colors"), __webpack_require__.e("node_modules_invariant_browser_js-node_modules_react-native_Libraries_StyleSheet_processColor-e86ee6")]).then(function() { return function() { return __webpack_require__(57338); }; }); }, eager: 0, singleton: 1, requiredVersion: "*" }, { name: "react-native/src/private/featureflags/ReactNativeFeatureFlags", version: "0.78.2", factory: function() { return Promise.all([__webpack_require__.e("vendors-node_modules_react-native_Libraries_TurboModule_TurboModuleRegistry_js"), __webpack_require__.e("vendors-node_modules_react-native_src_private_featureflags_ReactNativeFeatureFlags_js"), __webpack_require__.e("node_modules_swc_helpers_cjs__interop_require_wildcard_cjs-node_modules_invariant_browser_js")]).then(function() { return function() { return __webpack_require__(31022); }; }); }, eager: 0, singleton: 1, requiredVersion: "*" }, { name: "react-native", version: "0.78.2", factory: function() { return Promise.all([__webpack_require__.e("vendors-node_modules_react-native_Libraries_TurboModule_TurboModuleRegistry_js"), __webpack_require__.e("vendors-node_modules_react-native_Libraries_Components_View_ReactNativeStyleAttributes_js"), __webpack_require__.e("vendors-node_modules_react-native_Libraries_Image_AssetSourceResolver_js"), __webpack_require__.e("vendors-node_modules_react-native_Libraries_NativeComponent_NativeComponentRegistry_js"), __webpack_require__.e("vendors-node_modules_invariant_browser_js-node_modules_react-native_Libraries_ReactNative_Ren-2c5665"), __webpack_require__.e("vendors-node_modules_react-native_src_private_featureflags_ReactNativeFeatureFlags_js"), __webpack_require__.e("vendors-node_modules_react-native_Libraries_Components_AccessibilityInfo_legacySendAccessibil-834983"), __webpack_require__.e("vendors-node_modules_react-native_Libraries_ReactNative_AppContainer_js"), __webpack_require__.e("vendors-node_modules_react-native_index_js"), __webpack_require__.e("webpack_sharing_consume_default_react_react"), __webpack_require__.e("webpack_sharing_consume_default_react-native_normalize-colors_react-native_normalize-colors"), __webpack_require__.e("webpack_sharing_consume_default_react-native_assets-registry_path-support_react-native_assets-35f154"), __webpack_require__.e("webpack_sharing_consume_default_react-native_assets-registry_registry_react-native_assets-reg-5d1eae"), __webpack_require__.e("webpack_sharing_consume_default_react-native_Libraries_ReactPrivate_ReactNativePrivateInitial-96a696"), __webpack_require__.e("webpack_sharing_consume_default_react-native_Libraries_NativeComponent_NativeComponentRegistr-515c18"), __webpack_require__.e("webpack_sharing_consume_default_react-native_Libraries_ReactNative_RendererProxy_react-native-89db02"), __webpack_require__.e("webpack_sharing_consume_default_react-native_virtualized-lists_react-native_virtualized-lists-e7b8d0")]).then(function() { return function() { return __webpack_require__(40815); }; }); }, eager: 0, singleton: 1, requiredVersion: "0.78.2" }, { name: "react", version: "19.0.0", factory: function() { return __webpack_require__.e("node_modules_react_index_js").then(function() { return function() { return __webpack_require__(76388); }; }); }, eager: 0, singleton: 1, requiredVersion: "19.0.0" }, { name: "zustand", version: "5.0.5", factory: function() { return Promise.all([__webpack_require__.e("webpack_sharing_consume_default_react_react"), __webpack_require__.e("node_modules_zustand_index_js-_9e2a1")]).then(function() { return function() { return __webpack_require__(33962); }; }); }, eager: 0, singleton: 1, requiredVersion: "5.0.5" }] }, uniqueName: "miniApp" };
__webpack_require__.I = __webpack_require__.I || function() { throw new Error("should have __webpack_require__.I") }

}();
// webpack/runtime/consumes_loading
!function() {

__webpack_require__.consumesLoadingData = { chunkMapping: {"webpack_sharing_consume_default_react-native_normalize-colors_react-native_normalize-colors":["98844"],"webpack_sharing_consume_default_react-native_Libraries_ReactPrivate_ReactNativePrivateInitial-96a696":["35749","89603"],"webpack_sharing_consume_default_react-native_Libraries_NativeComponent_NativeComponentRegistr-515c18":["56027","72626"],"webpack_sharing_consume_default_react-native_assets-registry_registry_react-native_assets-reg-5d1eae":["33396"],"webpack_sharing_consume_default_react-native-safe-area-context_react-native-safe-area-context-5636ea":["63261","33503","55212","73634"],"main":["31399","98844","33396","33503","3345","25822","65264","64684","56312","55212","89603","60251","35749"],"webpack_sharing_consume_default_react-native_src_private_featureflags_ReactNativeFeatureFlags-fd3090":["26652"],"webpack_sharing_consume_default_react-navigation_native_react-navigation_native":["25822"],"webpack_sharing_consume_default_react-native_assets-registry_path-support_react-native_assets-35f154":["65264"],"webpack_sharing_consume_default_react-native_Libraries_ReactNative_AppContainer_react-native_-32e0e9":["48402"],"webpack_sharing_consume_default_react-native_Libraries_ReactNative_RendererProxy_react-native-89db02":["30989","89340"],"webpack_sharing_consume_default_react_react":["31399"],"webpack_sharing_consume_default_react-native_virtualized-lists_react-native_virtualized-lists-e7b8d0":["73162","92418"]}, moduleIdToConsumeDataMapping: { "31399": { shareScope: "default", shareKey: "react", import: "react", requiredVersion: "19.0.0", strictVersion: false, singleton: true, eager: false, fallback: function() { return __webpack_require__.e("node_modules_react_index_js").then(function() { return function() { return __webpack_require__(76388); }; }); } }, "48402": { shareScope: "default", shareKey: "react-native/Libraries/ReactNative/AppContainer", import: "react-native/Libraries/ReactNative/AppContainer", requiredVersion: "*", strictVersion: false, singleton: true, eager: false, fallback: function() { return Promise.all([__webpack_require__.e("vendors-node_modules_react-native_Libraries_TurboModule_TurboModuleRegistry_js"), __webpack_require__.e("vendors-node_modules_react-native_Libraries_Components_View_ReactNativeStyleAttributes_js"), __webpack_require__.e("vendors-node_modules_react-native_Libraries_Image_AssetSourceResolver_js"), __webpack_require__.e("vendors-node_modules_react-native_Libraries_NativeComponent_NativeComponentRegistry_js"), __webpack_require__.e("vendors-node_modules_invariant_browser_js-node_modules_react-native_Libraries_ReactNative_Ren-2c5665"), __webpack_require__.e("vendors-node_modules_react-native_Libraries_ReactNative_AppContainer_js"), __webpack_require__.e("webpack_sharing_consume_default_react-native_normalize-colors_react-native_normalize-colors"), __webpack_require__.e("webpack_sharing_consume_default_react-native_assets-registry_path-support_react-native_assets-35f154"), __webpack_require__.e("webpack_sharing_consume_default_react-native_assets-registry_registry_react-native_assets-reg-5d1eae"), __webpack_require__.e("webpack_sharing_consume_default_react-native_Libraries_ReactPrivate_ReactNativePrivateInitial-96a696"), __webpack_require__.e("node_modules_react-native_Libraries_StyleSheet_flattenStyle_js-node_modules_react-native_Libr-766b16")]).then(function() { return function() { return __webpack_require__(68710); }; }); } }, "72626": { shareScope: "default", shareKey: "react-native/Libraries/NativeComponent/NativeComponentRegistry", import: "react-native/Libraries/NativeComponent/NativeComponentRegistry", requiredVersion: "*", strictVersion: false, singleton: true, eager: false, fallback: function() { return Promise.all([__webpack_require__.e("vendors-node_modules_react-native_Libraries_TurboModule_TurboModuleRegistry_js"), __webpack_require__.e("vendors-node_modules_react-native_Libraries_Components_View_ReactNativeStyleAttributes_js"), __webpack_require__.e("vendors-node_modules_react-native_Libraries_Image_AssetSourceResolver_js"), __webpack_require__.e("vendors-node_modules_react-native_Libraries_NativeComponent_NativeComponentRegistry_js"), __webpack_require__.e("webpack_sharing_consume_default_react-native_normalize-colors_react-native_normalize-colors"), __webpack_require__.e("webpack_sharing_consume_default_react-native_assets-registry_path-support_react-native_assets-35f154"), __webpack_require__.e("webpack_sharing_consume_default_react-native_assets-registry_registry_react-native_assets-reg-5d1eae"), __webpack_require__.e("node_modules_invariant_browser_js-node_modules_react-native_Libraries_Utilities_Platform_ios_-6979291")]).then(function() { return function() { return __webpack_require__(97267); }; }); } }, "60251": { shareScope: "default", shareKey: "zustand", import: "zustand", requiredVersion: "5.0.5", strictVersion: false, singleton: true, eager: false, fallback: function() { return __webpack_require__.e("node_modules_zustand_index_js-_9e2a0").then(function() { return function() { return __webpack_require__(33962); }; }); } }, "33396": { shareScope: "default", shareKey: "@react-native/assets-registry/registry", import: "@react-native/assets-registry/registry", requiredVersion: "*", strictVersion: false, singleton: true, eager: false, fallback: function() { return __webpack_require__.e("node_modules_react-native_assets-registry_registry_js").then(function() { return function() { return __webpack_require__(58258); }; }); } }, "98844": { shareScope: "default", shareKey: "@react-native/normalize-colors", import: "@react-native/normalize-colors", requiredVersion: "*", strictVersion: false, singleton: true, eager: false, fallback: function() { return __webpack_require__.e("node_modules_react-native_normalize-colors_index_js").then(function() { return function() { return __webpack_require__(35665); }; }); } }, "89603": { shareScope: "default", shareKey: "react-native/Libraries/ReactPrivate/ReactNativePrivateInterface", import: "react-native/Libraries/ReactPrivate/ReactNativePrivateInterface", requiredVersion: "*", strictVersion: false, singleton: true, eager: false, fallback: function() { return Promise.all([__webpack_require__.e("vendors-node_modules_react-native_Libraries_Components_View_ReactNativeStyleAttributes_js"), __webpack_require__.e("vendors-node_modules_react-native_Libraries_Image_AssetSourceResolver_js"), __webpack_require__.e("vendors-node_modules_react-native_Libraries_NativeComponent_NativeComponentRegistry_js"), __webpack_require__.e("vendors-node_modules_react-native_src_private_featureflags_ReactNativeFeatureFlags_js"), __webpack_require__.e("vendors-node_modules_react-native_Libraries_Components_AccessibilityInfo_legacySendAccessibil-834983"), __webpack_require__.e("vendors-node_modules_react-native_Libraries_ReactPrivate_ReactNativePrivateInterface_js"), __webpack_require__.e("webpack_sharing_consume_default_react-native_normalize-colors_react-native_normalize-colors"), __webpack_require__.e("webpack_sharing_consume_default_react-native_assets-registry_path-support_react-native_assets-35f154"), __webpack_require__.e("webpack_sharing_consume_default_react-native_assets-registry_registry_react-native_assets-reg-5d1eae")]).then(function() { return function() { return __webpack_require__(53244); }; }); } }, "55212": { shareScope: "default", shareKey: "react-native/Libraries/Image/AssetSourceResolver", import: "react-native/Libraries/Image/AssetSourceResolver", requiredVersion: "*", strictVersion: false, singleton: true, eager: false, fallback: function() { return Promise.all([__webpack_require__.e("vendors-node_modules_react-native_Libraries_TurboModule_TurboModuleRegistry_js"), __webpack_require__.e("vendors-node_modules_react-native_Libraries_Image_AssetSourceResolver_js"), __webpack_require__.e("webpack_sharing_consume_default_react-native_assets-registry_path-support_react-native_assets-35f154"), __webpack_require__.e("node_modules_invariant_browser_js-node_modules_react-native_Libraries_Utilities_Platform_ios_-6979290")]).then(function() { return function() { return __webpack_require__(77127); }; }); } }, "35749": { shareScope: "default", shareKey: "react-native/Libraries/ReactPrivate/ReactNativePrivateInitializeCore", import: "react-native/Libraries/ReactPrivate/ReactNativePrivateInitializeCore", requiredVersion: "*", strictVersion: false, singleton: true, eager: false, fallback: function() { return __webpack_require__.e("node_modules_react-native_Libraries_ReactPrivate_ReactNativePrivateInitializeCore_js").then(function() { return function() { return __webpack_require__(89741); }; }); } }, "3345": { shareScope: "default", shareKey: "react-native", import: "react-native", requiredVersion: "0.78.2", strictVersion: false, singleton: true, eager: false, fallback: function() { return Promise.all([__webpack_require__.e("vendors-node_modules_react-native_Libraries_TurboModule_TurboModuleRegistry_js"), __webpack_require__.e("vendors-node_modules_react-native_Libraries_Components_View_ReactNativeStyleAttributes_js"), __webpack_require__.e("vendors-node_modules_react-native_Libraries_Image_AssetSourceResolver_js"), __webpack_require__.e("vendors-node_modules_react-native_Libraries_NativeComponent_NativeComponentRegistry_js"), __webpack_require__.e("vendors-node_modules_invariant_browser_js-node_modules_react-native_Libraries_ReactNative_Ren-2c5665"), __webpack_require__.e("vendors-node_modules_react-native_src_private_featureflags_ReactNativeFeatureFlags_js"), __webpack_require__.e("vendors-node_modules_react-native_Libraries_Components_AccessibilityInfo_legacySendAccessibil-834983"), __webpack_require__.e("vendors-node_modules_react-native_Libraries_ReactNative_AppContainer_js"), __webpack_require__.e("vendors-node_modules_react-native_index_js"), __webpack_require__.e("webpack_sharing_consume_default_react_react"), __webpack_require__.e("webpack_sharing_consume_default_react-native_normalize-colors_react-native_normalize-colors"), __webpack_require__.e("webpack_sharing_consume_default_react-native_assets-registry_path-support_react-native_assets-35f154"), __webpack_require__.e("webpack_sharing_consume_default_react-native_assets-registry_registry_react-native_assets-reg-5d1eae"), __webpack_require__.e("webpack_sharing_consume_default_react-native_Libraries_ReactPrivate_ReactNativePrivateInitial-96a696"), __webpack_require__.e("webpack_sharing_consume_default_react-native_Libraries_NativeComponent_NativeComponentRegistr-515c18"), __webpack_require__.e("webpack_sharing_consume_default_react-native_Libraries_ReactNative_RendererProxy_react-native-89db02"), __webpack_require__.e("webpack_sharing_consume_default_react-native_virtualized-lists_react-native_virtualized-lists-e7b8d0")]).then(function() { return function() { return __webpack_require__(40815); }; }); } }, "56027": { shareScope: "default", shareKey: "react-native/Libraries/NativeComponent/ViewConfigIgnore", import: "react-native/Libraries/NativeComponent/ViewConfigIgnore", requiredVersion: "*", strictVersion: false, singleton: true, eager: false, fallback: function() { return Promise.all([__webpack_require__.e("vendors-node_modules_react-native_Libraries_TurboModule_TurboModuleRegistry_js"), __webpack_require__.e("node_modules_invariant_browser_js-node_modules_react-native_Libraries_NativeComponent_ViewCon-a0528d0")]).then(function() { return function() { return __webpack_require__(72291); }; }); } }, "65264": { shareScope: "default", shareKey: "@react-native/assets-registry/path-support", import: "@react-native/assets-registry/path-support", requiredVersion: "*", strictVersion: false, singleton: true, eager: false, fallback: function() { return __webpack_require__.e("node_modules_react-native_assets-registry_path-support_js").then(function() { return function() { return __webpack_require__(82348); }; }); } }, "25822": { shareScope: "default", shareKey: "@react-navigation/native", import: "@react-navigation/native", requiredVersion: "7.0.14", strictVersion: false, singleton: true, eager: false, fallback: function() { return __webpack_require__.e("vendors-node_modules_react-navigation_native_lib_commonjs_index_js").then(function() { return function() { return __webpack_require__(54657); }; }); } }, "89340": { shareScope: "default", shareKey: "react-native/Libraries/ReactNative/RendererProxy", import: "react-native/Libraries/ReactNative/RendererProxy", requiredVersion: "*", strictVersion: false, singleton: true, eager: false, fallback: function() { return Promise.all([__webpack_require__.e("vendors-node_modules_react-native_Libraries_TurboModule_TurboModuleRegistry_js"), __webpack_require__.e("vendors-node_modules_invariant_browser_js-node_modules_react-native_Libraries_ReactNative_Ren-2c5665"), __webpack_require__.e("webpack_sharing_consume_default_react-native_Libraries_ReactPrivate_ReactNativePrivateInitial-96a696")]).then(function() { return function() { return __webpack_require__(46513); }; }); } }, "33503": { shareScope: "default", shareKey: "react-native-safe-area-context", import: "react-native-safe-area-context", requiredVersion: "5.3.0", strictVersion: false, singleton: true, eager: false, fallback: function() { return Promise.all([__webpack_require__.e("webpack_sharing_consume_default_react-native_Libraries_NativeComponent_NativeComponentRegistr-515c18"), __webpack_require__.e("node_modules_react-native-safe-area-context_src_index_tsx-_4b460")]).then(function() { return function() { return __webpack_require__(60103); }; }); } }, "64684": { shareScope: "default", shareKey: "@react-navigation/native-stack", import: "@react-navigation/native-stack", requiredVersion: "7.2.0", strictVersion: false, singleton: true, eager: false, fallback: function() { return Promise.all([__webpack_require__.e("vendors-node_modules_react-navigation_native-stack_lib_commonjs_index_js"), __webpack_require__.e("webpack_sharing_consume_default_react-native-safe-area-context_react-native-safe-area-context-5636ea")]).then(function() { return function() { return __webpack_require__(27750); }; }); } }, "73162": { shareScope: "default", shareKey: "@react-native/virtualized-lists", import: "@react-native/virtualized-lists", requiredVersion: "*", strictVersion: false, singleton: true, eager: false, fallback: function() { return Promise.all([__webpack_require__.e("vendors-node_modules_react-native_node_modules_react-native_virtualized-lists_index_js"), __webpack_require__.e("webpack_sharing_consume_default_react-native_src_private_featureflags_ReactNativeFeatureFlags-fd3090")]).then(function() { return function() { return __webpack_require__(10179); }; }); } }, "92418": { shareScope: "default", shareKey: "react-native/Libraries/StyleSheet/processColorArray", import: "react-native/Libraries/StyleSheet/processColorArray", requiredVersion: "*", strictVersion: false, singleton: true, eager: false, fallback: function() { return function() { return __webpack_require__(57338); }; } }, "26652": { shareScope: "default", shareKey: "react-native/src/private/featureflags/ReactNativeFeatureFlags", import: "react-native/src/private/featureflags/ReactNativeFeatureFlags", requiredVersion: "*", strictVersion: false, singleton: true, eager: false, fallback: function() { return Promise.all([__webpack_require__.e("vendors-node_modules_react-native_Libraries_TurboModule_TurboModuleRegistry_js"), __webpack_require__.e("vendors-node_modules_react-native_src_private_featureflags_ReactNativeFeatureFlags_js")]).then(function() { return function() { return __webpack_require__(31022); }; }); } }, "63261": { shareScope: "default", shareKey: "react-native/Libraries/Components/View/ReactNativeStyleAttributes", import: "react-native/Libraries/Components/View/ReactNativeStyleAttributes", requiredVersion: "*", strictVersion: false, singleton: true, eager: false, fallback: function() { return Promise.all([__webpack_require__.e("vendors-node_modules_react-native_Libraries_TurboModule_TurboModuleRegistry_js"), __webpack_require__.e("vendors-node_modules_react-native_Libraries_Components_View_ReactNativeStyleAttributes_js"), __webpack_require__.e("webpack_sharing_consume_default_react-native_normalize-colors_react-native_normalize-colors"), __webpack_require__.e("node_modules_invariant_browser_js-node_modules_react-native_Libraries_Utilities_Platform_ios_-6979292")]).then(function() { return function() { return __webpack_require__(34650); }; }); } }, "56312": { shareScope: "default", shareKey: "react-native/Libraries/Image/AssetRegistry", import: "react-native/Libraries/Image/AssetRegistry", requiredVersion: "*", strictVersion: false, singleton: true, eager: false, fallback: function() { return __webpack_require__.e("node_modules_react-native_Libraries_Image_AssetRegistry_js-_24550").then(function() { return function() { return __webpack_require__(84669); }; }); } }, "30989": { shareScope: "default", shareKey: "react-native/Libraries/StyleSheet/processColor", import: "react-native/Libraries/StyleSheet/processColor", requiredVersion: "*", strictVersion: false, singleton: true, eager: false, fallback: function() { return Promise.all([__webpack_require__.e("vendors-node_modules_react-native_Libraries_TurboModule_TurboModuleRegistry_js"), __webpack_require__.e("webpack_sharing_consume_default_react-native_normalize-colors_react-native_normalize-colors"), __webpack_require__.e("node_modules_invariant_browser_js-node_modules_react-native_Libraries_StyleSheet_PlatformColo-5bbade0")]).then(function() { return function() { return __webpack_require__(23865); }; }); } }, "73634": { shareScope: "default", shareKey: "react-native-screens", import: "react-native-screens", requiredVersion: "4.10.0", strictVersion: false, singleton: true, eager: false, fallback: function() { return Promise.all([__webpack_require__.e("vendors-node_modules_react-native-screens_src_index_tsx"), __webpack_require__.e("webpack_sharing_consume_default_react-native_Libraries_NativeComponent_NativeComponentRegistr-515c18"), __webpack_require__.e("webpack_sharing_consume_default_react-native_Libraries_ReactNative_RendererProxy_react-native-89db02"), __webpack_require__.e("webpack_sharing_consume_default_react-native_Libraries_ReactNative_AppContainer_react-native_-32e0e9")]).then(function() { return function() { return __webpack_require__(57978); }; }); } } }, initialConsumes: ["31399","98844","33396","33503","3345","25822","65264","64684","56312","55212","89603","60251","35749"] };
__webpack_require__.f.consumes = __webpack_require__.f.consumes || function() { throw new Error("should have __webpack_require__.f.consumes") }
}();
// webpack/runtime/jsonp_chunk_loading
!function() {

      // object to store loaded and loading chunks
      // undefined = chunk not loaded, null = chunk preloaded/prefetched
      // [resolve, reject, Promise] = chunk loading, 0 = chunk loaded
      var installedChunks = {"main": 0,};
      
        __webpack_require__.f.j = function (chunkId, promises) {
          // JSONP chunk loading for javascript
var installedChunkData = __webpack_require__.o(installedChunks, chunkId)
	? installedChunks[chunkId]
	: undefined;
if (installedChunkData !== 0) {
	// 0 means "already installed".

	// a Promise means "currently loading".
	if (installedChunkData) {
		promises.push(installedChunkData[2]);
	} else {
		if (!/^webpack_sharing_consume_default_react(\-na(tive(_(assets\-registry_(path\-support_react\-native_assets\-35f154|registry_react\-native_assets\-reg\-5d1eae)|Libraries_(React(Native_(AppContainer_react\-native_\-32e0e9|RendererProxy_react\-native\-89db02)|Private_ReactNativePrivateInitial\-96a696)|NativeComponent_NativeComponentRegistr\-515c18)|normalize\-colors_react\-native_normalize\-colors|src_private_featureflags_ReactNativeFeatureFlags\-fd3090|virtualized\-lists_react\-native_virtualized\-lists\-e7b8d0)|\-safe\-area\-context_react\-native\-safe\-area\-context\-5636ea)|vigation_native_react\-navigation_native)|_react)$/.test(chunkId)) {
			// setup Promise in chunk cache
			var promise = new Promise(function(resolve, reject) { installedChunkData = installedChunks[chunkId] = [resolve, reject]; });
			promises.push((installedChunkData[2] = promise));

			// start chunk loading
			var url = __webpack_require__.p + __webpack_require__.u(chunkId);
			// create error before stack unwound to get useful stacktrace later
			var error = new Error();
			var loadingEnded = function (event) {
				if (__webpack_require__.o(installedChunks, chunkId)) {
					installedChunkData = installedChunks[chunkId];
					if (installedChunkData !== 0) installedChunks[chunkId] = undefined;
					if (installedChunkData) {
						var errorType =
							event && (event.type === 'load' ? 'missing' : event.type);
						var realSrc = event && event.target && event.target.src;
						error.message =
							'Loading chunk ' +
							chunkId +
							' failed.\n(' +
							errorType +
							': ' +
							realSrc +
							')';
						error.name = 'ChunkLoadError';
						error.type = errorType;
						error.request = realSrc;
						installedChunkData[1](error);
					}
				}
			};
			__webpack_require__.l(url, loadingEnded, "chunk-" + chunkId, chunkId);
		} else installedChunks[chunkId] = 0;

	}
}

        }
        // install a JSONP callback for chunk loading
var webpackJsonpCallback = function(parentChunkLoadingFunction, data) {
	var chunkIds = data[0];
var moreModules = data[1];
var runtime = data[2];
	// add "moreModules" to the modules object,
	// then flag all "chunkIds" as loaded and fire callback
	var moduleId, chunkId, i = 0;
	if (chunkIds.some(function(id) { return installedChunks[id] !== 0; })) {
		for (moduleId in moreModules) {
			if (__webpack_require__.o(moreModules, moduleId)) {
				__webpack_require__.m[moduleId] = moreModules[moduleId];
			}
		}
		if (runtime) var result = runtime(__webpack_require__);
	}
	if (parentChunkLoadingFunction) parentChunkLoadingFunction(data);
	for (; i < chunkIds.length; i++) {
		chunkId = chunkIds[i];
		if (
			__webpack_require__.o(installedChunks, chunkId) &&
			installedChunks[chunkId]
		) {
			installedChunks[chunkId][0]();
		}
		installedChunks[chunkId] = 0;
	}
	
};

var chunkLoadingGlobal = self["webpackChunkminiApp"] = self["webpackChunkminiApp"] || [];
chunkLoadingGlobal.forEach(webpackJsonpCallback.bind(null, 0));
chunkLoadingGlobal.push = webpackJsonpCallback.bind(null, chunkLoadingGlobal.push.bind(chunkLoadingGlobal));

}();
/************************************************************************/
// module cache are used so entry inlining is disabled
// startup
// Load entry module and return exports
__webpack_require__(65262);
__webpack_require__(15269);
__webpack_require__(97599);
__webpack_require__(61890);
__webpack_require__(89614);
__webpack_require__(8522);
var __webpack_exports__ = __webpack_require__(79909);
})()
;//# sourceMappingURL=index.bundle.map?platform=ios