(self["webpackChunkminiApp"] = self["webpackChunkminiApp"] || []).push([["vendors-node_modules_react-native-screens_src_index_tsx"], {
12602: (function (module, exports, __webpack_require__) {
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
var _to_consumable_array = __webpack_require__(92716);
var DEV = "production" !== "production";
var warnings = new Set();
function warnOnce(condition, ...rest) {
    if (DEV && condition) {
        var _console;
        var key = rest.join(" ");
        if (warnings.has(key)) {
            return;
        }
        warnings.add(key);
        (_console = console).warn.apply(_console, _to_consumable_array._(rest));
    }
}
module.exports = warnOnce;


}),
27465: (function (__unused_webpack_module, exports, __webpack_require__) {
'use client';
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: Object.getOwnPropertyDescriptor(all, name).get
    });
}
_export(exports, {
    get __INTERNAL_VIEW_CONFIG () {
        return __INTERNAL_VIEW_CONFIG;
    },
    get default () {
        return _default;
    }
});
var NativeComponentRegistry = __webpack_require__(72626);
var nativeComponentName = 'RNSFullWindowOverlay';
var __INTERNAL_VIEW_CONFIG = {
    uiViewClassName: 'RNSFullWindowOverlay',
    validAttributes: {}
};
var _default = NativeComponentRegistry.get(nativeComponentName, ()=>__INTERNAL_VIEW_CONFIG);


}),
21911: (function (__unused_webpack_module, exports, __webpack_require__) {
'use client';
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: Object.getOwnPropertyDescriptor(all, name).get
    });
}
_export(exports, {
    get __INTERNAL_VIEW_CONFIG () {
        return __INTERNAL_VIEW_CONFIG;
    },
    get default () {
        return _default;
    }
});
var _object_spread = __webpack_require__(36192);
var NativeComponentRegistry = __webpack_require__(72626);
var ConditionallyIgnoredEventHandlers = (__webpack_require__(56027)/* .ConditionallyIgnoredEventHandlers */.ConditionallyIgnoredEventHandlers);
var nativeComponentName = 'RNSModalScreen';
var __INTERNAL_VIEW_CONFIG = {
    uiViewClassName: 'RNSModalScreen',
    directEventTypes: {
        topAppear: {
            registrationName: 'onAppear'
        },
        topDisappear: {
            registrationName: 'onDisappear'
        },
        topDismissed: {
            registrationName: 'onDismissed'
        },
        topNativeDismissCancelled: {
            registrationName: 'onNativeDismissCancelled'
        },
        topWillAppear: {
            registrationName: 'onWillAppear'
        },
        topWillDisappear: {
            registrationName: 'onWillDisappear'
        },
        topHeaderHeightChange: {
            registrationName: 'onHeaderHeightChange'
        },
        topTransitionProgress: {
            registrationName: 'onTransitionProgress'
        },
        topGestureCancel: {
            registrationName: 'onGestureCancel'
        },
        topHeaderBackButtonClicked: {
            registrationName: 'onHeaderBackButtonClicked'
        },
        topSheetDetentChanged: {
            registrationName: 'onSheetDetentChanged'
        }
    },
    validAttributes: _object_spread._({
        sheetAllowedDetents: true,
        sheetLargestUndimmedDetent: true,
        sheetGrabberVisible: true,
        sheetCornerRadius: true,
        sheetExpandsWhenScrolledToEdge: true,
        sheetInitialDetent: true,
        sheetElevation: true,
        customAnimationOnSwipe: true,
        fullScreenSwipeEnabled: true,
        fullScreenSwipeShadowEnabled: true,
        homeIndicatorHidden: true,
        preventNativeDismiss: true,
        gestureEnabled: true,
        statusBarColor: {
            process: (__webpack_require__(30989)/* ["default"] */["default"])
        },
        statusBarHidden: true,
        screenOrientation: true,
        statusBarAnimation: true,
        statusBarStyle: true,
        statusBarTranslucent: true,
        gestureResponseDistance: true,
        stackPresentation: true,
        stackAnimation: true,
        transitionDuration: true,
        replaceAnimation: true,
        swipeDirection: true,
        hideKeyboardOnSwipe: true,
        activityState: true,
        navigationBarColor: {
            process: (__webpack_require__(30989)/* ["default"] */["default"])
        },
        navigationBarTranslucent: true,
        navigationBarHidden: true,
        nativeBackButtonDismissalEnabled: true
    }, ConditionallyIgnoredEventHandlers({
        onAppear: true,
        onDisappear: true,
        onDismissed: true,
        onNativeDismissCancelled: true,
        onWillAppear: true,
        onWillDisappear: true,
        onHeaderHeightChange: true,
        onTransitionProgress: true,
        onGestureCancel: true,
        onHeaderBackButtonClicked: true,
        onSheetDetentChanged: true
    }))
};
var _default = NativeComponentRegistry.get(nativeComponentName, ()=>__INTERNAL_VIEW_CONFIG);


}),
10051: (function (__unused_webpack_module, exports, __webpack_require__) {
'use client';
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return _default;
    }
}));
var _reactnative = __webpack_require__(3345);
var _default = _reactnative.TurboModuleRegistry.get('RNSModule');


}),
42972: (function (__unused_webpack_module, exports, __webpack_require__) {
'use client';
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: Object.getOwnPropertyDescriptor(all, name).get
    });
}
_export(exports, {
    get __INTERNAL_VIEW_CONFIG () {
        return __INTERNAL_VIEW_CONFIG;
    },
    get default () {
        return _default;
    }
});
var NativeComponentRegistry = __webpack_require__(72626);
var nativeComponentName = 'RNSScreenContainer';
var __INTERNAL_VIEW_CONFIG = {
    uiViewClassName: 'RNSScreenContainer',
    validAttributes: {}
};
var _default = NativeComponentRegistry.get(nativeComponentName, ()=>__INTERNAL_VIEW_CONFIG);


}),
45135: (function (__unused_webpack_module, exports, __webpack_require__) {
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: Object.getOwnPropertyDescriptor(all, name).get
    });
}
_export(exports, {
    get __INTERNAL_VIEW_CONFIG () {
        return __INTERNAL_VIEW_CONFIG;
    },
    get default () {
        return _default;
    }
});
var NativeComponentRegistry = __webpack_require__(72626);
var nativeComponentName = 'RNSScreenContentWrapper';
var __INTERNAL_VIEW_CONFIG = {
    uiViewClassName: 'RNSScreenContentWrapper',
    validAttributes: {}
};
var _default = NativeComponentRegistry.get(nativeComponentName, ()=>__INTERNAL_VIEW_CONFIG);


}),
39022: (function (__unused_webpack_module, exports, __webpack_require__) {
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: Object.getOwnPropertyDescriptor(all, name).get
    });
}
_export(exports, {
    get __INTERNAL_VIEW_CONFIG () {
        return __INTERNAL_VIEW_CONFIG;
    },
    get default () {
        return _default;
    }
});
var NativeComponentRegistry = __webpack_require__(72626);
var nativeComponentName = 'RNSScreenFooter';
var __INTERNAL_VIEW_CONFIG = {
    uiViewClassName: 'RNSScreenFooter',
    validAttributes: {}
};
var _default = NativeComponentRegistry.get(nativeComponentName, ()=>__INTERNAL_VIEW_CONFIG);


}),
25703: (function (__unused_webpack_module, exports, __webpack_require__) {
'use client';
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: Object.getOwnPropertyDescriptor(all, name).get
    });
}
_export(exports, {
    get __INTERNAL_VIEW_CONFIG () {
        return __INTERNAL_VIEW_CONFIG;
    },
    get default () {
        return _default;
    }
});
var _object_spread = __webpack_require__(36192);
var NativeComponentRegistry = __webpack_require__(72626);
var ConditionallyIgnoredEventHandlers = (__webpack_require__(56027)/* .ConditionallyIgnoredEventHandlers */.ConditionallyIgnoredEventHandlers);
var nativeComponentName = 'RNSScreen';
var __INTERNAL_VIEW_CONFIG = {
    uiViewClassName: 'RNSScreen',
    directEventTypes: {
        topAppear: {
            registrationName: 'onAppear'
        },
        topDisappear: {
            registrationName: 'onDisappear'
        },
        topDismissed: {
            registrationName: 'onDismissed'
        },
        topNativeDismissCancelled: {
            registrationName: 'onNativeDismissCancelled'
        },
        topWillAppear: {
            registrationName: 'onWillAppear'
        },
        topWillDisappear: {
            registrationName: 'onWillDisappear'
        },
        topHeaderHeightChange: {
            registrationName: 'onHeaderHeightChange'
        },
        topTransitionProgress: {
            registrationName: 'onTransitionProgress'
        },
        topGestureCancel: {
            registrationName: 'onGestureCancel'
        },
        topHeaderBackButtonClicked: {
            registrationName: 'onHeaderBackButtonClicked'
        },
        topSheetDetentChanged: {
            registrationName: 'onSheetDetentChanged'
        }
    },
    validAttributes: _object_spread._({
        sheetAllowedDetents: true,
        sheetLargestUndimmedDetent: true,
        sheetGrabberVisible: true,
        sheetCornerRadius: true,
        sheetExpandsWhenScrolledToEdge: true,
        sheetInitialDetent: true,
        sheetElevation: true,
        customAnimationOnSwipe: true,
        fullScreenSwipeEnabled: true,
        fullScreenSwipeShadowEnabled: true,
        homeIndicatorHidden: true,
        preventNativeDismiss: true,
        gestureEnabled: true,
        statusBarColor: {
            process: (__webpack_require__(30989)/* ["default"] */["default"])
        },
        statusBarHidden: true,
        screenOrientation: true,
        statusBarAnimation: true,
        statusBarStyle: true,
        statusBarTranslucent: true,
        gestureResponseDistance: true,
        stackPresentation: true,
        stackAnimation: true,
        transitionDuration: true,
        replaceAnimation: true,
        swipeDirection: true,
        hideKeyboardOnSwipe: true,
        activityState: true,
        navigationBarColor: {
            process: (__webpack_require__(30989)/* ["default"] */["default"])
        },
        navigationBarTranslucent: true,
        navigationBarHidden: true,
        nativeBackButtonDismissalEnabled: true
    }, ConditionallyIgnoredEventHandlers({
        onAppear: true,
        onDisappear: true,
        onDismissed: true,
        onNativeDismissCancelled: true,
        onWillAppear: true,
        onWillDisappear: true,
        onHeaderHeightChange: true,
        onTransitionProgress: true,
        onGestureCancel: true,
        onHeaderBackButtonClicked: true,
        onSheetDetentChanged: true
    }))
};
var _default = NativeComponentRegistry.get(nativeComponentName, ()=>__INTERNAL_VIEW_CONFIG);


}),
7423: (function (__unused_webpack_module, exports, __webpack_require__) {
'use client';
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: Object.getOwnPropertyDescriptor(all, name).get
    });
}
_export(exports, {
    get __INTERNAL_VIEW_CONFIG () {
        return __INTERNAL_VIEW_CONFIG;
    },
    get default () {
        return _default;
    }
});
var NativeComponentRegistry = __webpack_require__(72626);
var nativeComponentName = 'RNSScreenNavigationContainer';
var __INTERNAL_VIEW_CONFIG = {
    uiViewClassName: 'RNSScreenNavigationContainer',
    validAttributes: {}
};
var _default = NativeComponentRegistry.get(nativeComponentName, ()=>__INTERNAL_VIEW_CONFIG);


}),
12226: (function (__unused_webpack_module, exports, __webpack_require__) {
'use client';
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: Object.getOwnPropertyDescriptor(all, name).get
    });
}
_export(exports, {
    get __INTERNAL_VIEW_CONFIG () {
        return __INTERNAL_VIEW_CONFIG;
    },
    get default () {
        return _default;
    }
});
var _object_spread = __webpack_require__(36192);
var NativeComponentRegistry = __webpack_require__(72626);
var ConditionallyIgnoredEventHandlers = (__webpack_require__(56027)/* .ConditionallyIgnoredEventHandlers */.ConditionallyIgnoredEventHandlers);
var nativeComponentName = 'RNSScreenStackHeaderConfig';
var __INTERNAL_VIEW_CONFIG = {
    uiViewClassName: 'RNSScreenStackHeaderConfig',
    directEventTypes: {
        topAttached: {
            registrationName: 'onAttached'
        },
        topDetached: {
            registrationName: 'onDetached'
        }
    },
    validAttributes: _object_spread._({
        backgroundColor: {
            process: (__webpack_require__(30989)/* ["default"] */["default"])
        },
        backTitle: true,
        backTitleFontFamily: true,
        backTitleFontSize: true,
        backTitleVisible: true,
        color: {
            process: (__webpack_require__(30989)/* ["default"] */["default"])
        },
        direction: true,
        hidden: true,
        hideShadow: true,
        largeTitle: true,
        largeTitleFontFamily: true,
        largeTitleFontSize: true,
        largeTitleFontWeight: true,
        largeTitleBackgroundColor: {
            process: (__webpack_require__(30989)/* ["default"] */["default"])
        },
        largeTitleHideShadow: true,
        largeTitleColor: {
            process: (__webpack_require__(30989)/* ["default"] */["default"])
        },
        translucent: true,
        title: true,
        titleFontFamily: true,
        titleFontSize: true,
        titleFontWeight: true,
        titleColor: {
            process: (__webpack_require__(30989)/* ["default"] */["default"])
        },
        disableBackButtonMenu: true,
        backButtonDisplayMode: true,
        hideBackButton: true,
        backButtonInCustomView: true,
        blurEffect: true,
        topInsetEnabled: true
    }, ConditionallyIgnoredEventHandlers({
        onAttached: true,
        onDetached: true
    }))
};
var _default = NativeComponentRegistry.get(nativeComponentName, ()=>__INTERNAL_VIEW_CONFIG);


}),
93444: (function (__unused_webpack_module, exports, __webpack_require__) {
'use client';
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: Object.getOwnPropertyDescriptor(all, name).get
    });
}
_export(exports, {
    get __INTERNAL_VIEW_CONFIG () {
        return __INTERNAL_VIEW_CONFIG;
    },
    get default () {
        return _default;
    }
});
var NativeComponentRegistry = __webpack_require__(72626);
var nativeComponentName = 'RNSScreenStackHeaderSubview';
var __INTERNAL_VIEW_CONFIG = {
    uiViewClassName: 'RNSScreenStackHeaderSubview',
    validAttributes: {
        type: true
    }
};
var _default = NativeComponentRegistry.get(nativeComponentName, ()=>__INTERNAL_VIEW_CONFIG);


}),
10166: (function (__unused_webpack_module, exports, __webpack_require__) {
'use client';
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: Object.getOwnPropertyDescriptor(all, name).get
    });
}
_export(exports, {
    get __INTERNAL_VIEW_CONFIG () {
        return __INTERNAL_VIEW_CONFIG;
    },
    get default () {
        return _default;
    }
});
var _object_spread = __webpack_require__(36192);
var NativeComponentRegistry = __webpack_require__(72626);
var ConditionallyIgnoredEventHandlers = (__webpack_require__(56027)/* .ConditionallyIgnoredEventHandlers */.ConditionallyIgnoredEventHandlers);
var nativeComponentName = 'RNSScreenStack';
var __INTERNAL_VIEW_CONFIG = {
    uiViewClassName: 'RNSScreenStack',
    directEventTypes: {
        topFinishTransitioning: {
            registrationName: 'onFinishTransitioning'
        }
    },
    validAttributes: _object_spread._({}, ConditionallyIgnoredEventHandlers({
        onFinishTransitioning: true
    }))
};
var _default = NativeComponentRegistry.get(nativeComponentName, ()=>__INTERNAL_VIEW_CONFIG);


}),
39177: (function (__unused_webpack_module, exports, __webpack_require__) {
'use client';
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: Object.getOwnPropertyDescriptor(all, name).get
    });
}
_export(exports, {
    get Commands () {
        return Commands;
    },
    get __INTERNAL_VIEW_CONFIG () {
        return __INTERNAL_VIEW_CONFIG;
    },
    get default () {
        return _default;
    }
});
var _object_spread = __webpack_require__(36192);
var NativeComponentRegistry = __webpack_require__(72626);
var ConditionallyIgnoredEventHandlers = (__webpack_require__(56027)/* .ConditionallyIgnoredEventHandlers */.ConditionallyIgnoredEventHandlers);
var dispatchCommand = (__webpack_require__(89340)/* .dispatchCommand */.dispatchCommand);
var nativeComponentName = 'RNSSearchBar';
var __INTERNAL_VIEW_CONFIG = {
    uiViewClassName: 'RNSSearchBar',
    directEventTypes: {
        topSearchFocus: {
            registrationName: 'onSearchFocus'
        },
        topSearchBlur: {
            registrationName: 'onSearchBlur'
        },
        topSearchButtonPress: {
            registrationName: 'onSearchButtonPress'
        },
        topCancelButtonPress: {
            registrationName: 'onCancelButtonPress'
        },
        topChangeText: {
            registrationName: 'onChangeText'
        },
        topClose: {
            registrationName: 'onClose'
        },
        topOpen: {
            registrationName: 'onOpen'
        }
    },
    validAttributes: _object_spread._({
        hideWhenScrolling: true,
        autoCapitalize: true,
        placeholder: true,
        placement: true,
        obscureBackground: true,
        hideNavigationBar: true,
        cancelButtonText: true,
        barTintColor: {
            process: (__webpack_require__(30989)/* ["default"] */["default"])
        },
        tintColor: {
            process: (__webpack_require__(30989)/* ["default"] */["default"])
        },
        textColor: {
            process: (__webpack_require__(30989)/* ["default"] */["default"])
        },
        disableBackButtonOverride: true,
        inputType: true,
        hintTextColor: {
            process: (__webpack_require__(30989)/* ["default"] */["default"])
        },
        headerIconColor: {
            process: (__webpack_require__(30989)/* ["default"] */["default"])
        },
        shouldShowHintSearchIcon: true
    }, ConditionallyIgnoredEventHandlers({
        onSearchFocus: true,
        onSearchBlur: true,
        onSearchButtonPress: true,
        onCancelButtonPress: true,
        onChangeText: true,
        onClose: true,
        onOpen: true
    }))
};
var _default = NativeComponentRegistry.get(nativeComponentName, ()=>__INTERNAL_VIEW_CONFIG);
var Commands = {
    blur (ref) {
        dispatchCommand(ref, "blur", []);
    },
    focus (ref) {
        dispatchCommand(ref, "focus", []);
    },
    clearText (ref) {
        dispatchCommand(ref, "clearText", []);
    },
    toggleCancelButton (ref, flag) {
        dispatchCommand(ref, "toggleCancelButton", [
            flag
        ]);
    },
    setText (ref, text) {
        dispatchCommand(ref, "setText", [
            text
        ]);
    },
    cancelSearch (ref) {
        dispatchCommand(ref, "cancelSearch", []);
    }
};


}),
81128: (function (__unused_webpack_module, exports, __webpack_require__) {
'use client';
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: Object.getOwnPropertyDescriptor(all, name).get
    });
}
_export(exports, {
    get enableFreeze () {
        return enableFreeze;
    },
    get enableScreens () {
        return enableScreens;
    },
    get freezeEnabled () {
        return freezeEnabled;
    },
    get isNativePlatformSupported () {
        return isNativePlatformSupported;
    },
    get screensEnabled () {
        return screensEnabled;
    }
});
var _reactnative = __webpack_require__(3345);
var isNativePlatformSupported = _reactnative.Platform.OS === 'ios' || _reactnative.Platform.OS === 'android' || _reactnative.Platform.OS === 'windows';
var ENABLE_SCREENS = isNativePlatformSupported;
function enableScreens(ref) {
    var shouldEnableScreens = ref === void 0 ? true : ref;
    ENABLE_SCREENS = shouldEnableScreens;
    if (!isNativePlatformSupported) {
        return;
    }
    if (ENABLE_SCREENS && !_reactnative.UIManager.getViewManagerConfig('RNSScreen')) {
        console.error(`Screen native module hasn't been linked. Please check the react-native-screens README for more details`);
    }
}
var ENABLE_FREEZE = false;
function enableFreeze(ref) {
    var shouldEnableReactFreeze = ref === void 0 ? true : ref;
    if (!isNativePlatformSupported) {
        return;
    }
    ENABLE_FREEZE = shouldEnableReactFreeze;
}
function screensEnabled() {
    return ENABLE_SCREENS;
}
function freezeEnabled() {
    return ENABLE_FREEZE;
}


}),
22871: (function (__unused_webpack_module, exports, __webpack_require__) {
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: Object.getOwnPropertyDescriptor(all, name).get
    });
}
_export(exports, {
    get compatibilityFlags () {
        return compatibilityFlags;
    },
    get executeNativeBackPress () {
        return executeNativeBackPress;
    },
    get isSearchBarAvailableForCurrentPlatform () {
        return isSearchBarAvailableForCurrentPlatform;
    }
});
var _reactnative = __webpack_require__(3345);
var isSearchBarAvailableForCurrentPlatform = [
    'ios',
    'android'
].includes(_reactnative.Platform.OS);
function executeNativeBackPress() {
    // This function invokes the native back press event
    _reactnative.BackHandler.exitApp();
    return true;
}
var compatibilityFlags = {
    /**
   * Because of a bug introduced in https://github.com/software-mansion/react-native-screens/pull/1646
   * react-native-screens v3.21 changed how header's backTitle handles whitespace strings in https://github.com/software-mansion/react-native-screens/pull/1726
   * To allow for backwards compatibility in @react-navigation/native-stack we need a way to check if this version or newer is used.
   * See https://github.com/react-navigation/react-navigation/pull/11423 for more context.
   */ isNewBackTitleImplementation: true,
    /**
   * With version 4.0.0 the header implementation has been changed. To allow for backward compat
   * with native-stack@v6 we want to expose a way to check whether the new implementation
   * is in use or not.
   *
   * See:
   * * https://github.com/software-mansion/react-native-screens/pull/2325
   * * https://github.com/react-navigation/react-navigation/pull/12125
   */ usesHeaderFlexboxImplementation: true
};


}),
68445: (function (__unused_webpack_module, exports, __webpack_require__) {
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "Freeze", ({
    enumerable: true,
    get: function() {
        return Freeze;
    }
}));
var _interop_require_wildcard = __webpack_require__(83610);
var _jsxruntime = __webpack_require__(70095);
var _react = /*#__PURE__*/ _interop_require_wildcard._(__webpack_require__(31399));
var infiniteThenable = {
    then () {}
};
function Suspender(ref) {
    var freeze = ref.freeze, children = ref.children;
    if (freeze) {
        throw infiniteThenable;
    }
    return /*#__PURE__*/ (0, _jsxruntime.jsx)(_react.Fragment, {
        children: children
    });
}
function Freeze(ref) {
    var freeze = ref.freeze, children = ref.children, _ref_placeholder = ref.placeholder, placeholder = _ref_placeholder === void 0 ? null : _ref_placeholder;
    return /*#__PURE__*/ (0, _jsxruntime.jsx)(_react.Suspense, {
        fallback: placeholder,
        children: /*#__PURE__*/ (0, _jsxruntime.jsx)(Suspender, {
            freeze: freeze,
            children: children
        })
    });
}


}),
48063: (function (__unused_webpack_module, exports, __webpack_require__) {
'use client';
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return _default;
    }
}));
var _interop_require_wildcard = __webpack_require__(83610);
var _react = /*#__PURE__*/ _interop_require_wildcard._(__webpack_require__(31399));
var _default = /*#__PURE__*/ _react.createContext(undefined);


}),
20528: (function (__unused_webpack_module, exports, __webpack_require__) {
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return _default;
    }
}));
var _interop_require_default = __webpack_require__(66705);
var _interop_require_wildcard = __webpack_require__(83610);
var _object_spread = __webpack_require__(36192);
var _object_without_properties = __webpack_require__(86136);
var _jsxruntime = __webpack_require__(70095);
var _react = /*#__PURE__*/ _interop_require_wildcard._(__webpack_require__(31399));
var _reactnative = __webpack_require__(3345);
var _AppContainer = /*#__PURE__*/ _interop_require_default._(__webpack_require__(48402));
var _ScreenContentWrapper = /*#__PURE__*/ _interop_require_default._(__webpack_require__(42479));
/**
 * This view must *not* be flattened.
 * See https://github.com/software-mansion/react-native-screens/pull/1825
 * for detailed explanation.
 */ var DebugContainer = (props)=>{
    return /*#__PURE__*/ (0, _jsxruntime.jsx)(_ScreenContentWrapper.default, _object_spread._({}, props));
};
if (false) {}
var _default = DebugContainer;


}),
37589: (function (__unused_webpack_module, exports, __webpack_require__) {
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return _default;
    }
}));
var _interop_require_default = __webpack_require__(66705);
var _object_spread = __webpack_require__(36192);
var _jsxruntime = __webpack_require__(70095);
var _react = /*#__PURE__*/ _interop_require_default._(__webpack_require__(31399));
var _reactnative = __webpack_require__(3345);
var _FullWindowOverlayNativeComponent = /*#__PURE__*/ _interop_require_default._(__webpack_require__(27465));
var NativeFullWindowOverlay = _FullWindowOverlayNativeComponent.default;
function FullWindowOverlay(props) {
    var _useWindowDimensions = (0, _reactnative.useWindowDimensions)(), width = _useWindowDimensions.width, height = _useWindowDimensions.height;
    if (_reactnative.Platform.OS !== 'ios') {
        console.warn('Using FullWindowOverlay is only valid on iOS devices.');
        return /*#__PURE__*/ (0, _jsxruntime.jsx)(_reactnative.View, _object_spread._({}, props));
    }
    return /*#__PURE__*/ (0, _jsxruntime.jsx)(NativeFullWindowOverlay, {
        style: [
            _reactnative.StyleSheet.absoluteFill,
            {
                width,
                height
            }
        ],
        children: props.children
    });
}
var _default = FullWindowOverlay;


}),
49503: (function (__unused_webpack_module, exports, __webpack_require__) {
'use client';
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: Object.getOwnPropertyDescriptor(all, name).get
    });
}
_export(exports, {
    get InnerScreen () {
        return InnerScreen;
    },
    get ScreenContext () {
        return ScreenContext;
    },
    get default () {
        return _default;
    }
});
var _interop_require_default = __webpack_require__(66705);
var _object_spread = __webpack_require__(36192);
var _object_spread_props = __webpack_require__(83590);
var _object_without_properties = __webpack_require__(86136);
var _jsxruntime = __webpack_require__(70095);
var _react = /*#__PURE__*/ _interop_require_default._(__webpack_require__(31399));
var _reactnative = __webpack_require__(3345);
var _TransitionProgressContext = /*#__PURE__*/ _interop_require_default._(__webpack_require__(48063));
var _DelayedFreeze = /*#__PURE__*/ _interop_require_default._(__webpack_require__(29038));
var _core = __webpack_require__(81128);
var _ScreenNativeComponent = /*#__PURE__*/ _interop_require_default._(__webpack_require__(25703));
var _ModalScreenNativeComponent = /*#__PURE__*/ _interop_require_default._(__webpack_require__(21911));
var _usePrevious = __webpack_require__(21804);
var AnimatedNativeScreen = _reactnative.Animated.createAnimatedComponent(_ScreenNativeComponent.default);
var AnimatedNativeModalScreen = _reactnative.Animated.createAnimatedComponent(_ModalScreenNativeComponent.default);
// This value must be kept in sync with native side.
var SHEET_FIT_TO_CONTENTS = [
    -1
];
var SHEET_COMPAT_LARGE = [
    1.0
];
var SHEET_COMPAT_MEDIUM = [
    0.5
];
var SHEET_COMPAT_ALL = [
    0.5,
    1.0
];
var SHEET_DIMMED_ALWAYS = -1;
// const SHEET_DIMMED_NEVER = 9999;
function assertDetentsArrayIsSorted(array) {
    for(var i = 1; i < array.length; i++){
        if (array[i - 1] > array[i]) {
            throw new Error('[RNScreens] The detent array is not sorted in ascending order!');
        }
    }
}
// These exist to transform old 'legacy' values used by the formsheet API to the new API shape.
// We can get rid of it, once we get rid of support for legacy values: 'large', 'medium', 'all'.
function resolveSheetAllowedDetents(allowedDetentsCompat) {
    if (Array.isArray(allowedDetentsCompat)) {
        if (_reactnative.Platform.OS === 'android' && allowedDetentsCompat.length > 3) {
            if (false) {}
            allowedDetentsCompat = allowedDetentsCompat.slice(0, 3);
        }
        if (false) {}
        return allowedDetentsCompat;
    } else if (allowedDetentsCompat === 'fitToContents') {
        return SHEET_FIT_TO_CONTENTS;
    } else if (allowedDetentsCompat === 'large') {
        return SHEET_COMPAT_LARGE;
    } else if (allowedDetentsCompat === 'medium') {
        return SHEET_COMPAT_MEDIUM;
    } else if (allowedDetentsCompat === 'all') {
        return SHEET_COMPAT_ALL;
    } else {
        // Safe default, only large detent is allowed.
        return SHEET_COMPAT_LARGE;
    }
}
function resolveSheetLargestUndimmedDetent(lud, lastDetentIndex) {
    if (typeof lud === 'number') {
        if (!isIndexInClosedRange(lud, SHEET_DIMMED_ALWAYS, lastDetentIndex)) {
            if (false) {}
            // Return default in production
            return SHEET_DIMMED_ALWAYS;
        }
        return lud;
    } else if (lud === 'last') {
        return lastDetentIndex;
    } else if (lud === 'none' || lud === 'all') {
        return SHEET_DIMMED_ALWAYS;
    } else if (lud === 'large') {
        return 1;
    } else if (lud === 'medium') {
        return 0;
    } else {
        // Safe default, every detent is dimmed
        return SHEET_DIMMED_ALWAYS;
    }
}
function resolveSheetInitialDetentIndex(index, lastDetentIndex) {
    if (index === 'last') {
        index = lastDetentIndex;
    } else if (index == null) {
        // Intentional check for undefined & null ^
        index = 0;
    }
    if (!isIndexInClosedRange(index, 0, lastDetentIndex)) {
        if (false) {}
        // Return default in production
        return 0;
    }
    return index;
}
function isIndexInClosedRange(value, lowerBound, upperBound) {
    return Number.isInteger(value) && value >= lowerBound && value <= upperBound;
}
var InnerScreen = /*#__PURE__*/ _react.default.forwardRef(function InnerScreen(props, ref) {
    var innerRef = _react.default.useRef(null);
    _react.default.useImperativeHandle(ref, ()=>innerRef.current, []);
    var prevActivityState = (0, _usePrevious.usePrevious)(props.activityState);
    var setRef = (ref)=>{
        var _props_onComponentRef;
        innerRef.current = ref;
        (_props_onComponentRef = props.onComponentRef) === null || _props_onComponentRef === void 0 ? void 0 : _props_onComponentRef.call(props, ref);
    };
    var closing = _react.default.useRef(new _reactnative.Animated.Value(0)).current;
    var progress = _react.default.useRef(new _reactnative.Animated.Value(0)).current;
    var goingForward = _react.default.useRef(new _reactnative.Animated.Value(0)).current;
    var _props_enabled = props.enabled, enabled = _props_enabled === void 0 ? (0, _core.screensEnabled)() : _props_enabled, _props_freezeOnBlur = props.freezeOnBlur, freezeOnBlur = _props_freezeOnBlur === void 0 ? (0, _core.freezeEnabled)() : _props_freezeOnBlur, shouldFreeze = props.shouldFreeze, rest = _object_without_properties._(props, [
        "enabled",
        "freezeOnBlur",
        "shouldFreeze"
    ]);
    // To maintain default behavior of formSheet stack presentation style and to have reasonable
    // defaults for new medium-detent iOS API we need to set defaults here
    var _rest_sheetAllowedDetents = rest.// formSheet presentation related props
    sheetAllowedDetents, sheetAllowedDetents = _rest_sheetAllowedDetents === void 0 ? [
        1.0
    ] : _rest_sheetAllowedDetents, _rest_sheetLargestUndimmedDetentIndex = rest.sheetLargestUndimmedDetentIndex, sheetLargestUndimmedDetentIndex = _rest_sheetLargestUndimmedDetentIndex === void 0 ? SHEET_DIMMED_ALWAYS : _rest_sheetLargestUndimmedDetentIndex, _rest_sheetGrabberVisible = rest.sheetGrabberVisible, sheetGrabberVisible = _rest_sheetGrabberVisible === void 0 ? false : _rest_sheetGrabberVisible, _rest_sheetCornerRadius = rest.sheetCornerRadius, sheetCornerRadius = _rest_sheetCornerRadius === void 0 ? -1.0 : _rest_sheetCornerRadius, _rest_sheetExpandsWhenScrolledToEdge = rest.sheetExpandsWhenScrolledToEdge, sheetExpandsWhenScrolledToEdge = _rest_sheetExpandsWhenScrolledToEdge === void 0 ? true : _rest_sheetExpandsWhenScrolledToEdge, _rest_sheetElevation = rest.sheetElevation, sheetElevation = _rest_sheetElevation === void 0 ? 24 : _rest_sheetElevation, _rest_sheetInitialDetentIndex = rest.sheetInitialDetentIndex, sheetInitialDetentIndex = _rest_sheetInitialDetentIndex === void 0 ? 0 : _rest_sheetInitialDetentIndex, // Other
    stackPresentation = rest.stackPresentation, // Events for override
    onAppear = rest.onAppear, onDisappear = rest.onDisappear, onWillAppear = rest.onWillAppear, onWillDisappear = rest.onWillDisappear;
    if (enabled && _core.isNativePlatformSupported) {
        var resolvedSheetAllowedDetents = resolveSheetAllowedDetents(sheetAllowedDetents);
        var resolvedSheetLargestUndimmedDetent = resolveSheetLargestUndimmedDetent(sheetLargestUndimmedDetentIndex, resolvedSheetAllowedDetents.length - 1);
        var resolvedSheetInitialDetentIndex = resolveSheetInitialDetentIndex(sheetInitialDetentIndex, resolvedSheetAllowedDetents.length - 1);
        // Due to how Yoga resolves layout, we need to have different components for modal nad non-modal screens (there is a need for different
        // shadow nodes).
        var shouldUseModalScreenComponent = _reactnative.Platform.select({
            ios: !(stackPresentation === undefined || stackPresentation === 'push' || stackPresentation === 'containedModal' || stackPresentation === 'containedTransparentModal'),
            android: false,
            default: false
        });
        var AnimatedScreen = shouldUseModalScreenComponent ? AnimatedNativeModalScreen : AnimatedNativeScreen;
        var // Filter out active prop in this case because it is unused and
        // can cause problems depending on react-native version:
        // https://github.com/react-navigation/react-navigation/issues/4886
        active = rest.active, activityState = rest.activityState, children = rest.children, isNativeStack = rest.isNativeStack, gestureResponseDistance = rest.gestureResponseDistance, onGestureCancel = rest.onGestureCancel, style = rest.style, _$props = _object_without_properties._(rest, [
            "active",
            "activityState",
            "children",
            "isNativeStack",
            "gestureResponseDistance",
            "onGestureCancel",
            "style"
        ]);
        if (active !== undefined && activityState === undefined) {
            console.warn('It appears that you are using old version of react-navigation library. Please update @react-navigation/bottom-tabs, @react-navigation/stack and @react-navigation/drawer to version 5.10.0 or above to take full advantage of new functionality added to react-native-screens');
            activityState = active !== 0 ? 2 : 0; // in the new version, we need one of the screens to have value of 2 after the transition
        }
        if (isNativeStack && prevActivityState !== undefined && activityState !== undefined) {
            if (prevActivityState > activityState) {
                throw new Error('[RNScreens] activityState cannot be decreased in NativeStack');
            }
        }
        var handleRef = (ref)=>{
            var _ref_viewConfig_validAttributes, _ref_viewConfig, _ref__viewConfig_validAttributes, _ref__viewConfig;
            // Workaround is necessary to prevent React Native from hiding frozen screens.
            // See this PR: https://github.com/grahammendick/navigation/pull/860
            if (ref === null || ref === void 0 ? void 0 : (_ref_viewConfig = ref.viewConfig) === null || _ref_viewConfig === void 0 ? void 0 : (_ref_viewConfig_validAttributes = _ref_viewConfig.validAttributes) === null || _ref_viewConfig_validAttributes === void 0 ? void 0 : _ref_viewConfig_validAttributes.style) {
                ref.viewConfig.validAttributes.style = _object_spread_props._(_object_spread._({}, ref.viewConfig.validAttributes.style), {
                    display: null
                });
                setRef(ref);
            } else if (ref === null || ref === void 0 ? void 0 : (_ref__viewConfig = ref._viewConfig) === null || _ref__viewConfig === void 0 ? void 0 : (_ref__viewConfig_validAttributes = _ref__viewConfig.validAttributes) === null || _ref__viewConfig_validAttributes === void 0 ? void 0 : _ref__viewConfig_validAttributes.style) {
                ref._viewConfig.validAttributes.style = _object_spread_props._(_object_spread._({}, ref._viewConfig.validAttributes.style), {
                    display: null
                });
                setRef(ref);
            }
        };
        var freeze = freezeOnBlur && (shouldFreeze !== undefined ? shouldFreeze : activityState === 0);
        return /*#__PURE__*/ (0, _jsxruntime.jsx)(_DelayedFreeze.default, {
            freeze: freeze,
            children: /*#__PURE__*/ (0, _jsxruntime.jsx)(AnimatedScreen, _object_spread_props._(_object_spread._({}, _$props), {
                /**
             * This messy override is to conform NativeProps used by codegen and
             * our Public API. To see reasoning go to this PR:
             * https://github.com/software-mansion/react-native-screens/pull/2423#discussion_r1810616995
             */ onAppear: onAppear,
                onDisappear: onDisappear,
                onWillAppear: onWillAppear,
                onWillDisappear: onWillDisappear,
                onGestureCancel: onGestureCancel ?? (()=>{
                // for internal use
                }),
                //
                // Hierarchy of screens is handled on the native side and setting zIndex value causes this issue:
                // https://github.com/software-mansion/react-native-screens/issues/2345
                // With below change of zIndex, we force RN diffing mechanism to NOT include detaching and attaching mutation in one transaction.
                // Detailed information can be found here https://github.com/software-mansion/react-native-screens/pull/2351
                style: [
                    style,
                    {
                        zIndex: undefined
                    }
                ],
                activityState: activityState,
                sheetAllowedDetents: resolvedSheetAllowedDetents,
                sheetLargestUndimmedDetent: resolvedSheetLargestUndimmedDetent,
                sheetElevation: sheetElevation,
                sheetGrabberVisible: sheetGrabberVisible,
                sheetCornerRadius: sheetCornerRadius,
                sheetExpandsWhenScrolledToEdge: sheetExpandsWhenScrolledToEdge,
                sheetInitialDetent: resolvedSheetInitialDetentIndex,
                gestureResponseDistance: {
                    start: (gestureResponseDistance === null || gestureResponseDistance === void 0 ? void 0 : gestureResponseDistance.start) ?? -1,
                    end: (gestureResponseDistance === null || gestureResponseDistance === void 0 ? void 0 : gestureResponseDistance.end) ?? -1,
                    top: (gestureResponseDistance === null || gestureResponseDistance === void 0 ? void 0 : gestureResponseDistance.top) ?? -1,
                    bottom: (gestureResponseDistance === null || gestureResponseDistance === void 0 ? void 0 : gestureResponseDistance.bottom) ?? -1
                },
                // This prevents showing blank screen when navigating between multiple screens with freezing
                // https://github.com/software-mansion/react-native-screens/pull/1208
                ref: handleRef,
                onTransitionProgress: !isNativeStack ? undefined : _reactnative.Animated.event([
                    {
                        nativeEvent: {
                            progress,
                            closing,
                            goingForward
                        }
                    }
                ], {
                    useNativeDriver: true
                }),
                children: !isNativeStack ? children : /*#__PURE__*/ (0, _jsxruntime.jsx)(_TransitionProgressContext.default.Provider, {
                    value: {
                        progress,
                        closing,
                        goingForward
                    },
                    children: children
                })
            }))
        });
    } else {
        // same reason as above
        var active1 = rest.active, activityState1 = rest.activityState, style1 = rest.style, // eslint-disable-next-line @typescript-eslint/no-unused-vars
        onComponentRef = rest.onComponentRef, _$props1 = _object_without_properties._(rest, [
            "active",
            "activityState",
            "style",
            "onComponentRef"
        ]);
        if (active1 !== undefined && activityState1 === undefined) {
            activityState1 = active1 !== 0 ? 2 : 0;
        }
        return /*#__PURE__*/ (0, _jsxruntime.jsx)(_reactnative.Animated.View, _object_spread._({
            style: [
                style1,
                {
                    display: activityState1 !== 0 ? 'flex' : 'none'
                }
            ],
            ref: setRef
        }, _$props1));
    }
});
var ScreenContext = /*#__PURE__*/ _react.default.createContext(InnerScreen);
var Screen = /*#__PURE__*/ _react.default.forwardRef((props, ref)=>{
    var ScreenWrapper = _react.default.useContext(ScreenContext) || InnerScreen;
    return /*#__PURE__*/ (0, _jsxruntime.jsx)(ScreenWrapper, _object_spread_props._(_object_spread._({}, props), {
        ref: ref
    }));
});
Screen.displayName = 'Screen';
var _default = Screen;


}),
97266: (function (__unused_webpack_module, exports, __webpack_require__) {
'use client';
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return _default;
    }
}));
var _interop_require_default = __webpack_require__(66705);
var _object_spread = __webpack_require__(36192);
var _object_without_properties = __webpack_require__(86136);
var _jsxruntime = __webpack_require__(70095);
var _reactnative = __webpack_require__(3345);
var _react = /*#__PURE__*/ _interop_require_default._(__webpack_require__(31399));
var _core = __webpack_require__(81128);
var _ScreenContainerNativeComponent = /*#__PURE__*/ _interop_require_default._(__webpack_require__(42972));
var _ScreenNavigationContainerNativeComponent = /*#__PURE__*/ _interop_require_default._(__webpack_require__(7423));
function ScreenContainer(props) {
    var _props_enabled = props.enabled, enabled = _props_enabled === void 0 ? (0, _core.screensEnabled)() : _props_enabled, hasTwoStates = props.hasTwoStates, rest = _object_without_properties._(props, [
        "enabled",
        "hasTwoStates"
    ]);
    if (enabled && _core.isNativePlatformSupported) {
        if (hasTwoStates) {
            var ScreenNavigationContainer = _reactnative.Platform.OS === 'ios' ? _ScreenNavigationContainerNativeComponent.default : _ScreenContainerNativeComponent.default;
            return /*#__PURE__*/ (0, _jsxruntime.jsx)(ScreenNavigationContainer, _object_spread._({}, rest));
        }
        return /*#__PURE__*/ (0, _jsxruntime.jsx)(_ScreenContainerNativeComponent.default, _object_spread._({}, rest));
    }
    return /*#__PURE__*/ (0, _jsxruntime.jsx)(_reactnative.View, _object_spread._({}, rest));
}
var _default = ScreenContainer;


}),
42479: (function (__unused_webpack_module, exports, __webpack_require__) {
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return _default;
    }
}));
var _interop_require_default = __webpack_require__(66705);
var _object_spread = __webpack_require__(36192);
var _jsxruntime = __webpack_require__(70095);
var _react = /*#__PURE__*/ _interop_require_default._(__webpack_require__(31399));
var _ScreenContentWrapperNativeComponent = /*#__PURE__*/ _interop_require_default._(__webpack_require__(45135));
function ScreenContentWrapper(props) {
    return /*#__PURE__*/ (0, _jsxruntime.jsx)(_ScreenContentWrapperNativeComponent.default, _object_spread._({
        collapsable: false
    }, props));
}
var _default = ScreenContentWrapper;


}),
23817: (function (__unused_webpack_module, exports, __webpack_require__) {
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: Object.getOwnPropertyDescriptor(all, name).get
    });
}
_export(exports, {
    get FooterComponent () {
        return FooterComponent;
    },
    get default () {
        return _default;
    }
});
var _interop_require_default = __webpack_require__(66705);
var _object_spread = __webpack_require__(36192);
var _jsxruntime = __webpack_require__(70095);
var _react = /*#__PURE__*/ _interop_require_default._(__webpack_require__(31399));
var _ScreenFooterNativeComponent = /*#__PURE__*/ _interop_require_default._(__webpack_require__(39022));
/**
 * Unstable API
 */ function ScreenFooter(props) {
    return /*#__PURE__*/ (0, _jsxruntime.jsx)(_ScreenFooterNativeComponent.default, _object_spread._({}, props));
}
function FooterComponent(ref) {
    var children = ref.children;
    return /*#__PURE__*/ (0, _jsxruntime.jsx)(ScreenFooter, {
        collapsable: false,
        children: children
    });
}
var _default = ScreenFooter;


}),
66700: (function (__unused_webpack_module, exports, __webpack_require__) {
'use client';
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return _default;
    }
}));
var _interop_require_default = __webpack_require__(66705);
var _object_spread = __webpack_require__(36192);
var _object_spread_props = __webpack_require__(83590);
var _object_without_properties = __webpack_require__(86136);
var _jsxruntime = __webpack_require__(70095);
var _react = /*#__PURE__*/ _interop_require_default._(__webpack_require__(31399));
var _contexts = __webpack_require__(84159);
var _warnonce = /*#__PURE__*/ _interop_require_default._(__webpack_require__(12602));
var _ScreenStackNativeComponent = /*#__PURE__*/ _interop_require_default._(__webpack_require__(10166));
var assertGHProvider = (ScreenGestureDetector, goBackGesture)=>{
    var isGestureDetectorProviderNotDetected = ScreenGestureDetector.name !== 'GHWrapper' && goBackGesture !== undefined;
    (0, _warnonce.default)(isGestureDetectorProviderNotDetected, 'Cannot detect GestureDetectorProvider in a screen that uses `goBackGesture`. Make sure your navigator is wrapped in GestureDetectorProvider.');
};
var assertCustomScreenTransitionsProps = (screensRefs, currentScreenId, goBackGesture)=>{
    var isGestureDetectorNotConfiguredProperly = goBackGesture !== undefined && screensRefs === null && currentScreenId === undefined;
    (0, _warnonce.default)(isGestureDetectorNotConfiguredProperly, 'Custom Screen Transition require screensRefs and currentScreenId to be provided.');
};
function ScreenStack(props) {
    var goBackGesture = props.goBackGesture, passedScreenRefs = props.screensRefs, currentScreenId = props.currentScreenId, transitionAnimation = props.transitionAnimation, screenEdgeGesture = props.screenEdgeGesture, onFinishTransitioning = props.onFinishTransitioning, children = props.children, rest = _object_without_properties._(props, [
        "goBackGesture",
        "screensRefs",
        "currentScreenId",
        "transitionAnimation",
        "screenEdgeGesture",
        "onFinishTransitioning",
        "children"
    ]);
    var screensRefs = _react.default.useRef((passedScreenRefs === null || passedScreenRefs === void 0 ? void 0 : passedScreenRefs.current) ?? {});
    var ref = _react.default.useRef(null);
    var ScreenGestureDetector = _react.default.useContext(_contexts.GHContext);
    var gestureDetectorBridge = _react.default.useRef({
        stackUseEffectCallback: (_stackRef)=>{
        // this method will be overriden in GestureDetector
        }
    });
    _react.default.useEffect(()=>{
        gestureDetectorBridge.current.stackUseEffectCallback(ref);
    });
    assertGHProvider(ScreenGestureDetector, goBackGesture);
    assertCustomScreenTransitionsProps(screensRefs, currentScreenId, goBackGesture);
    return /*#__PURE__*/ (0, _jsxruntime.jsx)(_contexts.RNSScreensRefContext.Provider, {
        value: screensRefs,
        children: /*#__PURE__*/ (0, _jsxruntime.jsx)(ScreenGestureDetector, {
            gestureDetectorBridge: gestureDetectorBridge,
            goBackGesture: goBackGesture,
            transitionAnimation: transitionAnimation,
            screenEdgeGesture: screenEdgeGesture ?? false,
            screensRefs: screensRefs,
            currentScreenId: currentScreenId,
            children: /*#__PURE__*/ (0, _jsxruntime.jsx)(_ScreenStackNativeComponent.default, _object_spread_props._(_object_spread._({}, rest), {
                /**
           * This messy override is to conform NativeProps used by codegen and
           * our Public API. To see reasoning go to this PR:
           * https://github.com/software-mansion/react-native-screens/pull/2423#discussion_r1810616995
           */ onFinishTransitioning: onFinishTransitioning,
                ref: ref,
                children: children
            }))
        })
    });
}
var _default = ScreenStack;


}),
57256: (function (__unused_webpack_module, exports, __webpack_require__) {
'use client';
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: Object.getOwnPropertyDescriptor(all, name).get
    });
}
_export(exports, {
    get ScreenStackHeaderBackButtonImage () {
        return ScreenStackHeaderBackButtonImage;
    },
    get ScreenStackHeaderCenterView () {
        return ScreenStackHeaderCenterView;
    },
    get ScreenStackHeaderConfig () {
        return ScreenStackHeaderConfig;
    },
    get ScreenStackHeaderLeftView () {
        return ScreenStackHeaderLeftView;
    },
    get ScreenStackHeaderRightView () {
        return ScreenStackHeaderRightView;
    },
    get ScreenStackHeaderSearchBarView () {
        return ScreenStackHeaderSearchBarView;
    },
    get ScreenStackHeaderSubview () {
        return ScreenStackHeaderSubview;
    }
});
var _interop_require_default = __webpack_require__(66705);
var _object_spread = __webpack_require__(36192);
var _object_spread_props = __webpack_require__(83590);
var _object_without_properties = __webpack_require__(86136);
var _jsxruntime = __webpack_require__(70095);
var _react = /*#__PURE__*/ _interop_require_default._(__webpack_require__(31399));
var _reactnative = __webpack_require__(3345);
var _ScreenStackHeaderConfigNativeComponent = /*#__PURE__*/ _interop_require_default._(__webpack_require__(12226));
var _ScreenStackHeaderSubviewNativeComponent = /*#__PURE__*/ _interop_require_default._(__webpack_require__(93444));
var ScreenStackHeaderSubview = _ScreenStackHeaderSubviewNativeComponent.default;
var ScreenStackHeaderConfig = /*#__PURE__*/ _react.default.forwardRef((props, ref)=>/*#__PURE__*/ (0, _jsxruntime.jsx)(_ScreenStackHeaderConfigNativeComponent.default, _object_spread_props._(_object_spread._({}, props), {
        ref: ref,
        style: styles.headerConfig,
        pointerEvents: "box-none"
    })));
ScreenStackHeaderConfig.displayName = 'ScreenStackHeaderConfig';
var ScreenStackHeaderBackButtonImage = (props)=>/*#__PURE__*/ (0, _jsxruntime.jsx)(ScreenStackHeaderSubview, {
        type: "back",
        style: styles.headerSubview,
        children: /*#__PURE__*/ (0, _jsxruntime.jsx)(_reactnative.Image, _object_spread._({
            resizeMode: "center",
            fadeDuration: 0
        }, props))
    });
var ScreenStackHeaderRightView = (props)=>{
    var style = props.style, rest = _object_without_properties._(props, [
        "style"
    ]);
    return /*#__PURE__*/ (0, _jsxruntime.jsx)(ScreenStackHeaderSubview, _object_spread_props._(_object_spread._({}, rest), {
        type: "right",
        style: [
            styles.headerSubview,
            style
        ]
    }));
};
var ScreenStackHeaderLeftView = (props)=>{
    var style = props.style, rest = _object_without_properties._(props, [
        "style"
    ]);
    return /*#__PURE__*/ (0, _jsxruntime.jsx)(ScreenStackHeaderSubview, _object_spread_props._(_object_spread._({}, rest), {
        type: "left",
        style: [
            styles.headerSubview,
            style
        ]
    }));
};
var ScreenStackHeaderCenterView = (props)=>{
    var style = props.style, rest = _object_without_properties._(props, [
        "style"
    ]);
    return /*#__PURE__*/ (0, _jsxruntime.jsx)(ScreenStackHeaderSubview, _object_spread_props._(_object_spread._({}, rest), {
        type: "center",
        style: [
            styles.headerSubviewCenter,
            style
        ]
    }));
};
var ScreenStackHeaderSearchBarView = (props)=>/*#__PURE__*/ (0, _jsxruntime.jsx)(ScreenStackHeaderSubview, _object_spread_props._(_object_spread._({}, props), {
        type: "searchBar",
        style: styles.headerSubview
    }));
var styles = _reactnative.StyleSheet.create({
    headerSubview: {
        flexDirection: 'row',
        alignItems: 'center',
        justifyContent: 'center'
    },
    headerSubviewCenter: {
        flexDirection: 'row',
        alignItems: 'center',
        justifyContent: 'center',
        flexShrink: 1
    },
    headerConfig: {
        position: 'absolute',
        width: '100%',
        flexDirection: 'row',
        justifyContent: 'space-between',
        // We only want to center align the subviews on iOS.
        // See https://github.com/software-mansion/react-native-screens/pull/2456
        alignItems: _reactnative.Platform.OS === 'ios' ? 'center' : undefined
    }
});


}),
20475: (function (__unused_webpack_module, exports, __webpack_require__) {
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return _default;
    }
}));
var _interop_require_default = __webpack_require__(66705);
var _interop_require_wildcard = __webpack_require__(83610);
var _object_spread = __webpack_require__(36192);
var _object_spread_props = __webpack_require__(83590);
var _object_without_properties = __webpack_require__(86136);
var _jsxruntime = __webpack_require__(70095);
var _react = /*#__PURE__*/ _interop_require_wildcard._(__webpack_require__(31399));
var _reactnative = __webpack_require__(3345);
var _warnonce = /*#__PURE__*/ _interop_require_default._(__webpack_require__(12602));
var _DebugContainer = /*#__PURE__*/ _interop_require_default._(__webpack_require__(20528));
var _ScreenStackHeaderConfig = __webpack_require__(57256);
var _Screen = /*#__PURE__*/ _interop_require_default._(__webpack_require__(49503));
var _ScreenStack = /*#__PURE__*/ _interop_require_default._(__webpack_require__(66700));
var _contexts = __webpack_require__(84159);
var _ScreenFooter = __webpack_require__(23817);
function ScreenStackItem(_param, ref) {
    var children = _param.children, headerConfig = _param.headerConfig, activityState = _param.activityState, shouldFreeze = _param.shouldFreeze, stackPresentation = _param.stackPresentation, sheetAllowedDetents = _param.sheetAllowedDetents, contentStyle = _param.contentStyle, style = _param.style, screenId = _param.screenId, // eslint-disable-next-line camelcase
    unstable_sheetFooter = _param.unstable_sheetFooter, rest = _object_without_properties._(_param, [
        "children",
        "headerConfig",
        "activityState",
        "shouldFreeze",
        "stackPresentation",
        "sheetAllowedDetents",
        "contentStyle",
        "style",
        "screenId",
        "unstable_sheetFooter"
    ]);
    var currentScreenRef = _react.useRef(null);
    var screenRefs = _react.useContext(_contexts.RNSScreensRefContext);
    _react.useImperativeHandle(ref, ()=>currentScreenRef.current);
    var isHeaderInModal = _reactnative.Platform.OS === 'android' ? false : stackPresentation !== 'push' && (headerConfig === null || headerConfig === void 0 ? void 0 : headerConfig.hidden) === false;
    var headerHiddenPreviousRef = _react.useRef(headerConfig === null || headerConfig === void 0 ? void 0 : headerConfig.hidden);
    _react.useEffect(()=>{
        (0, _warnonce.default)(_reactnative.Platform.OS !== 'android' && stackPresentation !== 'push' && headerHiddenPreviousRef.current !== (headerConfig === null || headerConfig === void 0 ? void 0 : headerConfig.hidden), `Dynamically changing header's visibility in modals will result in remounting the screen and losing all local state.`);
        headerHiddenPreviousRef.current = headerConfig === null || headerConfig === void 0 ? void 0 : headerConfig.hidden;
    }, [
        headerConfig === null || headerConfig === void 0 ? void 0 : headerConfig.hidden,
        stackPresentation
    ]);
    var content = /*#__PURE__*/ (0, _jsxruntime.jsxs)(_jsxruntime.Fragment, {
        children: [
            /*#__PURE__*/ (0, _jsxruntime.jsx)(_DebugContainer.default, {
                style: [
                    stackPresentation === 'formSheet' ? _reactnative.Platform.OS === 'ios' ? styles.absolute : sheetAllowedDetents === 'fitToContents' ? null : styles.container : styles.container,
                    contentStyle
                ],
                stackPresentation: stackPresentation ?? 'push',
                children: children
            }),
            /*#__PURE__*/ (0, _jsxruntime.jsx)(_ScreenStackHeaderConfig.ScreenStackHeaderConfig, _object_spread._({}, headerConfig)),
            stackPresentation === 'formSheet' && unstable_sheetFooter && /*#__PURE__*/ (0, _jsxruntime.jsx)(_ScreenFooter.FooterComponent, {
                children: unstable_sheetFooter()
            })
        ]
    });
    // We take backgroundColor from contentStyle and apply it on Screen.
    // This allows to workaround one issue with truncated
    // content with formSheet presentation.
    var internalScreenStyle;
    if (stackPresentation === 'formSheet' && contentStyle) {
        var flattenContentStyles = _reactnative.StyleSheet.flatten(contentStyle);
        internalScreenStyle = {
            backgroundColor: flattenContentStyles === null || flattenContentStyles === void 0 ? void 0 : flattenContentStyles.backgroundColor
        };
    }
    return /*#__PURE__*/ (0, _jsxruntime.jsx)(_Screen.default, _object_spread_props._(_object_spread._({
        ref: (node)=>{
            currentScreenRef.current = node;
            if (screenRefs === null) {
                console.warn('Looks like RNSScreensRefContext is missing. Make sure the ScreenStack component is wrapped in it');
                return;
            }
            var currentRefs = screenRefs.current;
            if (node === null) {
                // eslint-disable-next-line @typescript-eslint/no-dynamic-delete
                delete currentRefs[screenId];
            } else {
                currentRefs[screenId] = {
                    current: node
                };
            }
        },
        enabled: true,
        isNativeStack: true,
        activityState: activityState,
        shouldFreeze: shouldFreeze,
        stackPresentation: stackPresentation,
        hasLargeHeader: (headerConfig === null || headerConfig === void 0 ? void 0 : headerConfig.largeTitle) ?? false,
        sheetAllowedDetents: sheetAllowedDetents,
        style: [
            style,
            internalScreenStyle
        ]
    }, rest), {
        children: isHeaderInModal ? /*#__PURE__*/ (0, _jsxruntime.jsx)(_ScreenStack.default, {
            style: styles.container,
            children: /*#__PURE__*/ (0, _jsxruntime.jsx)(_Screen.default, {
                enabled: true,
                isNativeStack: true,
                activityState: activityState,
                shouldFreeze: shouldFreeze,
                hasLargeHeader: (headerConfig === null || headerConfig === void 0 ? void 0 : headerConfig.largeTitle) ?? false,
                style: _reactnative.StyleSheet.absoluteFill,
                children: content
            })
        }) : content
    }));
}
var _default = /*#__PURE__*/ _react.forwardRef(ScreenStackItem);
var styles = _reactnative.StyleSheet.create({
    container: {
        flex: 1
    },
    absolute: {
        position: 'absolute',
        top: 0,
        start: 0,
        end: 0
    }
});


}),
52322: (function (__unused_webpack_module, exports, __webpack_require__) {
'use client';
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return _default;
    }
}));
var _interop_require_default = __webpack_require__(66705);
var _interop_require_wildcard = __webpack_require__(83610);
var _object_spread = __webpack_require__(36192);
var _object_spread_props = __webpack_require__(83590);
var _jsxruntime = __webpack_require__(70095);
var _react = /*#__PURE__*/ _interop_require_default._(__webpack_require__(31399));
var _utils = __webpack_require__(22871);
var _reactnative = __webpack_require__(3345);
var _SearchBarNativeComponent = /*#__PURE__*/ _interop_require_wildcard._(__webpack_require__(39177));
var NativeSearchBar = _SearchBarNativeComponent.default;
var NativeSearchBarCommands = _SearchBarNativeComponent.Commands;
function SearchBar(props, ref) {
    var searchBarRef = _react.default.useRef(null);
    _react.default.useImperativeHandle(ref, ()=>({
            blur: ()=>{
                _callMethodWithRef((ref)=>NativeSearchBarCommands.blur(ref));
            },
            focus: ()=>{
                _callMethodWithRef((ref)=>NativeSearchBarCommands.focus(ref));
            },
            toggleCancelButton: (flag)=>{
                _callMethodWithRef((ref)=>NativeSearchBarCommands.toggleCancelButton(ref, flag));
            },
            clearText: ()=>{
                _callMethodWithRef((ref)=>NativeSearchBarCommands.clearText(ref));
            },
            setText: (text)=>{
                _callMethodWithRef((ref)=>NativeSearchBarCommands.setText(ref, text));
            },
            cancelSearch: ()=>{
                _callMethodWithRef((ref)=>NativeSearchBarCommands.cancelSearch(ref));
            }
        }));
    var _callMethodWithRef = _react.default.useCallback((method)=>{
        var _$ref = searchBarRef.current;
        if (_$ref) {
            method(_$ref);
        } else {
            console.warn('Reference to native search bar component has not been updated yet');
        }
    }, [
        searchBarRef
    ]);
    if (!_utils.isSearchBarAvailableForCurrentPlatform) {
        console.warn('Importing SearchBar is only valid on iOS and Android devices.');
        return _reactnative.View;
    }
    return /*#__PURE__*/ (0, _jsxruntime.jsx)(NativeSearchBar, _object_spread_props._(_object_spread._({
        ref: searchBarRef
    }, props), {
        onSearchFocus: props.onFocus,
        onSearchBlur: props.onBlur,
        onSearchButtonPress: props.onSearchButtonPress,
        onCancelButtonPress: props.onCancelButtonPress,
        onChangeText: props.onChangeText
    }));
}
var _default = /*#__PURE__*/ _react.default.forwardRef(SearchBar);


}),
29038: (function (__unused_webpack_module, exports, __webpack_require__) {
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return _default;
    }
}));
var _interop_require_default = __webpack_require__(66705);
var _sliced_to_array = __webpack_require__(78474);
var _jsxruntime = __webpack_require__(70095);
var _react = /*#__PURE__*/ _interop_require_default._(__webpack_require__(31399));
var _reactfreeze = __webpack_require__(68445);
// This component allows one more render before freezing the screen.
// Allows activityState to reach the native side and useIsFocused to work correctly.
function DelayedFreeze(ref) {
    var freeze = ref.freeze, children = ref.children;
    // flag used for determining whether freeze should be enabled
    var _React_useState = _sliced_to_array._(_react.default.useState(false), 2), freezeState = _React_useState[0], setFreezeState = _React_useState[1];
    _react.default.useEffect(()=>{
        var id = setImmediate(()=>{
            setFreezeState(freeze);
        });
        return ()=>{
            clearImmediate(id);
        };
    }, [
        freeze
    ]);
    return /*#__PURE__*/ (0, _jsxruntime.jsx)(_reactfreeze.Freeze, {
        freeze: freeze ? freezeState : false,
        children: children
    });
}
var _default = DelayedFreeze;


}),
21804: (function (__unused_webpack_module, exports, __webpack_require__) {
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "usePrevious", ({
    enumerable: true,
    get: function() {
        return usePrevious;
    }
}));
var _react = __webpack_require__(31399);
function usePrevious(state) {
    var ref = (0, _react.useRef)();
    (0, _react.useEffect)(()=>{
        ref.current = state;
    });
    return ref.current;
}


}),
84159: (function (__unused_webpack_module, exports, __webpack_require__) {
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: Object.getOwnPropertyDescriptor(all, name).get
    });
}
_export(exports, {
    get GHContext () {
        return GHContext;
    },
    get RNSScreensRefContext () {
        return RNSScreensRefContext;
    }
});
var _interop_require_default = __webpack_require__(66705);
var _jsxruntime = __webpack_require__(70095);
var _react = /*#__PURE__*/ _interop_require_default._(__webpack_require__(31399));
var GHContext = /*#__PURE__*/ _react.default.createContext((props)=>/*#__PURE__*/ (0, _jsxruntime.jsx)(_jsxruntime.Fragment, {
        children: props.children
    }));
var RNSScreensRefContext = /*#__PURE__*/ _react.default.createContext(null);


}),
57978: (function (__unused_webpack_module, exports, __webpack_require__) {
// Side effects import declaration to ensure our TurboModule
// is loaded.
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: Object.getOwnPropertyDescriptor(all, name).get
    });
}
_export(exports, {
    get FullWindowOverlay () {
        return _FullWindowOverlay.default;
    },
    get InnerScreen () {
        return _Screen.InnerScreen;
    },
    get Screen () {
        return _Screen.default;
    },
    get ScreenContainer () {
        return _ScreenContainer.default;
    },
    get ScreenContentWrapper () {
        return _ScreenContentWrapper.default;
    },
    get ScreenContext () {
        return _Screen.ScreenContext;
    },
    get ScreenFooter () {
        return _ScreenFooter.default;
    },
    get ScreenStack () {
        return _ScreenStack.default;
    },
    get ScreenStackHeaderBackButtonImage () {
        return _ScreenStackHeaderConfig.ScreenStackHeaderBackButtonImage;
    },
    get ScreenStackHeaderCenterView () {
        return _ScreenStackHeaderConfig.ScreenStackHeaderCenterView;
    },
    get ScreenStackHeaderConfig () {
        return _ScreenStackHeaderConfig.ScreenStackHeaderConfig;
    },
    get ScreenStackHeaderLeftView () {
        return _ScreenStackHeaderConfig.ScreenStackHeaderLeftView;
    },
    get ScreenStackHeaderRightView () {
        return _ScreenStackHeaderConfig.ScreenStackHeaderRightView;
    },
    get ScreenStackHeaderSearchBarView () {
        return _ScreenStackHeaderConfig.ScreenStackHeaderSearchBarView;
    },
    get ScreenStackHeaderSubview () {
        return _ScreenStackHeaderConfig.ScreenStackHeaderSubview;
    },
    get ScreenStackItem () {
        return _ScreenStackItem.default;
    },
    get SearchBar () {
        return _SearchBar.default;
    },
    get compatibilityFlags () {
        return _utils.compatibilityFlags;
    },
    get enableFreeze () {
        return _core.enableFreeze;
    },
    get enableScreens () {
        return _core.enableScreens;
    },
    get executeNativeBackPress () {
        return _utils.executeNativeBackPress;
    },
    get freezeEnabled () {
        return _core.freezeEnabled;
    },
    get isSearchBarAvailableForCurrentPlatform () {
        return _utils.isSearchBarAvailableForCurrentPlatform;
    },
    get screensEnabled () {
        return _core.screensEnabled;
    },
    get useTransitionProgress () {
        return _useTransitionProgress.default;
    }
});
var _export_star = __webpack_require__(4084);
var _interop_require_default = __webpack_require__(66705);
var _interop_require_wildcard = __webpack_require__(83610);
__webpack_require__(10051);
_export_star._(__webpack_require__(50089), exports);
var _core = __webpack_require__(81128);
var _Screen = /*#__PURE__*/ _interop_require_wildcard._(__webpack_require__(49503));
var _ScreenStackHeaderConfig = __webpack_require__(57256);
var _SearchBar = /*#__PURE__*/ _interop_require_default._(__webpack_require__(52322));
var _ScreenContainer = /*#__PURE__*/ _interop_require_default._(__webpack_require__(97266));
var _ScreenStack = /*#__PURE__*/ _interop_require_default._(__webpack_require__(66700));
var _ScreenStackItem = /*#__PURE__*/ _interop_require_default._(__webpack_require__(20475));
var _FullWindowOverlay = /*#__PURE__*/ _interop_require_default._(__webpack_require__(37589));
var _ScreenFooter = /*#__PURE__*/ _interop_require_default._(__webpack_require__(23817));
var _ScreenContentWrapper = /*#__PURE__*/ _interop_require_default._(__webpack_require__(42479));
var _utils = __webpack_require__(22871);
var _useTransitionProgress = /*#__PURE__*/ _interop_require_default._(__webpack_require__(88014));


}),
50089: (function (__unused_webpack_module, exports, __webpack_require__) {
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
var _interop_require_default = __webpack_require__(66705);
var _react = /*#__PURE__*/ _interop_require_default._(__webpack_require__(31399));


}),
88014: (function (__unused_webpack_module, exports, __webpack_require__) {
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return useTransitionProgress;
    }
}));
var _interop_require_default = __webpack_require__(66705);
var _interop_require_wildcard = __webpack_require__(83610);
var _react = /*#__PURE__*/ _interop_require_wildcard._(__webpack_require__(31399));
var _TransitionProgressContext = /*#__PURE__*/ _interop_require_default._(__webpack_require__(48063));
function useTransitionProgress() {
    var progress = _react.useContext(_TransitionProgressContext.default);
    if (progress === undefined) {
        throw new Error("Couldn't find values for transition progress. Are you inside a screen in Native Stack?");
    }
    return progress;
}


}),

}]);//# sourceMappingURL=vendors-node_modules_react-native-screens_src_index_tsx.chunk.bundle.map?platform=ios/* RCSSB */eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCJ9.eyJoYXNoIjoiMGE5OWQ3YjFiNGI4OGY3NTBjNGQxMWZhOTNiNjdmZDQ3ODQxNjQwYWViMmMxOWU1MThhMzcwMzViM2U5NzlkYSIsImlhdCI6MTc1MDU5NDc3OX0.fv_Zkc6AiJUlkfO0W62zxNXXSfEMZic07EGH8gap1TOrdosenCHe6Gp9OH7e_TDSpIRgFcze0K15LzRTi6CdnKnF1N8xkiJwYnfxfVy1eMJoqnjhlQYrHPrNXIX6LN41FQcF406OSAbuqz7BR_6-Hbe2SGbI9XEl7ElJoRH13tzIksUD-jQgUWWiol7p2iXjB7Zg84kP6CXlvxKW9HX2qZgpEGseCWMXfj4mcxoXEfVBUo6POurmWOzQNOEf_0DFPB0fkFd2giBgBrrkhCpZv-49gZldfEjvlSpVYrEytA4h67OTN5OuffPoRlJMAVjSKY_0QVLucqJYELkOHtY-5g                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              